        -:    0:Source:randomtestadventurer.c
        -:    0:Programs:1
        -:    1://Name:				randomtestadventurer.c
        -:    2://Assignment:		Assignment 4
        -:    3://Author:				Benjamin Ford
        -:    4://Date:					2/18/2017
        -:    5://Description:		Random test for Adventurer card
        -:    6:
        -:    7:
        -:    8:#include "dominion.h" 
        -:    9:#include "dominion_helpers.h" 
        -:   10:#include <string.h> 
        -:   11:#include <stdio.h> 
        -:   12:#include "rngs.h" 
        -:   13:#include <stdlib.h>
        -:   14:#include <time.h>
        -:   15:
        -:   16:#define TESTCARD "Adventurer"
        -:   17:
        -:   18://places the card into the first postion in the players hand
function placeCardInHand called 3002638 returned 100% blocks executed 100%
  3002638:   19:void placeCardInHand(struct gameState *state, int player,int card, int handPos){
        -:   20:	
  3002638:   21:	state->hand[player][handPos] = card;
        -:   22:	
  3002638:   23:	return;
        -:   24:}
        -:   25:
        -:   26://Test if kingdom cards have changed
function testSupply called 3002638 returned 100% blocks executed 86%
  3002638:   27:int testSupply(struct gameState *old, struct gameState *new){
        -:   28:	int i;
        -:   29:	
 33029018:   30:	for (i = 0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 30026380:   31:		if(old->supplyCount[i] != new->supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:			return 0;
        -:   33:		}
        -:   34:	}
  3002638:   35:	return 1;
        -:   36:}
        -:   37:
function testHand called 3002638 returned 100% blocks executed 78%
  3002638:   38:int testHand(struct gameState *state, int player, int startingHandSize){
  3002638:   39:	int i = 0;
  9007914:   40:	for(i=startingHandSize;i < state->handCount[player];i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
  6005276:   41:		if(testIfTreasure(state->hand[player][i])== 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   42:			printf("Card was %d\n",state->hand[player][i]);
call    0 never executed
    #####:   43:			return	0;
        -:   44:		}
        -:   45:	}
  3002638:   46:	return 1;
        -:   47:}
        -:   48:
function testIfTreasure called 6005276 returned 100% blocks executed 50%
  6005276:   49:int testIfTreasure(int card){
        -:   50:	
  6005276:   51:	if(card == copper || card == silver || card == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
  6005276:   52:		return 1;
        -:   53:	}
    #####:   54:	return 0;
        -:   55:}
        -:   56:
function main called 2 returned 100% blocks executed 69%
        2:   57:int main(int argc, char * args[]){
        -:   58:	struct gameState game, testGame;
        2:   59:	const int kCards[] =  {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, great_hall};
        2:   60:	int seed = 0;
        2:   61:	int  players = 0;
        2:   62:	int i = 0;
        2:   63:	int deckCountZeroFlg = -1;
        2:   64:	int loopCntr = 0;
        2:   65:	int returnVal =-1;
        2:   66:	int testsPassed = 1;
        2:   67:	int handPos = 0;
        2:   68:	int startHandSize = 0;
        2:   69:	const int iterations = 1000000;
        2:   70:	clock_t begin = clock();
call    0 returned 100%
        -:   71:	
        2:   72:	seed = atoi(args[1]);
call    0 returned 100%
        2:   73:	srand(seed);
call    0 returned 100%
        -:   74:	
        2:   75:	printf("Testing %s %d times\n",TESTCARD,iterations);
call    0 returned 100%
        -:   76:	
  2000002:   77:	for(loopCntr = 0; loopCntr < iterations; loopCntr++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   78:		//Set players
  2000000:   79:		players = 2 + (rand() % MAX_PLAYERS-2);
call    0 returned 100%
        -:   80:		
        -:   81:		//Init game
  2000000:   82:		initializeGame(players,kCards,seed,&game);
call    0 returned 100%
        -:   83:		
        -:   84:		//Set random stats for each player
  5002638:   85:		for(i = 0; i < players; i++){
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        -:   86:			
  3002638:   87:			game.handCount[i] = 1 + (rand() % MAX_HAND);
call    0 returned 100%
  3002638:   88:			game.deckCount[i] = 10 + (rand() % MAX_DECK);
call    0 returned 100%
  3002638:   89:			game.discardCount[i] = rand() % MAX_DECK;
call    0 returned 100%
        -:   90:			
        -:   91:			//Test to see if deckCount is 0
  3002638:   92:			if(game.deckCount[i] == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:				deckCountZeroFlg = 1;
        -:   94:			}
        -:   95:			else{
  3002638:   96:				deckCountZeroFlg = 0;
        -:   97:			}
        -:   98:			
        -:   99:			//Put a adventurer in the hand
  3002638:  100:			placeCardInHand(&game,i,adventurer,handPos);
call    0 returned 100%
        -:  101:			
        -:  102:			//Save the game state for test
  3002638:  103:			memcpy(&testGame, &game, sizeof(struct gameState));
        -:  104:			
        -:  105:			//Play Adventurer Room
  3002638:  106:			returnVal = playAdventurer(i,&game);
call    0 returned 100%
        -:  107:			
        -:  108:			//Test Return Value
  3002638:  109:			if(returnVal != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  110:				printf("TEST FAILED - Didnt return 0\n");
call    0 never executed
    #####:  111:				testsPassed = 0;
        -:  112:			}
        -:  113:			
        -:  114:			//test to see if hand count went up by 2/
  3002638:  115:			if(game.handCount[i] != (testGame.handCount[i]+2)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:				printf("Player %d hand count %d deck count %d\n",i,game.handCount[i],game.deckCount[i]);
call    0 never executed
    #####:  117:				printf("Player %d hand count %d deck count %d\n",i,testGame.handCount[i],testGame.deckCount[i]);
call    0 never executed
    #####:  118:				printf("TEST FAILED - Player did not gain 2 cards\n");
call    0 never executed
    #####:  119:				testsPassed = 0;
        -:  120:			}
        -:  121:			
        -:  122:			//Test if the new cards are treasure
  3002638:  123:			if(testHand(&game,i,testGame.handCount[i]) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  124:				printf("TEST FAILED - Player did not gain 2 treasure cards\n");
call    0 never executed
    #####:  125:				testsPassed = 0;
        -:  126:			}
        -:  127:			
        -:  128:			//Test the other players state
        -:  129:			//Test state changed for other player
  3002638:  130:			if(game.whoseTurn != testGame.whoseTurn){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:				printf("TEST FAILED - Player turn changed\n");
call    0 never executed
    #####:  132:				testsPassed = 0;
        -:  133:			}
        -:  134:			
        -:  135:			
        -:  136:			//Test victory card piles
  3002638:  137:			if((game.supplyCount[estate] != testGame.supplyCount[estate]) || (game.supplyCount[duchy] != testGame.supplyCount[duchy]) || (game.supplyCount[province] != testGame.supplyCount[province])){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  138:				printf("TEST FAILED - Victory Card Piles have changed\n");
call    0 never executed
    #####:  139:				testsPassed = 0;
        -:  140:			}
        -:  141:			
        -:  142:			//Test Kingdom card piles
  3002638:  143:			if(testSupply(&testGame,&game) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  144:				printf("TEST FAILED - Kingdom Card Piles have changed\n");
call    0 never executed
    #####:  145:				testsPassed = 0;
        -:  146:			}
        -:  147:
  3002638:  148:			endTurn(&game);
call    0 returned 100%
        -:  149:		}
        -:  150:		
        -:  151:	}
        2:  152:	clock_t end = clock();
call    0 returned 100%
        2:  153:	double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
        -:  154:	
        2:  155:	printf("Time Ran: %f\n\n",time_spent);
call    0 returned 100%
        -:  156:	
        2:  157:	if(testsPassed){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  158:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  159:	}
        -:  160:	else{
    #####:  161:		printf("A Test Failed\n");
call    0 never executed
        -:  162:	}
        -:  163:	
        2:  164:	return 0;
        -:  165:}
