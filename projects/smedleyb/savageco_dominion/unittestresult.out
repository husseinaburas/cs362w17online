Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:7.37% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
     5995:   10:int compare(const void* a, const void* b) {
     5995:   11:  if (*(int*)a > *(int*)b)
     3041:   12:    return 1;
     2954:   13:  if (*(int*)a < *(int*)b)
     2954:   14:    return -1;
    #####:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
    #####:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
    #####:   46:  SelectStream(1);
    #####:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
    #####:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
    #####:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    #####:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
    #####:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
    #####:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
    #####:   75:  if (numPlayers == 2)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 8;
    #####:   92:      state->supplyCount[duchy] = 8;
    #####:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    #####:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:  state->supplyCount[silver] = 40;
    #####:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    #####:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
    #####:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
    #####:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    #####:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    #####:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    #####:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    #####:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    #####:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
    #####:  142:      state->deckCount[i] = 0;
    #####:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    #####:  145:	  state->deck[i][j] = estate;
    #####:  146:	  state->deckCount[i]++;
        -:  147:	}
    #####:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    #####:  150:	  state->deck[i][j] = copper;
    #####:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    #####:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
    #####:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
    #####:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
    #####:  168:      state->handCount[i] = 0;
    #####:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    #####:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    #####:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
    #####:  184:  state->outpostPlayed = 0;
    #####:  185:  state->phase = 0;
    #####:  186:  state->numActions = 1;
    #####:  187:  state->numBuys = 1;
    #####:  188:  state->playedCardCount = 0;
    #####:  189:  state->whoseTurn = 0;
    #####:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  194:  for (it = 0; it < 5; it++){
    #####:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
    #####:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:  return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      813:  216:  while (state->deckCount[player] > 0) {
      809:  217:    card = floor(Random() * state->deckCount[player]);
      809:  218:    newDeck[newDeckPos] = state->deck[player][card];
      809:  219:    newDeckPos++;
    81722:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    80913:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      809:  223:    state->deckCount[player]--;
        -:  224:  }
      811:  225:  for (i = 0; i < newDeckPos; i++) {
      809:  226:    state->deck[player][i] = newDeck[i];
      809:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
    #####:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
        -:  392:// returns 1 if game is over; 0 otherwise
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
        -:  408:	{
    #####:  409:	  j++;
        -:  410:	}
        -:  411:    }
    #####:  412:  if ( j >= 3)
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
        -:  418:}
        -:  419:
    #####:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
        -:  471:	{
    #####:  472:	  players[i] = -9999;
        -:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
        -:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
        -:  485:	{
    #####:  486:	  j = i;
        -:  487:	}
        -:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
        -:  496:	{
    #####:  497:	  players[i]++;
        -:  498:	}
        -:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
        -:  506:	{
    #####:  507:	  j = i;
        -:  508:	}
        -:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
        -:  516:	{
    #####:  517:	  players[i] = 1;
        -:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
        -:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
     2000:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:  int deckCounter;
     2000:  531:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  532:    
        -:  533:    //Step 1 Shuffle the discard pile back into a deck
        -:  534:    int i;
        -:  535:    //Move discard to deck
      811:  536:    for (i = 0; i < state->discardCount[player];i++){
      809:  537:      state->deck[player][i] = state->discard[player][i];
      809:  538:      state->discard[player][i] = -1;
        -:  539:    }
        -:  540:
        2:  541:    state->deckCount[player] = state->discardCount[player];
        2:  542:    state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:    //Shufffle the deck
        2:  545:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  546:   
        -:  547:    if (DEBUG){//Debug statements
        -:  548:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:    }
        -:  550:    
        2:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
        2:  554:    count = state->handCount[player];//Get current player's hand count
        -:  555:    
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Current hand count: %d\n", count);
        -:  558:    }
        -:  559:    
        2:  560:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
        2:  562:    if (deckCounter == 0)
    #####:  563:      return -1;
        -:  564:
        2:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  566:    state->deckCount[player]--;
        2:  567:    state->handCount[player]++;//Increment hand count
        -:  568:  }
        -:  569:
        -:  570:  else{
     1998:  571:    int count = state->handCount[player];//Get current hand count for player
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
     1998:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1998:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1998:  579:    state->deckCount[player]--;
     1998:  580:    state->handCount[player]++;//Increment hand count
        -:  581:  }
        -:  582:
     2000:  583:  return 0;
        -:  584:}
        -:  585:
    #####:  586:int getCost(int cardNumber)
        -:  587:{
    #####:  588:  switch( cardNumber ) 
        -:  589:    {
        -:  590:    case curse:
    #####:  591:      return 0;
        -:  592:    case estate:
    #####:  593:      return 2;
        -:  594:    case duchy:
    #####:  595:      return 5;
        -:  596:    case province:
    #####:  597:      return 8;
        -:  598:    case copper:
    #####:  599:      return 0;
        -:  600:    case silver:
    #####:  601:      return 3;
        -:  602:    case gold:
    #####:  603:      return 6;
        -:  604:    case adventurer:
    #####:  605:      return 6;
        -:  606:    case council_room:
    #####:  607:      return 5;
        -:  608:    case feast:
    #####:  609:      return 4;
        -:  610:    case gardens:
    #####:  611:      return 4;
        -:  612:    case mine:
    #####:  613:      return 5;
        -:  614:    case remodel:
    #####:  615:      return 4;
        -:  616:    case smithy:
    #####:  617:      return 4;
        -:  618:    case village:
    #####:  619:      return 3;
        -:  620:    case baron:
    #####:  621:      return 4;
        -:  622:    case great_hall:
    #####:  623:      return 3;
        -:  624:    case minion:
    #####:  625:      return 5;
        -:  626:    case steward:
    #####:  627:      return 3;
        -:  628:    case tribute:
    #####:  629:      return 5;
        -:  630:    case ambassador:
    #####:  631:      return 3;
        -:  632:    case cutpurse:
    #####:  633:      return 4;
        -:  634:    case embargo: 
    #####:  635:      return 2;
        -:  636:    case outpost:
    #####:  637:      return 5;
        -:  638:    case salvager:
    #####:  639:      return 4;
        -:  640:    case sea_hag:
    #####:  641:      return 4;
        -:  642:    case treasure_map:
    #####:  643:      return 4;
        -:  644:    }
        -:  645:	
    #####:  646:  return -1;
        -:  647:}
        -:  648:
    #####:  649:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  650:{
        -:  651:  int i;
        -:  652:  int j;
        -:  653:  int k;
        -:  654:  int x;
        -:  655:  int index;
    #####:  656:  int currentPlayer = whoseTurn(state);
    #####:  657:  int nextPlayer = currentPlayer + 1;
        -:  658:
    #####:  659:  int tributeRevealedCards[2] = {-1, -1};
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
    #####:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
    #####:  669:      return playAdventurer(state, currentPlayer);
        -:  670:			
        -:  671:    case council_room:
    #####:  672:      return playCouncil_Room(state, handPos, currentPlayer);
        -:  673:			
        -:  674:    case feast:
    #####:  675:      return playFeast(state, choice1, currentPlayer);
        -:  676:			
        -:  677:    case gardens:
    #####:  678:      return -1;
        -:  679:			
        -:  680:    case mine:
    #####:  681:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  682:
    #####:  683:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  684:	{
    #####:  685:	  return -1;
        -:  686:	}
        -:  687:		
    #####:  688:      if (choice2 > treasure_map || choice2 < curse)
        -:  689:	{
    #####:  690:	  return -1;
        -:  691:	}
        -:  692:
    #####:  693:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  694:	{
    #####:  695:	  return -1;
        -:  696:	}
        -:  697:
    #####:  698:      gainCard(choice2, state, 2, currentPlayer);
        -:  699:
        -:  700:      //discard card from hand
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:
        -:  703:      //discard trashed card
    #####:  704:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  705:	{
    #####:  706:	  if (state->hand[currentPlayer][i] == j)
        -:  707:	    {
    #####:  708:	      discardCard(i, currentPlayer, state, 0);			
    #####:  709:	      break;
        -:  710:	    }
        -:  711:	}
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case remodel:
    #####:  716:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  717:
    #####:  718:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  719:	{
    #####:  720:	  return -1;
        -:  721:	}
        -:  722:
    #####:  723:      gainCard(choice2, state, 0, currentPlayer);
        -:  724:
        -:  725:      //discard card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:      //discard trashed card
    #####:  729:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:	{
    #####:  731:	  if (state->hand[currentPlayer][i] == j)
        -:  732:	    {
    #####:  733:	      discardCard(i, currentPlayer, state, 0);			
    #####:  734:	      break;
        -:  735:	    }
        -:  736:	}
        -:  737:
        -:  738:
    #####:  739:      return 0;
        -:  740:		
        -:  741:    case smithy:
    #####:  742:      return playSmithy(state, handPos, currentPlayer);
        -:  743:		
        -:  744:    case village:
    #####:  745:      return playVillage(state, handPos, currentPlayer); 
        -:  746:		
        -:  747:    case baron:
    #####:  748:      state->numBuys++;//Increase buys by 1!
    #####:  749:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  750:	int p = 0;//Iterator for hand!
    #####:  751:	int card_not_discarded = 1;//Flag for discard set!
    #####:  752:	while(card_not_discarded){
    #####:  753:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  754:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  755:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  756:	    state->discardCount[currentPlayer]++;
    #####:  757:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  758:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  759:	    }
    #####:  760:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  761:	    state->handCount[currentPlayer]--;
    #####:  762:	    card_not_discarded = 0;//Exit the loop
        -:  763:	  }
    #####:  764:	  else if (p > state->handCount[currentPlayer]){
        -:  765:	    if(DEBUG) {
        -:  766:	      printf("No estate cards in your hand, invalid choice\n");
        -:  767:	      printf("Must gain an estate if there are any\n");
        -:  768:	    }
    #####:  769:	    if (supplyCount(estate, state) > 0){
    #####:  770:	      gainCard(estate, state, 0, currentPlayer);
    #####:  771:	      state->supplyCount[estate]--;//Decrement estates
    #####:  772:	      if (supplyCount(estate, state) == 0){
    #####:  773:		isGameOver(state);
        -:  774:	      }
        -:  775:	    }
    #####:  776:	    card_not_discarded = 0;//Exit the loop
        -:  777:	  }
        -:  778:			    
        -:  779:	  else{
    #####:  780:	    p++;//Next card
        -:  781:	  }
        -:  782:	}
        -:  783:      }
        -:  784:			    
        -:  785:      else{
    #####:  786:	if (supplyCount(estate, state) > 0){
    #####:  787:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  788:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  789:	  if (supplyCount(estate, state) == 0){
    #####:  790:	    isGameOver(state);
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:	    
        -:  795:      
    #####:  796:      return 0;
        -:  797:		
        -:  798:    case great_hall:
        -:  799:      //+1 Card
    #####:  800:      drawCard(currentPlayer, state);
        -:  801:			
        -:  802:      //+1 Actions
    #####:  803:      state->numActions++;
        -:  804:			
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
    #####:  807:      return 0;
        -:  808:		
        -:  809:    case minion:
        -:  810:      //+1 action
    #####:  811:      state->numActions++;
        -:  812:			
        -:  813:      //discard card from hand
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
        -:  815:			
    #####:  816:      if (choice1)		//+2 coins
        -:  817:	{
    #####:  818:	  state->coins = state->coins + 2;
        -:  819:	}
        -:  820:			
    #####:  821:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  822:	{
        -:  823:	  //discard hand
    #####:  824:	  while(numHandCards(state) > 0)
        -:  825:	    {
    #####:  826:	      discardCard(handPos, currentPlayer, state, 0);
        -:  827:	    }
        -:  828:				
        -:  829:	  //draw 4
    #####:  830:	  for (i = 0; i < 4; i++)
        -:  831:	    {
    #####:  832:	      drawCard(currentPlayer, state);
        -:  833:	    }
        -:  834:				
        -:  835:	  //other players discard hand and redraw if hand size > 4
    #####:  836:	  for (i = 0; i < state->numPlayers; i++)
        -:  837:	    {
    #####:  838:	      if (i != currentPlayer)
        -:  839:		{
    #####:  840:		  if ( state->handCount[i] > 4 )
        -:  841:		    {
        -:  842:		      //discard hand
    #####:  843:		      while( state->handCount[i] > 0 )
        -:  844:			{
    #####:  845:			  discardCard(handPos, i, state, 0);
        -:  846:			}
        -:  847:							
        -:  848:		      //draw 4
    #####:  849:		      for (j = 0; j < 4; j++)
        -:  850:			{
    #####:  851:			  drawCard(i, state);
        -:  852:			}
        -:  853:		    }
        -:  854:		}
        -:  855:	    }
        -:  856:				
        -:  857:	}
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case steward:
    #####:  861:      if (choice1 == 1)
        -:  862:	{
        -:  863:	  //+2 cards
    #####:  864:	  drawCard(currentPlayer, state);
    #####:  865:	  drawCard(currentPlayer, state);
        -:  866:	}
    #####:  867:      else if (choice1 == 2)
        -:  868:	{
        -:  869:	  //+2 coins
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:      else
        -:  873:	{
        -:  874:	  //trash 2 cards in hand
    #####:  875:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  876:	  discardCard(choice3, currentPlayer, state, 1);
        -:  877:	}
        -:  878:			
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case tribute:
    #####:  884:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  885:	if (state->deckCount[nextPlayer] > 0){
    #####:  886:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  887:	  state->deckCount[nextPlayer]--;
        -:  888:	}
    #####:  889:	else if (state->discardCount[nextPlayer] > 0){
    #####:  890:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  891:	  state->discardCount[nextPlayer]--;
        -:  892:	}
        -:  893:	else{
        -:  894:	  //No Card to Reveal
        -:  895:	  if (DEBUG){
        -:  896:	    printf("No cards to reveal\n");
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      else{
    #####:  902:	if (state->deckCount[nextPlayer] == 0){
    #####:  903:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  904:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  905:	    state->deckCount[nextPlayer]++;
    #####:  906:	    state->discard[nextPlayer][i] = -1;
    #####:  907:	    state->discardCount[nextPlayer]--;
        -:  908:	  }
        -:  909:			    
    #####:  910:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  911:	} 
    #####:  912:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  914:	state->deckCount[nextPlayer]--;
    #####:  915:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
        -:  918:      }    
        -:  919:		       
    #####:  920:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  921:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  922:	state->playedCardCount++;
    #####:  923:	tributeRevealedCards[1] = -1;
        -:  924:      }
        -:  925:
    #####:  926:      for (i = 0; i <= 2; i ++){
    #####:  927:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  928:	  state->coins += 2;
        -:  929:	}
        -:  930:		    
    #####:  931:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  932:	  drawCard(currentPlayer, state);
    #####:  933:	  drawCard(currentPlayer, state);
        -:  934:	}
        -:  935:	else{//Action Card
    #####:  936:	  state->numActions = state->numActions + 2;
        -:  937:	}
        -:  938:      }
        -:  939:	    
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case ambassador:
    #####:  943:      j = 0;		//used to check if player has enough cards to discard
        -:  944:
    #####:  945:      if (choice2 > 2 || choice2 < 0)
        -:  946:	{
    #####:  947:	  return -1;				
        -:  948:	}
        -:  949:
    #####:  950:      if (choice1 == handPos)
        -:  951:	{
    #####:  952:	  return -1;
        -:  953:	}
        -:  954:
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  956:	{
    #####:  957:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  958:	    {
    #####:  959:	      j++;
        -:  960:	    }
        -:  961:	}
    #####:  962:      if (j < choice2)
        -:  963:	{
    #####:  964:	  return -1;				
        -:  965:	}
        -:  966:
        -:  967:      if (DEBUG) 
        -:  968:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  969:
        -:  970:      //increase supply count for choosen card by amount being discarded
    #####:  971:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  972:			
        -:  973:      //each other player gains a copy of revealed card
    #####:  974:      for (i = 0; i < state->numPlayers; i++)
        -:  975:	{
    #####:  976:	  if (i != currentPlayer)
        -:  977:	    {
    #####:  978:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:      //discard played card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);			
        -:  984:
        -:  985:      //trash copies of cards returned to supply
    #####:  986:      for (j = 0; j < choice2; j++)
        -:  987:	{
    #####:  988:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  989:	    {
    #####:  990:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  991:		{
    #####:  992:		  discardCard(i, currentPlayer, state, 1);
    #####:  993:		  break;
        -:  994:		}
        -:  995:	    }
        -:  996:	}			
        -:  997:
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case cutpurse:
        -: 1001:
    #####: 1002:      updateCoins(currentPlayer, state, 2);
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
        -: 1004:	{
    #####: 1005:	  if (i != currentPlayer)
        -: 1006:	    {
    #####: 1007:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1008:		{
    #####: 1009:		  if (state->hand[i][j] == copper)
        -: 1010:		    {
    #####: 1011:		      discardCard(j, i, state, 0);
    #####: 1012:		      break;
        -: 1013:		    }
    #####: 1014:		  if (j == state->handCount[i])
        -: 1015:		    {
    #####: 1016:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1017:			{
        -: 1018:			  if (DEBUG)
        -: 1019:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1020:			}	
    #####: 1021:		      break;
        -: 1022:		    }		
        -: 1023:		}
        -: 1024:					
        -: 1025:	    }
        -: 1026:				
        -: 1027:	}				
        -: 1028:
        -: 1029:      //discard played card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:		
        -: 1035:    case embargo: 
        -: 1036:      //+2 Coins
    #####: 1037:      state->coins = state->coins + 2;
        -: 1038:			
        -: 1039:      //see if selected pile is in play
    #####: 1040:      if ( state->supplyCount[choice1] == -1 )
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:			
        -: 1045:      //add embargo token to selected supply pile
    #####: 1046:      state->embargoTokens[choice1]++;
        -: 1047:			
        -: 1048:      //trash card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case outpost:
        -: 1053:      //set outpost flag
    #####: 1054:      state->outpostPlayed++;
        -: 1055:			
        -: 1056:      //discard card
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case salvager:
        -: 1061:      //+1 buy
    #####: 1062:      state->numBuys++;
        -: 1063:			
    #####: 1064:      if (choice1)
        -: 1065:	{
        -: 1066:	  //gain coins equal to trashed card
    #####: 1067:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1068:	  //trash card
    #####: 1069:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1070:	}
        -: 1071:			
        -: 1072:      //discard card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case sea_hag:
    #####: 1077:      for (i = 0; i < state->numPlayers; i++){
    #####: 1078:	if (i != currentPlayer){
    #####: 1079:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1080:	  state->discardCount[i]++;
    #####: 1081:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1082:	}
        -: 1083:      }
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case treasure_map:
        -: 1087:      //search hand for another treasure_map
    #####: 1088:      index = -1;
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:	{
    #####: 1091:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1092:	    {
    #####: 1093:	      index = i;
    #####: 1094:	      break;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (index > -1)
        -: 1098:	{
        -: 1099:	  //trash both treasure cards
    #####: 1100:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1101:	  discardCard(index, currentPlayer, state, 1);
        -: 1102:
        -: 1103:	  //gain 4 Gold cards
    #####: 1104:	  for (i = 0; i < 4; i++)
        -: 1105:	    {
    #####: 1106:	      gainCard(gold, state, 1, currentPlayer);
        -: 1107:	    }
        -: 1108:				
        -: 1109:	  //return success
    #####: 1110:	  return 1;
        -: 1111:	}
        -: 1112:			
        -: 1113:      //no second treasure_map found in hand
    #####: 1114:      return -1;
        -: 1115:    }
        -: 1116:	
    #####: 1117:  return -1;
        -: 1118:}
        -: 1119:
    #####: 1120:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1121:{
        -: 1122:	
        -: 1123:  //if card is not trashed, added to Played pile 
    #####: 1124:  if (trashFlag < 1)
        -: 1125:    {
        -: 1126:      //add card to played pile
    #####: 1127:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1128:      state->playedCardCount++;
        -: 1129:    }
        -: 1130:	
        -: 1131:  //set played card to -1
    #####: 1132:  state->hand[currentPlayer][handPos] = -1;
        -: 1133:	
        -: 1134:  //remove card from player's hand
    #####: 1135:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
    #####: 1140:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1141:    {
        -: 1142:      //reduce number of cards in hand
    #####: 1143:      state->handCount[currentPlayer]--;
        -: 1144:    }
        -: 1145:  else 	
        -: 1146:    {
        -: 1147:      //replace discarded card with last card in hand
    #####: 1148:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1149:      //set last card to -1
    #####: 1150:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1151:      //reduce number of cards in hand
    #####: 1152:      state->handCount[currentPlayer]--;
        -: 1153:    }
        -: 1154:	
    #####: 1155:  return 0;
        -: 1156:}
        -: 1157:
    #####: 1158:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1159:{
        -: 1160:  //Note: supplyPos is enum of choosen card
        -: 1161:	
        -: 1162:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1163:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1164:    {
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //added card for [whoseTurn] current player:
        -: 1169:  // toFlag = 0 : add to discard
        -: 1170:  // toFlag = 1 : add to deck
        -: 1171:  // toFlag = 2 : add to hand
        -: 1172:
    #####: 1173:  if (toFlag == 1)
        -: 1174:    {
    #####: 1175:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1176:      state->deckCount[player]++;
        -: 1177:    }
    #####: 1178:  else if (toFlag == 2)
        -: 1179:    {
    #####: 1180:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1181:      state->handCount[player]++;
        -: 1182:    }
        -: 1183:  else
        -: 1184:    {
    #####: 1185:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1186:      state->discardCount[player]++;
        -: 1187:    }
        -: 1188:	
        -: 1189:  //decrease number in supply pile
    #####: 1190:  state->supplyCount[supplyPos]--;
        -: 1191:	 
    #####: 1192:  return 0;
        -: 1193:}
        -: 1194:
    #####: 1195:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1196:{
        -: 1197:  int i;
        -: 1198:	
        -: 1199:  //reset coin count
    #####: 1200:  state->coins = 0;
        -: 1201:
        -: 1202:  //add coins for each Treasure card in player's hand
    #####: 1203:  for (i = 0; i < state->handCount[player]; i++)
        -: 1204:    {
    #####: 1205:      if (state->hand[player][i] == copper)
        -: 1206:	{
    #####: 1207:	  state->coins += 1;
        -: 1208:	}
    #####: 1209:      else if (state->hand[player][i] == silver)
        -: 1210:	{
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
    #####: 1213:      else if (state->hand[player][i] == gold)
        -: 1214:	{
    #####: 1215:	  state->coins += 3;
        -: 1216:	}	
        -: 1217:    }	
        -: 1218:
        -: 1219:  //add bonus
    #####: 1220:  state->coins += bonus;
        -: 1221:
    #####: 1222:  return 0;
        -: 1223:}
        -: 1224:
        -: 1225:
    #####: 1226:int playSmithy(struct gameState *state, int handPos, int currentPlayer){
        -: 1227:  //+3 Cards
        -: 1228:  int i;
    #####: 1229:  for (i = 0; i <= 3; i++)
        -: 1230:  {
    #####: 1231:    drawCard(currentPlayer, state);
        -: 1232:  }			
        -: 1233:  
        -: 1234:  //discard card from hand
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
        -: 1236:
        -: 1237:  //printf("I'm playing smithy!\n");
    #####: 1238:  return 0;
        -: 1239:}
        -: 1240:
    #####: 1241:int playAdventurer(struct gameState *state, int currentPlayer){
    #####: 1242:  int drawntreasure = 0, z = 0, cardDrawn;
        -: 1243:  int temphand[MAX_HAND];
    #####: 1244:  while(drawntreasure<2){
    #####: 1245:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1246:	  shuffle(currentPlayer, state);
        -: 1247:	}
        -: 1248:
    #####: 1249:	drawCard(currentPlayer, state);
    #####: 1250:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1251:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1252:	  drawntreasure++;
        -: 1253:	else{
    #####: 1254:	  temphand[z]=cardDrawn;
    #####: 1255:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1256:	  z += 2;//is adding 2
        -: 1257:	}
        -: 1258:  }
    #####: 1259:  while(z-1>=0){
    #####: 1260:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1261:	z=z-1;
        -: 1262:  }
    #####: 1263:  return 0;
        -: 1264:}
        -: 1265:
    #####: 1266:int playVillage(struct gameState *state, int handPos, int currentPlayer){
        -: 1267:	//+1 Card
    #####: 1268:      	drawCard(currentPlayer, state);
        -: 1269:			
        -: 1270:      	//+2 Actions
    #####: 1271:      	state->numActions = state->numActions * 2;
        -: 1272:			
        -: 1273:      	//discard played card from hand
    #####: 1274:      	discardCard(handPos, currentPlayer, state, 0);
    #####: 1275:      	return 0;
        -: 1276:}
        -: 1277:
    #####: 1278:int playFeast(struct gameState *state, int choice1, int currentPlayer){
        -: 1279://gain card with cost up to 5
        -: 1280:      //Backup hand
        -: 1281:      int i;
        -: 1282:      int temphand[MAX_HAND];
    #####: 1283:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1284:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1285:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1286:      }
        -: 1287:      //Backup hand
        -: 1288:
        -: 1289:      //Update Coins for Buy
    #####: 1290:      updateCoins(currentPlayer, state, 5);
    #####: 1291:      while( i == 1) {//Buy one card
    #####: 1292:	if (supplyCount(choice1, state) <= 0){
        -: 1293:	  if (DEBUG)
        -: 1294:	    printf("None of that card left, sorry!\n");
        -: 1295:
        -: 1296:	  if (DEBUG){
        -: 1297:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1298:	  }
        -: 1299:	}
    #####: 1300:	else if (state->coins < getCost(choice1)){
    #####: 1301:	  printf("That card is too expensive!\n");
        -: 1302:
        -: 1303:	  if (DEBUG){
        -: 1304:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1305:	  }
        -: 1306:	}
        -: 1307:	else{
        -: 1308:
        -: 1309:	  if (DEBUG){
        -: 1310:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1311:	  }
        -: 1312:
    #####: 1313:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1314:	  i = 0;//No more buying cards
        -: 1315:
        -: 1316:	  if (DEBUG){
        -: 1317:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1318:	  }
        -: 1319:
        -: 1320:	}
        -: 1321:      }     
        -: 1322:
        -: 1323:      //Reset Hand
    #####: 1324:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1325:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1326:	temphand[i] = -1;
        -: 1327:      }
        -: 1328:      //Reset Hand
        -: 1329:      			
    #####: 1330:      return 0;
        -: 1331:}
        -: 1332:
    #####: 1333:int playCouncil_Room(struct gameState *state, int handPos, int currentPlayer){
        -: 1334://+4 Cards
        -: 1335:      int i;
    #####: 1336:      for (i = 0; i < 4; i++)
        -: 1337:	{
    #####: 1338:	  drawCard(currentPlayer, state);
        -: 1339:	}
        -: 1340:			
        -: 1341:      //+1 Buy
    #####: 1342:      state->numBuys++;
        -: 1343:			
        -: 1344:      //Each other player draws a card
    #####: 1345:      for (; i < state->numPlayers; i++)
        -: 1346:	{
    #####: 1347:	  if ( i != currentPlayer )
        -: 1348:	    {
    #####: 1349:	      drawCard(i, state);
        -: 1350:	    }
        -: 1351:	}
        -: 1352:			
        -: 1353:      //put played card in played card pile
    #####: 1354:      discardCard(handPos, currentPlayer, state, 0);
        -: 1355:			
    #####: 1356:      return 0;
        -: 1357:}
        -: 1358://end of dominion.c
START: testing shuffle...
TEST SUCCEEDED
START: testing isGameOver()...
TEST 1 - end case: province cards empty
TEST 1 - PASS
TEST 2 - end case: any 3 supply stacks empty, not including province
TEST 2 - PASS
TEST 3 - end case: province cards and 2 other supply stacks empty
TEST 3 - PASS
TEST 4 - non-end case: only two suppply stacks are empty, not including province cards
TEST 4 - PASS
START: testing discardCard(...)
INFO: base game state initialized

TEST 1a - FAIL
TEST 1b - SUCCESS
TEST 1c - SUCCESS
TEST 1d - SUCCESS

TEST 2a - SUCCESS
TEST 2b - FAIL
TEST 2c - SUCCESS
TEST 2d - SUCCESS
TEST 2e - SUCCESS
START: testing updateCoins(...)
TEST 1: SUCCESS
TEST 2: SUCCESS
START: Testing smithy...
TEST 1 - pass if smithy card was discarded to discard pile
TEST 1 - FAIL
TEST 2 - pass if player has 7 cards in hand; started w/ 5
TEST 2 - FAIL
TEST 3 - pass if discard count is 1
TEST 3 - FAIL
TEST 4 - pass if hand size is >= original-1+3; discard 1 and draw 3
TEST 4 - SUCCESS
START: testing adventurer...
TEST 1 - pass if 2 treasure cards added to hand
TEST 1 - SUCCESS
TEST 2 - pass if there is 1x smithy and 1x village in discard
TEST 2 - SUCCESS
TEST 3 - pass if hand contains one gold and one silver
TEST 3 - SUCCESS
START: testing village...
TEST 1 - pass if hand size is same after playing village; discard 1 and draw 1
TEST 1 - SUCCESS
TEST 2 - pass if player has two more actions than before playing village
TEST 2 - FAIL
TEST 3 - pass if village in discard pile
TEST 3 - FAIL
START: testing council room...
TEST 1 - pass if 4 cards added to hand
TEST 1 - SUCCESS
TEST 2 - pass if player gains 1 buy
TEST 2 - SUCCESS
TEST 3 - pass if council room in discard pile
TEST 3 - FAIL
