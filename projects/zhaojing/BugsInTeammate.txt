a.	Bug #1:

	Upon executing my randomtest1.c file, I received a “segmentation fault (core dumped) error” right after the “testing whether player x successfully played smithy card” part.  Based on how I wrote this test, I concluded this error message location meant the program could not successfully play smithy card.  Because all my other tests ran smoothly without having to do any refactoring, I suspected the problem was in my teammate’s dominion.c code and not in my test code.  I examined my teammate’s dominion.c code and realized that it was a simple mispositioning of parameters.

	Specifically, my teammate’s dominion.c code line 646 reads: 
	int playSmithy(struct gameState *state, int handPos, int currentPlayer){
	Line 889-890 read:
   	case smithy:
	      playSmithy(state, currentPlayer, handPos);
	
	As we can see, the parameters in playSmithy are not aligned.  To verify that this problem was indeed what caused the seg fault, I temporarily fixed the problem in my teammate’s dominion.c file and compiled and executed randomcardtest1.c again.  Sure enough, it ran smoothly after that. 

b.	Bug #2:

	Because I inserted various printf commands into my test, the bug was easy to find.  I simply looked through the test results and identified the places where the tests have failed.  As we can see from the screenshot of the test results (see page 5 on Assignment-5.pdf), whenever we play smithy card when the player has enough cards in deck, his hand count would be wrong.  Note that there are other places where the tests fail, but those are separate bugs.  For the purpose of this assignment, I simply identified the single bug of failed player hand count.  When that player does not have sufficient cards in deck, this bug does not appear.  

	The cause for this bug, on the surface, appears to be that the player is adding the incorrect number of cards to his hands.  I then used GDB in flip on our class server to further locate the problem.  The entire log can be found below (see page 4 on Assignment-5.pdf).  Because I specifically want to identify the bug that causes our player 1 hand count to fail after playing the card when there are sufficient cards in deck, I set the breakpoint to the line where I assert that player 1’s hand count should be 3.  At this point, the program has set the cards to be a sufficient number in deck, and has played smithy card.  

	Next I printed player 1’s actual hand count.  We see that the actual hand count is 4.  But I asserted it to be 3.  That is because player 1 started with 1 card in hand – the smithy card.  After playing this card, he should have drawn 3 cards from deck, and discarded the smithy card.  So he should be left with 3 cards in hand.  

	At this point I have located the problem: the playSmithy function adds one extra card to the player’s hand.  

	Next I went to the code and saw that the loop was written incorrectly:  for(i=0; i<=3, i++).  Because we wish to draw 3 cards, we should set the loop to either for(i=0; i<3; i++) or for (i=1; i<=3; i++).  

	To verify that this problem was indeed what caused the test to fail, I temporarily fixed the problem (see page 4 on Assignment-5.pdf for details on the fix).  I then compiled and executed cardtest2.c again.  This particular test no longer failed.
