******begin unit test on shuffle()******
testing shuffle() with deck count < 1 
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
testing shuffle() with deck count > 0 
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
******end unit test on shuffle()******
******begin unit test on getCost()******
testing getCost() on curse card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on estate card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on duchy card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on province card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on copper card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on silver card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on gold card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on adventurer card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on council_room card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on feast card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on gardens card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on mine card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on remodel card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on smithy card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on village card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on baron card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on great_hall card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on minion card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on steward card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on tribute card
TEST SUCCESSFULLY COMPLETED.
testing getCost(tribute) on ambassador card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on cutpurse card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on embargo card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on outpost card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on salvager card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on sea_hag card
TEST SUCCESSFULLY COMPLETED.
testing getCost() on treasure_map card
TEST SUCCESSFULLY COMPLETED.
******end unit test on getCost()******
******begin unit test on buyCard()******
testing successful buy
TEST SUCCESSFULLY COMPLETED.
testing insufficient buys
TEST SUCCESSFULLY COMPLETED.
testing insufficient supply
TEST SUCCESSFULLY COMPLETED.
testing insufficient coins
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
******begin unit test on buyCard()******
******begin unit test on whoseTurn()******
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
TEST SUCCESSFULLY COMPLETED.
******end unit test on whoseTurn()******
******begin unit test on adventurer card******
testing player1 playing adventurer with empty deck
testing whether card correctly plays 
TEST SUCCESSFULLY COMPLETED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST FAILED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST FAILED.
testing player1 discard count
TEST SUCCESSFULLY COMPLETED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing player1 playing adventurer with 2 treasure cards at beginning of deck
testing whether card correctly plays 
TEST FAILED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST FAILED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing adventurer with 2 treasure cards at end of deck
testing whether card correctly plays 
TEST FAILED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST FAILED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing adventurer with 2 treasure cards in middle of deck
testing whether card correctly plays 
TEST FAILED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST FAILED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing adventurer with 2 treasure cards at each end of deck
testing whether card correctly plays 
TEST FAILED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST FAILED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing adventurer with 2 treasure cards at each end of deck
testing whether card correctly plays 
TEST FAILED.
testing whether whoseTurn works correctly
TEST SUCCESSFULLY COMPLETED.
testing whether coin count is correct
TEST FAILED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST FAILED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
******begin unit test on adventurer card******
******begin unit test on smithy card******
testing player 1 playing smithy when there are enough cards in deck
testing whether card correctly plays 
TEST SUCCESSFULLY COMPLETED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing player 1 playing smithy when there are not enough cards in deck
testing whether card correctly plays 
TEST FAILED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST SUCCESSFULLY COMPLETED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
******end unit test on smithy card******
******begin unit test on great_hall card******
testing player1 playing great_hall with empty deck
testing whether card correctly plays 
TEST SUCCESSFULLY COMPLETED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST FAILED.
testing player1 deck count
TEST SUCCESSFULLY COMPLETED.
testing player2 deck count
TEST FAILED.
testing player1 discard count
TEST SUCCESSFULLY COMPLETED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing player1 victory points
TEST FAILED.
testing player2 victory points
TEST FAILED.
testing number of actions count
TEST FAILED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing player1 playing great_hall with non-empty deck
testing whether card correctly plays 
TEST FAILED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST FAILED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST SUCCESSFULLY COMPLETED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing player1 victory points
TEST FAILED.
testing player2 victory points
TEST FAILED.
testing number of actions count
TEST FAILED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
******begin unit test on great_hall card******
******begin unit test on village card******
testing player1 playing village with empty deck
testing whether card correctly plays 
TEST SUCCESSFULLY COMPLETED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST SUCCESSFULLY COMPLETED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST SUCCESSFULLY COMPLETED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing number of actions count
TEST FAILED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
testing player1 playing village with non-empty deck
testing whether card correctly plays 
TEST SUCCESSFULLY COMPLETED.
testing whether the turn still belongs to the same player
TEST SUCCESSFULLY COMPLETED.
testing player1 hand count
TEST FAILED.
testing player2 hand count
TEST SUCCESSFULLY COMPLETED.
testing player1 deck count
TEST SUCCESSFULLY COMPLETED.
testing player2 deck count
TEST SUCCESSFULLY COMPLETED.
testing player1 discard count
TEST SUCCESSFULLY COMPLETED.
testing player2 discard count
TEST SUCCESSFULLY COMPLETED.
testing number of actions count
TEST FAILED.
testing supply count on curse cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on estate cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on duchy cards
TEST SUCCESSFULLY COMPLETED.
testing supply count on province cards
TEST SUCCESSFULLY COMPLETED.
******end unit test on village card******
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:19.23% of 182
Branches executed:35.03% of 157
Taken at least once:15.92% of 157
Calls executed:21.28% of 47

Function 'stewardCard'
Lines executed:72.73% of 11
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:66.67% of 6

Function 'minionCard'
Lines executed:71.43% of 14
Branches executed:75.00% of 16
Taken at least once:56.25% of 16
Calls executed:40.00% of 5

Function 'great_hallCard'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'villageCard'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'remodelCard'
Lines executed:0.00% of 10
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'adventurerCard'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:100.00% of 3

Function 'smithyCard'
Lines executed:100.00% of 4
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:85.71% of 14
Branches executed:100.00% of 10
Taken at least once:70.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:48.13% of 561
Branches executed:50.84% of 415
Taken at least once:37.35% of 415
Calls executed:42.86% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 433 returned 100% blocks executed 100%
      433:    8:int compare(const void* a, const void* b) {
      433:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       66:   10:    return 1;
      367:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       86:   12:    return -1;
      281:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 146 returned 100% blocks executed 100%
      146:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:  int newDeck[MAX_DECK];
      146:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
      146:  208:  if (state->deckCount[player] < 1)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
      127:  209:    return -1;
       19:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      260:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      222:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      222:  215:    newDeck[newDeckPos] = state->deck[player][card];
      222:  216:    newDeckPos++;
     1286:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1064:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
      222:  220:    state->deckCount[player]--;
        -:  221:  }
      241:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      222:  223:    state->deck[player][i] = newDeck[i];
      222:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
       19:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 12 returned 100% blocks executed 87%
       12:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
       12:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
       12:  236:  if (state->phase != 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
       11:  242:  if ( state->numActions < 1 )
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:  243:    {
        5:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
        6:  248:  card = handCard(handPos, state);
call    0 returned 100%
        -:  249:	
        -:  250:  //check if selected card is an action
        6:  251:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
        6:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
        6:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        6:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  267:	
        6:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 4 returned 100% blocks executed 93%
        4:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        2:  288:    return -1;
        1:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 6 returned 100% blocks executed 100%
        6:  314:int handCard(int handPos, struct gameState *state) {
        6:  315:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 24 returned 100% blocks executed 100%
       24:  345:int whoseTurn(struct gameState *state) {
       24:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 121 returned 100% blocks executed 100%
      121:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
      121:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      124:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 47%
branch  1 taken 53% (fallthrough)
       58:  533:      state->deck[player][i] = state->discard[player][i];
       58:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       66:  537:    state->deckCount[player] = state->discardCount[player];
       66:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       66:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       66:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       66:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       66:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       66:  558:    if (deckCounter == 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
       65:  559:      return -1;
        -:  560:
        1:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  562:    state->deckCount[player]--;
        1:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       55:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       55:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       55:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       55:  575:    state->deckCount[player]--;
       55:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       56:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 29 returned 100% blocks executed 97%
       29:  582:int getCost(int cardNumber)
        -:  583:{
       29:  584:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 10%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        3:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        1:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
function smithyCard called 2 returned 100% blocks executed 100%
        2:  645:int smithyCard(int currentPlayer, struct gameState *state, int handPos){
        -:  646:	int i;
        2:  647:	for (i = 0; i < 4; i++)	drawCard(currentPlayer, state);
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        2:  648:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  649:	return 0;
        -:  650:}
        -:  651:
function adventurerCard called 1 returned 100% blocks executed 100%
        1:  652:int adventurerCard(struct gameState *state){
        1:  653:  int drawntreasure = 0;
        1:  654:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  655:  int cardDrawn;
        -:  656:  int temphand[MAX_HAND];
        1:  657:  int tempCounter = 0;
        -:  658:
       62:  659:  while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
       60:  660:    if (state->deckCount[currentPlayer] <1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       60:  661:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  662:    }
       60:  663:    drawCard(currentPlayer, state);
call    0 returned 100%
       60:  664:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:  665:	//cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
       60:  666:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  667:      drawntreasure++;
        -:  668:    else{
       58:  669:      temphand[tempCounter]=cardDrawn;
       58:  670:      state->handCount[currentPlayer]--; 
       58:  671:      tempCounter++;
        -:  672:    }
        -:  673:  }
       60:  674:  while(tempCounter-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
       58:  675:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[tempCounter-1];
       58:  676:    tempCounter=tempCounter-1;
        -:  677:  }
        1:  678:  return 0;
        -:  679:}
        -:  680:
function remodelCard called 0 returned 0% blocks executed 0%
    #####:  681:int remodelCard(int currentPlayer, int choice1, int choice2, struct gameState *state, int handPos){
        -:  682:	int i, j;
    #####:  683:	j = state->hand[currentPlayer][choice1];
    #####:  684:	if((getCost(state->hand[currentPlayer][choice1] + 2) > getCost(choice2))) return -1;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  685:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
    #####:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  687:	for(i = 0; i < j; i++){
branch  0 never executed
branch  1 never executed
    #####:  688:		if(state->hand[currentPlayer][i] == j){
branch  0 never executed
branch  1 never executed
    #####:  689:			discardCard(j, currentPlayer, state, 0);
call    0 never executed
    #####:  690:			break;
        -:  691:		}
        -:  692:	}
    #####:  693:	return 0;
        -:  694:}
        -:  695:
function villageCard called 4 returned 100% blocks executed 100%
        4:  696:int villageCard(int currentPlayer, struct gameState *state, int handPos){
        4:  697:	drawCard(currentPlayer, state);
call    0 returned 100%
        4:  698:	state->numActions = state->numActions + 1;
        4:  699:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  700:}
        -:  701:
function great_hallCard called 1 returned 100% blocks executed 100%
        1:  702:int great_hallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  703:	//+1 Card
        1:  704:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  705:	
        -:  706:	//+1 Actions
        1:  707:    state->numActions++;
        -:  708:			
        -:  709:    //discard card from hand
        1:  710:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:	
        1:  712:    return 0;
        -:  713:}
        -:  714:
function minionCard called 1 returned 100% blocks executed 64%
        1:  715:int minionCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  716:	int i, j;
        1:  717:	state->numActions++;
        1:  718:	discardCard(handPos,currentPlayer, state, 0);
call    0 returned 100%
        1:  719:	if(choice1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  720:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  721:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  722:	}
        1:  723:	else if(choice2) state->coins = state-> coins + 3;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:  724:	for(i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  725:		if(i != currentPlayer){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  726:			if(state->handCount[i] > 3){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  727:				while(state->handCount[i] > 1)
branch  0 never executed
branch  1 never executed
    #####:  728:					discardCard(handPos, i, state, 0);
call    0 never executed
        -:  729:			}
        1:  730:			for(j = 0; j < 3; j++) drawCard(i, state);
call    0 returned 100%
branch  1 taken 75%
branch  2 taken 25% (fallthrough)
        -:  731:		}
        -:  732:	}
        1:  733:	return 0;
        -:  734:}
        -:  735:
function stewardCard called 1 returned 100% blocks executed 73%
        1:  736:int stewardCard(struct gameState *state, int choice1, int choice2, int choice3, int handPos){
        1:  737:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  738:
        1:  739:	if (choice1 == 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  740:		//+2 cards
    #####:  741:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  742:		drawCard(currentPlayer, state);
call    0 never executed
        -:  743:	}
        1:  744:	else if (choice1 == 2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  745:		//+2 coins
    #####:  746:		state->coins = state->coins + 2;
        -:  747:	}
        -:  748:	else{
        -:  749:		//trash 2 cards in hand
        1:  750:		discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        1:  751:		discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:  752:	}
        -:  753:
        -:  754:	//discard card from hand
        1:  755:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  756:	return 0;
        -:  757:}
        -:  758:
function cardEffect called 6 returned 100% blocks executed 21%
        6:  759:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  760:{
        -:  761:  int i;
        -:  762:  int j;
        -:  763:  int k;
        -:  764:  int x;
        -:  765:  int index;
        6:  766:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  767:  int nextPlayer = currentPlayer + 1;
        -:  768:
        6:  769:  int tributeRevealedCards[2] = {-1, -1};
        -:  770:  int temphand[MAX_HAND];// moved above the if statement
        6:  771:  int drawntreasure=0;
        -:  772:  int cardDrawn;
        6:  773:  int z = 0;// this is the counter for the temp hand
        6:  774:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  775:    nextPlayer = 0;
        -:  776:  }
        -:  777:  
        -:  778:	
        -:  779:  //uses switch to select card and perform actions
        6:  780:  switch( card ) 
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  781:    {
        -:  782:    case adventurer:
        1:  783:		adventurerCard(state);
call    0 returned 100%
        -:  784:		
        -:  785:    case council_room:
        -:  786:      //+4 Cards
        5:  787:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  788:	{
        4:  789:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  790:	}
        -:  791:			
        -:  792:      //+1 Buy
        1:  793:      state->numBuys++;
        -:  794:			
        -:  795:      //Each other player draws a card
        3:  796:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  797:	{
        2:  798:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  799:	    {
        1:  800:	      drawCard(i, state);
call    0 returned 100%
        -:  801:	    }
        -:  802:	}
        -:  803:			
        -:  804:      //put played card in played card pile
        1:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  806:			
        1:  807:      return 0;
        -:  808:			
        -:  809:    case feast:
        -:  810:      //gain card with cost up to 5
        -:  811:      //Backup hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  813:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  814:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  815:      }
        -:  816:      //Backup hand
        -:  817:
        -:  818:      //Update Coins for Buy
    #####:  819:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  820:      x = 1;//Condition to loop on
    #####:  821:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  822:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  823:	  if (DEBUG)
        -:  824:	    printf("None of that card left, sorry!\n");
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  828:	  }
        -:  829:	}
    #####:  830:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
        -:  836:	}
        -:  837:	else{
        -:  838:
        -:  839:	  if (DEBUG){
        -:  840:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:	  }
        -:  842:
    #####:  843:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  844:	  x = 0;//No more buying cards
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  848:	  }
        -:  849:
        -:  850:	}
        -:  851:      }     
        -:  852:
        -:  853:      //Reset Hand
    #####:  854:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  855:	state->hand[currentPlayer][i] = temphand[i];
    #####:  856:	temphand[i] = -1;
        -:  857:      }
        -:  858:      //Reset Hand
        -:  859:      			
    #####:  860:      return 0;
        -:  861:			
        -:  862:    case gardens:
    #####:  863:      return -1;
        -:  864:			
        -:  865:    case mine:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:		
    #####:  873:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  884:
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  887:
        -:  888:      //discard trashed card
    #####:  889:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  890:	{
    #####:  891:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  894:	      break;
        -:  895:	    }
        -:  896:	}
        -:  897:			
    #####:  898:      return 0;
        -:  899:			
        -:  900:    case remodel:
    #####:  901:		remodelCard(currentPlayer, choice1, choice2, state, handPos);
call    0 never executed
        -:  902:		
        -:  903:    case smithy:
        2:  904:		smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  905:		
        -:  906:    case village:
        4:  907: 		villageCard(currentPlayer, state, handPos);
call    0 returned 100%
        4:  908:		return 0;
        -:  909:		
        -:  910:    case baron:
    #####:  911:      state->numBuys++;//Increase buys by 1!
    #####:  912:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  913:	int p = 0;//Iterator for hand!
    #####:  914:	int card_not_discarded = 1;//Flag for discard set!
    #####:  915:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  916:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  917:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  918:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  919:	    state->discardCount[currentPlayer]++;
    #####:  920:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  921:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  922:	    }
    #####:  923:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  924:	    state->handCount[currentPlayer]--;
    #####:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
    #####:  927:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  928:	    if(DEBUG) {
        -:  929:	      printf("No estate cards in your hand, invalid choice\n");
        -:  930:	      printf("Must gain an estate if there are any\n");
        -:  931:	    }
    #####:  932:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  934:	      state->supplyCount[estate]--;//Decrement estates
    #####:  935:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:		isGameOver(state);
call    0 never executed
        -:  937:	      }
        -:  938:	    }
    #####:  939:	    card_not_discarded = 0;//Exit the loop
        -:  940:	  }
        -:  941:			    
        -:  942:	  else{
    #####:  943:	    p++;//Next card
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:			    
        -:  948:      else{
    #####:  949:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  951:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  952:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:	    isGameOver(state);
call    0 never executed
        -:  954:	  }
        -:  955:	}
        -:  956:      }
        -:  957:	    
        -:  958:      
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case great_hall:
        1:  962:		great_hallCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  963:
        -:  964:    case minion:
        1:  965: 		minionCard(currentPlayer, state, choice1, choice2, handPos);
call    0 returned 100%
        -:  966:
        -:  967:    case steward:
        1:  968:		stewardCard(state, choice1, choice2, choice3, handPos);
call    0 returned 100%
        -:  969:		
        -:  970:    case tribute:
        1:  971:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  972:	if (state->deckCount[nextPlayer] > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  973:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  974:	  state->deckCount[nextPlayer]--;
        -:  975:	}
        1:  976:	else if (state->discardCount[nextPlayer] > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  977:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  978:	  state->discardCount[nextPlayer]--;
        -:  979:	}
        -:  980:	else{
        -:  981:	  //No Card to Reveal
        -:  982:	  if (DEBUG){
        -:  983:	    printf("No cards to reveal\n");
        -:  984:	  }
        -:  985:	}
        -:  986:      }
        -:  987:	    
        -:  988:      else{
    #####:  989:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  990:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  992:	    state->deckCount[nextPlayer]++;
    #####:  993:	    state->discard[nextPlayer][i] = -1;
    #####:  994:	    state->discardCount[nextPlayer]--;
        -:  995:	  }
        -:  996:			    
    #####:  997:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  998:	} 
    #####:  999:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1001:	state->deckCount[nextPlayer]--;
    #####: 1002:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1003:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1004:	state->deckCount[nextPlayer]--;
        -: 1005:      }    
        -: 1006:		       
        1: 1007:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1008:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        1: 1009:	state->playedCardCount++;
        1: 1010:	tributeRevealedCards[1] = -1;
        -: 1011:      }
        -: 1012:
        4: 1013:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1014:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1015:	  state->coins += 2;
        -: 1016:	}
        -: 1017:		    
        3: 1018:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1019:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1020:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1021:	}
        -: 1022:	else{//Action Card
        3: 1023:	  state->numActions = state->numActions + 2;
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        1: 1027:      return 0;
        -: 1028:		
        -: 1029:    case ambassador:
    #####: 1030:      j = 0;		//used to check if player has enough cards to discard
        -: 1031:
    #####: 1032:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1033:	{
    #####: 1034:	  return -1;				
        -: 1035:	}
        -: 1036:
    #####: 1037:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  return -1;
        -: 1040:	}
        -: 1041:
    #####: 1042:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	{
    #####: 1044:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1045:	    {
    #####: 1046:	      j++;
        -: 1047:	    }
        -: 1048:	}
    #####: 1049:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1050:	{
    #####: 1051:	  return -1;				
        -: 1052:	}
        -: 1053:
        -: 1054:      if (DEBUG) 
        -: 1055:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1056:
        -: 1057:      //increase supply count for choosen card by amount being discarded
    #####: 1058:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1059:			
        -: 1060:      //each other player gains a copy of revealed card
    #####: 1061:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1064:	    {
    #####: 1065:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1066:	    }
        -: 1067:	}
        -: 1068:
        -: 1069:      //discard played card from hand
    #####: 1070:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1071:
        -: 1072:      //trash copies of cards returned to supply
    #####: 1073:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
    #####: 1075:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1076:	    {
    #####: 1077:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1078:		{
    #####: 1079:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1080:		  break;
        -: 1081:		}
        -: 1082:	    }
        -: 1083:	}			
        -: 1084:
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case cutpurse:
        -: 1088:
    #####: 1089:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1090:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1093:	    {
    #####: 1094:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1095:		{
    #####: 1096:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1097:		    {
    #####: 1098:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1099:		      break;
        -: 1100:		    }
    #####: 1101:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1102:		    {
    #####: 1103:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1104:			{
        -: 1105:			  if (DEBUG)
        -: 1106:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1107:			}	
    #####: 1108:		      break;
        -: 1109:		    }		
        -: 1110:		}
        -: 1111:					
        -: 1112:	    }
        -: 1113:				
        -: 1114:	}				
        -: 1115:
        -: 1116:      //discard played card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1118:
    #####: 1119:      return 0;
        -: 1120:
        -: 1121:		
        -: 1122:    case embargo: 
        -: 1123:      //+2 Coins
    #####: 1124:      state->coins = state->coins + 2;
        -: 1125:			
        -: 1126:      //see if selected pile is in play
    #####: 1127:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //add embargo token to selected supply pile
    #####: 1133:      state->embargoTokens[choice1]++;
        -: 1134:			
        -: 1135:      //trash card
    #####: 1136:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case outpost:
        -: 1140:      //set outpost flag
    #####: 1141:      state->outpostPlayed++;
        -: 1142:			
        -: 1143:      //discard card
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1145:      return 0;
        -: 1146:		
        -: 1147:    case salvager:
        -: 1148:      //+1 buy
    #####: 1149:      state->numBuys++;
        -: 1150:			
    #####: 1151:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
        -: 1153:	  //gain coins equal to trashed card
    #####: 1154:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1155:	  //trash card
    #####: 1156:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1157:	}
        -: 1158:			
        -: 1159:      //discard card
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case sea_hag:
    #####: 1164:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1165:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1166:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1167:	  state->discardCount[i]++;
    #####: 1168:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1169:	}
        -: 1170:      }
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case treasure_map:
        -: 1174:      //search hand for another treasure_map
    #####: 1175:      index = -1;
    #####: 1176:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1179:	    {
    #####: 1180:	      index = i;
    #####: 1181:	      break;
        -: 1182:	    }
        -: 1183:	}
    #####: 1184:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1185:	{
        -: 1186:	  //trash both treasure cards
    #####: 1187:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1188:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1189:
        -: 1190:	  //gain 4 Gold cards
    #####: 1191:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1192:	    {
    #####: 1193:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1194:	    }
        -: 1195:				
        -: 1196:	  //return success
    #####: 1197:	  return 1;
        -: 1198:	}
        -: 1199:			
        -: 1200:      //no second treasure_map found in hand
    #####: 1201:      return -1;
        -: 1202:    }
        -: 1203:	
    #####: 1204:  return -1;
        -: 1205:}
        -: 1206:
function discardCard called 12 returned 100% blocks executed 89%
       12: 1207:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1208:{
        -: 1209:	
        -: 1210:  //if card is not trashed, added to Played pile 
       12: 1211:  if (trashFlag < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -: 1212:    {
        -: 1213:      //add card to played pile
       10: 1214:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1215:      state->playedCardCount++;
        -: 1216:    }
        -: 1217:	
        -: 1218:  //set played card to -1
       12: 1219:  state->hand[currentPlayer][handPos] = -1;
        -: 1220:	
        -: 1221:  //remove card from player's hand
       12: 1222:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1223:    {
        -: 1224:      //reduce number of cards in hand
        2: 1225:      state->handCount[currentPlayer]--;
        -: 1226:    }
       10: 1227:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1228:    {
        -: 1229:      //reduce number of cards in hand
    #####: 1230:      state->handCount[currentPlayer]--;
        -: 1231:    }
        -: 1232:  else 	
        -: 1233:    {
        -: 1234:      //replace discarded card with last card in hand
       10: 1235:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1236:      //set last card to -1
       10: 1237:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1238:      //reduce number of cards in hand
       10: 1239:      state->handCount[currentPlayer]--;
        -: 1240:    }
        -: 1241:	
       12: 1242:  return 0;
        -: 1243:}
        -: 1244:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1245:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1246:{
        -: 1247:  //Note: supplyPos is enum of choosen card
        -: 1248:	
        -: 1249:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1250:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1251:    {
    #####: 1252:      return -1;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //added card for [whoseTurn] current player:
        -: 1256:  // toFlag = 0 : add to discard
        -: 1257:  // toFlag = 1 : add to deck
        -: 1258:  // toFlag = 2 : add to hand
        -: 1259:
        1: 1260:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1261:    {
    #####: 1262:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1263:      state->deckCount[player]++;
        -: 1264:    }
        1: 1265:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1266:    {
    #####: 1267:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1268:      state->handCount[player]++;
        -: 1269:    }
        -: 1270:  else
        -: 1271:    {
        1: 1272:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1273:      state->discardCount[player]++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //decrease number in supply pile
        1: 1277:  state->supplyCount[supplyPos]--;
        -: 1278:	 
        1: 1279:  return 0;
        -: 1280:}
        -: 1281:
function updateCoins called 14 returned 100% blocks executed 82%
       14: 1282:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1283:{
        -: 1284:  int i;
        -: 1285:	
        -: 1286:  //reset coin count
       14: 1287:  state->coins = 0;
        -: 1288:
        -: 1289:  //add coins for each Treasure card in player's hand
       60: 1290:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -: 1291:    {
       46: 1292:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1293:	{
       30: 1294:	  state->coins += 1;
        -: 1295:	}
       16: 1296:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1297:	{
    #####: 1298:	  state->coins += 2;
        -: 1299:	}
       16: 1300:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1301:	{
    #####: 1302:	  state->coins += 3;
        -: 1303:	}	
        -: 1304:    }	
        -: 1305:
        -: 1306:  //add bonus
       14: 1307:  state->coins += bonus;
        -: 1308:
       14: 1309:  return 0;
        -: 1310:}
        -: 1311:
        -: 1312:
        -: 1313://end of dominion.c
        -: 1314:
