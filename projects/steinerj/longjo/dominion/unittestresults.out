Initializing Game State...

 ******** UNIT TEST: numHandCards() ************

TEST ONE:  Hand Count of Players upon Initialization
Whose turn: 0
************TEST PASSED**************
P1: EXPECTED Hand Count: 5
P1: ACTUAL   Hand Count: 5
P2: EXPECTED Hand Count: 0
P2: ACTUAL   Hand Count: 0
Whose turn: 1
Initializing Game State...

 ******** UNIT TEST: endTurn() ************

TEST ONE:  Check to see current players turn: 
Testing for 4 player(s)...
EXPECTED whoseTurn: 0
  ACTUAL whoseTurn: 0
EXPECTED whoseTurn: 1
  ACTUAL whoseTurn: 1
EXPECTED whoseTurn: 2
  ACTUAL whoseTurn: 2
EXPECTED whoseTurn: 3
  ACTUAL whoseTurn: 3
TEST PASSED...EXPECTED TURN(S) = ACTUAL TURN(s) on ALL TESTS 
******** END TEST ********
Initializing Game State...

 ******** UNIT TEST: updateCoins() ************

Coin State: 4
TEST PASSED
*******************************
EXPECTED COIN VALUE: 44
ACTUAL COIN VALUE: 44
Initializing Game State...

 ******** UNIT TEST: scoreFor() ************

Player's score is: 1
Card is: 4
Card is: 4
Card is: 1
Card is: 4
Card is: 4
Card is: 3
Card is: 3
Card is: 3
Card is: 3
Card is: 3
Player's score is: 30
TEST PASSED
----------------------
EXPECTED SCORE:  30
  ACTUAL SCORE:  30
 ******** VILLAGE TEST by JOSEPH LONG ************

Initializing Game State...

FIRST TEST:  
	Check to see if an additional card was added to their deck...

Current hand Count: 5
Expected hand Count: 5

ADDITIONAL CARD ADDITION / DISGARD PASSED (one drawn/one disgarded
End first Test...
TEST TWO:  ACTION STATE SHOULD BE INCREASED BY TWO...
	Expected a difference of two between pre/post number of Actions.
	PreAction Count: 1
	PostAction Count: 1
TEST FAILED.

FINAL TEST FINISHED
 ******** COUNCIL ROOM TEST by JOSEPH LONG ************

Initializing Game State...

FIRST TEST:  
	FOUR CARDS ADDED?...

Current hand Count: 8
Expected hand Count: 8

PASSED:  Four Cards added
End first Test...
Number of buys is: 1

PASSED:  BUY COUNT INCREASED BY +1, CURRENTLY AT: 2

*******************************************

This test will check that the other player(s) have drawn an additional card.
Expected deckCount of other player: 9
Actual deckCount of other player:   9
PASSED: drawCard() exam

**END UNIT TEST COUNCIL ROOM CARD...
 ******** SMITHY TEST by JOSEPH LONG ************

Initializing Game State...

FIRST TEST:  PLAYER RECEIVED THREE(3) CARDS...
Current hand Count: 7
Expected hand Count: 9

TEST FAILURE.

End first Test...
PreDeck value: 2
PostDeck Value: 0
TEST FAILED....

*******************************************

This test will check the state of other players' attributes.
Expected handCount of other player:      0
Actual handCount of other player:        0

Expected deckCount of other player:      10
Actual deckCount of other player:	     10

Expected disCardCount of other player:   0
Actual discardCount of other player:     0
PASSED: PLAYER STATE...

**END SMITHY CARD TEST...
 ******** ADVENTURER TEST by JOSEPH LONG ************

Initializing Game State...



HANDCOUNT TEST:  ADVENTURER...
----------------------------------------
TEST PASSED:  
----------------------------------------
(PRE)HAND count: 5
(POST)HAND count: 7
Expected difference of two ( 2 ) upward between pre and post.


DECKCOUNT TEST:  ADVENTURER...
----------------------------------------
TEST PASSED:  
----------------------------------------
preDeck: 5
postDeck: 3
Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:0.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:7.77% of 206

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:77.27% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:100.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:0.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:88.71% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

Function 'villageCard'
Lines executed:100.00% of 5

Function 'remodelCard'
Lines executed:0.00% of 10

Function 'councilRoomCard'
Lines executed:100.00% of 9

Function 'adventurerCard'
Lines executed:62.50% of 16

Function 'smithyCard'
Lines executed:100.00% of 5

File 'dominion.c'
Lines executed:34.10% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9://1st Card--smithy..
        1:   10:void smithyCard(int handPos, struct gameState *state, int currentPlayer)
        -:   11:{
        -:   12:	int i;
        -:   13:
        -:   14:	//Bug introduced.....iteration to 6 rather than 3
        7:   15:	for (i = 0; i < 6; i++)
        -:   16:	{
        6:   17:		drawCard(currentPlayer, state);
        -:   18:	}
        -:   19:
        -:   20:	//discard card from hand
        1:   21:	discardCard(handPos, currentPlayer, state, 0);
        -:   22:	//return 0;
        1:   23:}
        -:   24:
        -:   25:
        -:   26://2nd card--adventurer....
        1:   27:void adventurerCard(struct gameState *state, int currentPlayer, int cardDrawn,int drawntreasure, int* temphand, int z)
        -:   28:	
        -:   29:{
        1:   30:	z = 0;
        4:   31:	while (drawntreasure<2) {
        2:   32:		if (state->deckCount[currentPlayer] <1) 
        -:   33:		{//if the deck is empty we need to shuffle discard and add to deck
        -:   34:			
        -:   35:		 //bug introduction
    #####:   36:		 shuffle(currentPlayer, state);
        -:   37:		}
        2:   38:		drawCard(currentPlayer, state);
        2:   39:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        2:   40:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   41:			drawntreasure++;
        -:   42:		else {
    #####:   43:			temphand[z] = cardDrawn;
    #####:   44:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   45:			z++;
        -:   46:		}
        -:   47:	}
        2:   48:	while (z - 1 >= 0) {
    #####:   49:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:   50:		z = z - 1;
        -:   51:	}
        -:   52:	//return 0;
        1:   53:}
        -:   54:
        -:   55:
        -:   56://3rd Card---
        1:   57:void councilRoomCard(int currentPlayer, struct gameState* state, int handPos)
        -:   58:{
        -:   59:	//+4 Cards
        -:   60:	int i;
        5:   61:	for (i = 0; i < 4; i++)
        -:   62:	{
        4:   63:		drawCard(currentPlayer, state);
        -:   64:	}
        -:   65:
        -:   66:	//+1 Buy
        1:   67:	state->numBuys++;
        -:   68:
        -:   69:	//Each other player draws a card
        3:   70:	for (i = 0; i < state->numPlayers; i++)
        -:   71:	{
        2:   72:		if (i != currentPlayer)
        -:   73:		{
        1:   74:			drawCard(i, state);
        -:   75:		}
        -:   76:	}
        -:   77:
        -:   78:	//put played card in played card pile
        1:   79:	discardCard(handPos, currentPlayer, state, 0);
        1:   80:}
        -:   81:
        -:   82:
        -:   83://4th card--------remodel
    #####:   84:void remodelCard(struct gameState* state, int handPos, int currentPlayer, int choice2, int choice1)
        -:   85:{
    #####:   86:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   87:
    #####:   88:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:   89:	{
    #####:   90:		return -1;
        -:   91:	}
        -:   92:
    #####:   93:	gainCard(choice2, state, 0, currentPlayer);
        -:   94:
        -:   95:	//discard card from hand
    #####:   96:	discardCard(handPos, currentPlayer, state, 0);
        -:   97:
        -:   98:	//discard trashed card
        -:   99:	int i;
    #####:  100:	for ( i = 0; i < state->handCount[currentPlayer]; i++)
        -:  101:	{
    #####:  102:		if (state->hand[currentPlayer][i] == j)
        -:  103:		{
    #####:  104:			discardCard(i, currentPlayer, state, 0);
        -:  105:			
        -:  106:			
    #####:  107:			break;
        -:  108:		}
        -:  109:	}
        -:  110:}
        -:  111:
        -:  112:
        -:  113://5th card---Village
        1:  114:void villageCard(struct gameState* state, int handPos, int currentPlayer)
        -:  115:{
        1:  116:	drawCard(currentPlayer, state);
        -:  117:
        -:  118:	//+2 Actions
        -:  119:
        -:  120:
        -:  121:	// 2/1/2017, remove bug for code understanding...
        -:  122:	//Introduce bug here....
        1:  123:	state->numActions = state->numActions++;
        -:  124:
        -:  125:	//working code....
        -:  126:	//state->numActions = state->numActions + 2;
        -:  127:
        -:  128:	//discard played card from hand
        1:  129:	discardCard(handPos, currentPlayer, state, 0);
        -:  130:
        -:  131:
        -:  132:
        -:  133:
        -:  134:
        -:  135:
        1:  136:}
        -:  137:
        -:  138:
        -:  139:
        -:  140:
      330:  141:int compare(const void* a, const void* b) {
      330:  142:  if (*(int*)a > *(int*)b)
    #####:  143:    return 1;
      330:  144:  if (*(int*)a < *(int*)b)
       88:  145:    return -1;
      242:  146:  return 0;
        -:  147:}
        -:  148:
    #####:  149:struct gameState* newGame() {
    #####:  150:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  151:  return g;
        -:  152:}
        -:  153:
    #####:  154:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  155:		  int k8, int k9, int k10) {
    #####:  156:  int* k = malloc(10 * sizeof(int));
    #####:  157:  k[0] = k1;
    #####:  158:  k[1] = k2;
    #####:  159:  k[2] = k3;
    #####:  160:  k[3] = k4;
    #####:  161:  k[4] = k5;
    #####:  162:  k[5] = k6;
    #####:  163:  k[6] = k7;
    #####:  164:  k[7] = k8;
    #####:  165:  k[8] = k9;
    #####:  166:  k[9] = k10;
    #####:  167:  return k;
        -:  168:}
        -:  169:
        8:  170:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  171:		   struct gameState *state) {
        -:  172:
        -:  173:  int i;
        -:  174:  int j;
        -:  175:  int it;			
        -:  176:  //set up random number generator
        8:  177:  SelectStream(1);
        8:  178:  PutSeed((long)randomSeed);
        -:  179:  
        -:  180:  //check number of players
        8:  181:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  182:    {
    #####:  183:      return -1;
        -:  184:    }
        -:  185:
        -:  186:  //set number of players
        8:  187:  state->numPlayers = numPlayers;
        -:  188:
        -:  189:  //check selected kingdom cards are different
       88:  190:  for (i = 0; i < 10; i++)
        -:  191:    {
      880:  192:      for (j = 0; j < 10; j++)
        -:  193:        {
      800:  194:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  195:	    {
    #####:  196:	      return -1;
        -:  197:	    }
        -:  198:        }
        -:  199:    }
        -:  200:
        -:  201:
        -:  202:  //initialize supply
        -:  203:  ///////////////////////////////
        -:  204:
        -:  205:  //set number of Curse cards
        8:  206:  if (numPlayers == 2)
        -:  207:    {
        5:  208:      state->supplyCount[curse] = 10;
        -:  209:    }
        3:  210:  else if (numPlayers == 3)
        -:  211:    {
    #####:  212:      state->supplyCount[curse] = 20;
        -:  213:    }
        -:  214:  else
        -:  215:    {
        3:  216:      state->supplyCount[curse] = 30;
        -:  217:    }
        -:  218:
        -:  219:  //set number of Victory cards
        8:  220:  if (numPlayers == 2)
        -:  221:    {
        5:  222:      state->supplyCount[estate] = 8;
        5:  223:      state->supplyCount[duchy] = 8;
        5:  224:      state->supplyCount[province] = 8;
        -:  225:    }
        -:  226:  else
        -:  227:    {
        3:  228:      state->supplyCount[estate] = 12;
        3:  229:      state->supplyCount[duchy] = 12;
        3:  230:      state->supplyCount[province] = 12;
        -:  231:    }
        -:  232:
        -:  233:  //set number of Treasure cards
        8:  234:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  235:  state->supplyCount[silver] = 40;
        8:  236:  state->supplyCount[gold] = 30;
        -:  237:
        -:  238:  //set number of Kingdom cards
      168:  239:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  240:    {
     1320:  241:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  242:	{
     1240:  243:	  if (kingdomCards[j] == i)
        -:  244:	    {
        -:  245:	      //check if card is a 'Victory' Kingdom card
       80:  246:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  247:		{
    #####:  248:		  if (numPlayers == 2){ 
    #####:  249:		    state->supplyCount[i] = 8; 
        -:  250:		  }
    #####:  251:		  else{ state->supplyCount[i] = 12; }
        -:  252:		}
        -:  253:	      else
        -:  254:		{
       80:  255:		  state->supplyCount[i] = 10;
        -:  256:		}
       80:  257:	      break;
        -:  258:	    }
        -:  259:	  else    //card is not in the set choosen for the game
        -:  260:	    {
     1160:  261:	      state->supplyCount[i] = -1;
        -:  262:	    }
        -:  263:	}
        -:  264:
        -:  265:    }
        -:  266:
        -:  267:  ////////////////////////
        -:  268:  //supply intilization complete
        -:  269:
        -:  270:  //set player decks
       30:  271:  for (i = 0; i < numPlayers; i++)
        -:  272:    {
       22:  273:      state->deckCount[i] = 0;
       88:  274:      for (j = 0; j < 3; j++)
        -:  275:	{
       66:  276:	  state->deck[i][j] = estate;
       66:  277:	  state->deckCount[i]++;
        -:  278:	}
      176:  279:      for (j = 3; j < 10; j++)
        -:  280:	{
      154:  281:	  state->deck[i][j] = copper;
      154:  282:	  state->deckCount[i]++;		
        -:  283:	}
        -:  284:    }
        -:  285:
        -:  286:  //shuffle player decks
       30:  287:  for (i = 0; i < numPlayers; i++)
        -:  288:    {
       22:  289:      if ( shuffle(i, state) < 0 )
        -:  290:	{
    #####:  291:	  return -1;
        -:  292:	}
        -:  293:    }
        -:  294:
        -:  295:  //draw player hands
       30:  296:  for (i = 0; i < numPlayers; i++)
        -:  297:    {  
        -:  298:      //initialize hand size to zero
       22:  299:      state->handCount[i] = 0;
       22:  300:      state->discardCount[i] = 0;
        -:  301:      //draw 5 cards
        -:  302:      // for (j = 0; j < 5; j++)
        -:  303:      //	{
        -:  304:      //	  drawCard(i, state);
        -:  305:      //	}
        -:  306:    }
        -:  307:  
        -:  308:  //set embargo tokens to 0 for all supply piles
      224:  309:  for (i = 0; i <= treasure_map; i++)
        -:  310:    {
      216:  311:      state->embargoTokens[i] = 0;
        -:  312:    }
        -:  313:
        -:  314:  //initialize first player's turn
        8:  315:  state->outpostPlayed = 0;
        8:  316:  state->phase = 0;
        8:  317:  state->numActions = 1;
        8:  318:  state->numBuys = 1;
        8:  319:  state->playedCardCount = 0;
        8:  320:  state->whoseTurn = 0;
        8:  321:  state->handCount[state->whoseTurn] = 0;
        -:  322:  //int it; move to top
        -:  323:
        -:  324:  //Moved draw cards to here, only drawing at the start of a turn
       48:  325:  for (it = 0; it < 5; it++){
       40:  326:    drawCard(state->whoseTurn, state);
        -:  327:  }
        -:  328:
        8:  329:  updateCoins(state->whoseTurn, state, 0);
        -:  330:
        8:  331:  return 0;
        -:  332:}
        -:  333:
       23:  334:int shuffle(int player, struct gameState *state) {
        -:  335: 
        -:  336:
        -:  337:  int newDeck[MAX_DECK];
       23:  338:  int newDeckPos = 0;
        -:  339:  int card;
        -:  340:  int i;
        -:  341:
       23:  342:  if (state->deckCount[player] < 1)
        1:  343:    return -1;
       22:  344:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  345:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  346:
      264:  347:  while (state->deckCount[player] > 0) {
      220:  348:    card = floor(Random() * state->deckCount[player]);
      220:  349:    newDeck[newDeckPos] = state->deck[player][card];
      220:  350:    newDeckPos++;
      767:  351:    for (i = card; i < state->deckCount[player]-1; i++) {
      547:  352:      state->deck[player][i] = state->deck[player][i+1];
        -:  353:    }
      220:  354:    state->deckCount[player]--;
        -:  355:  }
      242:  356:  for (i = 0; i < newDeckPos; i++) {
      220:  357:    state->deck[player][i] = newDeck[i];
      220:  358:    state->deckCount[player]++;
        -:  359:  }
        -:  360:
       22:  361:  return 0;
        -:  362:}
        -:  363:
    #####:  364:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  365:{	
        -:  366:  int card;
    #####:  367:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  368:
        -:  369:  //check if it is the right phase
    #####:  370:  if (state->phase != 0)
        -:  371:    {
    #####:  372:      return -1;
        -:  373:    }
        -:  374:	
        -:  375:  //check if player has enough actions
    #####:  376:  if ( state->numActions < 1 )
        -:  377:    {
    #####:  378:      return -1;
        -:  379:    }
        -:  380:	
        -:  381:  //get card played
    #####:  382:  card = handCard(handPos, state);
        -:  383:	
        -:  384:  //check if selected card is an action
    #####:  385:  if ( card < adventurer || card > treasure_map )
        -:  386:    {
    #####:  387:      return -1;
        -:  388:    }
        -:  389:	
        -:  390:  //play card
    #####:  391:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  392:    {
    #####:  393:      return -1;
        -:  394:    }
        -:  395:	
        -:  396:  //reduce number of actions
    #####:  397:  state->numActions--;
        -:  398:
        -:  399:  //update coins (Treasure cards may be added with card draws)
    #####:  400:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  401:	
    #####:  402:  return 0;
        -:  403:}
        -:  404:
    #####:  405:int buyCard(int supplyPos, struct gameState *state) {
        -:  406:  int who;
        -:  407:  if (DEBUG){
        -:  408:    printf("Entering buyCard...\n");
        -:  409:  }
        -:  410:
        -:  411:  // I don't know what to do about the phase thing.
        -:  412:
    #####:  413:  who = state->whoseTurn;
        -:  414:
    #####:  415:  if (state->numBuys < 1){
        -:  416:    if (DEBUG)
        -:  417:      printf("You do not have any buys left\n");
    #####:  418:    return -1;
    #####:  419:  } else if (supplyCount(supplyPos, state) <1){
        -:  420:    if (DEBUG)
        -:  421:      printf("There are not any of that type of card left\n");
    #####:  422:    return -1;
    #####:  423:  } else if (state->coins < getCost(supplyPos)){
        -:  424:    if (DEBUG) 
        -:  425:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  426:    return -1;
        -:  427:  } else {
    #####:  428:    state->phase=1;
        -:  429:    //state->supplyCount[supplyPos]--;
    #####:  430:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  431:  
    #####:  432:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  433:    state->numBuys--;
        -:  434:    if (DEBUG)
        -:  435:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  436:  }
        -:  437:
        -:  438:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  439:  //state->discardCount[who]++;
        -:  440:    
    #####:  441:  return 0;
        -:  442:}
        -:  443:
    #####:  444:int numHandCards(struct gameState *state) {
    #####:  445:  return state->handCount[ whoseTurn(state) ];
        -:  446:}
        -:  447:
    #####:  448:int handCard(int handPos, struct gameState *state) {
    #####:  449:  int currentPlayer = whoseTurn(state);
    #####:  450:  return state->hand[currentPlayer][handPos];
        -:  451:}
        -:  452:
    #####:  453:int supplyCount(int card, struct gameState *state) {
    #####:  454:  return state->supplyCount[card];
        -:  455:}
        -:  456:
    #####:  457:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  458:  int i;
    #####:  459:  int count = 0;
        -:  460:
    #####:  461:  for (i = 0; i < state->deckCount[player]; i++)
        -:  462:    {
    #####:  463:      if (state->deck[player][i] == card) count++;
        -:  464:    }
        -:  465:
    #####:  466:  for (i = 0; i < state->handCount[player]; i++)
        -:  467:    {
    #####:  468:      if (state->hand[player][i] == card) count++;
        -:  469:    }
        -:  470:
    #####:  471:  for (i = 0; i < state->discardCount[player]; i++)
        -:  472:    {
    #####:  473:      if (state->discard[player][i] == card) count++;
        -:  474:    }
        -:  475:
    #####:  476:  return count;
        -:  477:}
        -:  478:
        9:  479:int whoseTurn(struct gameState *state) {
        9:  480:  return state->whoseTurn;
        -:  481:}
        -:  482:
        5:  483:int endTurn(struct gameState *state) {
        -:  484:  int k;
        -:  485:  int i;
        5:  486:  int currentPlayer = whoseTurn(state);
        -:  487:  
        -:  488:  //Discard hand
       30:  489:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       25:  490:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  491:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  492:  }
        5:  493:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  494:    
        -:  495:  //Code for determining the player
        5:  496:  if (currentPlayer < (state->numPlayers - 1)){ 
        4:  497:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  498:  }
        -:  499:  else{
        1:  500:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  501:  }
        -:  502:
        5:  503:  state->outpostPlayed = 0;
        5:  504:  state->phase = 0;
        5:  505:  state->numActions = 1;
        5:  506:  state->coins = 0;
        5:  507:  state->numBuys = 1;
        5:  508:  state->playedCardCount = 0;
        5:  509:  state->handCount[state->whoseTurn] = 0;
        -:  510:
        -:  511:  //int k; move to top
        -:  512:  //Next player draws hand
       30:  513:  for (k = 0; k < 5; k++){
       25:  514:    drawCard(state->whoseTurn, state);//Draw a card
        -:  515:  }
        -:  516:
        -:  517:  //Update money
        5:  518:  updateCoins(state->whoseTurn, state , 0);
        -:  519:
        5:  520:  return 0;
        -:  521:}
        -:  522:
    #####:  523:int isGameOver(struct gameState *state) {
        -:  524:  int i;
        -:  525:  int j;
        -:  526:	
        -:  527:  //if stack of Province cards is empty, the game ends
    #####:  528:  if (state->supplyCount[province] == 0)
        -:  529:    {
    #####:  530:      return 1;
        -:  531:    }
        -:  532:
        -:  533:  //if three supply pile are at 0, the game ends
    #####:  534:  j = 0;
    #####:  535:  for (i = 0; i < 25; i++)
        -:  536:    {
    #####:  537:      if (state->supplyCount[i] == 0)
        -:  538:	{
    #####:  539:	  j++;
        -:  540:	}
        -:  541:    }
    #####:  542:  if ( j >= 3)
        -:  543:    {
    #####:  544:      return 1;
        -:  545:    }
        -:  546:
    #####:  547:  return 0;
        -:  548:}
        -:  549:
        2:  550:int scoreFor (int player, struct gameState *state) {
        -:  551:
        -:  552:  int i;
        2:  553:  int score = 0;
        -:  554:  //score from hand
       12:  555:  for (i = 0; i < state->handCount[player]; i++)
        -:  556:    {
       10:  557:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  558:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  559:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  560:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  561:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  562:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  563:    }
        -:  564:
        -:  565:  //score from discard
        2:  566:  for (i = 0; i < state->discardCount[player]; i++)
        -:  567:    {
    #####:  568:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  569:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  570:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  571:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  572:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  573:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  574:    }
        -:  575:
        -:  576:  //score from deck
        2:  577:  for (i = 0; i < state->discardCount[player]; i++)
        -:  578:    {
    #####:  579:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  580:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  581:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  582:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  583:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  584:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  585:    }
        -:  586:
        2:  587:  return score;
        -:  588:}
        -:  589:
    #####:  590:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  591:  int i;	
        -:  592:  int j;
        -:  593:  int highScore;
        -:  594:  int currentPlayer;
        -:  595:
        -:  596:  //get score for each player
    #####:  597:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  598:    {
        -:  599:      //set unused player scores to -9999
    #####:  600:      if (i >= state->numPlayers)
        -:  601:	{
    #####:  602:	  players[i] = -9999;
        -:  603:	}
        -:  604:      else
        -:  605:	{
    #####:  606:	  players[i] = scoreFor (i, state);
        -:  607:	}
        -:  608:    }
        -:  609:
        -:  610:  //find highest score
    #####:  611:  j = 0;
    #####:  612:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  613:    {
    #####:  614:      if (players[i] > players[j])
        -:  615:	{
    #####:  616:	  j = i;
        -:  617:	}
        -:  618:    }
    #####:  619:  highScore = players[j];
        -:  620:
        -:  621:  //add 1 to players who had less turns
    #####:  622:  currentPlayer = whoseTurn(state);
    #####:  623:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  624:    {
    #####:  625:      if ( players[i] == highScore && i > currentPlayer )
        -:  626:	{
    #####:  627:	  players[i]++;
        -:  628:	}
        -:  629:    }
        -:  630:
        -:  631:  //find new highest score
    #####:  632:  j = 0;
    #####:  633:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  634:    {
    #####:  635:      if ( players[i] > players[j] )
        -:  636:	{
    #####:  637:	  j = i;
        -:  638:	}
        -:  639:    }
    #####:  640:  highScore = players[j];
        -:  641:
        -:  642:  //set winners in array to 1 and rest to 0
    #####:  643:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  644:    {
    #####:  645:      if ( players[i] == highScore )
        -:  646:	{
    #####:  647:	  players[i] = 1;
        -:  648:	}
        -:  649:      else
        -:  650:	{
    #####:  651:	  players[i] = 0;
        -:  652:	}
        -:  653:    }
        -:  654:
    #####:  655:  return 0;
        -:  656:}
        -:  657:
       79:  658:int drawCard(int player, struct gameState *state)
        -:  659:{	int count;
        -:  660:  int deckCounter;
       79:  661:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  662:    
        -:  663:    //Step 1 Shuffle the discard pile back into a deck
        -:  664:    int i;
        -:  665:    //Move discard to deck
        1:  666:    for (i = 0; i < state->discardCount[player];i++){
    #####:  667:      state->deck[player][i] = state->discard[player][i];
    #####:  668:      state->discard[player][i] = -1;
        -:  669:    }
        -:  670:
        1:  671:    state->deckCount[player] = state->discardCount[player];
        1:  672:    state->discardCount[player] = 0;//Reset discard
        -:  673:
        -:  674:    //Shufffle the deck
        1:  675:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  676:   
        -:  677:    if (DEBUG){//Debug statements
        -:  678:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  679:    }
        -:  680:    
        1:  681:    state->discardCount[player] = 0;
        -:  682:
        -:  683:    //Step 2 Draw Card
        1:  684:    count = state->handCount[player];//Get current player's hand count
        -:  685:    
        -:  686:    if (DEBUG){//Debug statements
        -:  687:      printf("Current hand count: %d\n", count);
        -:  688:    }
        -:  689:    
        1:  690:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  691:
        1:  692:    if (deckCounter == 0)
        1:  693:      return -1;
        -:  694:
    #####:  695:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  696:    state->deckCount[player]--;
    #####:  697:    state->handCount[player]++;//Increment hand count
        -:  698:  }
        -:  699:
        -:  700:  else{
       78:  701:    int count = state->handCount[player];//Get current hand count for player
        -:  702:    int deckCounter;
        -:  703:    if (DEBUG){//Debug statements
        -:  704:      printf("Current hand count: %d\n", count);
        -:  705:    }
        -:  706:
       78:  707:    deckCounter = state->deckCount[player];//Create holder for the deck count
       78:  708:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       78:  709:    state->deckCount[player]--;
       78:  710:    state->handCount[player]++;//Increment hand count
        -:  711:  }
        -:  712:
       78:  713:  return 0;
        -:  714:}
        -:  715:
    #####:  716:int getCost(int cardNumber)
        -:  717:{
    #####:  718:  switch( cardNumber ) 
        -:  719:    {
        -:  720:    case curse:
    #####:  721:      return 0;
        -:  722:    case estate:
    #####:  723:      return 2;
        -:  724:    case duchy:
    #####:  725:      return 5;
        -:  726:    case province:
    #####:  727:      return 8;
        -:  728:    case copper:
    #####:  729:      return 0;
        -:  730:    case silver:
    #####:  731:      return 3;
        -:  732:    case gold:
    #####:  733:      return 6;
        -:  734:    case adventurer:
    #####:  735:      return 6;
        -:  736:    case council_room:
    #####:  737:      return 5;
        -:  738:    case feast:
    #####:  739:      return 4;
        -:  740:    case gardens:
    #####:  741:      return 4;
        -:  742:    case mine:
    #####:  743:      return 5;
        -:  744:    case remodel:
    #####:  745:      return 4;
        -:  746:    case smithy:
    #####:  747:      return 4;
        -:  748:    case village:
    #####:  749:      return 3;
        -:  750:    case baron:
    #####:  751:      return 4;
        -:  752:    case great_hall:
    #####:  753:      return 3;
        -:  754:    case minion:
    #####:  755:      return 5;
        -:  756:    case steward:
    #####:  757:      return 3;
        -:  758:    case tribute:
    #####:  759:      return 5;
        -:  760:    case ambassador:
    #####:  761:      return 3;
        -:  762:    case cutpurse:
    #####:  763:      return 4;
        -:  764:    case embargo: 
    #####:  765:      return 2;
        -:  766:    case outpost:
    #####:  767:      return 5;
        -:  768:    case salvager:
    #####:  769:      return 4;
        -:  770:    case sea_hag:
    #####:  771:      return 4;
        -:  772:    case treasure_map:
    #####:  773:      return 4;
        -:  774:    }
        -:  775:	
    #####:  776:  return -1;
        -:  777:}
        -:  778:
        4:  779:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  780:{
        -:  781:  int i;
        -:  782:  int j;
        -:  783:  int k;
        -:  784:  int x;
        -:  785:  int index;
        4:  786:  int currentPlayer = whoseTurn(state);
        4:  787:  int nextPlayer = currentPlayer + 1;
        -:  788:
        4:  789:  int tributeRevealedCards[2] = {-1, -1};
        -:  790:  int temphand[MAX_HAND];// moved above the if statement
        4:  791:  int drawntreasure=0;
        -:  792:  int cardDrawn;
        4:  793:  int z = 0;// this is the counter for the temp hand
        4:  794:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  795:    nextPlayer = 0;
        -:  796:  }
        -:  797:  
        -:  798:	
        -:  799:  //uses switch to select card and perform actions
        4:  800:  switch( card ) 
        -:  801:    {
        -:  802:
        -:  803:
        -:  804:
        -:  805:
        -:  806:
        -:  807:    case adventurer:
        1:  808:		adventurerCard(state, currentPlayer, cardDrawn, drawntreasure, temphand, z);
        1:  809:		return 0;
        -:  810:
        -:  811:		/*
        -:  812:		
        -:  813:      while(drawntreasure<2){
        -:  814:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  815:	  shuffle(currentPlayer, state);
        -:  816:	}
        -:  817:	drawCard(currentPlayer, state);
        -:  818:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  819:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  820:	  drawntreasure++;
        -:  821:	else{
        -:  822:	  temphand[z]=cardDrawn;
        -:  823:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  824:	  z++;
        -:  825:	}
        -:  826:      }
        -:  827:      while(z-1>=0){
        -:  828:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  829:	z=z-1;
        -:  830:      }
        -:  831:      return 0;
        -:  832:		
        -:  833:	  //adventurerCard(struct gameState* state, int current
        -:  834:
        -:  835:	  */
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:    case council_room:
        1:  841:		councilRoomCard(currentPlayer, state, handPos);
        1:  842:			return 0;
        -:  843:		/*
        -:  844:      //+4 Cards
        -:  845:      for (i = 0; i < 4; i++)
        -:  846:	{
        -:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:			
        -:  850:      //+1 Buy
        -:  851:      state->numBuys++;
        -:  852:			
        -:  853:      //Each other player draws a card
        -:  854:      for (i = 0; i < state->numPlayers; i++)
        -:  855:	{
        -:  856:	  if ( i != currentPlayer )
        -:  857:	    {
        -:  858:	      drawCard(i, state);
        -:  859:	    }
        -:  860:	}
        -:  861:			
        -:  862:      //put played card in played card pile
        -:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:		
        -:  865:
        -:  866:
        -:  867:
        -:  868:
        -:  869:
        -:  870:
        -:  871:      return 0;
        -:  872:			*/
        -:  873:    case feast:
        -:  874:      //gain card with cost up to 5
        -:  875:      //Backup hand
    #####:  876:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  877:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  878:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  879:      }
        -:  880:      //Backup hand
        -:  881:
        -:  882:      //Update Coins for Buy
    #####:  883:      updateCoins(currentPlayer, state, 5);
    #####:  884:      x = 1;//Condition to loop on
    #####:  885:      while( x == 1) {//Buy one card
    #####:  886:	if (supplyCount(choice1, state) <= 0){
        -:  887:	  if (DEBUG)
        -:  888:	    printf("None of that card left, sorry!\n");
        -:  889:
        -:  890:	  if (DEBUG){
        -:  891:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  892:	  }
        -:  893:	}
    #####:  894:	else if (state->coins < getCost(choice1)){
    #####:  895:	  printf("That card is too expensive!\n");
        -:  896:
        -:  897:	  if (DEBUG){
        -:  898:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  899:	  }
        -:  900:	}
        -:  901:	else{
        -:  902:
        -:  903:	  if (DEBUG){
        -:  904:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  905:	  }
        -:  906:
    #####:  907:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  908:	  x = 0;//No more buying cards
        -:  909:
        -:  910:	  if (DEBUG){
        -:  911:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  912:	  }
        -:  913:
        -:  914:	}
        -:  915:      }     
        -:  916:
        -:  917:      //Reset Hand
    #####:  918:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  919:	state->hand[currentPlayer][i] = temphand[i];
    #####:  920:	temphand[i] = -1;
        -:  921:      }
        -:  922:      //Reset Hand
        -:  923:      			
    #####:  924:      return 0;
        -:  925:			
        -:  926:    case gardens:
    #####:  927:      return -1;
        -:  928:			
        -:  929:    case mine:
    #####:  930:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  931:
    #####:  932:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:		
    #####:  937:      if (choice2 > treasure_map || choice2 < curse)
        -:  938:	{
    #####:  939:	  return -1;
        -:  940:	}
        -:  941:
    #####:  942:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  943:	{
    #####:  944:	  return -1;
        -:  945:	}
        -:  946:
    #####:  947:      gainCard(choice2, state, 2, currentPlayer);
        -:  948:
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
        -:  951:
        -:  952:      //discard trashed card
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (state->hand[currentPlayer][i] == j)
        -:  956:	    {
    #####:  957:	      discardCard(i, currentPlayer, state, 0);			
    #####:  958:	      break;
        -:  959:	    }
        -:  960:	}
        -:  961:			
    #####:  962:      return 0;
        -:  963:			
        -:  964:    case remodel:
    #####:  965:		remodelCard(state, handPos, currentPlayer, choice2, choice1);
    #####:  966:		return 0;
        -:  967:
        -:  968:		/*
        -:  969:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  970:
        -:  971:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  972:	{
        -:  973:	  return -1;
        -:  974:	}
        -:  975:
        -:  976:      gainCard(choice2, state, 0, currentPlayer);
        -:  977:
        -:  978:      //discard card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:
        -:  981:      //discard trashed card
        -:  982:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  983:	{
        -:  984:	  if (state->hand[currentPlayer][i] == j)
        -:  985:	    {
        -:  986:	      discardCard(i, currentPlayer, state, 0);			
        -:  987:	      break;
        -:  988:	    }
        -:  989:	}
        -:  990:
        -:  991:
        -:  992:      return 0;
        -:  993:*/
        -:  994:    case smithy:
        1:  995:		smithyCard(handPos, state, currentPlayer);
        1:  996:		return 0;
        -:  997:
        -:  998:/*
        -:  999:      //+3 Cards
        -: 1000:      for (i = 0; i < 3; i++)
        -: 1001:	{
        -: 1002:	  drawCard(currentPlayer, state);
        -: 1003:	}
        -: 1004:			
        -: 1005:      //discard card from hand
        -: 1006:      discardCard(handPos, currentPlayer, state, 0);
        -: 1007:      return 0;
        -: 1008:*/		
        -: 1009:    case village:
        1: 1010:		villageCard(state, handPos, currentPlayer);
        1: 1011:		return 0;
        -: 1012:/*
        -: 1013:      //+1 Card
        -: 1014:      drawCard(currentPlayer, state);
        -: 1015:			
        -: 1016:      //+2 Actions
        -: 1017:      state->numActions = state->numActions + 2;
        -: 1018:			
        -: 1019:      //discard played card from hand
        -: 1020:      discardCard(handPos, currentPlayer, state, 0);
        -: 1021:      return 0;
        -: 1022:*/		
        -: 1023:    case baron:
    #####: 1024:      state->numBuys++;//Increase buys by 1!
    #####: 1025:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1026:	int p = 0;//Iterator for hand!
    #####: 1027:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1028:	while(card_not_discarded){
    #####: 1029:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1030:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1031:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1032:	    state->discardCount[currentPlayer]++;
    #####: 1033:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1034:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1035:	    }
    #####: 1036:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1037:	    state->handCount[currentPlayer]--;
    #####: 1038:	    card_not_discarded = 0;//Exit the loop
        -: 1039:	  }
    #####: 1040:	  else if (p > state->handCount[currentPlayer]){
        -: 1041:	    if(DEBUG) {
        -: 1042:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1043:	      printf("Must gain an estate if there are any\n");
        -: 1044:	    }
    #####: 1045:	    if (supplyCount(estate, state) > 0){
    #####: 1046:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1047:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1048:	      if (supplyCount(estate, state) == 0){
    #####: 1049:		isGameOver(state);
        -: 1050:	      }
        -: 1051:	    }
    #####: 1052:	    card_not_discarded = 0;//Exit the loop
        -: 1053:	  }
        -: 1054:			    
        -: 1055:	  else{
    #####: 1056:	    p++;//Next card
        -: 1057:	  }
        -: 1058:	}
        -: 1059:      }
        -: 1060:			    
        -: 1061:      else{
    #####: 1062:	if (supplyCount(estate, state) > 0){
    #####: 1063:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1064:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1065:	  if (supplyCount(estate, state) == 0){
    #####: 1066:	    isGameOver(state);
        -: 1067:	  }
        -: 1068:	}
        -: 1069:      }
        -: 1070:	    
        -: 1071:      
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case great_hall:
        -: 1075:      //+1 Card
    #####: 1076:      drawCard(currentPlayer, state);
        -: 1077:			
        -: 1078:      //+1 Actions
    #####: 1079:      state->numActions++;
        -: 1080:			
        -: 1081:      //discard card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case minion:
        -: 1086:      //+1 action
    #####: 1087:      state->numActions++;
        -: 1088:			
        -: 1089:      //discard card from hand
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);
        -: 1091:			
    #####: 1092:      if (choice1)		//+2 coins
        -: 1093:	{
    #####: 1094:	  state->coins = state->coins + 2;
        -: 1095:	}
        -: 1096:			
    #####: 1097:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1098:	{
        -: 1099:	  //discard hand
    #####: 1100:	  while(numHandCards(state) > 0)
        -: 1101:	    {
    #####: 1102:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1103:	    }
        -: 1104:				
        -: 1105:	  //draw 4
    #####: 1106:	  for (i = 0; i < 4; i++)
        -: 1107:	    {
    #####: 1108:	      drawCard(currentPlayer, state);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //other players discard hand and redraw if hand size > 4
    #####: 1112:	  for (i = 0; i < state->numPlayers; i++)
        -: 1113:	    {
    #####: 1114:	      if (i != currentPlayer)
        -: 1115:		{
    #####: 1116:		  if ( state->handCount[i] > 4 )
        -: 1117:		    {
        -: 1118:		      //discard hand
    #####: 1119:		      while( state->handCount[i] > 0 )
        -: 1120:			{
    #####: 1121:			  discardCard(handPos, i, state, 0);
        -: 1122:			}
        -: 1123:							
        -: 1124:		      //draw 4
    #####: 1125:		      for (j = 0; j < 4; j++)
        -: 1126:			{
    #####: 1127:			  drawCard(i, state);
        -: 1128:			}
        -: 1129:		    }
        -: 1130:		}
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case steward:
    #####: 1137:      if (choice1 == 1)
        -: 1138:	{
        -: 1139:	  //+2 cards
    #####: 1140:	  drawCard(currentPlayer, state);
    #####: 1141:	  drawCard(currentPlayer, state);
        -: 1142:	}
    #####: 1143:      else if (choice1 == 2)
        -: 1144:	{
        -: 1145:	  //+2 coins
    #####: 1146:	  state->coins = state->coins + 2;
        -: 1147:	}
        -: 1148:      else
        -: 1149:	{
        -: 1150:	  //trash 2 cards in hand
    #####: 1151:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1152:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1153:	}
        -: 1154:			
        -: 1155:      //discard card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1157:      return 0;
        -: 1158:		
        -: 1159:    case tribute:
    #####: 1160:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1161:	if (state->deckCount[nextPlayer] > 0){
    #####: 1162:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1163:	  state->deckCount[nextPlayer]--;
        -: 1164:	}
    #####: 1165:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1166:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1167:	  state->discardCount[nextPlayer]--;
        -: 1168:	}
        -: 1169:	else{
        -: 1170:	  //No Card to Reveal
        -: 1171:	  if (DEBUG){
        -: 1172:	    printf("No cards to reveal\n");
        -: 1173:	  }
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
        -: 1177:      else{
    #####: 1178:	if (state->deckCount[nextPlayer] == 0){
    #####: 1179:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1180:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1181:	    state->deckCount[nextPlayer]++;
    #####: 1182:	    state->discard[nextPlayer][i] = -1;
    #####: 1183:	    state->discardCount[nextPlayer]--;
        -: 1184:	  }
        -: 1185:			    
    #####: 1186:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1187:	} 
    #####: 1188:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1189:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:	state->deckCount[nextPlayer]--;
    #####: 1191:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1192:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:	state->deckCount[nextPlayer]--;
        -: 1194:      }    
        -: 1195:		       
    #####: 1196:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1197:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1198:	state->playedCardCount++;
    #####: 1199:	tributeRevealedCards[1] = -1;
        -: 1200:      }
        -: 1201:
    #####: 1202:      for (i = 0; i <= 2; i ++){
    #####: 1203:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1204:	  state->coins += 2;
        -: 1205:	}
        -: 1206:		    
    #####: 1207:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1208:	  drawCard(currentPlayer, state);
    #####: 1209:	  drawCard(currentPlayer, state);
        -: 1210:	}
        -: 1211:	else{//Action Card
    #####: 1212:	  state->numActions = state->numActions + 2;
        -: 1213:	}
        -: 1214:      }
        -: 1215:	    
    #####: 1216:      return 0;
        -: 1217:		
        -: 1218:    case ambassador:
    #####: 1219:      j = 0;		//used to check if player has enough cards to discard
        -: 1220:
    #####: 1221:      if (choice2 > 2 || choice2 < 0)
        -: 1222:	{
    #####: 1223:	  return -1;				
        -: 1224:	}
        -: 1225:
    #####: 1226:      if (choice1 == handPos)
        -: 1227:	{
    #####: 1228:	  return -1;
        -: 1229:	}
        -: 1230:
    #####: 1231:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1232:	{
    #####: 1233:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1234:	    {
    #####: 1235:	      j++;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (j < choice2)
        -: 1239:	{
    #####: 1240:	  return -1;				
        -: 1241:	}
        -: 1242:
        -: 1243:      if (DEBUG) 
        -: 1244:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1245:
        -: 1246:      //increase supply count for choosen card by amount being discarded
    #####: 1247:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1248:			
        -: 1249:      //each other player gains a copy of revealed card
    #####: 1250:      for (i = 0; i < state->numPlayers; i++)
        -: 1251:	{
    #####: 1252:	  if (i != currentPlayer)
        -: 1253:	    {
    #####: 1254:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1255:	    }
        -: 1256:	}
        -: 1257:
        -: 1258:      //discard played card from hand
    #####: 1259:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1260:
        -: 1261:      //trash copies of cards returned to supply
    #####: 1262:      for (j = 0; j < choice2; j++)
        -: 1263:	{
    #####: 1264:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1265:	    {
    #####: 1266:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1267:		{
    #####: 1268:		  discardCard(i, currentPlayer, state, 1);
    #####: 1269:		  break;
        -: 1270:		}
        -: 1271:	    }
        -: 1272:	}			
        -: 1273:
    #####: 1274:      return 0;
        -: 1275:		
        -: 1276:    case cutpurse:
        -: 1277:
    #####: 1278:      updateCoins(currentPlayer, state, 2);
    #####: 1279:      for (i = 0; i < state->numPlayers; i++)
        -: 1280:	{
    #####: 1281:	  if (i != currentPlayer)
        -: 1282:	    {
    #####: 1283:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1284:		{
    #####: 1285:		  if (state->hand[i][j] == copper)
        -: 1286:		    {
    #####: 1287:		      discardCard(j, i, state, 0);
    #####: 1288:		      break;
        -: 1289:		    }
    #####: 1290:		  if (j == state->handCount[i])
        -: 1291:		    {
    #####: 1292:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1293:			{
        -: 1294:			  if (DEBUG)
        -: 1295:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1296:			}	
    #####: 1297:		      break;
        -: 1298:		    }		
        -: 1299:		}
        -: 1300:					
        -: 1301:	    }
        -: 1302:				
        -: 1303:	}				
        -: 1304:
        -: 1305:      //discard played card from hand
    #####: 1306:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1307:
    #####: 1308:      return 0;
        -: 1309:
        -: 1310:		
        -: 1311:    case embargo: 
        -: 1312:      //+2 Coins
    #####: 1313:      state->coins = state->coins + 2;
        -: 1314:			
        -: 1315:      //see if selected pile is in play
    #####: 1316:      if ( state->supplyCount[choice1] == -1 )
        -: 1317:	{
    #####: 1318:	  return -1;
        -: 1319:	}
        -: 1320:			
        -: 1321:      //add embargo token to selected supply pile
    #####: 1322:      state->embargoTokens[choice1]++;
        -: 1323:			
        -: 1324:      //trash card
    #####: 1325:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1326:      return 0;
        -: 1327:		
        -: 1328:    case outpost:
        -: 1329:      //set outpost flag
    #####: 1330:      state->outpostPlayed++;
        -: 1331:			
        -: 1332:      //discard card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case salvager:
        -: 1337:      //+1 buy
    #####: 1338:      state->numBuys++;
        -: 1339:			
    #####: 1340:      if (choice1)
        -: 1341:	{
        -: 1342:	  //gain coins equal to trashed card
    #####: 1343:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1344:	  //trash card
    #####: 1345:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1346:	}
        -: 1347:			
        -: 1348:      //discard card
    #####: 1349:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1350:      return 0;
        -: 1351:		
        -: 1352:    case sea_hag:
    #####: 1353:      for (i = 0; i < state->numPlayers; i++){
    #####: 1354:	if (i != currentPlayer){
    #####: 1355:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1356:	  state->discardCount[i]++;
    #####: 1357:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1358:	}
        -: 1359:      }
    #####: 1360:      return 0;
        -: 1361:		
        -: 1362:    case treasure_map:
        -: 1363:      //search hand for another treasure_map
    #####: 1364:      index = -1;
    #####: 1365:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:	{
    #####: 1367:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1368:	    {
    #####: 1369:	      index = i;
    #####: 1370:	      break;
        -: 1371:	    }
        -: 1372:	}
    #####: 1373:      if (index > -1)
        -: 1374:	{
        -: 1375:	  //trash both treasure cards
    #####: 1376:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1377:	  discardCard(index, currentPlayer, state, 1);
        -: 1378:
        -: 1379:	  //gain 4 Gold cards
    #####: 1380:	  for (i = 0; i < 4; i++)
        -: 1381:	    {
    #####: 1382:	      gainCard(gold, state, 1, currentPlayer);
        -: 1383:	    }
        -: 1384:				
        -: 1385:	  //return success
    #####: 1386:	  return 1;
        -: 1387:	}
        -: 1388:			
        -: 1389:      //no second treasure_map found in hand
    #####: 1390:      return -1;
        -: 1391:    }
        -: 1392:	
    #####: 1393:  return -1;
        -: 1394:}
        -: 1395:
        3: 1396:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1397:{
        -: 1398:	
        -: 1399:  //if card is not trashed, added to Played pile 
        3: 1400:  if (trashFlag < 1)
        -: 1401:    {
        -: 1402:      //add card to played pile
        3: 1403:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1404:      state->playedCardCount++;
        -: 1405:    }
        -: 1406:	
        -: 1407:  //set played card to -1
        3: 1408:  state->hand[currentPlayer][handPos] = -1;
        -: 1409:	
        -: 1410:  //remove card from player's hand
        3: 1411:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1412:    {
        -: 1413:      //reduce number of cards in hand
    #####: 1414:      state->handCount[currentPlayer]--;
        -: 1415:    }
        3: 1416:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1417:    {
        -: 1418:      //reduce number of cards in hand
    #####: 1419:      state->handCount[currentPlayer]--;
        -: 1420:    }
        -: 1421:  else 	
        -: 1422:    {
        -: 1423:      //replace discarded card with last card in hand
        3: 1424:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1425:      //set last card to -1
        3: 1426:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1427:      //reduce number of cards in hand
        3: 1428:      state->handCount[currentPlayer]--;
        -: 1429:    }
        -: 1430:	
        3: 1431:  return 0;
        -: 1432:}
        -: 1433:
    #####: 1434:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1435:{
        -: 1436:  //Note: supplyPos is enum of choosen card
        -: 1437:	
        -: 1438:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1439:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1440:    {
    #####: 1441:      return -1;
        -: 1442:    }
        -: 1443:	
        -: 1444:  //added card for [whoseTurn] current player:
        -: 1445:  // toFlag = 0 : add to discard
        -: 1446:  // toFlag = 1 : add to deck
        -: 1447:  // toFlag = 2 : add to hand
        -: 1448:
    #####: 1449:  if (toFlag == 1)
        -: 1450:    {
    #####: 1451:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1452:      state->deckCount[player]++;
        -: 1453:    }
    #####: 1454:  else if (toFlag == 2)
        -: 1455:    {
    #####: 1456:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1457:      state->handCount[player]++;
        -: 1458:    }
        -: 1459:  else
        -: 1460:    {
    #####: 1461:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1462:      state->discardCount[player]++;
        -: 1463:    }
        -: 1464:	
        -: 1465:  //decrease number in supply pile
    #####: 1466:  state->supplyCount[supplyPos]--;
        -: 1467:	 
    #####: 1468:  return 0;
        -: 1469:}
        -: 1470:
       14: 1471:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1472:{
        -: 1473:  int i;
        -: 1474:	
        -: 1475:  //reset coin count
       14: 1476:  state->coins = 0;
        -: 1477:
        -: 1478:  //add coins for each Treasure card in player's hand
       84: 1479:  for (i = 0; i < state->handCount[player]; i++)
        -: 1480:    {
       70: 1481:      if (state->hand[player][i] == copper)
        -: 1482:	{
       52: 1483:	  state->coins += 1;
        -: 1484:	}
       18: 1485:      else if (state->hand[player][i] == silver)
        -: 1486:	{
    #####: 1487:	  state->coins += 2;
        -: 1488:	}
       18: 1489:      else if (state->hand[player][i] == gold)
        -: 1490:	{
    #####: 1491:	  state->coins += 3;
        -: 1492:	}	
        -: 1493:    }	
        -: 1494:
        -: 1495:  //add bonus
       14: 1496:  state->coins += bonus;
        -: 1497:
       14: 1498:  return 0;
        -: 1499:}
        -: 1500:
        -: 1501:
        -: 1502://end of dominion.c
        -: 1503:
