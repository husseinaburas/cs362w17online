        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1500 returned 100% blocks executed 83%
     1500:    8:int compare(const void* a, const void* b) {
     1500:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     1500:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      400:   12:    return -1;
     1100:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 100 returned 100% blocks executed 100%
      100:   16:struct gameState* newGame() {
      100:   17:  struct gameState* g = malloc(sizeof(struct gameState));
      100:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 50 returned 100% blocks executed 100%
       50:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
       50:   23:  int* k = malloc(10 * sizeof(int));
       50:   24:  k[0] = k1;
       50:   25:  k[1] = k2;
       50:   26:  k[2] = k3;
       50:   27:  k[3] = k4;
       50:   28:  k[4] = k5;
       50:   29:  k[5] = k6;
       50:   30:  k[6] = k7;
       50:   31:  k[7] = k8;
       50:   32:  k[8] = k9;
       50:   33:  k[9] = k10;
       50:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 50 returned 100% blocks executed 88%
       50:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       50:   44:  SelectStream(1);
call    0 returned 100%
       50:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       50:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       50:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      550:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     5500:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     5000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       50:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       50:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       50:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       50:   89:      state->supplyCount[estate] = 8;
       50:   90:      state->supplyCount[duchy] = 8;
       50:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       50:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       50:  102:  state->supplyCount[silver] = 40;
       50:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1050:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:  {
     8250:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	  {
     7750:  110:	    if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      500:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		    {
      100:  115:		      if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  116:		        state->supplyCount[i] = 8; 
        -:  117:		      }
    #####:  118:		      else{ state->supplyCount[i] = 12; }
        -:  119:		    }
        -:  120:	      else
        -:  121:		    {
      450:  122:		      state->supplyCount[i] = 10;
        -:  123:		    }
      500:  124:	      break;
        -:  125:	    }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
     7250:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	  }
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
      150:  137:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  138:    {
      100:  139:      state->deckCount[i] = 0;
      400:  140:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  141:	{
      300:  142:	  state->deck[i][j] = estate;
      300:  143:	  state->deckCount[i]++;
        -:  144:	}
      800:  145:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  146:	{
      700:  147:	  state->deck[i][j] = copper;
      700:  148:	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
      150:  153:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  154:    {
      100:  155:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
      150:  162:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
      100:  165:      state->handCount[i] = 0;
      100:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
     1400:  175:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
     1350:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
       50:  181:  state->outpostPlayed = 0;
       50:  182:  state->phase = 0;
       50:  183:  state->numActions = 1;
       50:  184:  state->numBuys = 1;
       50:  185:  state->playedCardCount = 0;
       50:  186:  state->whoseTurn = 0;
       50:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      300:  191:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      250:  192:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  193:  }
        -:  194:
       50:  195:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  196:
       50:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 100 returned 100% blocks executed 94%
      100:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
      100:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
      100:  208:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  209:    return -1;
      100:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
     1200:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1000:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1000:  215:    newDeck[newDeckPos] = state->deck[player][card];
     1000:  216:    newDeckPos++;
     3425:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     2425:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
     1000:  220:    state->deckCount[player]--;
        -:  221:  }
     1100:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1000:  223:    state->deck[player][i] = newDeck[i];
     1000:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
      100:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 50 returned 100% blocks executed 80%
       50:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
       50:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
       50:  236:  if (state->phase != 0)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:  237:    {
       33:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
       17:  242:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
       17:  248:  card = handCard(handPos, state);
call    0 returned 100%
        -:  249:	
        -:  250:  //check if selected card is an action
       17:  251:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
       17:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
       17:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
       17:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  267:	
       17:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 250 returned 100% blocks executed 100%
      250:  310:int numHandCards(struct gameState *state) {
      250:  311:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  312:}
        -:  313:
function handCard called 17 returned 100% blocks executed 100%
       17:  314:int handCard(int handPos, struct gameState *state) {
       17:  315:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       17:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 2700 returned 100% blocks executed 100%
     2700:  319:int supplyCount(int card, struct gameState *state) {
     2700:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 434 returned 100% blocks executed 100%
      434:  345:int whoseTurn(struct gameState *state) {
      434:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 317 returned 100% blocks executed 38%
      317:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
      317:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    #####:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    #####:  537:    state->deckCount[player] = state->discardCount[player];
    #####:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    #####:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
    #####:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    #####:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
    #####:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    #####:  558:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
      317:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
      317:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
      317:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      317:  575:    state->deckCount[player]--;
      317:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
      317:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 2600 returned 100% blocks executed 93%
     2600:  582:int getCost(int cardNumber)
        -:  583:{
     2600:  584:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
      100:  587:      return 0;
        -:  588:    case estate:
      100:  589:      return 2;
        -:  590:    case duchy:
      100:  591:      return 5;
        -:  592:    case province:
      100:  593:      return 8;
        -:  594:    case copper:
      100:  595:      return 0;
        -:  596:    case silver:
      100:  597:      return 3;
        -:  598:    case gold:
      100:  599:      return 6;
        -:  600:    case adventurer:
      100:  601:      return 6;
        -:  602:    case council_room:
      100:  603:      return 5;
        -:  604:    case feast:
      100:  605:      return 4;
        -:  606:    case gardens:
      100:  607:      return 4;
        -:  608:    case mine:
      100:  609:      return 5;
        -:  610:    case remodel:
      100:  611:      return 4;
        -:  612:    case smithy:
      100:  613:      return 4;
        -:  614:    case village:
      100:  615:      return 3;
        -:  616:    case baron:
      100:  617:      return 4;
        -:  618:    case great_hall:
      100:  619:      return 3;
        -:  620:    case minion:
      100:  621:      return 5;
        -:  622:    case steward:
      100:  623:      return 3;
        -:  624:    case tribute:
      100:  625:      return 5;
        -:  626:    case ambassador:
      100:  627:      return 3;
        -:  628:    case cutpurse:
      100:  629:      return 4;
        -:  630:    case embargo: 
      100:  631:      return 2;
        -:  632:    case outpost:
      100:  633:      return 5;
        -:  634:    case salvager:
      100:  635:      return 4;
        -:  636:    case sea_hag:
      100:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 17 returned 100% blocks executed 5%
       17:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int index;
       17:  651:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       17:  652:  int nextPlayer = currentPlayer + 1;
       17:  653:  int tributeRevealedCards[2] = {-1, -1};
        -:  654:
       17:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        9:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  
        -:  659:	
        -:  660:  //uses switch to select card and perform actions
       17:  661:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 100%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  662:    {
        -:  663:    case adventurer:
    #####:  664:      playAdventurer(currentPlayer, state);
call    0 never executed
    #####:  665:      return 0;
        -:  666:			
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  670:	{
    #####:  671:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  672:	}
        -:  673:			
        -:  674:      //+1 Buy
    #####:  675:      state->numBuys++;
        -:  676:			
        -:  677:      //Each other player draws a card
    #####:  678:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  679:	{
    #####:  680:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  681:	    {
    #####:  682:	      drawCard(i, state);
call    0 never executed
        -:  683:	    }
        -:  684:	}
        -:  685:			
        -:  686:      //put played card in played card pile
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:			
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case feast:
    #####:  692:      playFeast(currentPlayer, state, choice1);
call    0 never executed
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case gardens:
    #####:  696:      return -1;
        -:  697:			
        -:  698:    case mine:
    #####:  699:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  700:
    #####:  701:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:		
    #####:  706:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  712:	{
    #####:  713:	  return -1;
        -:  714:	}
        -:  715:
    #####:  716:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  717:
        -:  718:      //discard card from hand
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  720:
        -:  721:      //discard trashed card
    #####:  722:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  723:	{
    #####:  724:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  725:	    {
    #####:  726:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  727:	      break;
        -:  728:	    }
        -:  729:	}
        -:  730:			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case remodel:
    #####:  734:      i = playRemodel(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  735:      return i;
        -:  736:		
        -:  737:    case smithy:
    #####:  738:      playSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  739:      return 0;
        -:  740:		
        -:  741:    case village:
        -:  742:      //+1 Card
       17:  743:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  744:			
        -:  745:      //+2 Actions
       17:  746:      state->numActions = state->numActions + 2;
        -:  747:			
        -:  748:      //discard played card from hand
       17:  749:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       17:  750:      return 0;
        -:  751:		
        -:  752:    case baron:
    #####:  753:      playBaron(currentPlayer, state, choice1); 
call    0 never executed
    #####:  754:      return 0;
        -:  755:		
        -:  756:    case great_hall:
        -:  757:      //+1 Card
    #####:  758:      drawCard(currentPlayer, state);
call    0 never executed
        -:  759:			
        -:  760:      //+1 Actions
    #####:  761:      state->numActions++;
        -:  762:			
        -:  763:      //discard card from hand
    #####:  764:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  765:      return 0;
        -:  766:		
        -:  767:    case minion:
        -:  768:      //+1 action
    #####:  769:      state->numActions++;
        -:  770:			
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:			
    #####:  774:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  state->coins = state->coins + 2;
        -:  777:	}
        -:  778:			
    #####:  779:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  780:	{
        -:  781:	  //discard hand
    #####:  782:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  783:	    {
    #####:  784:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  785:	    }
        -:  786:				
        -:  787:	  //draw 4
    #####:  788:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  791:	    }
        -:  792:				
        -:  793:	  //other players discard hand and redraw if hand size > 4
    #####:  794:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	    {
    #####:  796:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  797:		{
    #####:  798:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  799:		    {
        -:  800:		      //discard hand
    #####:  801:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  802:			{
    #####:  803:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  804:			}
        -:  805:							
        -:  806:		      //draw 4
    #####:  807:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  808:			{
    #####:  809:			  drawCard(i, state);
call    0 never executed
        -:  810:			}
        -:  811:		    }
        -:  812:		}
        -:  813:	    }
        -:  814:				
        -:  815:	}
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case steward:
    #####:  819:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  820:	{
        -:  821:	  //+2 cards
    #####:  822:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  823:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  824:	}
    #####:  825:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //+2 coins
    #####:  828:	  state->coins = state->coins + 2;
        -:  829:	}
        -:  830:      else
        -:  831:	{
        -:  832:	  //trash 2 cards in hand
    #####:  833:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  834:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  835:	}
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  839:      return 0;
        -:  840:		
        -:  841:    case tribute:
    #####:  842:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  843:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  844:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  845:	  state->deckCount[nextPlayer]--;
        -:  846:	}
    #####:  847:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  848:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  849:	  state->discardCount[nextPlayer]--;
        -:  850:	}
        -:  851:	else{
        -:  852:	  //No Card to Reveal
        -:  853:	  if (DEBUG){
        -:  854:	    printf("No cards to reveal\n");
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:	    
        -:  859:      else{
    #####:  860:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  863:	    state->deckCount[nextPlayer]++;
    #####:  864:	    state->discard[nextPlayer][i] = -1;
    #####:  865:	    state->discardCount[nextPlayer]--;
        -:  866:	  }
        -:  867:			    
    #####:  868:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  869:	} 
    #####:  870:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  871:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  872:	state->deckCount[nextPlayer]--;
    #####:  873:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  874:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  875:	state->deckCount[nextPlayer]--;
        -:  876:      }    
        -:  877:		       
    #####:  878:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  879:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  880:	state->playedCardCount++;
    #####:  881:	tributeRevealedCards[1] = -1;
        -:  882:      }
        -:  883:
    #####:  884:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  886:	  state->coins += 2;
        -:  887:	}
        -:  888:		    
    #####:  889:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  891:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  892:	}
        -:  893:	else{//Action Card
    #####:  894:	  state->numActions = state->numActions + 2;
        -:  895:	}
        -:  896:      }
        -:  897:	    
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case ambassador:
    #####:  901:      j = 0;		//used to check if player has enough cards to discard
        -:  902:
    #####:  903:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;				
        -:  906:	}
        -:  907:
    #####:  908:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  916:	    {
    #####:  917:	      j++;
        -:  918:	    }
        -:  919:	}
    #####:  920:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  921:	{
    #####:  922:	  return -1;				
        -:  923:	}
        -:  924:
        -:  925:      if (DEBUG) 
        -:  926:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  927:
        -:  928:      //increase supply count for choosen card by amount being discarded
    #####:  929:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  930:			
        -:  931:      //each other player gains a copy of revealed card
    #####:  932:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  935:	    {
    #####:  936:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  937:	    }
        -:  938:	}
        -:  939:
        -:  940:      //discard played card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  942:
        -:  943:      //trash copies of cards returned to supply
    #####:  944:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  949:		{
    #####:  950:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  951:		  break;
        -:  952:		}
        -:  953:	    }
        -:  954:	}			
        -:  955:
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case cutpurse:
        -:  959:
    #####:  960:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  961:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  966:		{
    #####:  967:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  968:		    {
    #####:  969:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  970:		      break;
        -:  971:		    }
    #####:  972:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  973:		    {
    #####:  974:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  975:			{
        -:  976:			  if (DEBUG)
        -:  977:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  978:			}	
    #####:  979:		      break;
        -:  980:		    }		
        -:  981:		}
        -:  982:					
        -:  983:	    }
        -:  984:				
        -:  985:	}				
        -:  986:
        -:  987:      //discard played card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  989:
    #####:  990:      return 0;
        -:  991:
        -:  992:		
        -:  993:    case embargo: 
        -:  994:      //+2 Coins
    #####:  995:      state->coins = state->coins + 2;
        -:  996:			
        -:  997:      //see if selected pile is in play
    #####:  998:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:			
        -: 1003:      //add embargo token to selected supply pile
    #####: 1004:      state->embargoTokens[choice1]++;
        -: 1005:			
        -: 1006:      //trash card
    #####: 1007:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case outpost:
        -: 1011:      //set outpost flag
    #####: 1012:      state->outpostPlayed++;
        -: 1013:			
        -: 1014:      //discard card
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case salvager:
        -: 1019:      //+1 buy
    #####: 1020:      state->numBuys++;
        -: 1021:			
    #####: 1022:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
        -: 1024:	  //gain coins equal to trashed card
    #####: 1025:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1026:	  //trash card
    #####: 1027:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1028:	}
        -: 1029:			
        -: 1030:      //discard card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case sea_hag:
    #####: 1035:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1037:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1038:	  state->discardCount[i]++;
    #####: 1039:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1040:	}
        -: 1041:      }
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case treasure_map:
        -: 1045:      //search hand for another treasure_map
    #####: 1046:      index = -1;
    #####: 1047:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1050:	    {
    #####: 1051:	      index = i;
    #####: 1052:	      break;
        -: 1053:	    }
        -: 1054:	}
    #####: 1055:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
        -: 1057:	  //trash both treasure cards
    #####: 1058:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1059:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1060:
        -: 1061:	  //gain 4 Gold cards
    #####: 1062:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1065:	    }
        -: 1066:				
        -: 1067:	  //return success
    #####: 1068:	  return 1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //no second treasure_map found in hand
    #####: 1072:      return -1;
        -: 1073:    }
        -: 1074:	
    #####: 1075:  return -1;
        -: 1076:}
        -: 1077:
function discardCard called 67 returned 100% blocks executed 89%
       67: 1078:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1079:{
        -: 1080:	
        -: 1081:  //if card is not trashed, added to Played pile 
       67: 1082:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1083:    {
        -: 1084:      //add card to played pile
       67: 1085:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       67: 1086:      state->playedCardCount++;
        -: 1087:    }
        -: 1088:	
        -: 1089:  //set played card to -1
       67: 1090:  state->hand[currentPlayer][handPos] = -1;
        -: 1091:	
        -: 1092:  //remove card from player's hand
       67: 1093:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1094:    {
        -: 1095:      //reduce number of cards in hand
        2: 1096:      state->handCount[currentPlayer]--;
        -: 1097:    }
       65: 1098:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1099:    {
        -: 1100:      //reduce number of cards in hand
    #####: 1101:      state->handCount[currentPlayer]--;
        -: 1102:    }
        -: 1103:  else 	
        -: 1104:    {
        -: 1105:      //replace discarded card with last card in hand
       65: 1106:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1107:      //set last card to -1
       65: 1108:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1109:      //reduce number of cards in hand
       65: 1110:      state->handCount[currentPlayer]--;
        -: 1111:    }
        -: 1112:	
       67: 1113:  return 0;
        -: 1114:}
        -: 1115:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1116:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1117:{
        -: 1118:  //Note: supplyPos is enum of choosen card
        -: 1119:	
        -: 1120:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1121:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1122:    {
    #####: 1123:      return -1;
        -: 1124:    }
        -: 1125:	
        -: 1126:  //added card for [whoseTurn] current player:
        -: 1127:  // toFlag = 0 : add to discard
        -: 1128:  // toFlag = 1 : add to deck
        -: 1129:  // toFlag = 2 : add to hand
        -: 1130:
    #####: 1131:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1132:    {
    #####: 1133:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1134:      state->deckCount[player]++;
        -: 1135:    }
    #####: 1136:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1137:    {
    #####: 1138:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1139:      state->handCount[player]++;
        -: 1140:    }
        -: 1141:  else
        -: 1142:    {
    #####: 1143:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1144:      state->discardCount[player]++;
        -: 1145:    }
        -: 1146:	
        -: 1147:  //decrease number in supply pile
    #####: 1148:  state->supplyCount[supplyPos]--;
        -: 1149:	 
    #####: 1150:  return 0;
        -: 1151:}
        -: 1152:
function updateCoins called 167 returned 100% blocks executed 100%
      167: 1153:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1154:{
        -: 1155:  int i;
        -: 1156:	
        -: 1157:  //reset coin count
      167: 1158:  state->coins = 0;
        -: 1159:
        -: 1160:  //add coins for each Treasure card in player's hand
     6144: 1161:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -: 1162:    {
     5977: 1163:      if (state->hand[player][i] == copper)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1164:	{
      397: 1165:	  state->coins += 1;
        -: 1166:	}
     5580: 1167:      else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1168:	{
      211: 1169:	  state->coins += 2;
        -: 1170:	}
     5369: 1171:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1172:	{
      228: 1173:	  state->coins += 3;
        -: 1174:	}	
        -: 1175:    }	
        -: 1176:
        -: 1177:  //add bonus
      167: 1178:  state->coins += bonus;
        -: 1179:
      167: 1180:  return 0;
        -: 1181:}
        -: 1182:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####: 1183:void playAdventurer(int currentPlayer, struct gameState *state){
    #####: 1184:  int drawntreasure = 0;
    #####: 1185:  int z = 0;
        -: 1186:  int cardDrawn;
        -: 1187:  int temphand[MAX_HAND];
    #####: 1188:  int count = 0;
        -: 1189:
    #####: 1190:  while((drawntreasure<2) && (count < 500)){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1191:    count++;
    #####: 1192:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1193:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1194:    }
    #####: 1195:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1196:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1197:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1198:      drawntreasure++;
        -: 1199:    else{
    #####: 1200:      temphand[z]=cardDrawn;
    #####: 1201:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1202:      z++;
        -: 1203:    } 
        -: 1204:  }
    #####: 1205:  while(z-1>0){
branch  0 never executed
branch  1 never executed
    #####: 1206:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1207:    z=z-1;
        -: 1208:  }
    #####: 1209:}
        -: 1210:
function playSmithy called 0 returned 0% blocks executed 0%
    #####: 1211:void playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1212:  int i;
        -: 1213:
        -: 1214:  //+3 Cards
    #####: 1215:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:  {
    #####: 1217:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1218:  }
        -: 1219:  
        -: 1220:  //discard card from hand
    #####: 1221:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1222:}
        -: 1223:
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1224:void playFeast(int currentPlayer, struct gameState *state, int choice1){
        -: 1225:  int temphand[MAX_HAND];
        -: 1226:  int i, x;
        -: 1227:
        -: 1228:  //gain card with cost up to 5
        -: 1229:  //Backup hand
    #####: 1230:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1231:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1232:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1233:  }
        -: 1234:  //Backup hand
        -: 1235:
        -: 1236:  //Update Coins for Buy
    #####: 1237:  updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1238:
    #####: 1239:  x = 1;//Condition to loop on
    #####: 1240:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1241:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1242:      if (DEBUG)
        -: 1243:        printf("None of that card left, sorry!\n");
        -: 1244:
        -: 1245:      if (DEBUG){
        -: 1246:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1247:      }
        -: 1248:    }
    #####: 1249:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1250:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1251:
        -: 1252:      if (DEBUG){
        -: 1253:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1254:      }
        -: 1255:    }
        -: 1256:    else{
        -: 1257:      if (DEBUG){
        -: 1258:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1259:      }
        -: 1260:
    #####: 1261:      gainCard(choice1 + 1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1262:      x = 0;//No more buying cards
        -: 1263:
        -: 1264:      if (DEBUG){
        -: 1265:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }     
        -: 1269:
        -: 1270:  //Reset Hand
    #####: 1271:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1272:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1273:    temphand[i] = -1;
        -: 1274:  }
        -: 1275:  //Reset Hand
    #####: 1276:}
        -: 1277:
function playBaron called 0 returned 0% blocks executed 0%
    #####: 1278:void playBaron(int currentPlayer, struct gameState *state, int choice1){
    #####: 1279:  state->numBuys++;//Increase buys by 1!
    #####: 1280:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1281:    int p = 0;//Iterator for hand!
    #####: 1282:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1283:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1284:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1285:        state->coins = 4;//Add 4 coins to the amount of coins
    #####: 1286:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1287:        state->discardCount[currentPlayer]++;
    #####: 1288:        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1289:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1290:        }
    #####: 1291:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1292:        state->handCount[currentPlayer]--;
    #####: 1293:        card_not_discarded = 0;//Exit the loop
        -: 1294:      }
    #####: 1295:      else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1296:        if(DEBUG) {
        -: 1297:          printf("No estate cards in your hand, invalid choice\n");
        -: 1298:          printf("Must gain an estate if there are any\n");
        -: 1299:        }
    #####: 1300:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1302:          state->supplyCount[estate]--;//Decrement estates
    #####: 1303:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1304:            isGameOver(state);
call    0 never executed
        -: 1305:          }
        -: 1306:        }
    #####: 1307:        card_not_discarded = 0;//Exit the loop
        -: 1308:      }    
        -: 1309:      else{
    #####: 1310:        p++;//Next card
        -: 1311:      }
        -: 1312:    }
        -: 1313:  }        
        -: 1314:  else{
    #####: 1315:    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1317:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1318:      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1319:        isGameOver(state);
call    0 never executed
        -: 1320:      }
        -: 1321:    }
        -: 1322:  }
    #####: 1323:}
        -: 1324:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1325:int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -: 1326:  int j, i;
        -: 1327:
    #####: 1328:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1329:
    #####: 1330:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1331:  {
    #####: 1332:    return -1;
        -: 1333:  }
        -: 1334:
    #####: 1335:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1336:
        -: 1337:  //discard card from hand
    #####: 1338:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:
        -: 1340:  //discard trashed card
    #####: 1341:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1342:  {
    #####: 1343:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
    #####: 1345:      discardCard(i, currentPlayer, state, 0);      
call    0 never executed
        -: 1346:    }
        -: 1347:  }
    #####: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
