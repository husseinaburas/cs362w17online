Saved to unittestresuls.out

**** gainCard() TESTING BEGINNING ****
TEST-1
 **CHECKING INITIAL HAND/DECK/DISCARD COUNTS**
Checking both p1 hand == 5 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 5 and p2 deck size == 10: TEST PASSED
CHecking both p1 and p2 discard size == 0: TEST PASSED
**ADDING CARD TO P1 DISCARD**
Checking both p1 hand == 5 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 5 and p2 deck size == 10: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 0: TEST PASSED
**ADDING CARD TO P2 DISCARD**
Checking both p1 hand == 5 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 5 and p2 deck size == 10: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P1 DECK**
Checking both p1 hand == 5 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 10: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P2 DECK**
Checking both p1 hand == 5 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P1 HAND**
Checking both p1 hand == 6 and p2 hand size == 0: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P2 HAND**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED

TEST-2
 **CHECKING INITIAL supplyCount VS CURRENT supplyCount**
Check all cards except smithy are same as initial supplyCount: TEST PASSED
Checking smithy supplyCount is 6 less than original supplyCount: TEST PASSED

TEST-3
 **CHECKING CARD IS NOT ADDED TO ANY PILE WHEN SUPPLY IS 0**
**ADDING CARD TO P1 DISCARD**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P2 DISCARD**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P1 DECK**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P2 DECK**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P1 HAND**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED
**ADDING CARD TO P2 HAND**
Checking both p1 hand == 6 and p2 hand size == 1: TEST PASSED
Checking both p1 deck size == 6 and p2 deck size == 11: TEST PASSED
CHecking both p1  discard size == 1 and p2 discard size == 1: TEST PASSED

TEST-4
 **CHECKING TOP CARD IN DECK, HAND AND DISCARD IS SMITHY**
Checking both p1 and p2 hand last card is smithy: TEST PASSED
Checking both p1 and p2 deck last card is smithy: TEST PASSED
Checking both p1 and p2 discard last card is smithy: TEST PASSED

**** gainCard() TESTING COMPLETE ****
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:19.10% of 644
Branches executed:17.27% of 417
Taken at least once:14.39% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** isGameOver() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CHECKING isGameOver()**
Checking isGameOver returns 0: TEST PASSED
TEST-2
 **CHECKING  isGameOver BASED ON NUMBER OF PROVINCES**
Checking isGameOver returns 1 when 0 provinces: TEST PASSED
Checking isGameOver returns 0 when there is 1 province: TEST PASSED
Checking isGameOver returns 0 when there is -1 province: TEST PASSED
TEST-3
 **CHECKING  isGameOver BASED ON 3 SUPPLY PILES EMPTY OR NOT**
Checking isGameOver returns 0 when curse pile is empty: TEST PASSED
Checking isGameOver returns 0 when curse and estate piles are empty: TEST PASSED
Checking isGameOver returns 1 when curse, estate and duchy piles are empty: TEST PASSED
Checking isGameOver returns 1 when curse and province piles are empty: TEST PASSED
Checking isGameOver returns 1 when 4 supply piles are empty (not province): TEST PASSED

**** isGameOver() TESTING COMPLETE ****
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:20.96% of 644
Branches executed:19.18% of 417
Taken at least once:16.31% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** fullDeckCount() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CHECKING fullDeckCount of copper vs manual count**
Checking fullDeckCount == manual count of copper card of p1: TEST PASSED
Checking fullDeckCount == manual count of copper card of p2: TEST PASSED
TEST-2
 **CHECKING CARDS THAT SHOULDN'T BE IN HAND/DECK/DISCARD == 0**
Checking p1 and p2 fullDeckCount of provinces == 0: TEST PASSED
Checking p1 and p2 fullDeckCount of treasure_map (not in game) == 0: TEST PASSED
TEST-3
 **MANUALLY ADD PROVINCE TO DECK/HAND/DISCARD AND CHECK fullDeckCount VALUE**
Added province to deck, checking p1 fullDeckCount of provinces == 1: TEST PASSED
Added province to deck, checking p2 fullDeckCount of provinces == 1: TEST PASSED
Added province to hand, checking p1 fullDeckCount of provinces == 2: TEST PASSED
Added province to hand, checking p2 fullDeckCount of provinces == 2: TEST PASSED
Added province to discard, checking p1 fullDeckCount of provinces == 3: TEST PASSED
Added province to discard, checking p2 fullDeckCount of provinces == 3: TEST PASSED

**** fullDeckCount() TESTING COMPLETE ****
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:22.67% of 644
Branches executed:22.06% of 417
Taken at least once:18.94% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** endTurn() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CALLING endTurn() AND CHECKING CHANGED VARS**
Checking p1 handCount == 0: TEST PASSED
Checking p1 discardCount == 5 (original size of hand): TEST PASSED
Checking whoseTurn == p2: TEST PASSED
Checking p2 handCount == 5: TEST PASSED
Checking G.coins == manual count of p2 coins: TEST PASSED
TEST-2
 **GAME CALLING endTurn() AND CHECKING CHANGED VARS**
Checking p2 handCount == 0: TEST PASSED
Checking p2 discardCount == 5 (original size of hand): TEST PASSED
Checking whoseTurn == p1: TEST PASSED
Checking p1 handCount == 5: TEST PASSED
Checking G.coins == manual count of p1 coins: TEST PASSED
TEST-3
 **GAME CALLING endTurn() 3RD TIME AND CHECKING CHANGED VARS**
Checking p1 handCount == 0: TEST PASSED
Checking p1 discardCount == 10 (original size of hand + last turn): TEST PASSED
Checking whoseTurn == p2: TEST PASSED
Checking p2 handCount == 5: TEST PASSED
Checking p2 discardCount == 5 (original size of hand): TEST PASSED
Checking G.coins == manual count of p2 coins: TEST PASSED

**** endTurn() TESTING COMPLETE ****
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:26.24% of 644
Branches executed:23.50% of 417
Taken at least once:20.38% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** playSmithy() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CALLING playSmithy() AND CHECKING CHANGED VARS**
Check p1 handSize is == initial hand size of p1 + 2: TEST FAILED
Check value of p1 hand at current handCount is == -1 (discard): TEST PASSED
Check smithy is not in p1 hand: TEST PASSED
Check deckCount is equal to initial deckCount - 3 for p1: TEST FAILED
TEST-2
 **AFTER SMITHY PLAYED, CHECK VARS THAT SHOULDN'T BE EFFECTED**
Check discardCount is equal to initial discardCount for p1: TEST PASSED
Check p2 Deck/Hand/Discard counts are same as initial values: TEST PASSED

**** playSmithy() TESTING COMPLETE ****
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:28.73% of 644
Branches executed:25.42% of 417
Taken at least once:21.58% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** playAdventurer() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CALLING playAdventurer() WITH P1 AND CHECKING CHANGED VARS**
Check drawntreasure == 0: TEST PASSED
Check p1 discardCount > initial discardCount: TEST PASSED
Check p1 handCount < initial handCount: TEST PASSED
Check p1 initial hand treasure + 2 == current hand treasure for p1: TEST PASSED
Check nothing in p2 Deck/Hand/Discard changed: TEST PASSED
Check adventurer was discarded from p1 hand: TEST FAILED
Check cards in discard hand are in kingdom Cards (due to bug introduced): TEST PASSED
TEST-2
 **END P1 TURN, REMOVE ALL BUT 1 TREASURE FROM P2 AND playAdenturer()**
Check drawntreasure == 0: TEST PASSED
Check p2 discardCount > initial discardCount: TEST PASSED
Check p2 handCount < initial handCount: TEST PASSED
Check p2 initial hand treasure + 1 == current hand treasure for p2: TEST PASSED
Check adventurer was discarded from p2 hand: TEST FAILED
TEST-3
 **END P2 TURN, REMOVE ALL TREASURE FROM P1 DECK AND playAdenturer()**
Check drawntreasure == 0: TEST PASSED
Check p1 discardCount > initial discardCount: TEST PASSED
Check p1 handCount == initial handCount (no treasure added): TEST PASSED
Check p1 initial hand treasure == current hand treasure for p1: TEST PASSED
Check adventurer was discarded from p1 hand: TEST FAILED

**** playAdventurer() TESTING COMPLETE ****
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:33.85% of 644
Branches executed:29.26% of 417
Taken at least once:25.66% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** playVillage() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CALLING playVillage() WITH P1 AND CHECKING CHANGED VARS**
Check p1 handCount == initial handCount (1 card drawn, 1 discarded): TEST PASSED
Check p1 deckCount == initial deckCount - 1: TEST PASSED
Check numActions == 3 (original action + 2) TEST FAILED
Check numActions > original num actions TEST PASSED
Check village was discarded from p1 hand: TEST PASSED
Check value of p1 hand at current handCount is == -1 (discard): TEST PASSED
TEST-2
 **AFTER VILLAGE PLAYED, CHECK VARS THAT SHOULDN'T BE EFFECTED**
Check discardCount is equal to initial discardCount for p1: TEST PASSED
Check p2 Deck/Hand/Discard counts are same as initial values: TEST PASSED

**** playVillage() TESTING COMPLETE ****
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'playVillage'
Lines executed:100.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:34.47% of 644
Branches executed:29.26% of 417
Taken at least once:25.66% of 417
No calls
dominion.c:creating 'dominion.c.gcov'


**** playGreat_hall() TESTING BEGINNING ****
TEST-1
 **GAME INITIALIZED CALLING playGreat_hall() WITH P1 AND CHECKING CHANGED VARS**
Check p1 handCount == initial handCount (1 card drawn, 1 discarded): TEST PASSED
Check p1 deckCount == initial deckCount - 1: TEST PASSED
Check numActions == 2 (original action + 1) TEST PASSED
Check numActions > original num actions TEST PASSED
Check great_hall was discarded from p1 hand: TEST PASSED
Check value of p1 hand at current handCount is == -1 (discard): TEST PASSED
TEST-2
 **AFTER VILLAGE PLAYED, CHECK VARS THAT SHOULDN'T BE EFFECTED**
Check discardCount is equal to initial discardCount for p1: TEST PASSED
Check p2 Deck/Hand/Discard counts are same as initial values: TEST PASSED

**** playGreat_hall() TESTING COMPLETE ****
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 259
Branches executed:0.00% of 183
Taken at least once:0.00% of 183
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'playVillage'
Lines executed:100.00% of 4
No branches
No calls

Function 'playGreat_hall'
Lines executed:100.00% of 4
No branches
No calls

Function 'playSalvager'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

File 'dominion.c'
Lines executed:35.09% of 644
Branches executed:29.26% of 417
Taken at least once:25.66% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 235 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
      235:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        2:   10:    return 1;
      233:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       84:   12:    return -1;
      149:   13:  return 0;
      235:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1520:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      800:   65:        }
       80:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     2640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      153:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91%
branch  1 taken 9%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
       15:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       15:  116:		    state->supplyCount[i] = 8; 
       15:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       15:  119:		}
        -:  120:	      else
        -:  121:		{
       65:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1160:  130:	}
        -:  131:
      160:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
       48:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
      112:  150:	}
       16:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       16:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       16:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
      216:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       40:  193:    drawCard(state->whoseTurn, state);
       40:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        8:  199:}
        -:  200:
function shuffle called 23 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       23:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       23:  209:  if (state->deckCount[player] < 1)
branch  0 taken 26%
branch  1 taken 74%
        6:  210:    return -1;
       17:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      370:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      168:  215:    card = floor(Random() * state->deckCount[player]);
      168:  216:    newDeck[newDeckPos] = state->deck[player][card];
      168:  217:    newDeckPos++;
     1172:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      418:  219:      state->deck[player][i] = state->deck[player][i+1];
      418:  220:    }
      168:  221:    state->deckCount[player]--;
        -:  222:  }
      370:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      168:  224:    state->deck[player][i] = newDeck[i];
      168:  225:    state->deckCount[player]++;
      168:  226:  }
        -:  227:
       17:  228:  return 0;
       23:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 12 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 12 returned 100% blocks executed 100%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       12:  326:  int count = 0;
        -:  327:
      204:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12%
        -:  329:    {
      106:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 18%
branch  1 taken 82%
       90:  331:    }
        -:  332:
       88:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  334:    {
       40:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 25%
branch  1 taken 75%
       32:  336:    }
        -:  337:
       28:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 14%
branch  1 taken 86%
        -:  339:    {
        4:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 100%
branch  1 taken 0%
        2:  341:    }
        -:  342:
       12:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
        5:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 5 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        5:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       66:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 85%
branch  1 taken 15%
       28:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       28:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       28:  359:  }
        5:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        5:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 60%
branch  1 taken 40%
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        3:  365:  }
        -:  366:  else{
        2:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        5:  370:  state->outpostPlayed = 0;
        5:  371:  state->phase = 0;
        5:  372:  state->numActions = 1;
        5:  373:  state->coins = 0;
        5:  374:  state->numBuys = 1;
        5:  375:  state->playedCardCount = 0;
        5:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       60:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       25:  381:    drawCard(state->whoseTurn, state);//Draw a card
       25:  382:  }
        -:  383:
        -:  384:  //Update money
        5:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        5:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 9 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        9:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 22%
branch  1 taken 78%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        7:  401:  j = 0;
      364:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      175:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:	{
       10:  406:	  j++;
       10:  407:	}
      175:  408:    }
        7:  409:  if ( j >= 3)
branch  0 taken 29%
branch  1 taken 71%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        5:  414:  return 0;
        9:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 87 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       87:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5%
branch  1 taken 95%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       24:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 67%
branch  1 taken 33%
        8:  534:      state->deck[player][i] = state->discard[player][i];
        8:  535:      state->discard[player][i] = -1;
        8:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 75%
branch  1 taken 25%
        3:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        1:  565:  }
        -:  566:
        -:  567:  else{
       83:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       83:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       83:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       83:  576:    state->deckCount[player]--;
       83:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       84:  580:  return 0;
       87:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return playAdventurer(currentPlayer, state, cardDrawn, drawntreasure, z, temphand);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    #####:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
    #####:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
    #####:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:      return playSmithy(currentPlayer, state, handPos);
        -:  815:		
        -:  816:    case village:
    #####:  817:      return playVillage(currentPlayer, state, handPos);
        -:  818:		
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    #####:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  845:		isGameOver(state);
    #####:  846:	      }
    #####:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
    #####:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
    #####:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  862:	    isGameOver(state);
    #####:  863:	  }
    #####:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
    #####:  871:      return playGreat_hall(currentPlayer, state, handPos);
        -:  872:		
        -:  873:    case minion:
        -:  874:      //+1 action
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:			
    #####:  880:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  state->coins = state->coins + 2;
    #####:  883:	}
        -:  884:			
    #####:  885:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  886:	{
        -:  887:	  //discard hand
    #####:  888:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(handPos, currentPlayer, state, 0);
        -:  891:	    }
        -:  892:				
        -:  893:	  //draw 4
    #####:  894:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      drawCard(currentPlayer, state);
    #####:  897:	    }
        -:  898:				
        -:  899:	  //other players discard hand and redraw if hand size > 4
    #####:  900:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  901:	    {
    #####:  902:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  903:		{
    #####:  904:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  905:		    {
        -:  906:		      //discard hand
    #####:  907:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  908:			{
    #####:  909:			  discardCard(handPos, i, state, 0);
        -:  910:			}
        -:  911:							
        -:  912:		      //draw 4
    #####:  913:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  914:			{
    #####:  915:			  drawCard(i, state);
    #####:  916:			}
    #####:  917:		    }
    #####:  918:		}
    #####:  919:	    }
        -:  920:				
    #####:  921:	}
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case steward:
    #####:  925:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  926:	{
        -:  927:	  //+2 cards
    #####:  928:	  drawCard(currentPlayer, state);
    #####:  929:	  drawCard(currentPlayer, state);
    #####:  930:	}
    #####:  931:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  932:	{
        -:  933:	  //+2 coins
    #####:  934:	  state->coins = state->coins + 2;
    #####:  935:	}
        -:  936:      else
        -:  937:	{
        -:  938:	  //trash 2 cards in hand
    #####:  939:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  940:	  discardCard(choice3, currentPlayer, state, 1);
        -:  941:	}
        -:  942:			
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case tribute:
    #####:  948:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  949:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  950:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  951:	  state->deckCount[nextPlayer]--;
    #####:  952:	}
    #####:  953:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  954:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  955:	  state->discardCount[nextPlayer]--;
    #####:  956:	}
        -:  957:	else{
        -:  958:	  //No Card to Reveal
        -:  959:	  if (DEBUG){
        -:  960:	    printf("No cards to reveal\n");
        -:  961:	  }
        -:  962:	}
    #####:  963:      }
        -:  964:	    
        -:  965:      else{
    #####:  966:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  967:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  968:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  969:	    state->deckCount[nextPlayer]++;
    #####:  970:	    state->discard[nextPlayer][i] = -1;
    #####:  971:	    state->discardCount[nextPlayer]--;
    #####:  972:	  }
        -:  973:			    
    #####:  974:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  975:	} 
    #####:  976:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  977:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  978:	state->deckCount[nextPlayer]--;
    #####:  979:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  980:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  981:	state->deckCount[nextPlayer]--;
        -:  982:      }    
        -:  983:		       
    #####:  984:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  985:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  986:	state->playedCardCount++;
    #####:  987:	tributeRevealedCards[1] = -1;
    #####:  988:      }
        -:  989:
    #####:  990:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  991:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  992:	  state->coins += 2;
    #####:  993:	}
        -:  994:		    
    #####:  995:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  996:	  drawCard(currentPlayer, state);
    #####:  997:	  drawCard(currentPlayer, state);
    #####:  998:	}
        -:  999:	else{//Action Card
    #####: 1000:	  state->numActions = state->numActions + 2;
        -: 1001:	}
    #####: 1002:      }
        -: 1003:	    
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case ambassador:
    #####: 1007:      j = 0;		//used to check if player has enough cards to discard
        -: 1008:
    #####: 1009:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1010:	{
    #####: 1011:	  return -1;				
        -: 1012:	}
        -: 1013:
    #####: 1014:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;
        -: 1017:	}
        -: 1018:
    #####: 1019:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1022:	    {
    #####: 1023:	      j++;
    #####: 1024:	    }
    #####: 1025:	}
    #####: 1026:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  return -1;				
        -: 1029:	}
        -: 1030:
        -: 1031:      if (DEBUG) 
        -: 1032:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1033:
        -: 1034:      //increase supply count for choosen card by amount being discarded
    #####: 1035:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1036:			
        -: 1037:      //each other player gains a copy of revealed card
    #####: 1038:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1043:	    }
    #####: 1044:	}
        -: 1045:
        -: 1046:      //discard played card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1048:
        -: 1049:      //trash copies of cards returned to supply
    #####: 1050:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1051:	{
    #####: 1052:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1053:	    {
    #####: 1054:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1055:		{
    #####: 1056:		  discardCard(i, currentPlayer, state, 1);
    #####: 1057:		  break;
        -: 1058:		}
    #####: 1059:	    }
    #####: 1060:	}			
        -: 1061:
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case cutpurse:
        -: 1065:
    #####: 1066:      updateCoins(currentPlayer, state, 2);
    #####: 1067:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	{
    #####: 1069:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1070:	    {
    #####: 1071:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1072:		{
    #####: 1073:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1074:		    {
    #####: 1075:		      discardCard(j, i, state, 0);
    #####: 1076:		      break;
        -: 1077:		    }
    #####: 1078:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1079:		    {
    #####: 1080:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1081:			{
        -: 1082:			  if (DEBUG)
        -: 1083:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1084:			}	
    #####: 1085:		      break;
        -: 1086:		    }		
    #####: 1087:		}
        -: 1088:					
    #####: 1089:	    }
        -: 1090:				
    #####: 1091:	}				
        -: 1092:
        -: 1093:      //discard played card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1095:
    #####: 1096:      return 0;
        -: 1097:
        -: 1098:		
        -: 1099:    case embargo: 
        -: 1100:      //+2 Coins
    #####: 1101:      state->coins = state->coins + 2;
        -: 1102:			
        -: 1103:      //see if selected pile is in play
    #####: 1104:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  return -1;
        -: 1107:	}
        -: 1108:			
        -: 1109:      //add embargo token to selected supply pile
    #####: 1110:      state->embargoTokens[choice1]++;
        -: 1111:			
        -: 1112:      //trash card
    #####: 1113:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case outpost:
        -: 1117:      //set outpost flag
    #####: 1118:      state->outpostPlayed++;
        -: 1119:			
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case salvager:
    #####: 1125:      return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1126:		
        -: 1127:    case sea_hag:
    #####: 1128:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1129:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1130:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1131:	  state->discardCount[i]++;
    #####: 1132:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1133:	}
    #####: 1134:      }
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case treasure_map:
        -: 1138:      //search hand for another treasure_map
    #####: 1139:      index = -1;
    #####: 1140:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1143:	    {
    #####: 1144:	      index = i;
    #####: 1145:	      break;
        -: 1146:	    }
    #####: 1147:	}
    #####: 1148:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
        -: 1150:	  //trash both treasure cards
    #####: 1151:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1152:	  discardCard(index, currentPlayer, state, 1);
        -: 1153:
        -: 1154:	  //gain 4 Gold cards
    #####: 1155:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	    {
    #####: 1157:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1158:	    }
        -: 1159:				
        -: 1160:	  //return success
    #####: 1161:	  return 1;
        -: 1162:	}
        -: 1163:			
        -: 1164:      //no second treasure_map found in hand
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:	
    #####: 1168:  return -1;
    #####: 1169:}
        -: 1170:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1171:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1172:{
        -: 1173:	
        -: 1174:  //if card is not trashed, added to Played pile 
        3: 1175:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1176:    {
        -: 1177:      //add card to played pile
        3: 1178:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1179:      state->playedCardCount++;
        3: 1180:    }
        -: 1181:	
        -: 1182:  //set played card to -1
        3: 1183:  state->hand[currentPlayer][handPos] = -1;
        -: 1184:	
        -: 1185:  //remove card from player's hand
        3: 1186:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1187:    {
        -: 1188:      //reduce number of cards in hand
    #####: 1189:      state->handCount[currentPlayer]--;
    #####: 1190:    }
        3: 1191:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1192:    {
        -: 1193:      //reduce number of cards in hand
    #####: 1194:      state->handCount[currentPlayer]--;
    #####: 1195:    }
        -: 1196:  else 	
        -: 1197:    {
        -: 1198:      //replace discarded card with last card in hand
        3: 1199:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1200:      //set last card to -1
        3: 1201:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1202:      //reduce number of cards in hand
        3: 1203:      state->handCount[currentPlayer]--;
        -: 1204:    }
        -: 1205:	
        3: 1206:  return 0;
        -: 1207:}
        -: 1208:
function gainCard called 12 returned 100% blocks executed 100%
        -: 1209:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1210:{
        -: 1211:  //Note: supplyPos is enum of choosen card
        -: 1212:	
        -: 1213:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1214:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 50%
branch  1 taken 50%
        -: 1215:    {
        6: 1216:      return -1;
        -: 1217:    }
        -: 1218:	
        -: 1219:  //added card for [whoseTurn] current player:
        -: 1220:  // toFlag = 0 : add to discard
        -: 1221:  // toFlag = 1 : add to deck
        -: 1222:  // toFlag = 2 : add to hand
        -: 1223:
        6: 1224:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1225:    {
        2: 1226:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1227:      state->deckCount[player]++;
        2: 1228:    }
        4: 1229:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1230:    {
        2: 1231:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1232:      state->handCount[player]++;
        2: 1233:    }
        -: 1234:  else
        -: 1235:    {
        2: 1236:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1237:      state->discardCount[player]++;
        -: 1238:    }
        -: 1239:	
        -: 1240:  //decrease number in supply pile
        6: 1241:  state->supplyCount[supplyPos]--;
        -: 1242:	 
        6: 1243:  return 0;
       12: 1244:}
        -: 1245:
function updateCoins called 13 returned 100% blocks executed 85%
        -: 1246:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1247:{
        -: 1248:  int i;
        -: 1249:	
        -: 1250:  //reset coin count
       13: 1251:  state->coins = 0;
        -: 1252:
        -: 1253:  //add coins for each Treasure card in player's hand
      156: 1254:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1255:    {
       65: 1256:      if (state->hand[player][i] == copper)
branch  0 taken 74%
branch  1 taken 26%
        -: 1257:	{
       48: 1258:	  state->coins += 1;
       48: 1259:	}
       17: 1260:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1261:	{
    #####: 1262:	  state->coins += 2;
    #####: 1263:	}
       17: 1264:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1265:	{
    #####: 1266:	  state->coins += 3;
    #####: 1267:	}	
       65: 1268:    }	
        -: 1269:
        -: 1270:  //add bonus
       13: 1271:  state->coins += bonus;
        -: 1272:
       13: 1273:  return 0;
        -: 1274:}
        -: 1275:
        -: 1276://playSmithy function
function playSmithy called 1 returned 100% blocks executed 100%
        -: 1277:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1278:{
        -: 1279:  int i;
        -: 1280:  //+3 Cards
       10: 1281:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1282:  {
        4: 1283:    drawCard(currentPlayer, state);
        4: 1284:  }
        -: 1285:      
        -: 1286:  //discard card from hand
        1: 1287:  discardCard(handPos, currentPlayer, state, 0);
        1: 1288:  return 0;
        -: 1289:}
        -: 1290:
        -: 1291://play adventurer function
function playAdventurer called 3 returned 100% blocks executed 100%
        -: 1292:int playAdventurer(int currentPlayer, struct gameState *state, int cardDrawn, int drawntreasure, int z, int temphand[MAX_HAND])
        -: 1293:{
       38: 1294:  while(drawntreasure<2){
branch  0 taken 84%
branch  1 taken 16%
       16: 1295:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 19%
branch  1 taken 81%
        3: 1296:      shuffle(currentPlayer, state);
        3: 1297:    }
       16: 1298:    drawCard(currentPlayer, state);
       16: 1299:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       36: 1300:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 63%
branch  1 taken 38%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6: 1301:      drawntreasure++;
        -: 1302:    else{
       10: 1303:      temphand[z]=cardDrawn;
       10: 1304:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       10: 1305:      z++;
        -: 1306:    }
        -: 1307:  }
       32: 1308:  while(z >=0){
branch  0 taken 81%
branch  1 taken 19%
       13: 1309:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       13: 1310:    z=z-1;
        -: 1311:  }
        3: 1312:  return 0;
        -: 1313:}
        -: 1314:
        -: 1315://play village function
function playVillage called 1 returned 100% blocks executed 100%
        -: 1316:int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1317:{
        -: 1318:  //+1 Card
        1: 1319:  drawCard(currentPlayer, state);
        -: 1320:      
        -: 1321:  //+2 Actions
        1: 1322:  state->numActions = 2;
        -: 1323:      
        -: 1324:  //discard played card from hand
        1: 1325:  discardCard(handPos, currentPlayer, state, 0);
        1: 1326:  return 0;
        -: 1327:}
        -: 1328:
        -: 1329://play great_hall function
function playGreat_hall called 1 returned 100% blocks executed 100%
        -: 1330:int playGreat_hall(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:  //+1 Card
        1: 1333:  drawCard(currentPlayer, state);
        -: 1334:      
        -: 1335:  //+1 Actions
        1: 1336:  state->numActions++;
        -: 1337:      
        -: 1338:  //discard card from hand
        1: 1339:  discardCard(handPos, currentPlayer, state, 0);
        1: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343://play salvager function
function playSalvager called 0 returned 0% blocks executed 0%
        -: 1344:int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1345:{
        -: 1346:  //+1 buy
    #####: 1347:  state->numBuys++;
        -: 1348:      
    #####: 1349:  if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1350:  {
        -: 1351:    //gain coins equal to trashed card
    #####: 1352:    state->coins = getCost( handCard(choice1, state) );
        -: 1353:    //trash card
    #####: 1354:    discardCard(choice1, currentPlayer, state, 1);  
    #####: 1355:  }
        -: 1356:      
        -: 1357:  //discard card
    #####: 1358:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
