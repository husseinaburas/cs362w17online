1) There was a bug in the smithy method that Allan had created. Instead of looping 3 times, it only iterates twice. This means 
that the correct number of cards are not given to the player. The bug is highlighted in yellow below (not in .txt file obviously :-)  )

int playSmithy(struct gameState *state, int handPos)
{
       int currentPlayer = whoseTurn(state);
       int i;

       //+3 Cards
       //**** BUG  *** should be i < 3
       for (i = 0; i < 2; i++)
       {
         drawCard(currentPlayer, state);
       }

      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);
      return 0;
}

I was able to find this when running my tests for each card my first two tests for the Smithy card failed. I went back to my specific 
cardtest file (cardtest1.c) to see what tests were not being passed. Some of the tests in those files fail not because of bugs but because 
of errors in logic. For this case I simply went to the playSmithy function to see if I could find any clue to point me in the right direction. 
Since I knew that the test failed because the amount of cards was incorrect I knew to look where the cards were being sent to the user, and 
realized the incorrect number in the for-loop. This meant that the cards were giving 2 instead of 3. 


2) This bug came about when looking through some of Allan’s refactored method and is located inside of the playFeast method in dominion.c. 
This was just a dumb luck find and saw that the incorrect usage of <= is used, instead of <. 

int playFeast(struct gameState *state, int choice1)
{
   int currentPlayer = whoseTurn(state);
  int z = 0;
   int temphand[MAX_HAND];
   int i, x;

      //gain card with cost up to 5
      //Backup hand
      for (i = 0; i <= state->handCount[currentPlayer]; i++){
   temphand[i] = state->hand[currentPlayer][i];//Backup card
   state->hand[currentPlayer][i] = -1;//Set to nothing
      }
      //Backup hand

      //Update Coins for Buy
      updateCoins(currentPlayer, state, 5);
      x = 1;//Condition to loop on
      while( x == 1) {//Buy one card
   if (supplyCount(choice1, state) <= 0){
     if (DEBUG)
       printf("None of that card left, sorry!\n");

     if (DEBUG){
       printf("Cards Left: %d\n", supplyCount(choice1, state));
     }
   }
    //*** BUG *** should be state->coins < getCost(choice1)
   else if (state->coins <= getCost(choice1)){
     printf("That card is too expensive!\n");

     if (DEBUG){
       printf("Coins: %d < %d\n", state->coins, getCost(choice1));
     }
   }
   else{

     if (DEBUG){
       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
     }

     gainCard(choice1, state, 0, currentPlayer);//Gain the card
     x = 0;//No more buying cards

     if (DEBUG){
       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
     }

   }
      }     

      //Reset Hand
      for (i = 0; i <= state->handCount[currentPlayer]; i++){
   state->hand[currentPlayer][i] = temphand[i];
   temphand[i] = -1;
      }
      //Reset Hand
             
      return 0;

}

3) A third bug that I found came from the playCouncil function inside of dominion.c file. This was 
discovered when I ran the cardtest4 (test for feast), and it revealed that there were two failed tests, 
both having to do with an error in the number of cards. Because of the fact that the card numbers were not 
passing the test, I decided to look where the playCouncil method was and see if I could pinpoint a specific 
case of drawcard. I was able to determine that the “i” value should test whether it is NOT EQUAL to the current player 
instead of equal to. This was the reason the test cases were not passing.


int playCouncil_Room(struct gameState *state, int handPos)
{
    int i;
   int currentPlayer = whoseTurn(state);

      //+4 Cards
      for (i = 0; i < 4; i++)
   {
     drawCard(currentPlayer, state);
   }
         
      //+1 Buy
      state->numBuys++;
         
      //Each other player draws a card
      for (i = 0; i < state->numPlayers; i++)
   {
     //**** BUG **** should be i != currentPlayer
     if ( i == currentPlayer )
       {
         drawCard(i, state);
       }
   }
         
      //put played card in played card pile
      discardCard(handPos, currentPlayer, state, 0);
         
      return 0;
}
