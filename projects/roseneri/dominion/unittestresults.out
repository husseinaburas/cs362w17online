Test results saved to unittestresults.out
*************** start UNITTEST1, testing isGameOver *******

****** test 1, test new game for if it is over *****
return value = 0, expected return value = 0
TEST PASSED!

****** test 2, set Province pile to 0 *****
return value = 1, expected return value = 1
TEST PASSED!

****** test 3, test game after resetting province pile back to 8 *****
return value = 0, expected return value = 0
TEST PASSED!

****** test 4, set three supply piles to 0 *****
return value = 1, expected return value = 1
TEST PASSED!

******** UNITTEST1 SUCCESSFULLY COMPLETED *******

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

****** begin UNITTEST2 testing buyCard()  *** 

****** test 1, call buyCard() at start of game  *****
return value expected = 0, actual return value = 0
TEST PASSED!

****** test 2, call buyCard() after setting coins to zero  *****
return value expected = -1, actual return value = -1
TEST PASSED!

****** test 3, call buyCard() on province after setting coins to 5  *****
return value expected = -1, actual return value = -1
TEST PASSED!

****** test 4, call buyCard() on province after setting coins to 10  *****
return value expected = 0, actual return value = 0
TEST PASSED!

****** test 5, call buyCard() after setting coins to 10 and buys to 0  *****
return value expected = -1, actual return value = -1
TEST PASSED!

******  UNITTEST2 SUCCESSFULLY COMPLETED   *** 

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

******* Begin Test, UNITTEST3 testing whoseTurn() ******

****** test 1, test whoseTurn() at beginning of 3-person game *****
return value = 0, expected return value = 0
TEST PASSED!

****** test 2, test whoseTurn() after calling endTurn(testG) *****
return value = 1, expected return value = 1
TEST PASSED!

****** test 3, test whoseTurn() after calling endTurn(testG) again *****
return value = 2, expected return value = 2
TEST PASSED!

****** test 4, test whoseTurn() after calling endTurn(testG) again *****
return value = 0, expected return value = 0
TEST PASSED!

********** UNITTEST3 SUCCESSFULLY COMPLETED ****************

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

******* Begin Test, UNITTEST4 testing getCost() ******

****** test 1, test getCost(silver)*****
return value = 3, expected return value = 3
TEST PASSED!

****** test 12, test getCost(copper)*****
return value = 0, expected return value = 1
TEST FAILED!

****** test 3, test getCost(gold)*****
return value = 6, expected return value = 6
TEST PASSED!

****** test 4, test getCost(estate)*****
return value = 2, expected return value = 2
TEST PASSED!

****** test 5, test getCost(duchy)*****
return value = 5, expected return value = 5
TEST PASSED!

****** test 6, test getCost(province)*****
return value = 8, expected return value = 8
TEST PASSED!

****** test 7, test getCost(curse)*****
return value = 0, expected return value = 0
TEST PASSED!

****** test 8, test getCost(village)*****
return value = 3, expected return value = 3
TEST PASSED!

****** test 9, test getCost(feast)*****
return value = 4, expected return value = 4
TEST PASSED!

****** test 10, test getCost(adventurer)*****
return value = 6, expected return value = 6
TEST PASSED!

****** test 11, test getCost(smithy)*****
return value = 4, expected return value = 4
TEST PASSED!

****** test 12, test getCost(sea_hag)*****
return value = 4, expected return value = 4
TEST PASSED!

****** test 13, test getCost(cutpurse)*****
return value = 4, expected return value = 4
TEST PASSED!

****** test 14, test getCost(remodel)*****
return value = 4, expected return value = 4
TEST PASSED!

****** test 15, test getCost(tribute)*****
return value = 5, expected return value = 5
TEST PASSED!

******  UNITTEST4 SUCCESSFULLY COMPLETED ******

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

******* Begin Test, testing smithy ******
hand count = 7, expected = 7
TEST PASSED!

deck count = 1, expected = 2
TEST FAILED!

discard count = 0, expected = 0
TEST PASSED!

player 2 deck count = 10, expected = 10
TEST PASSED!

player 2 hand count = 0, expected = 0
TEST PASSED!

player 2 discard count = 0, expected = 0
TEST PASSED!

**********CARDTEST1 SUCCESSFULLY COMPLETED *****************

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

******* Begin Test, testing adventurer ******
hand count before = 5, hand count after = 7
TEST PASSED!

deck count before = 5, deck count after = 0
TEST PASSED!

expected discard count after = 3
discard count before = 0, discard counter after = 0
TEST FAILED!

player 2 deck count = 10, expected = 10
TEST PASSED!

player 2 hand count = 0, expected = 0
TEST PASSED!

player 2 discard count = 0, expected = 0
TEST PASSED!


Adventurer card test 2: only one treasure card in deck
hand count before = 5, hand count after = 6
TEST PASSED!

deck count before = 5, deck count after = 0
TEST PASSED!

expected discard count after = 4
discard count before = 0, discard counter after = 0
TEST FAILED!

player 2 deck count = 10, expected = 10
TEST PASSED!

player 2 hand count = 0, expected = 0
TEST PASSED!

player 2 discard count = 0, expected = 0
TEST PASSED!

CARDTEST2 SUCCESSFULLY COMPLETED
File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

******* Begin Test, testing steward ******
Test 1: Add 2 cards
hand count = 6, expected = 7
TEST FAILED!

deck count = 3, expected = 3
TEST PASSED!

coins = 4, expected = 4
TEST PASSED!

Test 2: Gain two coins
hand count = 4, expected = 5
TEST FAILED!

deck count = 5, expected = 5
TEST PASSED!

coins = 6, expected = 6
TEST PASSED!

Test 3: Trash two cards
hand count = 2, expected = 5
TEST FAILED!

deck count = 5, expected = 5
TEST PASSED!

CARDTTEST3 SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

****************** Begin Test, testing Village ******
hand count before = 5, hand count after = 5
TEST PASSED!

deck count before = 5, deck count after = 4
TEST PASSED!

player 2 deck count = 10, expected = 10
TEST PASSED!

player 2 hand count = 0, expected = 0
TEST PASSED!

player 2 discard count = 0, expected = 0
TEST PASSED!

************* CARDTEST4 SUCCESSFULLY COMPLETED  ***************

File 'dominion.c'
Lines executed:41.96% of 560
Branches executed:41.49% of 417
Taken at least once:29.98% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:377
        -:    0:Programs:59
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 10440 returned 100% blocks executed 83%
    10440:   10:int compare(const void* a, const void* b) {
    10440:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
    10440:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     2784:   14:    return -1;
     7656:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 113 returned 100% blocks executed 100%
      113:   18:struct gameState* newGame() {
      113:   19:  struct gameState* g = malloc(sizeof(struct gameState));
      113:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 346 returned 100% blocks executed 94%
      346:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
      346:   46:  SelectStream(1);
call    0 returned 100%
      346:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
      346:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
      346:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
     3806:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
    38060:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
    34600:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
      346:   75:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   76:    {
      342:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
        4:   79:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:    {
        4:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
      346:   89:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   90:    {
      342:   91:      state->supplyCount[estate] = 8;
      342:   92:      state->supplyCount[duchy] = 8;
      342:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
        4:   97:      state->supplyCount[estate] = 12;
        4:   98:      state->supplyCount[duchy] = 12;
        4:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
      346:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      346:  104:  state->supplyCount[silver] = 40;
      346:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
     7266:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
    57090:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  111:	{
    53630:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
     3460:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        -:  116:		{
      272:  117:		  if (numPlayers == 2){ 
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      132:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
        4:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
     3324:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
     3460:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    50170:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
     1042:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  141:    {
      696:  142:      state->deckCount[i] = 0;
     2784:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
     2088:  145:	  state->deck[i][j] = estate;
     2088:  146:	  state->deckCount[i]++;
        -:  147:	}
     5568:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
     4872:  150:	  state->deck[i][j] = copper;
     4872:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
     1042:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  157:    {
      696:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
     1042:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
      696:  168:      state->handCount[i] = 0;
      696:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
     9688:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
     9342:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
      346:  184:  state->outpostPlayed = 0;
      346:  185:  state->phase = 0;
      346:  186:  state->numActions = 1;
      346:  187:  state->numBuys = 1;
      346:  188:  state->playedCardCount = 0;
      346:  189:  state->whoseTurn = 0;
      346:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
     2076:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1730:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
      346:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
      346:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 1268 returned 100% blocks executed 100%
     1268:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     1268:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     1268:  211:  if (state->deckCount[player] < 1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
      572:  212:    return -1;
      696:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     8352:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     6960:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     6960:  218:    newDeck[newDeckPos] = state->deck[player][card];
     6960:  219:    newDeckPos++;
    20896:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
    13936:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
     6960:  223:    state->deckCount[player]--;
        -:  224:  }
     7656:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     6960:  226:    state->deck[player][i] = newDeck[i];
     6960:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
      696:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 83 returned 100% blocks executed 93%
       83:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
       83:  282:  who = state->whoseTurn;
        -:  283:
       83:  284:  if (state->numBuys < 1){
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
       19:  287:    return -1;
       64:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
       64:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       33:  295:    return -1;
        -:  296:  } else {
       31:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
       31:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  300:  
       31:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       31:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
       31:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 95 returned 100% blocks executed 100%
       95:  322:int supplyCount(int card, struct gameState *state) {
       95:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 331 returned 100% blocks executed 100%
      331:  348:int whoseTurn(struct gameState *state) {
      331:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 12 returned 100% blocks executed 100%
       12:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
       12:  355:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  356:  
        -:  357:  //Discard hand
       72:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       60:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
       12:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
       12:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        9:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
        3:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
       12:  372:  state->outpostPlayed = 0;
       12:  373:  state->phase = 0;
       12:  374:  state->numActions = 1;
       12:  375:  state->coins = 0;
       12:  376:  state->numBuys = 1;
       12:  377:  state->playedCardCount = 0;
       12:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
       72:  382:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  384:  }
        -:  385:
        -:  386:  //Update money
       12:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  388:
       12:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 282 returned 100% blocks executed 100%
      282:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
      282:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  398:    {
       70:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
      212:  403:  j = 0;
     5512:  404:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  405:    {
     5300:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  407:	{
      192:  408:	  j++;
        -:  409:	}
        -:  410:    }
      212:  411:  if ( j >= 3)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  412:    {
       64:  413:      return 1;
        -:  414:    }
        -:  415:
      148:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 2802 returned 100% blocks executed 85%
     2802:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
     2802:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      286:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      286:  540:    state->deckCount[player] = state->discardCount[player];
      286:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      286:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      286:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      286:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      286:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      286:  561:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      286:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
     2516:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
     2516:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2516:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2516:  578:    state->deckCount[player]--;
     2516:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
     2516:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 443 returned 100% blocks executed 57%
      443:  585:int getCost(int cardNumber)
        -:  586:{
      443:  587:  switch( cardNumber ) 
branch  0 taken 5%
branch  1 taken 16%
branch  2 taken 7%
branch  3 taken 13%
branch  4 taken 5%
branch  5 taken 6%
branch  6 taken 5%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 5%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 5%
branch 13 taken 5%
branch 14 taken 5%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 5%
branch 20 taken 0%
branch 21 taken 5%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 5%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
       23:  590:      return 0;
        -:  591:    case estate:
       73:  592:      return 2;
        -:  593:    case duchy:
       33:  594:      return 5;
        -:  595:    case province:
       58:  596:      return 8;
        -:  597:    case copper:
       23:  598:      return 0;
        -:  599:    case silver:
       26:  600:      return 3;
        -:  601:    case gold:
       23:  602:      return 6;
        -:  603:    case adventurer:
       23:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
       23:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
       23:  614:      return 4;
        -:  615:    case smithy:
       23:  616:      return 4;
        -:  617:    case village:
       23:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
       23:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
       23:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
       23:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648://*******************************************************
        -:  649:// function play_smithy_card
        -:  650:// Draws three cards, discards, returns
        -:  651://******************************************************* 
function play_smithy_card called 46 returned 100% blocks executed 100%
       46:  652:int play_smithy_card(struct gameState *state, int currentPlayer, int handPos)
        -:  653:{
        -:  654:   int i;
      184:  655:   for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  656:	   {
      138:  657:	     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  658:	   }
        -:  659:   //discard card from hand
       46:  660:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       46:  661:   return 0;
        -:  662:}
        -:  663://******************************************************
        -:  664:// *function* play_adventurer_card
        -:  665:// *****************************************************
function play_adventurer_card called 94 returned 100% blocks executed 93%
       94:  666:int play_adventurer_card(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z )
        -:  667:{
      903:  668:  while(drawntreasure<2)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  669:  {
      715:  670:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
      286:  671:	    shuffle(currentPlayer, state);
call    0 returned 100%
        -:  672:  	}
      715:  673:  	drawCard(currentPlayer, state);
call    0 returned 100%
      715:  674:  	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      715:  675:  	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
      188:  676:	    drawntreasure++;
        -:  677:  	else{
      527:  678:	    temphand[z]=cardDrawn;
      527:  679:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  680:	  // z++ (removed this line to induce a bug, but left this message to be nice )
        -:  681:	  }
        -:  682:  }
      188:  683:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  684:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  685:	  z=z-1;
        -:  686:  }
       94:  687:  return 0;
        -:  688:}			
        -:  689://******************************************************
        -:  690:// **function** play_council_room 
        -:  691://******************************************************
function play_council_room called 0 returned 0% blocks executed 0%
    #####:  692:int play_council_room(struct gameState *state, int currentPlayer, int handPos)
        -:  693:{
        -:  694:  //+4 Cards
        -:  695:	int i;
    #####:  696:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	}
        -:  700:			
        -:  701:  //+1 Buy Another bug, the line below shouldn't be commented out
        -:  702:  // state->numBuys++;
        -:  703:			
        -:  704:  //Each other player draws a card
    #####:  705:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
call    0 never executed
        -:  710:	    }
        -:  711:	}
        -:  712:			
        -:  713:  //put played card in played card pile
    #####:  714:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  715:		
    #####:  716:  return 0;
        -:  717:}			
        -:  718://******************************************************
        -:  719:// **function** play_remodel
        -:  720://******************************************************
function play_remodel called 0 returned 0% blocks executed 0%
    #####:  721:int play_remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int j) 
        -:  722:{
    #####:  723:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  724:
    #####:  725:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  726:	  {
    #####:  727:	    return 0;
        -:  728:	  }
        -:  729:
    #####:  730:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  731:
        -:  732:    //discard card from hand
    #####:  733:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  734:
        -:  735:    //discard trashed card
        -:  736:    int i;	
    #####:  737:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  738:  	{
    #####:  739:	    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  740:	    {
    #####:  741:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  742:	      break;
        -:  743:	    }
        -:  744:	  }
    #####:  745:    return 0;
        -:  746:}			
        -:  747://******************************************************
        -:  748:// **function** play_great_hall
        -:  749://******************************************************
function play_great_hall called 0 returned 0% blocks executed 0%
    #####:  750:int play_great_hall(int currentPlayer, struct gameState *state, int handPos) 	
        -:  751:{
        -:  752://+1 Card
    #####:  753:  drawCard(currentPlayer, state);
call    0 never executed
        -:  754:			
        -:  755:  //+1 Actions
    #####:  756:  state->numActions++;
        -:  757:			
        -:  758:  //discard card from hand
    #####:  759:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  760:  return 0;
        -:  761:} 
        -:  762://********************************************************
        -:  763:
function cardEffect called 299 returned 100% blocks executed 10%
      299:  764:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  765:{
        -:  766:  int i;
      299:  767:  int j=0;
        -:  768:  int k;
        -:  769:  int x;
        -:  770:  int index;
      299:  771:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      299:  772:  int nextPlayer = currentPlayer + 1;
        -:  773:
      299:  774:  int tributeRevealedCards[2] = {-1, -1};
        -:  775:  int temphand[MAX_HAND];// moved above the if statement
      299:  776:  int drawntreasure=0;
      299:  777:  int cardDrawn=0;
      299:  778:  int z = 0;// this is the counter for the temp hand
      299:  779:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  780:    nextPlayer = 0;
        -:  781:  }
        -:  782:  
        -:  783:	
        -:  784:  //uses switch to select card and perform actions
      299:  785:  switch( card ) 
branch  0 taken 31%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 15%
branch  7 taken 7%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 46%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  786:    {
        -:  787://*******************************************************	
        -:  788:    case adventurer:
       94:  789:      play_adventurer_card(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
call    0 returned 100%
       94:  790:      break; 
        -:  791://*******************************************************
        -:  792:    case council_room:
    #####:  793:		  play_council_room(state, currentPlayer, handPos);
call    0 never executed
    #####:  794:      break;
        -:  795://*******************************************************
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  809:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:		
    #####:  860:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  866:	{
    #####:  867:	  return -1;
        -:  868:	}
        -:  869:
    #####:  870:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  871:
        -:  872:      //discard card from hand
    #####:  873:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  874:
        -:  875:      //discard trashed card
    #####:  876:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	{
    #####:  878:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  881:	      break;
        -:  882:	    }
        -:  883:	}
        -:  884:			
    #####:  885:      return 0;
        -:  886://***********************************************************			
        -:  887:    case remodel:
    #####:  888:      play_remodel(state, currentPlayer, choice1, choice2, handPos, j); 
call    0 never executed
        -:  889://************************************************************			
        -:  890:    case smithy:
       46:  891:		  play_smithy_card(state, currentPlayer, handPos);
call    0 returned 100%
        -:  892://************************************************************
        -:  893:    case village:
        -:  894:      //+1 Card
       67:  895:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  896:			
        -:  897:      //+2 Actions
       67:  898:      state->numActions = state->numActions + 2;
        -:  899:			
        -:  900:      //discard played card from hand
       67:  901:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       67:  902:      return 0;
        -:  903:		
        -:  904:    case baron:
    #####:  905:      state->numBuys++;//Increase buys by 1!
    #####:  906:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  907:	int p = 0;//Iterator for hand!
    #####:  908:	int card_not_discarded = 1;//Flag for discard set!
    #####:  909:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  910:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  911:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  912:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  913:	    state->discardCount[currentPlayer]++;
    #####:  914:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  915:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  916:	    }
    #####:  917:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  918:	    state->handCount[currentPlayer]--;
    #####:  919:	    card_not_discarded = 0;//Exit the loop
        -:  920:	  }
    #####:  921:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  922:	    if(DEBUG) {
        -:  923:	      printf("No estate cards in your hand, invalid choice\n");
        -:  924:	      printf("Must gain an estate if there are any\n");
        -:  925:	    }
    #####:  926:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  928:	      state->supplyCount[estate]--;//Decrement estates
    #####:  929:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  930:		isGameOver(state);
call    0 never executed
        -:  931:	      }
        -:  932:	    }
    #####:  933:	    card_not_discarded = 0;//Exit the loop
        -:  934:	  }
        -:  935:			    
        -:  936:	  else{
    #####:  937:	    p++;//Next card
        -:  938:	  }
        -:  939:	}
        -:  940:      }
        -:  941:			    
        -:  942:      else{
    #####:  943:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  945:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  946:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:	    isGameOver(state);
call    0 never executed
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:	    
        -:  952:      
    #####:  953:      return 0;
        -:  954://**************************************		
        -:  955:    case great_hall:
    #####:  956:		  play_great_hall(currentPlayer, state, handPos);
call    0 never executed
        -:  957://*************************************			
        -:  958:   		
        -:  959:    case minion:
        -:  960:      //+1 action
    #####:  961:      state->numActions++;
        -:  962:			
        -:  963:      //discard card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  965:			
    #####:  966:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  967:	{
    #####:  968:	  state->coins = state->coins + 2;
        -:  969:	}
        -:  970:			
    #####:  971:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  972:	{
        -:  973:	  //discard hand
    #####:  974:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  975:	    {
    #####:  976:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  977:	    }
        -:  978:				
        -:  979:	  //draw 4
    #####:  980:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  983:	    }
        -:  984:				
        -:  985:	  //other players discard hand and redraw if hand size > 4
    #####:  986:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  989:		{
    #####:  990:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  991:		    {
        -:  992:		      //discard hand
    #####:  993:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  994:			{
    #####:  995:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  996:			}
        -:  997:							
        -:  998:		      //draw 4
    #####:  999:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1000:			{
    #####: 1001:			  drawCard(i, state);
call    0 never executed
        -: 1002:			}
        -: 1003:		    }
        -: 1004:		}
        -: 1005:	    }
        -: 1006:				
        -: 1007:	}
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case steward:
      138: 1011:      if (choice1 == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1012:	{
        -: 1013:	  //+2 cards
       46: 1014:	  drawCard(currentPlayer, state);
call    0 returned 100%
       46: 1015:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1016:	}
       92: 1017:      else if (choice1 == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1018:	{
        -: 1019:	  //+2 coins
       46: 1020:	  state->coins = state->coins + 2;
        -: 1021:	}
        -: 1022:      else
        -: 1023:	{
        -: 1024:	  //trash 2 cards in hand
       46: 1025:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
       46: 1026:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1027:	}
        -: 1028:			
        -: 1029:      //discard card from hand
      138: 1030:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      138: 1031:      return 0;
        -: 1032:		
        -: 1033:    case tribute:
    #####: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	  state->deckCount[nextPlayer]--;
        -: 1038:	}
    #####: 1039:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1041:	  state->discardCount[nextPlayer]--;
        -: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      else{
    #####: 1052:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1055:	    state->deckCount[nextPlayer]++;
    #####: 1056:	    state->discard[nextPlayer][i] = -1;
    #####: 1057:	    state->discardCount[nextPlayer]--;
        -: 1058:	  }
        -: 1059:			    
    #####: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1061:	} 
    #####: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
    #####: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
    #####: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1072:	state->playedCardCount++;
    #####: 1073:	tributeRevealedCards[1] = -1;
        -: 1074:      }
        -: 1075:
    #####: 1076:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1078:	  state->coins += 2;
        -: 1079:	}
        -: 1080:		    
    #####: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:	}
        -: 1085:	else{//Action Card
    #####: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
        -: 1088:      }
        -: 1089:	    
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case ambassador:
    #####: 1093:      j = 0;		//used to check if player has enough cards to discard
        -: 1094:
    #####: 1095:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
    #####: 1100:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
    #####: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1108:	    {
    #####: 1109:	      j++;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;				
        -: 1115:	}
        -: 1116:
        -: 1117:      if (DEBUG) 
        -: 1118:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1119:
        -: 1120:      //increase supply count for choosen card by amount being discarded
    #####: 1121:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1122:			
        -: 1123:      //each other player gains a copy of revealed card
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1127:	    {
    #####: 1128:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1129:	    }
        -: 1130:	}
        -: 1131:
        -: 1132:      //discard played card from hand
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1134:
        -: 1135:      //trash copies of cards returned to supply
    #####: 1136:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1143:		  break;
        -: 1144:		}
        -: 1145:	    }
        -: 1146:	}			
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case cutpurse:
        -: 1151:
    #####: 1152:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1153:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1156:	    {
    #####: 1157:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:		{
    #####: 1159:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1160:		    {
    #####: 1161:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1162:		      break;
        -: 1163:		    }
    #####: 1164:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1165:		    {
    #####: 1166:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1167:			{
        -: 1168:			  if (DEBUG)
        -: 1169:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1170:			}	
    #####: 1171:		      break;
        -: 1172:		    }		
        -: 1173:		}
        -: 1174:					
        -: 1175:	    }
        -: 1176:				
        -: 1177:	}				
        -: 1178:
        -: 1179:      //discard played card from hand
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1181:
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1191:	{
    #####: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1228:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
       94: 1267:  return -1;
        -: 1268:}
        -: 1269:
function discardCard called 343 returned 100% blocks executed 78%
      343: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
      343: 1274:  if (trashFlag < 1)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1275:    {
        -: 1276:      //add card to played pile
      251: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      251: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
      343: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
      343: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
      343: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
      343: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
      343: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
      343: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
      343: 1305:  return 0;
        -: 1306:}
        -: 1307:
function gainCard called 31 returned 100% blocks executed 70%
       31: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
       31: 1313:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
       31: 1323:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1326:      state->deckCount[player]++;
        -: 1327:    }
       31: 1328:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1329:    {
    #####: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
       31: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       31: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
       31: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
       31: 1342:  return 0;
        -: 1343:}
        -: 1344:
function updateCoins called 358 returned 100% blocks executed 82%
      358: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
      358: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
     2148: 1353:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1354:    {
     1790: 1355:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1356:	{
     1424: 1357:	  state->coins += 1;
        -: 1358:	}
      366: 1359:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 2;
        -: 1362:	}
      366: 1363:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1364:	{
    #####: 1365:	  state->coins += 3;
        -: 1366:	}	
        -: 1367:    }	
        -: 1368:
        -: 1369:  //add bonus
      358: 1370:  state->coins += bonus;
        -: 1371:
      358: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375://******************************************************
        -: 1376://end of dominion.c
