        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Automated Random Test for the Adventure card
        -:    2:// Compile --  gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestadventurer.c rngs.c -o randomtestadventurer -lm -g
        -:    3:// find . -name "*.gcda" -print0 | xargs -0 rm
        -:    4:// ./randomtestadventurer
        -:    5:// gcov randomtestadventurer
        -:    6:#include "dominion.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:///////// Global Variable /////////
        -:   13:int test_passed = 0;
        -:   14:////////////////////////////////
        -:   15:
        -:   16:
function check_results called 1000 returned 100% blocks executed 100%
        -:   17:void check_results(int a)
        -:   18:{
     1000:   19:  if(a == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   20:  {
     1000:   21:    test_passed++;
     1000:   22:  }
        -:   23:
     1000:   24:}
        -:   25:
        -:   26:
function main called 1 returned 100% blocks executed 93%
        -:   27:int main(int argc, char *argv[])
        -:   28:{
        -:   29:  int a, b, playersn, randomSeed, userRandomSeed, value, countDeck, countHand;
        1:   30:  int currentplayer = 1;
        -:   31:  struct gameState game;
        -:   32:
        1:   33:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   34:  userRandomSeed = 0;
        1:   35:  userRandomSeed = atoi(argv[1]);
        -:   36:
        1:   37:  printf("User Inputed: %d \n", userRandomSeed);
        -:   38:
        -:   39:
        1:   40:  printf("\nAutomated Random Test -- ADVENTURER\n-----------\nThere are 10 rounds of testing...\nEach round has 100 random tests...\n");
        -:   41:
        -:   42:
       22:   43:  for(int z = 0; z < 10 ; z++)
branch  0 taken 91%
branch  1 taken 9%
        -:   44:  {
       10:   45:    printf("Testing Round %d\n", (z+1));
     2020:   46:    for(int i = 0; i < 100; i ++)
branch  0 taken 99%
branch  1 taken 1%
        -:   47:    {
     1000:   48:      playersn = rand() % 4; // Randon Number of players
        -:   49:
     1000:   50:      if (userRandomSeed == 0) // RandomSeed
branch  0 taken 0%
branch  1 taken 100%
        -:   51:      {
    #####:   52:          randomSeed = rand() % 100000; // Random Seed
    #####:   53:      }
        -:   54:      else
        -:   55:      {
     1000:   56:        randomSeed = rand() % userRandomSeed;
        -:   57:      }
     1000:   58:      a = initializeGame(playersn,cards, randomSeed, &game); // Initiliaze the game
        -:   59:
        -:   60:
     1000:   61:      value = rand() % 6; // set a value random
        -:   62:
     1000:   63:      if(value == 1) // if the value is 1 set the deckCount to 0
branch  0 taken 15%
branch  1 taken 85%
        -:   64:      {
      154:   65:        game.deckCount[currentplayer] = 0;
      154:   66:        countDeck = 0 ;
      154:   67:      }
        -:   68:      else // otherwise pick a random value
        -:   69:      {
      846:   70:        countDeck = rand() % MAX_DECK;
      846:   71:        game.deckCount[currentplayer] = countDeck;
        -:   72:      }
        -:   73:
     1000:   74:      countHand = rand() % MAX_HAND;
     1000:   75:      game.handCount[currentplayer] = countHand;
        -:   76:
        -:   77:
     1000:   78:      game.discardCount[currentplayer] = rand() % MAX_DECK;
        -:   79:
     1000:   80:      b = cardEffect(adventurer, 1, 1, 1, &game);
        -:   81:
     1000:   82:      check_results(b);
        -:   83:
     1000:   84:    }
        -:   85:
       10:   86:  }
        1:   87:  printf("\nResults\n----------\n");
        1:   88:  printf("Test's Passed: %d\n",test_passed );
        1:   89:  printf("Test's Failed: %d\n",(1000 - test_passed) );
        1:   90:  printf("Total Number of Test's: %d\n",1000 );
        -:   91:
        -:   92:
        1:   93:}
