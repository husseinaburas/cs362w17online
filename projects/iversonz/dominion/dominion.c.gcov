        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 130661 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   130661:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
      981:   10:    return 1;
   129680:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 25%
branch  1 taken 75%
    31905:   12:    return -1;
    97775:   13:  return 0;
   130661:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5000 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     5000:   44:  SelectStream(1);
     5000:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 51%
branch  3 taken 49%
        -:   49:    {
     2551:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2449:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    53878:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   538780:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   465310:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   244900:   65:        }
    24490:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2449:   73:  if (numPlayers == 2)
branch  0 taken 48%
branch  1 taken 52%
        -:   74:    {
     1180:   75:      state->supplyCount[curse] = 10;
     1180:   76:    }
     1269:   77:  else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
     1269:   79:      state->supplyCount[curse] = 20;
     1269:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2449:   87:  if (numPlayers == 2)
branch  0 taken 48%
branch  1 taken 52%
        -:   88:    {
     1180:   89:      state->supplyCount[estate] = 8;
     1180:   90:      state->supplyCount[duchy] = 8;
     1180:   91:      state->supplyCount[province] = 8;
     1180:   92:    }
        -:   93:  else
        -:   94:    {
     1269:   95:      state->supplyCount[estate] = 12;
     1269:   96:      state->supplyCount[duchy] = 12;
     1269:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2449:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2449:  102:  state->supplyCount[silver] = 40;
     2449:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   102858:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   808170:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   379595:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    48980:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
     2449:  115:		  if (numPlayers == 2){
branch  0 taken 48%
branch  1 taken 52%
     1180:  116:		    state->supplyCount[i] = 8;
     1180:  117:		  }
     1269:  118:		  else{ state->supplyCount[i] = 12; }
     2449:  119:		}
        -:  120:	      else
        -:  121:		{
    22041:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    24490:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   355105:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   355105:  130:	}
        -:  131:
    48980:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    17232:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28%
        -:  139:    {
     6167:  140:      state->deckCount[i] = 0;
    49336:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
    18501:  143:	  state->deck[i][j] = estate;
    18501:  144:	  state->deckCount[i]++;
    18501:  145:	}
    98672:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
    43169:  148:	  state->deck[i][j] = copper;
    43169:  149:	  state->deckCount[i]++;
    43169:  150:	}
     6167:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    17232:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28%
        -:  155:    {
     6167:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     6167:  160:    }
        -:  161:
        -:  162:  //draw player hands
    17232:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28%
        -:  164:    {
        -:  165:      //initialize hand size to zero
     6167:  166:      state->handCount[i] = 0;
     6167:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     6167:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   137144:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    66123:  178:      state->embargoTokens[i] = 0;
    66123:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2449:  182:  state->outpostPlayed = 0;
     2449:  183:  state->phase = 0;
     2449:  184:  state->numActions = 1;
     2449:  185:  state->numBuys = 1;
     2449:  186:  state->playedCardCount = 0;
     2449:  187:  state->whoseTurn = 0;
     2449:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    29388:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
    12245:  193:    drawCard(state->whoseTurn, state);
    12245:  194:  }
        -:  195:
     2449:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2449:  198:  return 0;
     5000:  199:}
        -:  200:
function shuffle called 19226 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19226:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19226:  209:  if (state->deckCount[player] < 1)
branch  0 taken 55%
branch  1 taken 45%
    10563:  210:    return -1;
     8663:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   226968:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8%
   104821:  215:    card = floor(Random() * state->deckCount[player]);
   104821:  216:    newDeck[newDeckPos] = state->deck[player][card];
   104821:  217:    newDeckPos++;
  7269100:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 97%
branch  1 taken 3%
  3529729:  219:      state->deck[player][i] = state->deck[player][i+1];
  3529729:  220:    }
   104821:  221:    state->deckCount[player]--;
        -:  222:  }
   226968:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8%
   104821:  224:    state->deck[player][i] = newDeck[i];
   104821:  225:    state->deckCount[player]++;
   104821:  226:  }
        -:  227:
     8663:  228:  return 0;
    19226:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 4000 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
     4000:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5616 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
     5616:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 9000 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     9000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 24 returned 100% blocks executed 84%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       24:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       24:  401:  j = 0;
     1248:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      600:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:  405:	{
       24:  406:	  j++;
       24:  407:	}
      600:  408:    }
       24:  409:  if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       24:  414:  return 0;
       24:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 34179 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34179:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 31%
branch  1 taken 69%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   107470:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 80%
branch  1 taken 20%
    43151:  534:      state->deck[player][i] = state->discard[player][i];
    43151:  535:      state->discard[player][i] = -1;
    43151:  536:    }
        -:  537:
    10584:  538:    state->deckCount[player] = state->discardCount[player];
    10584:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    10584:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    10584:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    10584:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    10584:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    10584:  559:    if (deckCounter == 0)
branch  0 taken 76%
branch  1 taken 24%
     8088:  560:      return -1;
        -:  561:
     2496:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2496:  563:    state->deckCount[player]--;
     2496:  564:    state->handCount[player]++;//Increment hand count
     2496:  565:  }
        -:  566:
        -:  567:  else{
    23595:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23595:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23595:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23595:  576:    state->deckCount[player]--;
    23595:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    26091:  580:  return 0;
    34179:  581:}
        -:  582:
function getCost called 1000 returned 100% blocks executed 12%
        -:  583:int getCost(int cardNumber)
        -:  584:{
     1000:  585:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
     1000:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
     1000:  644:}
        -:  645:
function cardEffect called 5000 returned 100% blocks executed 19%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     5000:  653:  int currentPlayer = whoseTurn(state);
     5000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     5000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     5000:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     5000:  660:  int z = 0;// this is the counter for the temp hand
     5000:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    13000:  667:  switch( card )
branch  0 taken 8%
branch  1 taken 8%
branch  2 taken 8%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 15%
branch  7 taken 31%
branch  8 taken 31%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:    // Function at the bottom of this file
     1000:  671:    playAdventurer(drawntreasure, state, currentPlayer, temphand, cardDrawn, z);
        -:  672:
        -:  673:
        -:  674:    case council_room:
        -:  675:    // Function at the bottom of this file
     1000:  676:    playCouncil_Room(state, currentPlayer, handPos);
        -:  677:
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    22000:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9%
    10000:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    10000:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
    10000:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
     1000:  688:      updateCoins(currentPlayer, state, 5);
     1000:  689:      x = 1;//Condition to loop on
     4000:  690:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50%
     1000:  691:	if (supplyCount(choice1, state) <= 0){
branch  0 taken 0%
branch  1 taken 100%
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
    #####:  698:	}
     1000:  699:	else if (state->coins < getCost(choice1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  700:	  printf("That card is too expensive!\n");
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
    #####:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
     1000:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
     1000:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }
        -:  721:
        -:  722:      //Reset Hand
    22000:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9%
    10000:  724:	state->hand[currentPlayer][i] = temphand[i];
    10000:  725:	temphand[i] = -1;
    10000:  726:      }
        -:  727:      //Reset Hand
        -:  728:
     1000:  729:      return 0;
        -:  730:
        -:  731:    case gardens:
    #####:  732:      return -1;
        -:  733:
        -:  734:    case mine:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 2, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);
    #####:  763:	      break;
        -:  764:	    }
    #####:  765:	}
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:    case remodel:
    #####:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
    #####:  772:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  773:	{
    #####:  774:	  return -1;
        -:  775:	}
        -:  776:
    #####:  777:      gainCard(choice2, state, 0, currentPlayer);
        -:  778:
        -:  779:      //discard card from hand
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
        -:  781:
        -:  782:      //discard trashed card
    #####:  783:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      discardCard(i, currentPlayer, state, 0);
    #####:  788:	      break;
        -:  789:	    }
    #####:  790:	}
        -:  791:
        -:  792:
    #####:  793:      return 0;
        -:  794:
        -:  795:    case smithy:
        -:  796:    // Function at the bottom of this file
     2000:  797:    playSmithy( state, currentPlayer , handPos);
        -:  798:
        -:  799:    case village:
        -:  800:    // Function at the bottom of this file
     4000:  801:    playVillage(state, currentPlayer, handPos);
        -:  802:
        -:  803:    case baron:
     4000:  804:      state->numBuys++;//Increase buys by 1!
     4000:  805:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 100%
branch  1 taken 0%
     4000:  806:	int p = 0;//Iterator for hand!
     4000:  807:	int card_not_discarded = 1;//Flag for discard set!
    32534:  808:	while(card_not_discarded){
branch  0 taken 75%
branch  1 taken 25%
    12267:  809:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 23%
branch  1 taken 77%
     2780:  810:	    state->coins += 4;//Add 4 coins to the amount of coins
     2780:  811:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     2780:  812:	    state->discardCount[currentPlayer]++;
    33384:  813:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 83%
branch  1 taken 17%
    13912:  814:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    13912:  815:	    }
     2780:  816:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     2780:  817:	    state->handCount[currentPlayer]--;
     2780:  818:	    card_not_discarded = 0;//Exit the loop
     2780:  819:	  }
     9487:  820:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 13%
branch  1 taken 87%
        -:  821:	    if(DEBUG) {
        -:  822:	      printf("No estate cards in your hand, invalid choice\n");
        -:  823:	      printf("Must gain an estate if there are any\n");
        -:  824:	    }
     1220:  825:	    if (supplyCount(estate, state) > 0){
branch  0 taken 98%
branch  1 taken 2%
     1198:  826:	      gainCard(estate, state, 0, currentPlayer);
     1198:  827:	      state->supplyCount[estate]--;//Decrement estates
     1198:  828:	      if (supplyCount(estate, state) == 0){
branch  0 taken 2%
branch  1 taken 98%
       24:  829:		isGameOver(state);
       24:  830:	      }
     1198:  831:	    }
     1220:  832:	    card_not_discarded = 0;//Exit the loop
     1220:  833:	  }
        -:  834:
        -:  835:	  else{
     8267:  836:	    p++;//Next card
        -:  837:	  }
        -:  838:	}
     4000:  839:      }
        -:  840:
        -:  841:      else{
    #####:  842:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  843:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  844:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  845:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  846:	    isGameOver(state);
    #####:  847:	  }
    #####:  848:	}
        -:  849:      }
        -:  850:
        -:  851:
     4000:  852:      return 0;
        -:  853:
        -:  854:    case great_hall:
        -:  855:    // Function at the bottom of this file
    #####:  856:    playGreatHall(state, currentPlayer, handPos);
        -:  857:
        -:  858:    case minion:
        -:  859:      //+1 action
    #####:  860:      state->numActions++;
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:
    #####:  865:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  state->coins = state->coins + 2;
    #####:  868:	}
        -:  869:
    #####:  870:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  871:	{
        -:  872:	  //discard hand
    #####:  873:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      discardCard(handPos, currentPlayer, state, 0);
        -:  876:	    }
        -:  877:
        -:  878:	  //draw 4
    #####:  879:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	    {
    #####:  881:	      drawCard(currentPlayer, state);
    #####:  882:	    }
        -:  883:
        -:  884:	  //other players discard hand and redraw if hand size > 4
    #####:  885:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  888:		{
    #####:  889:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  890:		    {
        -:  891:		      //discard hand
    #####:  892:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  893:			{
    #####:  894:			  discardCard(handPos, i, state, 0);
        -:  895:			}
        -:  896:
        -:  897:		      //draw 4
    #####:  898:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  drawCard(i, state);
    #####:  901:			}
    #####:  902:		    }
    #####:  903:		}
    #####:  904:	    }
        -:  905:
    #####:  906:	}
    #####:  907:      return 0;
        -:  908:
        -:  909:    case steward:
    #####:  910:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  911:	{
        -:  912:	  //+2 cards
    #####:  913:	  drawCard(currentPlayer, state);
    #####:  914:	  drawCard(currentPlayer, state);
    #####:  915:	}
    #####:  916:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 coins
    #####:  919:	  state->coins = state->coins + 2;
    #####:  920:	}
        -:  921:      else
        -:  922:	{
        -:  923:	  //trash 2 cards in hand
    #####:  924:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  925:	  discardCard(choice3, currentPlayer, state, 1);
        -:  926:	}
        -:  927:
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:
        -:  932:    case tribute:
    #####:  933:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  935:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	  state->deckCount[nextPlayer]--;
    #####:  937:	}
    #####:  938:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  939:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  940:	  state->discardCount[nextPlayer]--;
    #####:  941:	}
        -:  942:	else{
        -:  943:	  //No Card to Reveal
        -:  944:	  if (DEBUG){
        -:  945:	    printf("No cards to reveal\n");
        -:  946:	  }
        -:  947:	}
    #####:  948:      }
        -:  949:
        -:  950:      else{
    #####:  951:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  952:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  953:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  954:	    state->deckCount[nextPlayer]++;
    #####:  955:	    state->discard[nextPlayer][i] = -1;
    #####:  956:	    state->discardCount[nextPlayer]--;
    #####:  957:	  }
        -:  958:
    #####:  959:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  960:	}
    #####:  961:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
    #####:  964:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
        -:  967:      }
        -:  968:
    #####:  969:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  970:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  971:	state->playedCardCount++;
    #####:  972:	tributeRevealedCards[1] = -1;
    #####:  973:      }
        -:  974:
    #####:  975:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  977:	  state->coins += 2;
    #####:  978:	}
        -:  979:
    #####:  980:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  981:	  drawCard(currentPlayer, state);
    #####:  982:	  drawCard(currentPlayer, state);
    #####:  983:	}
        -:  984:	else{//Action Card
    #####:  985:	  state->numActions = state->numActions + 2;
        -:  986:	}
    #####:  987:      }
        -:  988:
    #####:  989:      return 0;
        -:  990:
        -:  991:    case ambassador:
    #####:  992:      j = 0;		//used to check if player has enough cards to discard
        -:  993:
    #####:  994:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  995:	{
    #####:  996:	  return -1;
        -:  997:	}
        -:  998:
    #####:  999:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
    #####: 1004:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1007:	    {
    #####: 1008:	      j++;
    #####: 1009:	    }
    #####: 1010:	}
    #####: 1011:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
    #####: 1013:	  return -1;
        -: 1014:	}
        -: 1015:
        -: 1016:      if (DEBUG)
        -: 1017:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1018:
        -: 1019:      //increase supply count for choosen card by amount being discarded
    #####: 1020:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1021:
        -: 1022:      //each other player gains a copy of revealed card
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1026:	    {
    #####: 1027:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1028:	    }
    #####: 1029:	}
        -: 1030:
        -: 1031:      //discard played card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
        -: 1033:
        -: 1034:      //trash copies of cards returned to supply
    #####: 1035:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
    #####: 1037:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1038:	    {
    #####: 1039:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1040:		{
    #####: 1041:		  discardCard(i, currentPlayer, state, 1);
    #####: 1042:		  break;
        -: 1043:		}
    #####: 1044:	    }
    #####: 1045:	}
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:    case cutpurse:
        -: 1050:
    #####: 1051:      updateCoins(currentPlayer, state, 2);
    #####: 1052:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1053:	{
    #####: 1054:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1055:	    {
    #####: 1056:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1057:		{
    #####: 1058:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1059:		    {
    #####: 1060:		      discardCard(j, i, state, 0);
    #####: 1061:		      break;
        -: 1062:		    }
    #####: 1063:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1064:		    {
    #####: 1065:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1066:			{
        -: 1067:			  if (DEBUG)
        -: 1068:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1069:			}
    #####: 1070:		      break;
        -: 1071:		    }
    #####: 1072:		}
        -: 1073:
    #####: 1074:	    }
        -: 1075:
    #####: 1076:	}
        -: 1077:
        -: 1078:      //discard played card from hand
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
        -: 1080:
    #####: 1081:      return 0;
        -: 1082:
        -: 1083:
        -: 1084:    case embargo:
        -: 1085:      //+2 Coins
    #####: 1086:      state->coins = state->coins + 2;
        -: 1087:
        -: 1088:      //see if selected pile is in play
    #####: 1089:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
        -: 1094:      //add embargo token to selected supply pile
    #####: 1095:      state->embargoTokens[choice1]++;
        -: 1096:
        -: 1097:      //trash card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1099:      return 0;
        -: 1100:
        -: 1101:    case outpost:
        -: 1102:      //set outpost flag
    #####: 1103:      state->outpostPlayed++;
        -: 1104:
        -: 1105:      //discard card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case salvager:
        -: 1110:      //+1 buy
    #####: 1111:      state->numBuys++;
        -: 1112:
    #####: 1113:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
        -: 1115:	  //gain coins equal to trashed card
    #####: 1116:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1117:	  //trash card
    #####: 1118:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1119:	}
        -: 1120:
        -: 1121:      //discard card
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1123:      return 0;
        -: 1124:
        -: 1125:    case sea_hag:
    #####: 1126:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1127:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1128:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1129:	  state->discardCount[i]++;
    #####: 1130:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1131:	}
    #####: 1132:      }
    #####: 1133:      return 0;
        -: 1134:
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
    #####: 1145:	}
    #####: 1146:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1156:	    }
        -: 1157:
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:
    #####: 1166:  return -1;
     5000: 1167:}
        -: 1168:
function discardCard called 7000 returned 100% blocks executed 90%
        -: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
        -: 1171:
        -: 1172:  //if card is not trashed, added to Played pile
     7000: 1173:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1174:    {
        -: 1175:      //add card to played pile
     7000: 1176:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     7000: 1177:      state->playedCardCount++;
     7000: 1178:    }
        -: 1179:
        -: 1180:  //set played card to -1
     7000: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:
        -: 1183:  //remove card from player's hand
     7000: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
       47: 1187:      state->handCount[currentPlayer]--;
       47: 1188:    }
     6953: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
    #####: 1192:      state->handCount[currentPlayer]--;
    #####: 1193:    }
        -: 1194:  else
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
     6953: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
     6953: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
     6953: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:
     7000: 1204:  return 0;
        -: 1205:}
        -: 1206:
function gainCard called 2198 returned 100% blocks executed 72%
        -: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
     2198: 1212:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
     2198: 1222:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
    #####: 1226:    }
     2198: 1227:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1228:    {
    #####: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1230:      state->handCount[player]++;
    #####: 1231:    }
        -: 1232:  else
        -: 1233:    {
     2198: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2198: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:
        -: 1238:  //decrease number in supply pile
     2198: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:
     2198: 1241:  return 0;
     2198: 1242:}
        -: 1243:
function updateCoins called 3449 returned 100% blocks executed 85%
        -: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:
        -: 1248:  //reset coin count
     3449: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
    49388: 1252:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -: 1253:    {
    21245: 1254:      if (state->hand[player][i] == copper)
branch  0 taken 45%
branch  1 taken 55%
        -: 1255:	{
     9532: 1256:	  state->coins += 1;
     9532: 1257:	}
    11713: 1258:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1259:	{
    #####: 1260:	  state->coins += 2;
    #####: 1261:	}
    11713: 1262:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1263:	{
    #####: 1264:	  state->coins += 3;
    #####: 1265:	}
    21245: 1266:    }
        -: 1267:
        -: 1268:  //add bonus
     3449: 1269:  state->coins += bonus;
        -: 1270:
     3449: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:
        -: 1275:////////////////////////////////////////////////
        -: 1276:// Refactored Functions
        -: 1277:///////////////////////////////////////////////
function playAdventurer called 1000 returned 100% blocks executed 100%
        -: 1278:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int cardDrawn, int z)
        -: 1279:{
    10790: 1280:  while(drawntreasure<3) //****//
branch  0 taken 81%
branch  1 taken 19%
        -: 1281:  {
     4395: 1282:    if (state->deckCount[currentPlayer] <1)
branch  0 taken 56%
branch  1 taken 44%
        -: 1283:      {//if the deck is empty we need to shuffle discard and add to deck
     2475: 1284:      shuffle(currentPlayer, state);
     2475: 1285:      }
     4395: 1286:    drawCard(currentPlayer, state);
     4395: 1287:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1288:
     7185: 1289:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 32%
branch  1 taken 68%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
     3000: 1290:      drawntreasure++;
        -: 1291:    else
        -: 1292:    {
     1395: 1293:      temphand[z]=cardDrawn;
     1395: 1294:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1395: 1295:      z++;
        -: 1296:    }
        -: 1297:
        -: 1298:   }
        -: 1299:
     4790: 1300:  while(z-1>=0)
branch  0 taken 58%
branch  1 taken 42%
        -: 1301:  {
     1395: 1302:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1395: 1303:  z=z-1;
        -: 1304:  }
     1000: 1305:    return 0;
        -: 1306:
        -: 1307:}
        -: 1308:
        -: 1309:
function playCouncil_Room called 1000 returned 100% blocks executed 100%
        -: 1310:int playCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -: 1311:{
        -: 1312:  //+4 Cards
        -: 1313:  int i;
    10000: 1314:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1315:  {
     4000: 1316:    drawCard(currentPlayer, state);
     4000: 1317:  }
        -: 1318:
        -: 1319:  //+1 Buy
     1000: 1320:  state->numBuys++;
        -: 1321:
        -: 1322:  //Each other player draws a card
     7078: 1323:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28%
        -: 1324:  {
     2539: 1325:    if ( i != currentPlayer )
branch  0 taken 61%
branch  1 taken 39%
        -: 1326:    {
     1539: 1327:      drawCard(i, state);
     1539: 1328:    }
     2539: 1329:  }
        -: 1330:
        -: 1331:  //put played card in played card pile
     1000: 1332:  discardCard(handPos, currentPlayer, state, 0);
        -: 1333:
     1000: 1334:  return 0;
        -: 1335:}
        -: 1336:
function playSmithy called 2000 returned 100% blocks executed 100%
        -: 1337:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1338:{
        -: 1339:  //+4 Cards //****//
        -: 1340:  int i;
    20000: 1341:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1342:  {
     8000: 1343:    drawCard(currentPlayer, state);
     8000: 1344:  }
        -: 1345:
        -: 1346:  //discard card from hand
     2000: 1347:  discardCard(handPos, currentPlayer, state, 0);
     2000: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
function playVillage called 4000 returned 100% blocks executed 100%
        -: 1352:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -: 1353:{
        -: 1354:  //+1 Card
     4000: 1355:  drawCard(currentPlayer, state);
        -: 1356:
        -: 1357:  //+1 Actions //****//
     4000: 1358:  state->numActions = state->numActions + 1;
        -: 1359:
        -: 1360:  //discard played card from hand
     4000: 1361:  discardCard(handPos, currentPlayer, state, 0);
     4000: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1366:int playGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -: 1367:{
        -: 1368:  //+1 Card
    #####: 1369:  drawCard(currentPlayer, state);
        -: 1370:
        -: 1371:  //+2 Actions //****//
    #####: 1372:  state->numActions = state->numActions + 2;
        -: 1373:
        -: 1374:  //discard card from hand
    #####: 1375:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1376:  return 0;
        -: 1377:}
        -: 1378://end of dominion.c
