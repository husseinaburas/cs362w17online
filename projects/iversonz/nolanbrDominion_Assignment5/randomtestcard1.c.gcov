        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Automated Random Test for the Village Card
        -:    2:// Compile --  gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard1.c rngs.c -o randomtestcard1 -lm -g
        -:    3:// find . -name "*.gcda" -print0 | xargs -0 rm
        -:    4:// ./randomtestcard1
        -:    5:// gcov randomtestcard1
        -:    6:#include "dominion.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:///////// Global Variable /////////
        -:   13:int test_passed = 0;
        -:   14:int cards_test_passed = 0;
        -:   15:////////////////////////////////
        -:   16:
        -:   17:
function check_results called 2000 returned 100% blocks executed 100%
        -:   18:void check_results(int a)
        -:   19:{
     2000:   20:  if(a == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   21:  {
     2000:   22:    test_passed++;
     2000:   23:  }
        -:   24:
     2000:   25:}
        -:   26:
function cards_check called 2000 returned 100% blocks executed 100%
        -:   27:void cards_check(int c)
        -:   28:{
     2000:   29:  if(c == 5) //should have 5 cards in hand
branch  0 taken 11%
branch  1 taken 89%
        -:   30:  {
      223:   31:    cards_test_passed++;
      223:   32:  }
        -:   33:
     2000:   34:}
        -:   35:
        -:   36:
function main called 1 returned 100% blocks executed 93%
        -:   37:int main(int argc, char *argv[])
        -:   38:{
        -:   39:  int a, b, c, playersn, randomSeed, userRandomSeed, value, countDeck, countHand;
        1:   40:  int currentplayer = 1;
        -:   41:  struct gameState game;
        -:   42:
        1:   43:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   44:
        1:   45:  userRandomSeed = 0;
        1:   46:  userRandomSeed = atoi(argv[1]);
        1:   47:  printf("User Inputed: %d \n", userRandomSeed);
        -:   48:
        -:   49:
        -:   50:
        1:   51:  printf("\nAutomated Random Test -- Village\n-----------\nThere are 20 rounds of testing...\nEach round has 100 random tests...\n");
        -:   52:
        -:   53:
       42:   54:  for(int z = 0; z < 20 ; z++)
branch  0 taken 95%
branch  1 taken 5%
        -:   55:  {
       20:   56:    printf("Testing Round %d\n", (z+1));
     4040:   57:    for(int i = 0; i < 100; i ++)
branch  0 taken 99%
branch  1 taken 1%
        -:   58:    {
     2000:   59:      playersn = rand() % 4; // Randon Number of players
        -:   60:
     2000:   61:      if (userRandomSeed == 0) // Random Seed
branch  0 taken 0%
branch  1 taken 100%
        -:   62:      {
    #####:   63:          randomSeed = rand() % 110000; // Random Seed
    #####:   64:      }
        -:   65:      else
        -:   66:      {
     2000:   67:        randomSeed = rand() % userRandomSeed;
        -:   68:      }
        -:   69:
     2000:   70:      a = initializeGame(playersn,cards, randomSeed, &game); // Initiliaze the game
        -:   71:
        -:   72:
     2000:   73:      value = rand() % 6; // set a value random
        -:   74:
     2000:   75:      if(value == 1) // if the value is 1 set the deckCount to 0
branch  0 taken 16%
branch  1 taken 84%
        -:   76:      {
      312:   77:        game.deckCount[currentplayer] = 0;
      312:   78:        countDeck = 0 ;
      312:   79:      }
        -:   80:      else // otherwise pick a random value
        -:   81:      {
     1688:   82:        countDeck = rand() % MAX_DECK;
     1688:   83:        game.deckCount[currentplayer] = countDeck;
        -:   84:      }
        -:   85:
     2000:   86:      countHand = rand() % MAX_HAND;
     2000:   87:      game.handCount[currentplayer] = countHand;
        -:   88:
        -:   89:
     2000:   90:      game.discardCount[currentplayer] = rand() % MAX_DECK;
        -:   91:
     2000:   92:      b = cardEffect(village, 1, 1, 1, &game,0,0);
        -:   93:
     2000:   94:      check_results(b);
        -:   95:
     2000:   96:      c = numHandCards(&game);
        -:   97:
     2000:   98:      cards_check(c);
     2000:   99:    }
        -:  100:
       20:  101:  }
        1:  102:  printf("\nResults\n----------\n");
        1:  103:  printf("Test's - Card Effect - Passed: %d\n",test_passed );
        1:  104:  printf("Test's - Card Effect - Failed: %d\n",(1000 - test_passed) );
        1:  105:  printf("Total Number of Card Effect Test's: %d\n",1000 );
        1:  106:  printf("----------\n");
        1:  107:  printf("Test's - Number of Cards -  Passed: %d\n",cards_test_passed );
        1:  108:  printf("Test's - Number of Cards -  Failed: %d\n",(1000 - cards_test_passed) );
        1:  109:  printf("Total Number of Number of Cards Test's: %d\n",1000 );
        -:  110:
        -:  111:
        -:  112:
        1:  113:}
