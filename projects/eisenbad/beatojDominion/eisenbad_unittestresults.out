
----------------- Testing Card: smithy ----------------

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 0 extra actions are gained
    actions = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 8, expected = 8
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 10, expected = 10
    embargo count = 10, expected = 10
    village count = 10, expected = 10
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 10, expected = 10
    tribute count = 10, expected = 10
    smithy count = 9, expected = 9
    council_room count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 4 PASSED

  TEST 5: Current player receives exactly three cards
    hand count = 6, expected = 7
    STATUS: TEST 5 FAILED

  TEST 6: Extra three cards come from player's own deck
    deck count = 3, expected = 2
    STATUS: TEST 6 FAILED

 >>>>> TESTS COMPLETE. FAILURE: Not all smithy tests passed. <<<<<


----------------- Testing Card: adventurer ----------------

 CASE 1: No treasure cards in deck

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 0 extra actions are gained
    actions = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 5, expected = 5
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 9, expected = 9
    embargo count = 10, expected = 10
    village count = 10, expected = 10
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 10, expected = 10
    tribute count = 10, expected = 10
    smithy count = 10, expected = 10
    council_room count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 4 PASSED

  TEST 5: Current player receives no treasures from their deck
    treasure count in hand = 3, expected = 3
    STATUS: TEST 5 PASSED

  TEST 6: Entire deck revealed/discarded while searching for treasures
    discard count = 4, expected = 5
    STATUS: TEST 6 FAILED

 CASE 2: One treasure card at bottom of deck

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 0 extra actions are gained
    actions = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 6, expected = 6
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 9, expected = 9
    embargo count = 10, expected = 10
    village count = 10, expected = 10
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 10, expected = 10
    tribute count = 10, expected = 10
    smithy count = 10, expected = 10
    council_room count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 4 PASSED

  TEST 5: Current player receives one treasure from their deck
    treasure count in hand = 4, expected = 4
    STATUS: TEST 5 PASSED

  TEST 6: One card less than deck count revealed/discarded while searching for treasures
    discard count = 3, expected = 4
    STATUS: TEST 6 FAILED

 CASE 3: Five treasure cards in deck

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 0 extra actions are gained
    actions = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 10, expected = 10
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 9, expected = 9
    embargo count = 10, expected = 10
    village count = 10, expected = 10
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 10, expected = 10
    tribute count = 10, expected = 10
    smithy count = 10, expected = 10
    council_room count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 4 PASSED

  TEST 5: Current player receives two treasures from their deck
    treasure count in hand = 5, expected = 5
    top card in hand = 5, expected = 5
    STATUS: TEST 5 PASSED

  TEST 6: No cards revealed/discarded while searching for treasures
    discard count = 0, expected = 1
    STATUS: TEST 6 FAILED

 >>>>> TESTS COMPLETE. FAILURE: Not all adventurer tests passed. <<<<<


----------------- Testing Card: village ----------------

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 2 extra actions are gained
    actions = 4, expected = 3
    STATUS: TEST 2 FAILED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 8, expected = 8
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 10, expected = 10
    embargo count = 10, expected = 10
    village count = 9, expected = 9
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 10, expected = 10
    tribute count = 10, expected = 10
    smithy count = 10, expected = 10
    council_room count = 9, expected = 9
    STATUS: TEST 3 PASSED

  TEST 4: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 4 PASSED

  TEST 5: Current player receives exactly one card
    hand count = 5, expected = 5
    STATUS: TEST 5 PASSED

  TEST 6: Extra card comes from player's own pile
    top card in hand = 4, expected = 4
    STATUS: TEST 6 PASSED

 >>>>> TESTS COMPLETE. FAILURE: Not all village tests passed. <<<<<


----------------- Testing Card: sea_hag ----------------

  TEST 1: 0 bonus coins are awarded to the current player
   bonus coins = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: 0 extra actions are gained
    actions = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs to the victory card piles or kingdom card piles
    estate count = 8, expected = 8
    duchy count = 8, expected = 8
    province count = 8, expected = 8
    adventurer count = 10, expected = 10
    embargo count = 10, expected = 10
    village count = 10, expected = 10
    minion count = 10, expected = 10
    mine count = 10, expected = 10
    cutpurse count = 10, expected = 10
    sea_hag count = 9, expected = 9
    tribute count = 10, expected = 10
    smithy count = 10, expected = 10
    council_room count = 9, expected = 9
    STATUS: TEST 3 PASSED

  TEST 4: Curse supply decreases by number of opponents
    curse count = 10, expected = 9
    STATUS: TEST 4 FAILED

  TEST 5: Other players' top of deck is added to their discard pile and replaced with curse
    next player's discard count = 1, expected = 1
    top of next player's discard pile = 0, expected = 4
    top of next player's hand = 4, expected = 0
    STATUS: TEST 5 FAILED

  TEST 6: Current player's hand/deck is unaffected other than discard of played card
    current player hand count = 5, expected = 4
    current player deck count = 5, expected = 5
    STATUS: TEST 6 FAILED

 >>>>> TESTS COMPLETE. FAILURE: Not all sea_hag tests passed. <<<<<


----------------- Testing Function: updateCoins() ----------------

 CASE 1: No treasure cards in hand, no bonus coins

  TEST 1: Player receives no coins
    coin count = 0, expected = 0
    STATUS: TEST 1 PASSED

  TEST 2: No state change occurs to treasure card piles
    copper count = 50, expected = 50
    silver count = 40, expected = 40
    gold count = 30, expected = 30
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: Current player's hand/deck is unaffected
    current player hand count = 5, expected = 5
    current player deck count = 5, expected = 5
    STATUS: TEST 4 PASSED

 CASE 2: No treasure cards in hand, 4 bonus coins

  TEST 1: Player receives 4 coins
    coin count = 4, expected = 4
    STATUS: TEST 1 PASSED

  TEST 2: No state change occurs to treasure card piles
    copper count = 50, expected = 50
    silver count = 40, expected = 40
    gold count = 30, expected = 30
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: Current player's hand/deck is unaffected
    current player hand count = 5, expected = 5
    current player deck count = 5, expected = 5
    STATUS: TEST 4 PASSED

 CASE 3: 1 copper, 2 silver, and 2 gold in hand, 2 bonus coins

  TEST 1: Player receives 13 coins
    coin count = 13, expected = 13
    STATUS: TEST 1 PASSED

  TEST 2: No state change occurs to treasure card piles
    copper count = 49, expected = 49
    silver count = 38, expected = 38
    gold count = 28, expected = 28
    STATUS: TEST 2 PASSED

  TEST 3: No state change occurs for other players
    next player hand count = 0, expected = 0
    next player deck count = 10, expected = 10
    STATUS: TEST 3 PASSED

  TEST 4: Current player's hand/deck is unaffected
    current player hand count = 5, expected = 5
    current player deck count = 5, expected = 5
    STATUS: TEST 4 PASSED

 >>>>> TESTS COMPLETE. SUCCESS: All updateCoins() tests passed. <<<<<


----------------- Testing Function: getCost() ----------------

  TEST 1: Correct coin cost for all victory and kingdom cards is returned
    curse cost = 0, expected = 0
    estate cost = 2, expected = 2
    duchy cost = 5, expected = 5
    province cost = 8, expected = 8
    copper cost = 0, expected = 0
    silver cost = 3, expected = 3
    gold cost = 6, expected = 6
    adventurer cost = 6, expected = 6
    council_room cost = 5, expected = 5
    feast cost = 4, expected = 4
    gardens cost = 4, expected = 4
    mine cost = 5, expected = 5
    remodel cost = 4, expected = 4
    smithy cost = 4, expected = 4
    village cost = 3, expected = 3
    baron cost = 4, expected = 4
    great_hall cost = 3, expected = 3
    minion cost = 5, expected = 5
    steward cost = 3, expected = 3
    tribute cost = 5, expected = 5
    ambassador cost = 3, expected = 3
    cutpurse cost = 4, expected = 4
    embargo cost = 2, expected = 2
    outpost cost = 5, expected = 5
    salvager cost = 4, expected = 4
    sea_hag cost = 4, expected = 4
    treasure_map cost = 4, expected = 4
    STATUS: TEST 1 PASSED

  TEST 2: Negative values return -1
    STATUS: TEST 2 PASSED

  TEST 3: Large positive values return -1
    STATUS: TEST 3 PASSED

 >>>>> TESTS COMPLETE. SUCCESS: All getCost() tests passed. <<<<<


----------------- Testing Function: isGameOver() ----------------

  TEST 1: Returns one if province supply is zero
    game over = 1, expected = 1
    STATUS: TEST 1 PASSED

  TEST 2: Returns one if three supply piles are zero
    NOTE: Setting copper, adventurer, and smithy supplies to zero
    game over = 1, expected = 1
    STATUS: TEST 2 PASSED

  TEST 3: First and last cards in card array are in range of isGameOver() supply checks
    NOTE: Setting curse, minion and duchy piles to zero
    game over = 0, expected = 1
    STATUS: TEST 3 FAILED

  TEST 4: Returns zero if the province supply, and less than three supply piles, aren't zero
    NOTE: Setting adventurer and smithy piles to zero
    game over = 0, expected = 0
    STATUS: TEST 4 PASSED

 >>>>> TESTS COMPLETE. FAILURE: Not all isGameOver() tests passed. <<<<<


----------------- Testing Function: fullDeckCount() ----------------

  TEST 1: Returns quantity of a specific card owned by player
    NOTE: Putting a gold at top and bottom of hand, deck, and discard pile.
    gold cards owned = 6, expected = 6
    STATUS: TEST 1 PASSED

  TEST 2: Returns zero for invalid card value input
    NOTE: Calling fullDeckCount() with card input = 1000 
    *1000* cards owned = 0, expected = 0
    STATUS: TEST 2 PASSED

  TEST 3: Returns zero for invalid player input value
    NOTE: Calling fullDeckCount() with player input = 50, and card input = copper
    copper cards owned by player 50 = 0, expected = 0
    STATUS: TEST 3 PASSED

  TEST 4: No state change for player's hand, deck, or discard piles
    NOTE: Calling fullDeckCount() with card input = copper
    copper cards owned = 7, expected = 7
    current player hand count = 5, expected = 5
    current player deck count = 5, expected = 5
    current player discard count = 0, expected = 0
    STATUS: TEST 4 PASSED

 >>>>> TESTS COMPLETE. SUCCESS: All fullDeckCount() tests passed. <<<<<

--------------------- eisenbad_cardtest1.c gcov results ------------------
Function 'main'
Lines executed:100.00% of 35
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:95.00% of 20

File 'eisenbad_cardtest1.c'
Lines executed:100.00% of 35
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:95.00% of 20
Creating 'eisenbad_cardtest1.c.gcov'

------------------- eisenbad_cardtest2.c gcov results ------------------
Function 'main'
Lines executed:96.55% of 145
Branches executed:97.92% of 96
Taken at least once:72.92% of 96
Calls executed:98.11% of 53

File 'eisenbad_cardtest2.c'
Lines executed:96.55% of 145
Branches executed:97.92% of 96
Taken at least once:72.92% of 96
Calls executed:98.11% of 53
Creating 'eisenbad_cardtest2.c.gcov'

------------------- eisenbad_cardtest3.c gcov results ------------------
Function 'main'
Lines executed:100.00% of 38
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:95.00% of 20

File 'eisenbad_cardtest3.c'
Lines executed:100.00% of 38
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:95.00% of 20
Creating 'eisenbad_cardtest3.c.gcov'

------------------- eisenbad_cardtest4.c gcov results ------------------
Function 'main'
Lines executed:98.15% of 54
Branches executed:80.00% of 20
Taken at least once:50.00% of 20
Calls executed:96.00% of 25

File 'eisenbad_cardtest4.c'
Lines executed:98.15% of 54
Branches executed:80.00% of 20
Taken at least once:50.00% of 20
Calls executed:96.00% of 25
Creating 'eisenbad_cardtest4.c.gcov'

------------------- eisenbad_unittest1.c gcov results ------------------
Function 'main'
Lines executed:97.76% of 134
Branches executed:100.00% of 98
Taken at least once:62.24% of 98
Calls executed:98.28% of 58

File 'eisenbad_unittest1.c'
Lines executed:97.76% of 134
Branches executed:100.00% of 98
Taken at least once:62.24% of 98
Calls executed:98.28% of 58
Creating 'eisenbad_unittest1.c.gcov'

------------------- eisenbad_unittest2.c gcov results ------------------
Function 'main'
Lines executed:98.48% of 66
Branches executed:100.00% of 56
Taken at least once:50.00% of 56
Calls executed:98.91% of 92

File 'eisenbad_unittest2.c'
Lines executed:98.48% of 66
Branches executed:100.00% of 56
Taken at least once:50.00% of 56
Calls executed:98.91% of 92
Creating 'eisenbad_unittest2.c.gcov'

------------------- eisenbad_unittest3.c gcov results ------------------
Function 'main'
Lines executed:100.00% of 38
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:96.30% of 27

File 'eisenbad_unittest3.c'
Lines executed:100.00% of 38
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:96.30% of 27
Creating 'eisenbad_unittest3.c.gcov'

------------------- eisenbad_unittest4.c gcov results ------------------
Function 'main'
Lines executed:94.34% of 53
Branches executed:90.00% of 20
Taken at least once:55.00% of 20
Calls executed:96.67% of 30

File 'eisenbad_unittest4.c'
Lines executed:94.34% of 53
Branches executed:90.00% of 20
Taken at least once:55.00% of 20
Calls executed:96.67% of 30
Creating 'eisenbad_unittest4.c.gcov'

------------------- dominion.c gcov results ------------------
Function 'testAssert'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.19% of 206
Branches executed:15.91% of 176
Taken at least once:6.82% of 176
Calls executed:7.27% of 55

Function 'playCouncil_Room'
Lines executed:0.00% of 10
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'playRemodel'
Lines executed:0.00% of 12
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'playVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:37.41% of 572
Branches executed:39.34% of 422
Taken at least once:31.75% of 422
Calls executed:20.62% of 97
Creating 'dominion.c.gcov'

------------------- dominion.c.gcov ------------------
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 83%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       70:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 44 returned 100% blocks executed 100%
       44:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       44:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       44:  209:  if (state->deckCount[player] < 1)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       30:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      490:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      350:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 7 returned 100% blocks executed 100%
        7:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        7:  326:  int count = 0;
        -:  327:
       32:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  329:    {
       25:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  331:    }
        -:  332:
       32:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  334:    {
       25:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:  336:    }
        -:  337:
       11:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 36%
branch  1 taken 64% (fallthrough)
        -:  339:    {
        4:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  341:    }
        -:  342:
        7:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 33 returned 100% blocks executed 100%
       33:  346:int whoseTurn(struct gameState *state) {
       33:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 8 returned 100% blocks executed 100%
        8:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        8:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        6:  401:  j = 0;
      156:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  405:	{
       14:  406:	  j++;
        -:  407:	}
        -:  408:    }
        6:  409:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 128 returned 100% blocks executed 85%
      128:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      128:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       15:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       15:  538:    state->deckCount[player] = state->discardCount[player];
       15:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       15:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       15:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       15:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       15:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       15:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       15:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      113:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      113:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      113:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      113:  576:    state->deckCount[player]--;
      113:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      113:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 56 returned 100% blocks executed 100%
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://CARD METHODS ADDED
        -:  647:
        -:  648://**************** ADVENTURER ***********************
        -:  649:
function playAdventurer called 15 returned 100% blocks executed 100%
       15:  650:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand, int z)
        -:  651:{
      105:  652:    while(drawntreasure<2){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       75:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       15:  654:            shuffle(currentPlayer, state);
call    0 returned 100%
        -:  655:        }
       75:  656:        drawCard(currentPlayer, state);
call    0 returned 100%
       75:  657:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       75:  658:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       30:  659:            drawntreasure++;
        -:  660:        else{
       45:  661:            temphand[z]=cardDrawn;
       45:  662:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       45:  663:            z++;
        -:  664:        }
        -:  665:    }
       65:  666:    while(z-2>=0){
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       35:  667:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       35:  668:        z=z-1;
        -:  669:    }
       15:  670:    return 0;
        -:  671:}
        -:  672:
        -:  673://**************** SMITHY ***********************
        -:  674:
function playSmithy called 6 returned 100% blocks executed 100%
        6:  675:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  676:{
        -:  677:    //+3 Cards
        6:  678:    int i = 1;                  
       18:  679:    for(i ; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:    {
       12:  681:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  682:    }
        -:  683:
        -:  684:    //discard card from hand
        6:  685:    discardCard(handPos, handPos, state, 0);
call    0 returned 100%
        6:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689://**************** VILLAGE ***********************
        -:  690:
function playVillage called 6 returned 100% blocks executed 100%
        6:  691:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  692:{
        -:  693:    //+1 Card
        6:  694:    drawCard(handPos, state);                 
call    0 returned 100%
        -:  695:
        -:  696:    //+2 Actions
        6:  697:    state->numActions = state->numActions + 3;      
        -:  698:
        -:  699:    //discard played card from hand
        6:  700:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  701:    return 0;
        -:  702:}
        -:  703:
        -:  704://**************** REMODEL ***********************
        -:  705:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  706:int playRemodel(struct gameState *state, int currentPlayer, int handPos, int j, int choice1, int choice2)
        -:  707:{
    #####:  708:    j = state->hand[currentPlayer][choice1];  
        -:  709:
    #####:  710:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  711:    {
    #####:  712:        return -1;
        -:  713:    }
        -:  714:
    #####:  715:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  716:
        -:  717:    //discard card from hand
    #####:  718:    discardCard(currentPlayer, handPos, state, 0);
call    0 never executed
        -:  719:
        -:  720:    //discard trashed card
    #####:  721:    int i = 0;
    #####:  722:    for (i ; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  723:    {
    #####:  724:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  725:        {
    #####:  726:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  727:            break;
        -:  728:        }
        -:  729:    }
        -:  730:
    #####:  731:    return 0;
        -:  732:}
        -:  733:
        -:  734://**************** COUNCIL_ROOM ***********************
        -:  735:
function playCouncil_Room called 0 returned 0% blocks executed 0%
    #####:  736:int playCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -:  737:{
        -:  738:    //+4 Cards
    #####:  739:    int i = 0;
    #####:  740:    for (i ; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  741:    {
    #####:  742:        drawCard(currentPlayer, state);
call    0 never executed
        -:  743:    }
        -:  744:    
        -:  745:    //+1 Buy
    #####:  746:    state->numBuys++;
        -:  747:    
        -:  748:    //Each other player draws a card
    #####:  749:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  750:    {
    #####:  751:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  752:        {
    #####:  753:            drawCard(i, state);
call    0 never executed
        -:  754:        }
        -:  755:    }
        -:  756:    
        -:  757:    //put played card in played card pile
    #####:  758:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  759:    
    #####:  760:    return 0;
        -:  761:}
        -:  762:
function cardEffect called 33 returned 100% blocks executed 8%
       33:  763:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  764:{
        -:  765:  int i;
        -:  766:  int j;
        -:  767:  int k;
        -:  768:  int x;
        -:  769:  int index;
       33:  770:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       33:  771:  int nextPlayer = currentPlayer + 1;
        -:  772:
       33:  773:  int tributeRevealedCards[2] = {-1, -1};
        -:  774:  int temphand[MAX_HAND];// moved above the if statement
       33:  775:  int drawntreasure=0;
        -:  776:  int cardDrawn;
       33:  777:  int z = 0;// this is the counter for the temp hand
       33:  778:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  779:    nextPlayer = 0;
        -:  780:  }
        -:  781:
        -:  782:  //uses switch to select card and perform actions
       33:  783:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 18%
branch 14 taken 0%
branch 15 taken 82%
        -:  784:    {
        -:  785:			
        -:  786:			
        -:  787:    case feast:
        -:  788:      //gain card with cost up to 5
        -:  789:      //Backup hand
    #####:  790:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  791:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  792:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  793:      }
        -:  794:      //Backup hand
        -:  795:
        -:  796:      //Update Coins for Buy
    #####:  797:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  798:      x = 1;//Condition to loop on
    #####:  799:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  800:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  801:	  if (DEBUG)
        -:  802:	    printf("None of that card left, sorry!\n");
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  806:	  }
        -:  807:	}
    #####:  808:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  813:	  }
        -:  814:	}
        -:  815:	else{
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
    #####:  821:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  822:	  x = 0;//No more buying cards
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:	  }
        -:  827:
        -:  828:	}
        -:  829:      }     
        -:  830:
        -:  831:      //Reset Hand
    #####:  832:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  833:	state->hand[currentPlayer][i] = temphand[i];
    #####:  834:	temphand[i] = -1;
        -:  835:      }
        -:  836:      //Reset Hand
        -:  837:      			
    #####:  838:      return 0;
        -:  839:			
        -:  840:    case gardens:
    #####:  841:      return -1;
        -:  842:			
        -:  843:    case mine:
    #####:  844:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  845:
    #####:  846:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:		
    #####:  851:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  852:	{
    #####:  853:	  return -1;
        -:  854:	}
        -:  855:
    #####:  856:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  862:
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  865:
        -:  866:      //discard trashed card
    #####:  867:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:	{
    #####:  869:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  870:	    {
    #####:  871:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  872:	      break;
        -:  873:	    }
        -:  874:	}
        -:  875:			
    #####:  876:      return 0;
        -:  877:
        -:  878:		
        -:  879:    case baron:
    #####:  880:      state->numBuys++;//Increase buys by 1!
    #####:  881:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  882:	int p = 0;//Iterator for hand!
    #####:  883:	int card_not_discarded = 1;//Flag for discard set!
    #####:  884:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  885:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  886:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  887:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  888:	    state->discardCount[currentPlayer]++;
    #####:  889:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  890:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  891:	    }
    #####:  892:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  893:	    state->handCount[currentPlayer]--;
    #####:  894:	    card_not_discarded = 0;//Exit the loop
        -:  895:	  }
    #####:  896:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  897:	    if(DEBUG) {
        -:  898:	      printf("No estate cards in your hand, invalid choice\n");
        -:  899:	      printf("Must gain an estate if there are any\n");
        -:  900:	    }
    #####:  901:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  902:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  903:	      state->supplyCount[estate]--;//Decrement estates
    #####:  904:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:		isGameOver(state);
call    0 never executed
        -:  906:	      }
        -:  907:	    }
    #####:  908:	    card_not_discarded = 0;//Exit the loop
        -:  909:	  }
        -:  910:			    
        -:  911:	  else{
    #####:  912:	    p++;//Next card
        -:  913:	  }
        -:  914:	}
        -:  915:      }
        -:  916:			    
        -:  917:      else{
    #####:  918:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  920:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  921:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	    isGameOver(state);
call    0 never executed
        -:  923:	  }
        -:  924:	}
        -:  925:      }
        -:  926:	    
        -:  927:      
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case great_hall:
        -:  931:      //+1 Card
    #####:  932:      drawCard(currentPlayer, state);
call    0 never executed
        -:  933:			
        -:  934:      //+1 Actions
    #####:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  939:      return 0;
        -:  940:		
        -:  941:    case minion:
        -:  942:      //+1 action
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  947:			
    #####:  948:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  949:	{
    #####:  950:	  state->coins = state->coins + 2;
        -:  951:	}
        -:  952:			
    #####:  953:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  954:	{
        -:  955:	  //discard hand
    #####:  956:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  957:	    {
    #####:  958:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  959:	    }
        -:  960:				
        -:  961:	  //draw 4
    #####:  962:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  965:	    }
        -:  966:				
        -:  967:	  //other players discard hand and redraw if hand size > 4
    #####:  968:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  969:	    {
    #####:  970:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  971:		{
    #####:  972:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  973:		    {
        -:  974:		      //discard hand
    #####:  975:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  976:			{
    #####:  977:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  978:			}
        -:  979:							
        -:  980:		      //draw 4
    #####:  981:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  982:			{
    #####:  983:			  drawCard(i, state);
call    0 never executed
        -:  984:			}
        -:  985:		    }
        -:  986:		}
        -:  987:	    }
        -:  988:				
        -:  989:	}
    #####:  990:      return 0;
        -:  991:		
        -:  992:    case steward:
    #####:  993:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  994:	{
        -:  995:	  //+2 cards
    #####:  996:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  998:	}
    #####:  999:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
        -: 1001:	  //+2 coins
    #####: 1002:	  state->coins = state->coins + 2;
        -: 1003:	}
        -: 1004:      else
        -: 1005:	{
        -: 1006:	  //trash 2 cards in hand
    #####: 1007:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1008:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case tribute:
    #####: 1016:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1017:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	  state->deckCount[nextPlayer]--;
        -: 1020:	}
    #####: 1021:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1023:	  state->discardCount[nextPlayer]--;
        -: 1024:	}
        -: 1025:	else{
        -: 1026:	  //No Card to Reveal
        -: 1027:	  if (DEBUG){
        -: 1028:	    printf("No cards to reveal\n");
        -: 1029:	  }
        -: 1030:	}
        -: 1031:      }
        -: 1032:	    
        -: 1033:      else{
    #####: 1034:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1037:	    state->deckCount[nextPlayer]++;
    #####: 1038:	    state->discard[nextPlayer][i] = -1;
    #####: 1039:	    state->discardCount[nextPlayer]--;
        -: 1040:	  }
        -: 1041:			    
    #####: 1042:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1043:	} 
    #####: 1044:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1045:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1046:	state->deckCount[nextPlayer]--;
    #####: 1047:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
        -: 1050:      }    
        -: 1051:		       
    #####: 1052:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1053:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1054:	state->playedCardCount++;
    #####: 1055:	tributeRevealedCards[1] = -1;
        -: 1056:      }
        -: 1057:
    #####: 1058:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1059:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1060:	  state->coins += 2;
        -: 1061:	}
        -: 1062:		    
    #####: 1063:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1064:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1065:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1066:	}
        -: 1067:	else{//Action Card
    #####: 1068:	  state->numActions = state->numActions + 2;
        -: 1069:	}
        -: 1070:      }
        -: 1071:	    
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case ambassador:
    #####: 1075:      j = 0;		//used to check if player has enough cards to discard
        -: 1076:
    #####: 1077:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1078:	{
    #####: 1079:	  return -1;				
        -: 1080:	}
        -: 1081:
    #####: 1082:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
    #####: 1084:	  return -1;
        -: 1085:	}
        -: 1086:
    #####: 1087:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1090:	    {
    #####: 1091:	      j++;
        -: 1092:	    }
        -: 1093:	}
    #####: 1094:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
        -: 1099:      if (DEBUG) 
        -: 1100:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1101:
        -: 1102:      //increase supply count for choosen card by amount being discarded
    #####: 1103:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1104:			
        -: 1105:      //each other player gains a copy of revealed card
    #####: 1106:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1111:	    }
        -: 1112:	}
        -: 1113:
        -: 1114:      //discard played card from hand
    #####: 1115:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1116:
        -: 1117:      //trash copies of cards returned to supply
    #####: 1118:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	    {
    #####: 1122:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1123:		{
    #####: 1124:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1125:		  break;
        -: 1126:		}
        -: 1127:	    }
        -: 1128:	}			
        -: 1129:
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case cutpurse:
        -: 1133:
    #####: 1134:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1138:	    {
    #####: 1139:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:		{
    #####: 1141:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1142:		    {
    #####: 1143:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1144:		      break;
        -: 1145:		    }
    #####: 1146:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1149:			{
        -: 1150:			  if (DEBUG)
        -: 1151:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1152:			}	
    #####: 1153:		      break;
        -: 1154:		    }		
        -: 1155:		}
        -: 1156:					
        -: 1157:	    }
        -: 1158:				
        -: 1159:	}				
        -: 1160:
        -: 1161:      //discard played card from hand
    #####: 1162:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:		
        -: 1167:    case embargo: 
        -: 1168:      //+2 Coins
    #####: 1169:      state->coins = state->coins + 2;
        -: 1170:			
        -: 1171:      //see if selected pile is in play
    #####: 1172:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  return -1;
        -: 1175:	}
        -: 1176:			
        -: 1177:      //add embargo token to selected supply pile
    #####: 1178:      state->embargoTokens[choice1]++;
        -: 1179:			
        -: 1180:      //trash card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case outpost:
        -: 1185:      //set outpost flag
    #####: 1186:      state->outpostPlayed++;
        -: 1187:			
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case salvager:
        -: 1193:      //+1 buy
    #####: 1194:      state->numBuys++;
        -: 1195:			
    #####: 1196:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1197:	{
        -: 1198:	  //gain coins equal to trashed card
    #####: 1199:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1200:	  //trash card
    #####: 1201:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1202:	}
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case sea_hag:
       18: 1209:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       12: 1210:	if (i != currentPlayer){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        6: 1211:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        6: 1212:	  state->discardCount[i]++;
        6: 1213:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1214:	}
        -: 1215:      }
        6: 1216:      return 0;
        -: 1217:		
        -: 1218:    case treasure_map:
        -: 1219:      //search hand for another treasure_map
    #####: 1220:      index = -1;
    #####: 1221:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1222:	{
    #####: 1223:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1224:	    {
    #####: 1225:	      index = i;
    #####: 1226:	      break;
        -: 1227:	    }
        -: 1228:	}
    #####: 1229:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
        -: 1231:	  //trash both treasure cards
    #####: 1232:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1233:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1234:
        -: 1235:	  //gain 4 Gold cards
    #####: 1236:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1237:	    {
    #####: 1238:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1239:	    }
        -: 1240:				
        -: 1241:	  //return success
    #####: 1242:	  return 1;
        -: 1243:	}
        -: 1244:			
        -: 1245:      //no second treasure_map found in hand
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:	
        -: 1249:    //*************ADDED NEW CARD METHOD CALLS HERE (TOOK FROM SWITCH STATEMENT)***************
       27: 1250:    if(card == adventurer)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1251:    {
       15: 1252:        playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
call    0 returned 100%
        -: 1253:    }
       12: 1254:    else if(card == smithy)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1255:    {
        6: 1256:        playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -: 1257:    }
        6: 1258:    else if(card == village)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1259:    {
        6: 1260:        playVillage(state, currentPlayer, handPos);
call    0 returned 100%
        -: 1261:    }
    #####: 1262:    else if(card == remodel)
branch  0 never executed
branch  1 never executed
        -: 1263:    {
    #####: 1264:        playRemodel(state, currentPlayer, handPos, j, choice1, choice2);
call    0 never executed
        -: 1265:    }
    #####: 1266:    else if(card = council_room)
        -: 1267:    {
    #####: 1268:        playCouncil_Room(state, currentPlayer, handPos);
call    0 never executed
        -: 1269:    }
        -: 1270:    
       27: 1271:  return -1;
        -: 1272:}
        -: 1273://}                       //ADDED TO CLOSE SWITCH STATEMENT
        -: 1274:
function discardCard called 12 returned 100% blocks executed 78%
       12: 1275:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1276:{
        -: 1277:	
        -: 1278:  //if card is not trashed, added to Played pile 
       12: 1279:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1280:    {
        -: 1281:      //add card to played pile
       12: 1282:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1283:      state->playedCardCount++;
        -: 1284:    }
        -: 1285:	
        -: 1286:  //set played card to -1
       12: 1287:  state->hand[currentPlayer][handPos] = -1;
        -: 1288:	
        -: 1289:  //remove card from player's hand
       12: 1290:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
       12: 1295:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:  else 	
        -: 1301:    {
        -: 1302:      //replace discarded card with last card in hand
       12: 1303:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1304:      //set last card to -1
       12: 1305:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1306:      //reduce number of cards in hand
       12: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        -: 1309:	
       12: 1310:  return 0;
        -: 1311:}
        -: 1312:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1313:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1314:{
        -: 1315:  //Note: supplyPos is enum of choosen card
        -: 1316:	
        -: 1317:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1318:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //added card for [whoseTurn] current player:
        -: 1324:  // toFlag = 0 : add to discard
        -: 1325:  // toFlag = 1 : add to deck
        -: 1326:  // toFlag = 2 : add to hand
        -: 1327:
    #####: 1328:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1329:    {
    #####: 1330:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1331:      state->deckCount[player]++;
        -: 1332:    }
    #####: 1333:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1334:    {
    #####: 1335:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1336:      state->handCount[player]++;
        -: 1337:    }
        -: 1338:  else
        -: 1339:    {
    #####: 1340:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1341:      state->discardCount[player]++;
        -: 1342:    }
        -: 1343:	
        -: 1344:  //decrease number in supply pile
    #####: 1345:  state->supplyCount[supplyPos]--;
        -: 1346:	 
    #####: 1347:  return 0;
        -: 1348:}
        -: 1349:
function updateCoins called 10 returned 100% blocks executed 100%
       10: 1350:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1351:{
        -: 1352:  int i;
        -: 1353:	
        -: 1354:  //reset coin count
       10: 1355:  state->coins = 0;
        -: 1356:
        -: 1357:  //add coins for each Treasure card in player's hand
       60: 1358:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1359:    {
       50: 1360:      if (state->hand[player][i] == copper)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -: 1361:	{
       29: 1362:	  state->coins += 1;
        -: 1363:	}
       21: 1364:      else if (state->hand[player][i] == silver)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -: 1365:	{
        2: 1366:	  state->coins += 2;
        -: 1367:	}
       19: 1368:      else if (state->hand[player][i] == gold)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1369:	{
        2: 1370:	  state->coins += 3;
        -: 1371:	}	
        -: 1372:    }	
        -: 1373:
        -: 1374:  //add bonus
       10: 1375:  state->coins += bonus;
        -: 1376:
       10: 1377:  return 0;
        -: 1378:}
        -: 1379:
        -: 1380:// Daniel Eisenbach's test assert function
        -: 1381:// custom assert function that increments the number of tests passed for a specific card/function
function testAssert called 59 returned 100% blocks executed 100%
       59: 1382:void testAssert(int testNum, int *pass_count, int cmp) {
       59: 1383:  if (cmp == 1) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       49: 1384:    *pass_count = *pass_count + 1;
       49: 1385:    printf("    STATUS: TEST %d PASSED\n", testNum);
call    0 returned 100%
        -: 1386:  }
       10: 1387:  else {printf("    STATUS: TEST %d FAILED\n", testNum);}
call    0 returned 100%
       59: 1388:}
        -: 1389:
        -: 1390:
        -: 1391://end of dominion.c
        -: 1392:
