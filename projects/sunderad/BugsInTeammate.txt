I was able to find three bugs in my team mates code. Two of the bugs were found by my random and card tests and the third I found visually. 

The first two bugs are in the code for the adventurer card. One bug is that the adventurer card and/or playCard functions do not discard the adventurer card from the players hand after it is played. After playing the adventurer card the player has one too many cards in their hand, which is the leftover adventurer card, and the discard pile does not increase. This is a bug that was in the dominion code from the beginning and was not introduced by my team mate. To fix this bug the adventurer card code needs to call discardCard on the played adventurer card at the end of its code. The second bug was the one that I found by reading my team mates code it is in his dominion.c file at line 1286. It causes errors in the discard pile for the player that plays the adventurer card. Instead of making the discard pile array positions equal to the numerical value of each extra card drawn during the adventurer card effects it makes them plus/equal to these cards. So if the discard pile array ever has values leftover in the array or is not set to zero this will cause the discard pile array to either have the wrong numerical values stored for cards or it will be an invalid numerical value that doesn’t correspond to an actual dominion card in the enum list. To fix this bug the line the following should be changed...
The line... 
state->discard[currentPlayer][state->discardCount[currentPlayer]++]+=temphand[z]; 
should be changed to ...
state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z];

The third bug is in the code for the smithy card. This bug gives the player too many cards in their hand. The smithy card should give three new cards to the player but instead this code gives four. This bug is located in his dominion.c at line 1298. The for loop at this line is supposed to run three times and call drawCard. Instead the loop runs four times because the loop goes from (i=0, i<=3). To fix this bug the condition (i <= 3) should be changed to (i < 3).