---- Random Test: Adventurer card ----
---- Number of tests = 10000 ----

---- Test 1: Adventurer should allow current player to draw 2 treasure cards. ----
Fail count = 9970 

---- Test 2: At least 2 cards should come from Player1's deck. ----
Fail count = 2524 

---- Test 3: Played card count should increase by 1 ---- 
Fail count = 10000 

---- Test 4: Hand Count for other players should not change ---- 
Fail count 2nd player = 639 
Fail count 3rd player = 604 
Fail count 4th player = 0 

Function 'playCouncil_Room'
Lines executed:100.00% of 10
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 4

Function 'playFeast'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 6

Function 'playVillage'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'playAdventurer'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
Calls executed:100.00% of 3

Function 'updateCoins'
Lines executed:90.91% of 11
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'gainCard'
Lines executed:76.92% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:13.07% of 199
Branches executed:17.16% of 169
Taken at least once:6.51% of 169
Calls executed:18.18% of 55

Function 'getCost'
Lines executed:16.67% of 30
Branches executed:100.00% of 28
Taken at least once:10.71% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:96.77% of 62
Branches executed:100.00% of 46
Taken at least once:93.48% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:43.84% of 568
Branches executed:44.36% of 417
Taken at least once:30.70% of 417
Calls executed:41.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1243722 returned 100% blocks executed 100%
  1243722:    8:int compare(const void* a, const void* b) {
  1243722:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    42452:   10:    return 1;
  1201270:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
   273912:   12:    return -1;
   927358:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 30024 returned 100% blocks executed 97%
    30024:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    30024:   44:  SelectStream(1);
call    0 returned 100%
    30024:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    30024:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:   49:    {
     7452:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    22572:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   248292:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  2482920:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  2257200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    22572:   73:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:    {
     7530:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    15042:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
     7485:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     7557:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    22572:   87:  if (numPlayers == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:    {
     7530:   89:      state->supplyCount[estate] = 8;
     7530:   90:      state->supplyCount[duchy] = 8;
     7530:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    15042:   95:      state->supplyCount[estate] = 12;
    15042:   96:      state->supplyCount[duchy] = 12;
    15042:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    22572:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    22572:  102:  state->supplyCount[silver] = 40;
    22572:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   474012:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  3724380:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  3498660:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   225720:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
    90288:  115:		  if (numPlayers == 2){ 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    15060:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    30084:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   180576:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   225720:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  3272940:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    90315:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    67743:  140:      state->deckCount[i] = 0;
   270972:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   203229:  143:	  state->deck[i][j] = estate;
   203229:  144:	  state->deckCount[i]++;
        -:  145:	}
   541944:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   474201:  148:	  state->deck[i][j] = copper;
   474201:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    90315:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    67743:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    90315:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    67743:  166:      state->handCount[i] = 0;
    67743:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   632016:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   609444:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    22572:  182:  state->outpostPlayed = 0;
    22572:  183:  state->phase = 0;
    22572:  184:  state->numActions = 1;
    22572:  185:  state->numBuys = 1;
    22572:  186:  state->playedCardCount = 0;
    22572:  187:  state->whoseTurn = 0;
    22572:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   135432:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   112860:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    22572:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    22572:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 68395 returned 100% blocks executed 100%
    68395:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
    68395:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
    68395:  208:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      464:  209:    return -1;
    67931:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
   860819:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   724957:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   724957:  215:    newDeck[newDeckPos] = state->deck[player][card];
   724957:  216:    newDeckPos++;
  5839622:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
  5114665:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
   724957:  220:    state->deckCount[player]--;
        -:  221:  }
   792888:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   724957:  223:    state->deck[player][i] = newDeck[i];
   724957:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
    67931:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 30001 returned 100% blocks executed 80%
    30001:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    30001:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    30001:  236:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    30001:  242:  if ( state->numActions < 1 )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  243:    {
     7452:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    22549:  248:  card = handCard(handPos, state);
call    0 returned 100%
        -:  249:	
        -:  250:  //check if selected card is an action
    22549:  251:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    22549:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    22549:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    22549:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  267:	
    22549:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 5 returned 100% blocks executed 86%
        5:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        5:  279:  who = state->whoseTurn;
        -:  280:
        5:  281:  if (state->numBuys < 1){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        4:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
        4:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
        4:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        4:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  297:  
        4:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        4:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        4:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 5 returned 100% blocks executed 100%
        5:  310:int numHandCards(struct gameState *state) {
        5:  311:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  312:}
        -:  313:
function handCard called 30065 returned 100% blocks executed 100%
    30065:  314:int handCard(int handPos, struct gameState *state) {
    30065:  315:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    30065:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 11 returned 100% blocks executed 100%
       11:  319:int supplyCount(int card, struct gameState *state) {
       11:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 67665 returned 100% blocks executed 100%
    67665:  345:int whoseTurn(struct gameState *state) {
    67665:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
        5:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  395:    {
        1:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
        4:  400:  j = 0;
      104:  401:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  402:    {
      100:  403:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  404:	{
        8:  405:	  j++;
        -:  406:	}
        -:  407:    }
        4:  408:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  409:    {
        2:  410:      return 1;
        -:  411:    }
        -:  412:
        2:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 1993928 returned 100% blocks executed 100%
  1993928:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
  1993928:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    47901:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    47527:  533:      state->deck[player][i] = state->discard[player][i];
    47527:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
      374:  537:    state->deckCount[player] = state->discardCount[player];
      374:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
      374:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
      374:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
      374:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
      374:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
      374:  558:    if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      186:  559:      return -1;
        -:  560:
      188:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      188:  562:    state->deckCount[player]--;
      188:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
  1993554:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  1993554:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1993554:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1993554:  575:    state->deckCount[player]--;
  1993554:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
  1993742:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 7524 returned 100% blocks executed 17%
     7524:  582:int getCost(int cardNumber)
        -:  583:{
     7524:  584:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 99%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 1%
branch 14 taken 1%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
     7518:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
        4:  613:      return 4;
        -:  614:    case village:
        2:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 22556 returned 100% blocks executed 11%
    22556:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int index;
    22556:  651:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    22556:  652:  int nextPlayer = currentPlayer + 1;
    22556:  653:  int tributeRevealedCards[2] = {-1, -1};
    22556:  654:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     8193:  655:    nextPlayer = 0;
        -:  656:  }
        -:  657:  
        -:  658:	
        -:  659:  //uses switch to select card and perform actions
    22556:  660:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 33%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  661:    {
        -:  662:    case adventurer:
     7517:  663:		playAdventurer(state);
call    0 returned 100%
     7517:  664:		return 0;
        -:  665:			
        -:  666:    case council_room:
     7517:  667:		playCouncil_Room(state, handPos);
call    0 returned 100%
     7517:  668:		return 0;
        -:  669:			
        -:  670:    case feast:
    #####:  671:		playFeast(state, choice1);
call    0 never executed
    #####:  672:		return 0;
        -:  673:			
        -:  674:    case gardens:
    #####:  675:      return -1;
        -:  676:			
        -:  677:    case mine:
    #####:  678:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  679:
    #####:  680:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  681:	{
    #####:  682:	  return -1;
        -:  683:	}
        -:  684:		
    #####:  685:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  686:	{
    #####:  687:	  return -1;
        -:  688:	}
        -:  689:
    #####:  690:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  691:	{
    #####:  692:	  return -1;
        -:  693:	}
        -:  694:
    #####:  695:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  696:
        -:  697:      //discard card from hand
    #####:  698:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  699:
        -:  700:      //discard trashed card
    #####:  701:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  704:	    {
    #####:  705:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  706:	      break;
        -:  707:	    }
        -:  708:	}
        -:  709:			
    #####:  710:      return 0;
        -:  711:			
        -:  712:    case remodel:
    #####:  713:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  714:
    #####:  715:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  716:	{
    #####:  717:	  return -1;
        -:  718:	}
        -:  719:
    #####:  720:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  721:
        -:  722:      //discard card from hand
    #####:  723:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  724:
        -:  725:      //discard trashed card
    #####:  726:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  727:	{
    #####:  728:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  729:	    {
    #####:  730:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  731:	      break;
        -:  732:	    }
        -:  733:	}
        -:  734:
        -:  735:
    #####:  736:      return 0;
        -:  737:		
        -:  738:    case smithy:
        4:  739:		playSmithy(state, handPos);
call    0 returned 100%
        4:  740:		return 0;
        -:  741:		
        -:  742:    case village:
        1:  743:		playVillage(state, handPos);
call    0 returned 100%
        1:  744:		return 0;
        -:  745:		
        -:  746:    case baron:
    #####:  747:      state->numBuys++;//Increase buys by 1!
    #####:  748:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  749:	int p = 0;//Iterator for hand!
    #####:  750:	int card_not_discarded = 1;//Flag for discard set!
    #####:  751:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  752:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  753:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  754:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  755:	    state->discardCount[currentPlayer]++;
    #####:  756:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  757:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  758:	    }
    #####:  759:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  760:	    state->handCount[currentPlayer]--;
    #####:  761:	    card_not_discarded = 0;//Exit the loop
        -:  762:	  }
    #####:  763:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  764:	    if(DEBUG) {
        -:  765:	      printf("No estate cards in your hand, invalid choice\n");
        -:  766:	      printf("Must gain an estate if there are any\n");
        -:  767:	    }
    #####:  768:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  770:	      state->supplyCount[estate]--;//Decrement estates
    #####:  771:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  772:		isGameOver(state);
call    0 never executed
        -:  773:	      }
        -:  774:	    }
    #####:  775:	    card_not_discarded = 0;//Exit the loop
        -:  776:	  }
        -:  777:			    
        -:  778:	  else{
    #####:  779:	    p++;//Next card
        -:  780:	  }
        -:  781:	}
        -:  782:      }
        -:  783:			    
        -:  784:      else{
    #####:  785:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  786:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  787:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  788:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:	    isGameOver(state);
call    0 never executed
        -:  790:	  }
        -:  791:	}
        -:  792:      }
        -:  793:	    
        -:  794:      
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case great_hall:
        -:  798:      //+1 Card
    #####:  799:      drawCard(currentPlayer, state);
call    0 never executed
        -:  800:			
        -:  801:      //+1 Actions
    #####:  802:      state->numActions++;
        -:  803:			
        -:  804:      //discard card from hand
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  806:      return 0;
        -:  807:		
        -:  808:    case minion:
        -:  809:      //+1 action
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  814:			
    #####:  815:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  816:	{
    #####:  817:	  state->coins = state->coins + 2;
        -:  818:	}
        -:  819:			
    #####:  820:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  821:	{
        -:  822:	  //discard hand
    #####:  823:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  824:	    {
    #####:  825:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  826:	    }
        -:  827:				
        -:  828:	  //draw 4
    #####:  829:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  830:	    {
    #####:  831:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  832:	    }
        -:  833:				
        -:  834:	  //other players discard hand and redraw if hand size > 4
    #####:  835:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  836:	    {
    #####:  837:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  838:		{
    #####:  839:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  840:		    {
        -:  841:		      //discard hand
    #####:  842:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  843:			{
    #####:  844:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  845:			}
        -:  846:							
        -:  847:		      //draw 4
    #####:  848:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  849:			{
    #####:  850:			  drawCard(i, state);
call    0 never executed
        -:  851:			}
        -:  852:		    }
        -:  853:		}
        -:  854:	    }
        -:  855:				
        -:  856:	}
    #####:  857:      return 0;
        -:  858:		
        -:  859:    case steward:
        1:  860:      if (choice1 == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  861:	{
        -:  862:	  //+2 cards
    #####:  863:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  864:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  865:	}
        1:  866:      else if (choice1 == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  867:	{
        -:  868:	  //+2 coins
        1:  869:	  state->coins = state->coins + 2;
        -:  870:	}
        -:  871:      else
        -:  872:	{
        -:  873:	  //trash 2 cards in hand
    #####:  874:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  875:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  876:	}
        -:  877:			
        -:  878:      //discard card from hand
        1:  879:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  880:      return 0;
        -:  881:		
        -:  882:    case tribute:
    #####:  883:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  884:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  885:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  886:	  state->deckCount[nextPlayer]--;
        -:  887:	}
    #####:  888:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  889:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  890:	  state->discardCount[nextPlayer]--;
        -:  891:	}
        -:  892:	else{
        -:  893:	  //No Card to Reveal
        -:  894:	  if (DEBUG){
        -:  895:	    printf("No cards to reveal\n");
        -:  896:	  }
        -:  897:	}
        -:  898:      }
        -:  899:	    
        -:  900:      else{
    #####:  901:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  903:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  904:	    state->deckCount[nextPlayer]++;
    #####:  905:	    state->discard[nextPlayer][i] = -1;
    #####:  906:	    state->discardCount[nextPlayer]--;
        -:  907:	  }
        -:  908:			    
    #####:  909:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  910:	} 
    #####:  911:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  912:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  913:	state->deckCount[nextPlayer]--;
    #####:  914:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  916:	state->deckCount[nextPlayer]--;
        -:  917:      }    
        -:  918:		       
    #####:  919:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  920:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  921:	state->playedCardCount++;
    #####:  922:	tributeRevealedCards[1] = -1;
        -:  923:      }
        -:  924:
    #####:  925:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  926:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  927:	  state->coins += 2;
        -:  928:	}
        -:  929:		    
    #####:  930:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  931:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  932:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  933:	}
        -:  934:	else{//Action Card
    #####:  935:	  state->numActions = state->numActions + 2;
        -:  936:	}
        -:  937:      }
        -:  938:	    
    #####:  939:      return 0;
        -:  940:		
        -:  941:    case ambassador:
    #####:  942:      j = 0;		//used to check if player has enough cards to discard
        -:  943:
    #####:  944:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  945:	{
    #####:  946:	  return -1;				
        -:  947:	}
        -:  948:
    #####:  949:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  return -1;
        -:  952:	}
        -:  953:
    #####:  954:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  955:	{
    #####:  956:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  957:	    {
    #####:  958:	      j++;
        -:  959:	    }
        -:  960:	}
    #####:  961:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  return -1;				
        -:  964:	}
        -:  965:
        -:  966:      if (DEBUG) 
        -:  967:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  968:
        -:  969:      //increase supply count for choosen card by amount being discarded
    #####:  970:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  971:			
        -:  972:      //each other player gains a copy of revealed card
    #####:  973:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	{
    #####:  975:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  978:	    }
        -:  979:	}
        -:  980:
        -:  981:      //discard played card from hand
    #####:  982:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  983:
        -:  984:      //trash copies of cards returned to supply
    #####:  985:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  990:		{
    #####:  991:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  992:		  break;
        -:  993:		}
        -:  994:	    }
        -:  995:	}			
        -:  996:
    #####:  997:      return 0;
        -:  998:		
        -:  999:    case cutpurse:
        -: 1000:
    #####: 1001:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1007:		{
    #####: 1008:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1009:		    {
    #####: 1010:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1011:		      break;
        -: 1012:		    }
    #####: 1013:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1014:		    {
    #####: 1015:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1016:			{
        -: 1017:			  if (DEBUG)
        -: 1018:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1019:			}	
    #####: 1020:		      break;
        -: 1021:		    }		
        -: 1022:		}
        -: 1023:					
        -: 1024:	    }
        -: 1025:				
        -: 1026:	}				
        -: 1027:
        -: 1028:      //discard played card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1030:
    #####: 1031:      return 0;
        -: 1032:
        -: 1033:		
        -: 1034:    case embargo: 
        -: 1035:      //+2 Coins
    #####: 1036:      state->coins = state->coins + 2;
        -: 1037:			
        -: 1038:      //see if selected pile is in play
    #####: 1039:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1040:	{
    #####: 1041:	  return -1;
        -: 1042:	}
        -: 1043:			
        -: 1044:      //add embargo token to selected supply pile
    #####: 1045:      state->embargoTokens[choice1]++;
        -: 1046:			
        -: 1047:      //trash card
    #####: 1048:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case outpost:
        -: 1052:      //set outpost flag
    #####: 1053:      state->outpostPlayed++;
        -: 1054:			
        -: 1055:      //discard card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case salvager:
        -: 1060:      //+1 buy
     7516: 1061:      state->numBuys++;
        -: 1062:			
     7516: 1063:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1064:	{
        -: 1065:	  //gain coins equal to trashed card
     7516: 1066:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1067:	  //trash card
     7516: 1068:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1069:	}
        -: 1070:			
        -: 1071:      //discard card
     7516: 1072:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     7516: 1073:      return 0;
        -: 1074:		
        -: 1075:    case sea_hag:
    #####: 1076:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1078:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1079:	  state->discardCount[i]++;
    #####: 1080:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1081:	}
        -: 1082:      }
    #####: 1083:      return 0;
        -: 1084:		
        -: 1085:    case treasure_map:
        -: 1086:      //search hand for another treasure_map
    #####: 1087:      index = -1;
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1091:	    {
    #####: 1092:	      index = i;
    #####: 1093:	      break;
        -: 1094:	    }
        -: 1095:	}
    #####: 1096:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
        -: 1098:	  //trash both treasure cards
    #####: 1099:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1100:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1101:
        -: 1102:	  //gain 4 Gold cards
    #####: 1103:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	    {
    #####: 1105:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1106:	    }
        -: 1107:				
        -: 1108:	  //return success
    #####: 1109:	  return 1;
        -: 1110:	}
        -: 1111:			
        -: 1112:      //no second treasure_map found in hand
    #####: 1113:      return -1;
        -: 1114:    }
        -: 1115:	
    #####: 1116:  return -1;
        -: 1117:}
        -: 1118:
function discardCard called 22556 returned 100% blocks executed 100%
    22556: 1119:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1120:{
        -: 1121:	
        -: 1122:  //if card is not trashed, added to Played pile 
    22556: 1123:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1124:    {
        -: 1125:      //add card to played pile
    15036: 1126:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    15036: 1127:      state->playedCardCount++;
        -: 1128:    }
        -: 1129:	
        -: 1130:  //set played card to -1
    22556: 1131:  state->hand[currentPlayer][handPos] = -1;
        -: 1132:	
        -: 1133:  //remove card from player's hand
    22556: 1134:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1135:    {
        -: 1136:      //reduce number of cards in hand
       47: 1137:      state->handCount[currentPlayer]--;
        -: 1138:    }
    22509: 1139:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1140:    {
        -: 1141:      //reduce number of cards in hand
       16: 1142:      state->handCount[currentPlayer]--;
        -: 1143:    }
        -: 1144:  else 	
        -: 1145:    {
        -: 1146:      //replace discarded card with last card in hand
    22493: 1147:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1148:      //set last card to -1
    22493: 1149:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1150:      //reduce number of cards in hand
    22493: 1151:      state->handCount[currentPlayer]--;
        -: 1152:    }
        -: 1153:	
    22556: 1154:  return 0;
        -: 1155:}
        -: 1156:
function gainCard called 7 returned 100% blocks executed 80%
        7: 1157:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1158:{
        -: 1159:  //Note: supplyPos is enum of choosen card
        -: 1160:	
        -: 1161:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1162:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1163:    {
    #####: 1164:      return -1;
        -: 1165:    }
        -: 1166:	
        -: 1167:  //added card for [whoseTurn] current player:
        -: 1168:  // toFlag = 0 : add to discard
        -: 1169:  // toFlag = 1 : add to deck
        -: 1170:  // toFlag = 2 : add to hand
        -: 1171:
        7: 1172:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1173:    {
    #####: 1174:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1175:      state->deckCount[player]++;
        -: 1176:    }
        7: 1177:  else if (toFlag == 2)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1178:    {
        3: 1179:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1180:      state->handCount[player]++;
        -: 1181:    }
        -: 1182:  else
        -: 1183:    {
        4: 1184:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1185:      state->discardCount[player]++;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //decrease number in supply pile
        7: 1189:  state->supplyCount[supplyPos]--;
        -: 1190:	 
        7: 1191:  return 0;
        -: 1192:}
        -: 1193:
function updateCoins called 45129 returned 100% blocks executed 91%
    45129: 1194:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1195:    
        -: 1196:	int i;
        -: 1197:	
        -: 1198:    // reset coin count
    45129: 1199:    state->coins = 0;
        -: 1200:
        -: 1201:    // add coins for each Treasure card in player's hand
  5828838: 1202:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  5783709: 1203:        if (state->hand[player][i] == copper)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
  1854975: 1204:            state->coins += 1;
  3928734: 1205:        else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 1206:            state->coins += 2;
  3928733: 1207:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1208:            state->coins += 3;
        -: 1209:    }	
        -: 1210:
        -: 1211:    // add bonus
    45129: 1212:    state->coins += bonus;
        -: 1213:
    45129: 1214:    return 0;
        -: 1215:}
        -: 1216:
        -: 1217:// added during Assignment 2 refactoring to move card effects to individual fns
function playAdventurer called 7517 returned 100% blocks executed 100%
     7517: 1218:int playAdventurer(struct gameState *state) {
        -: 1219:
     7517: 1220:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1221:	int temphand[MAX_HAND]; // moved above the if statement
     7517: 1222:	int drawntreasure=0;
        -: 1223:	int cardDrawn;
     7517: 1224:	int z = 0; // this is the counter for the temp hand
        -: 1225:
  1858504: 1226:	while(drawntreasure < 3) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1843470: 1227:		if (state->deckCount[currentPlayer] < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1228:			// if the deck is empty we need to shuffle discard and add to deck
      278: 1229:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1230:		}
  1843470: 1231:		drawCard(currentPlayer, state);
call    0 returned 100%
  1843470: 1232:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1233:			//top card of hand is most recently drawn card.
  1843470: 1234:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    22551: 1235:			drawntreasure++;
        -: 1236:		else {
  1820919: 1237:			temphand[z]=cardDrawn;
  1820919: 1238:			state->handCount[currentPlayer]--;
        -: 1239:			//this should just remove the top card (the most recently drawn one).
  1820919: 1240:			z++;
        -: 1241:		}
        -: 1242:    }
        -: 1243:    
  1835953: 1244:	while(z-1>=0) { // discard all cards in play that have been drawn
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1820919: 1245:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
  1820919: 1246:		z=z-1;
        -: 1247:    }
        -: 1248:	
        -: 1249:	// should be discarding played card from hand here?
        -: 1250:	// but original code didn't have it
        -: 1251:	
        -: 1252:	// return success
     7517: 1253:	return 0;
        -: 1254:}
        -: 1255:
        -: 1256:// added during Assignment 2 refactoring to move card effects to individual fns
function playSmithy called 4 returned 100% blocks executed 100%
        4: 1257:int playSmithy(struct gameState *state, int handPos) {
        -: 1258:	
        -: 1259:	int i;
        4: 1260:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1261:
        -: 1262:    // +3 Cards
       16: 1263:    for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       12: 1264:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1265:	}
        -: 1266:			
        -: 1267:    // discard card from hand
        4: 1268:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1269:    
        -: 1270:	// return success
        4: 1271:	return 0;
        -: 1272:}
        -: 1273:
        -: 1274:// added during Assignment 2 refactoring to move card effects to individual fns
function playVillage called 1 returned 100% blocks executed 100%
        1: 1275:int playVillage(struct gameState *state, int handPos) {
        -: 1276:
        1: 1277:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1278:	
        -: 1279:	// +1 Card
        1: 1280:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1281:			
        -: 1282:    // +2 Actions
        1: 1283:    state->numActions = state->numActions + 1;
        -: 1284:			
        -: 1285:    // discard played card from hand
        1: 1286:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1287:    
        -: 1288:	// return success
        1: 1289:	return 0;
        -: 1290:}
        -: 1291:
        -: 1292:// added during Assignment 2 refactoring to move card effects to individual fns
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1293:int playFeast(struct gameState *state, int choice1) {
        -: 1294:	
        -: 1295:	// gain card with cost up to 5
        -: 1296:	
        -: 1297:	int i;
        -: 1298:	int x;
    #####: 1299:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1300:	int temphand[MAX_HAND];// moved above the if statement
        -: 1301:    
        -: 1302:	// Backup hand
    #####: 1303:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1304:		temphand[i] = state->hand[currentPlayer][i]; // Backup card
    #####: 1305:		state->hand[currentPlayer][i] = -1; // Set to nothing
        -: 1306:    }
        -: 1307:    
        -: 1308:    // Update Coins for Buy
    #####: 1309:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1310:    x = 1; // Condition to loop on
    #####: 1311:    while(x == 1) { // Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1312:		if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1313:			if (DEBUG) {
        -: 1314:				printf("None of that card left, sorry!\n");
        -: 1315:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1316:			}
        -: 1317:		}
    #####: 1318:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1319:			printf("That card is too expensive!\n");
call    0 never executed
        -: 1320:			if (DEBUG)
        -: 1321:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1322:		}
        -: 1323:		else {
        -: 1324:			if (DEBUG)
        -: 1325:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
    #####: 1326:			gainCard(choice1, state, 1, currentPlayer); // Gain the card
call    0 never executed
    #####: 1327:			x = 0; // No more buying cards
        -: 1328:			if (DEBUG)
        -: 1329:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1330:		}
        -: 1331:    }     
        -: 1332:
        -: 1333:    // Reset Hand
    #####: 1334:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1335:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1336:		temphand[i] = -1;
        -: 1337:    }
        -: 1338:	
        -: 1339:	// should be discarding played card from hand here?
        -: 1340:	// but original code didn't have it
        -: 1341:      			
        -: 1342:    // return success
    #####: 1343:	return 0;
        -: 1344:}
        -: 1345:
        -: 1346:// added during Assignment 2 refactoring to move card effects to individual fns
function playCouncil_Room called 7517 returned 100% blocks executed 100%
     7517: 1347:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1348:
        -: 1349:	int i;
     7517: 1350:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1351:	
        -: 1352:    // +4 Cards
    37585: 1353:    for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
    30068: 1354:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1355:	}
        -: 1356:			
        -: 1357:    // +1 Buy
     7517: 1358:    state->numBuys++;
        -: 1359:			
        -: 1360:    // Each other player draws a card
    30084: 1361:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    22567: 1362:		if ( i == currentPlayer ) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
     7517: 1363:			drawCard(i, state);
call    0 returned 100%
        -: 1364:	    }
        -: 1365:	}
        -: 1366:			
        -: 1367:    // put played card in played card pile
     7517: 1368:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1369:			
        -: 1370:    // return success
     7517: 1371:	return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
