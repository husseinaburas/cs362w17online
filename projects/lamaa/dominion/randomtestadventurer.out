---- Random Test: Adventurer card ----
---- Number of tests = 10000 ----

---- Test 1: Adventurer should allow current player to draw 2 treasure cards. ----
Fail count = 9994 

---- Test 2: At least 2 cards should come from Player1's deck. ----
Fail count = 2629 

---- Test 3: Played card count should increase by 1 ---- 
Fail count = 10000 

---- Test 4: Hand Count for other players should not change ---- 
Fail count 2nd player = 7526 
Fail count 3rd player = 4913 

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:12.08% of 207
Branches executed:18.44% of 179
Taken at least once:6.15% of 179
Calls executed:12.07% of 58

Function 'refacCouncilRoom'
Lines executed:100.00% of 7
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 2

Function 'refacGreatHall'
Lines executed:0.00% of 4
No branches
Calls executed:0.00% of 1

Function 'refacVillage'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'refacSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'refacAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:10.00% of 30
Branches executed:100.00% of 28
Taken at least once:3.57% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:78.57% of 14
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:96.77% of 62
Branches executed:100.00% of 46
Taken at least once:93.48% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:34.35% of 556
Branches executed:40.05% of 417
Taken at least once:25.90% of 417
Calls executed:25.53% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 787501 returned 100% blocks executed 100%
   787501:    8:int compare(const void* a, const void* b) {
   787501:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
   184862:   10:    return 1;
   602639:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
   113801:   12:    return -1;
   488838:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10000 returned 100% blocks executed 97%
    10000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
call    0 returned 100%
    10000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:   49:    {
     2474:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     7526:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    82786:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   827860:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   752600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     7526:   73:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     2613:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     4913:   77:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:    {
     2443:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2470:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     7526:   87:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     2613:   89:      state->supplyCount[estate] = 8;
     2613:   90:      state->supplyCount[duchy] = 8;
     2613:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     4913:   95:      state->supplyCount[estate] = 12;
     4913:   96:      state->supplyCount[duchy] = 12;
     4913:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     7526:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     7526:  102:  state->supplyCount[silver] = 40;
     7526:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   158046:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  1241790:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  1166530:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    75260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
    30104:  115:		  if (numPlayers == 2){ 
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
     5226:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     9826:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    60208:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    75260:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1091270:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    29961:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    22435:  140:      state->deckCount[i] = 0;
    89740:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    67305:  143:	  state->deck[i][j] = estate;
    67305:  144:	  state->deckCount[i]++;
        -:  145:	}
   179480:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   157045:  148:	  state->deck[i][j] = copper;
   157045:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    29961:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    22435:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    29961:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    22435:  166:      state->handCount[i] = 0;
    22435:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   210728:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   203202:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     7526:  182:  state->outpostPlayed = 0;
     7526:  183:  state->phase = 0;
     7526:  184:  state->numActions = 1;
     7526:  185:  state->numBuys = 1;
     7526:  186:  state->playedCardCount = 0;
     7526:  187:  state->whoseTurn = 0;
     7526:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    45156:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    37630:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     7526:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     7526:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 23284 returned 100% blocks executed 100%
    23284:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    23284:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    23284:  209:  if (state->deckCount[player] < 1)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      554:  210:    return -1;
    22730:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   342261:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
   296801:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   296801:  216:    newDeck[newDeckPos] = state->deck[player][card];
   296801:  217:    newDeckPos++;
  6625750:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
  6328949:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   296801:  221:    state->deckCount[player]--;
        -:  222:  }
   319027:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
   296297:  224:    state->deck[player][i] = newDeck[i];
   296297:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    22730:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 10000 returned 100% blocks executed 80%
    10000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    10000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    10000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    10000:  243:  if ( state->numActions < 1 )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  244:    {
     2474:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     7526:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     7526:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     7526:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     7526:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     7526:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     7526:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 7526 returned 100% blocks executed 100%
     7526:  315:int handCard(int handPos, struct gameState *state) {
     7526:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     7526:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 15052 returned 100% blocks executed 100%
    15052:  320:int supplyCount(int card, struct gameState *state) {
    15052:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 15052 returned 100% blocks executed 100%
    15052:  346:int whoseTurn(struct gameState *state) {
    15052:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 152868 returned 100% blocks executed 100%
   152868:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   152868:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    72971:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    72451:  534:      state->deck[player][i] = state->discard[player][i];
    72451:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      520:  538:    state->deckCount[player] = state->discardCount[player];
      520:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      520:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      520:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      520:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      520:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      520:  559:    if (deckCounter == 0)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
      225:  560:      return -1;
        -:  561:
      295:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      295:  563:    state->deckCount[player]--;
      295:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   152348:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   152348:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   152348:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   152348:  576:    state->deckCount[player]--;
   152348:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   152643:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 7526 returned 100% blocks executed 10%
     7526:  583:int getCost(int cardNumber)
        -:  584:{
     7526:  585:  switch( cardNumber ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
     7526:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/* Week 2: Assignment 2 Refactor Functions */
function refacAdventurer called 7526 returned 100% blocks executed 100%
     7526:  647:int refacAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z)
        -:  648:{
    92803:  649:      while(drawntreasure<=2){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    77751:  650:	if (state->deckCount[currentPlayer] <1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      329:  651:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:  652:	}
    77751:  653:	drawCard(currentPlayer, state);
call    0 returned 100%
    77751:  654:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    77751:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
    22578:  656:	  drawntreasure++;
        -:  657:	else{
    55173:  658:	  temphand[z]=cardDrawn;
    55173:  659:	  state->handCount[currentPlayer]--; 
    55173:  660:	  z++;
        -:  661:	}
        -:  662:      }
    70225:  663:      while(z-1>=0){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
    55173:  664:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    55173:  665:	z=z-1;
        -:  666:      }
     7526:  667:      return 0;
        -:  668:}
        -:  669:
function refacSmithy called 0 returned 0% blocks executed 0%
    #####:  670:int refacSmithy(int handPos, int currentPlayer, struct gameState *state)
        -:  671:{
        -:  672:	int i;
        -:  673:
    #####:  674:	for (i = 0; i <=3; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  677:	}
        -:  678:	    		  				
        -:  679:
    #####:  680:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  681:	return 0;
        -:  682:}
        -:  683:
function refacVillage called 0 returned 0% blocks executed 0%
    #####:  684:int refacVillage(int currentPlayer, struct gameState *state, int handPos)
        -:  685:{
        -:  686:
    #####:  687:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  688:	drawCard(currentPlayer,state);
call    0 never executed
        -:  689:
    #####:  690:	state->numActions = state->numActions + 3;
        -:  691:	
        -:  692:
    #####:  693:   	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  694:      	return 0;
        -:  695:}
        -:  696:
function refacGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:int refacGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -:  698:{
    #####:  699:	state->numActions++;
        -:  700:	
        -:  701:	//discard card from hand
    #####:  702:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  703:      	return 0;
        -:  704:}	
        -:  705:
function refacCouncilRoom called 7526 returned 100% blocks executed 100%
     7526:  706:int refacCouncilRoom(int currentPlayer, struct gameState *state)
        -:  707:{
        -:  708:	int i;
        -:  709:
    30104:  710:      	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  711:	{
    22578:  712:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  713:	}
        -:  714:
        -:  715:	state->numBuys;
        -:  716:
    29961:  717:	for(i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  718:	{
    22435:  719:	  if ( i != currentPlayer )
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:  720:	    {
    14909:  721:	      drawCard(i, state);
call    0 returned 100%
        -:  722:	    }
        -:  723:	}
     7526:  724:}
        -:  725:
        -:  726:/* ------------------------ Assignment 2 Refactor End -------------------------*/
        -:  727:
function cardEffect called 7526 returned 100% blocks executed 10%
     7526:  728:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  729:{
        -:  730:  int i;
        -:  731:  int j;
        -:  732:  int k;
        -:  733:  int x;
        -:  734:  int index;
     7526:  735:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     7526:  736:  int nextPlayer = currentPlayer + 1;
        -:  737:
     7526:  738:  int tributeRevealedCards[2] = {-1, -1};
        -:  739:  int temphand[MAX_HAND];// moved above the if statement
     7526:  740:  int drawntreasure=0;
        -:  741:  int cardDrawn;
     7526:  742:  int z = 0;// this is the counter for the temp hand
     7526:  743:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
     2753:  744:    nextPlayer = 0;
        -:  745:  }
        -:  746:  		
        -:  747:  //uses switch to select card and perform actions
     7526:  748:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  749:    {
        -:  750:    case adventurer:
     7526:  751:	refacAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
call    0 returned 100%
        -:  752:				
        -:  753:    case council_room:
     7526:  754:	refacCouncilRoom(currentPlayer, state);
call    0 returned 100%
        -:  755:			
        -:  756:    case feast:
        -:  757:      //gain card with cost up to 5
        -:  758:      //Backup hand
  1934006:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1926480:  760:	temphand[i] = state->hand[currentPlayer][i];//Backup card
  1926480:  761:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  762:      }
        -:  763:      //Backup hand
        -:  764:
        -:  765:      //Update Coins for Buy
     7526:  766:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
     7526:  767:      x = 1;//Condition to loop on
    22578:  768:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
     7526:  769:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  770:	  if (DEBUG)
        -:  771:	    printf("None of that card left, sorry!\n");
        -:  772:
        -:  773:	  if (DEBUG){
        -:  774:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  775:	  }
        -:  776:	}
     7526:  777:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  778:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  779:
        -:  780:	  if (DEBUG){
        -:  781:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  782:	  }
        -:  783:	}
        -:  784:	else{
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  788:	  }
        -:  789:
     7526:  790:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
     7526:  791:	  x = 0;//No more buying cards
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  795:	  }
        -:  796:
        -:  797:	}
        -:  798:      }     
        -:  799:
        -:  800:      //Reset Hand
  1932998:  801:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1925472:  802:	state->hand[currentPlayer][i] = temphand[i];
  1925472:  803:	temphand[i] = -1;
        -:  804:      }
        -:  805:      //Reset Hand
        -:  806:      			
     7526:  807:      return 0;
        -:  808:			
        -:  809:    case gardens:
    #####:  810:      return -1;
        -:  811:			
        -:  812:    case mine:
    #####:  813:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  814:
    #####:  815:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  816:	{
    #####:  817:	  return -1;
        -:  818:	}
        -:  819:		
    #####:  820:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  821:	{
    #####:  822:	  return -1;
        -:  823:	}
        -:  824:
    #####:  825:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  826:	{
    #####:  827:	  return -1;
        -:  828:	}
        -:  829:
    #####:  830:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  831:
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  834:
        -:  835:      //discard trashed card
    #####:  836:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  837:	{
    #####:  838:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  839:	    {
    #####:  840:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  841:	      break;
        -:  842:	    }
        -:  843:	}
        -:  844:			
    #####:  845:      return 0;
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:	refacSmithy(handPos, currentPlayer, state);
call    0 never executed
        -:  875:		
        -:  876:    case village:
    #####:  877:	refacVillage(currentPlayer, state, handPos);	
call    0 never executed
        -:  878:		
        -:  879:    case baron:
    #####:  880:      state->numBuys++;//Increase buys by 1!
    #####:  881:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  882:	int p = 0;//Iterator for hand!
    #####:  883:	int card_not_discarded = 1;//Flag for discard set!
    #####:  884:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  885:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  886:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  887:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  888:	    state->discardCount[currentPlayer]++;
    #####:  889:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  890:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  891:	    }
    #####:  892:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  893:	    state->handCount[currentPlayer]--;
    #####:  894:	    card_not_discarded = 0;//Exit the loop
        -:  895:	  }
    #####:  896:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  897:	    if(DEBUG) {
        -:  898:	      printf("No estate cards in your hand, invalid choice\n");
        -:  899:	      printf("Must gain an estate if there are any\n");
        -:  900:	    }
    #####:  901:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  902:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  903:	      state->supplyCount[estate]--;//Decrement estates
    #####:  904:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:		isGameOver(state);
call    0 never executed
        -:  906:	      }
        -:  907:	    }
    #####:  908:	    card_not_discarded = 0;//Exit the loop
        -:  909:	  }
        -:  910:			    
        -:  911:	  else{
    #####:  912:	    p++;//Next card
        -:  913:	  }
        -:  914:	}
        -:  915:      }
        -:  916:			    
        -:  917:      else{
    #####:  918:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  920:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  921:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	    isGameOver(state);
call    0 never executed
        -:  923:	  }
        -:  924:	}
        -:  925:      }
        -:  926:	    
        -:  927:      
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case great_hall:
    #####:  931:	refacGreatHall(currentPlayer, state, handPos);
call    0 never executed
        -:  932:   
        -:  933:    case minion:
        -:  934:      //+1 action
    #####:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  939:			
    #####:  940:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  941:	{
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
    #####:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  946:	{
        -:  947:	  //discard hand
    #####:  948:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  949:	    {
    #####:  950:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
    #####:  954:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  955:	    {
    #####:  956:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
    #####:  960:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  963:		{
    #####:  964:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  965:		    {
        -:  966:		      //discard hand
    #####:  967:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  968:			{
    #####:  969:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
    #####:  973:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  974:			{
    #####:  975:			  drawCard(i, state);
call    0 never executed
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  986:	{
        -:  987:	  //+2 cards
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  989:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  990:	}
    #####:  991:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  992:	{
        -:  993:	  //+2 coins
    #####:  994:	  state->coins = state->coins + 2;
        -:  995:	}
        -:  996:      else
        -:  997:	{
        -:  998:	  //trash 2 cards in hand
    #####:  999:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1000:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1001:	}
        -: 1002:			
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1009:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1010:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	  state->deckCount[nextPlayer]--;
        -: 1012:	}
    #####: 1013:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:	  state->discardCount[nextPlayer]--;
        -: 1016:	}
        -: 1017:	else{
        -: 1018:	  //No Card to Reveal
        -: 1019:	  if (DEBUG){
        -: 1020:	    printf("No cards to reveal\n");
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      else{
    #####: 1026:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1028:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:	    state->deckCount[nextPlayer]++;
    #####: 1030:	    state->discard[nextPlayer][i] = -1;
    #####: 1031:	    state->discardCount[nextPlayer]--;
        -: 1032:	  }
        -: 1033:			    
    #####: 1034:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1035:	} 
    #####: 1036:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    #####: 1039:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
        -: 1042:      }    
        -: 1043:		       
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1045:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:	state->playedCardCount++;
    #####: 1047:	tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1052:	  state->coins += 2;
        -: 1053:	}
        -: 1054:		    
    #####: 1055:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1056:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1057:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1058:	}
        -: 1059:	else{//Action Card
    #####: 1060:	  state->numActions = state->numActions + 2;
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	{
    #####: 1081:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1082:	    {
    #####: 1083:	      j++;
        -: 1084:	    }
        -: 1085:	}
    #####: 1086:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
        -: 1091:      if (DEBUG) 
        -: 1092:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:			
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1101:	    {
    #####: 1102:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1113:	    {
    #####: 1114:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1115:		{
    #####: 1116:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1117:		  break;
        -: 1118:		}
        -: 1119:	    }
        -: 1120:	}			
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case cutpurse:
        -: 1125:
    #####: 1126:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1134:		    {
    #####: 1135:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1136:		      break;
        -: 1137:		    }
    #####: 1138:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1139:		    {
    #####: 1140:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1141:			{
        -: 1142:			  if (DEBUG)
        -: 1143:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:			}	
    #####: 1145:		      break;
        -: 1146:		    }		
        -: 1147:		}
        -: 1148:					
        -: 1149:	    }
        -: 1150:				
        -: 1151:	}				
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1155:
    #####: 1156:      return 0;
        -: 1157:
        -: 1158:		
        -: 1159:    case embargo: 
        -: 1160:      //+2 Coins
    #####: 1161:      state->coins = state->coins + 2;
        -: 1162:			
        -: 1163:      //see if selected pile is in play
    #####: 1164:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:			
        -: 1169:      //add embargo token to selected supply pile
    #####: 1170:      state->embargoTokens[choice1]++;
        -: 1171:			
        -: 1172:      //trash card
    #####: 1173:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1202:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:	  state->discardCount[i]++;
    #####: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
    #####: 1248:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1249:    {
        -: 1250:      //add card to played pile
    #####: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
    #####: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
    #####: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
    #####: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
    #####: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
    #####: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
    #####: 1279:  return 0;
        -: 1280:}
        -: 1281:
function gainCard called 7526 returned 100% blocks executed 70%
     7526: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
     7526: 1287:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
     7526: 1297:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
     7526: 1302:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
     7526: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     7526: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
     7526: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
     7526: 1316:  return 0;
        -: 1317:}
        -: 1318:
function updateCoins called 22578 returned 100% blocks executed 100%
    22578: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
    22578: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
  3896104: 1327:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1328:    {
  3873526: 1329:      if (state->hand[player][i] == copper)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1330:	{
   434880: 1331:	  state->coins += 1;
        -: 1332:	}
  3438646: 1333:      else if (state->hand[player][i] == silver)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1334:	{
   380659: 1335:	  state->coins += 2;
        -: 1336:	}
  3057987: 1337:      else if (state->hand[player][i] == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1338:	{
   390544: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
    22578: 1344:  state->coins += bonus;
        -: 1345:
    22578: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
