File 'unittest1.c'
Lines executed:86.67% of 15
Creating 'unittest1.c.gcov'

File '<built-in>'
No executable lines
Removing '<built-in>.gcov'

File 'unittest2.c'
Lines executed:73.33% of 15
Creating 'unittest2.c.gcov'

File 'unittest3.c'
Lines executed:90.91% of 11
Creating 'unittest3.c.gcov'

File 'unittest4.c'
Lines executed:88.89% of 9
Creating 'unittest4.c.gcov'

File 'cardtest1.c'
Lines executed:87.50% of 8
Creating 'cardtest1.c.gcov'

File 'cardtest2.c'
Lines executed:90.00% of 10
Creating 'cardtest2.c.gcov'

File 'cardtest3.c'
Lines executed:92.86% of 14
Creating 'cardtest3.c.gcov'

File 'cardtest4.c'
Lines executed:83.33% of 18
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:24.01% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unittest1.c
        -:    2://isGameOver
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:
        1:   11:int main(){
        -:   12:	
        -:   13:	struct gameState state;	
        -:   14:	int j;
        -:   15:
        1:   16:	int k[10] = {1,2,3,4,5,6,7,8,9,10};
        -:   17:	//test for condition 1
        1:   18:	initializeGame(2,k,2,&state);
        1:   19:	state.supplyCount[province] = 0;
        -:   20:	
        1:   21:	j = isGameOver(&state);
        1:   22:	if(j==1){
        1:   23:		printf("isGameOver: Test 1 Passed\n");
        -:   24:	}
        -:   25:	else{
    #####:   26:		printf("isGameOver: Test 1 Failed\n");
        -:   27:	}
        -:   28:	//assert(j == 1);
        -:   29:	//end test for condition 1
        -:   30:	//test for condition 2
        1:   31:	state.supplyCount[1] = 0;
        1:   32:	state.supplyCount[4] = 0;
        1:   33:	state.supplyCount[7] = 0;
        -:   34:	
        1:   35:	j = isGameOver(&state);
        1:   36:	if(j==1){
        1:   37:		printf("isGameOver: Test 2 Passed\n");
        -:   38:	}
        -:   39:	else{
    #####:   40:		printf("isGameOver: Test 2 Failed\n");
        -:   41:	}
        -:   42:	
        -:   43:	
        -:   44:	//assert(j == 1);
        -:   45:
        -:   46:
        -:   47:	
        -:   48:}
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unittest2.c
        -:    2://getCost
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:
        -:   11:
        1:   12:int main(){
        -:   13:
        1:   14:	printf("There are 4 tests for this unit test.\n");
        -:   15:	
        1:   16:	if(getCost(0) == 0){
        1:   17:		printf("getCost: Test 1 Passed\n");
        -:   18:	}
        -:   19:	else{
    #####:   20:		printf("getCost: Test 1 Failed\n");
        -:   21:	}
        -:   22:
        1:   23:	if(getCost(adventurer) == 6){
        1:   24:		printf("getCost: Test 2 Passed\n");
        -:   25:	}
        -:   26:	else{
    #####:   27:		printf("getCost: Test 2 Failed\n");
        -:   28:	}
        -:   29:	  
        1:   30:	if(getCost(smithy) == 4){
        1:   31:		printf("getCost: Test 3 Passed\n");
        -:   32:	}
        -:   33:	else{
    #####:   34:		printf("getCost: Test 3 Failed\n");
        -:   35:	}
        -:   36:	  
        1:   37:	if(getCost(gold) == 6){
        1:   38:		printf("getCost: Test 4 Passed\n");
        -:   39:	}
        -:   40:	else{
    #####:   41:		printf("getCost: Test 4 Failed\n");
        -:   42:	}
        1:   43:	  return 0;
        -:   44:}
        -:   45:
        -:   46:
        -:   47:
        -:   48:
        -:   49:
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unittest3.c
        -:    2://whoseTurn
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include "assert.h"
        -:    7:#include "dominion.h"
        -:    8:#include "rngs.h"
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        1:   12:int main(){
        -:   13:
        -:   14:	struct gameState state;
        -:   15:
        1:   16:	int turn = 0;
        1:   17:	int p = 0;
        -:   18:
       16:   19:	for (int i = 0; i < 15; i++){
       15:   20:		state.whoseTurn = turn;
       15:   21:		p = whoseTurn(&state);
        -:   22:
       15:   23:		if(p == turn){
       15:   24:			printf("whoseTurn: Test %d passed", i);
        -:   25:		}
        -:   26:		else{
    #####:   27:			return 0;
        -:   28:		}
       15:   29:    turn++;
        -:   30:	}
        -:   31:
        1:   32:	return 0;
        -:   33:
        -:   34:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://unittest4.c
        -:    2://supplyCount
        -:    3:
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:#include "assert.h"
        -:    7:#include "dominion.h"
        -:    8:#include "rngs.h"
        -:    9:#include <time.h>
        -:   10:
        1:   11:int main(){
        -:   12:	
        -:   13:	int x;
        -:   14:	int y;
        -:   15:	
        -:   16:	struct gameState state;
        -:   17:	
        1:   18:	state.supplyCount[smithy] = 10;
        1:   19:	x = supplyCount(smithy, &state);
        -:   20:	
        1:   21:	state.supplyCount[smithy] = 3;
        1:   22:	y = supplyCount(smithy, &state);
        -:   23:	
        1:   24:	if ((x-y) == 7)
        1:   25:		printf("supplyCount: Test passed\n");
        -:   26:	else
    #####:   27:		printf("supplyCount: Test failed\n");
        -:   28:	
        1:   29:	return 0;
        -:   30:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest.c
        -:    2://adventurer
        -:    3:
        -:    4:#include "assert.h"
        -:    5:#include "dominion.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:
        1:   11:int main (int argc, char** argv) {
        -:   12:
        -:   13:	struct gameState state;
        1:   14:	int choice1 = 0, choice2 = 0, choice3 = 0;
        -:   15:
        1:   16:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   17:	       sea_hag, tribute, smithy};
        -:   18:
        1:   19:	initializeGame(2, k, 4, &state);
        -:   20:
        1:   21:	if(cardEffect(adventurer, choice1, choice2, choice3, &state, 0, NULL) == 0){
        1:   22:		printf("adventurer: Test Passed\n");
        -:   23:	}
        -:   24:	else{
    #####:   25:		printf("adventurer: Test Failed\n");
        -:   26:	}
        1:   27:	return 0;
        -:   28:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest2.c
        -:    2://smithy
        -:    3:
        -:    4:#include "assert.h"
        -:    5:#include "dominion.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        1:   10:int main (int argc, char** argv) {
        -:   11:
        -:   12:	struct gameState state;
        1:   13:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   14:	       sea_hag, tribute, smithy};
        1:   15:	int choice1 = 0, choice2 = 0, choice3 = 0;
        -:   16:	int x;
        -:   17:
        1:   18:	initializeGame(2, k, 2, &state);
        -:   19:
        1:   20:	x = numHandCards(&state);
        1:   21:	cardEffect(smithy, choice1, choice2, choice3, &state, NULL);
        -:   22:
        1:   23:	if(numHandCards(&state) == x+2){
        1:   24:		printf("smithy: Test Passed\n");  
        -:   25:	}
        -:   26:	else{
    #####:   27:		printf("smithy: Test Failed\n");
        -:   28:	}
        -:   29:
        1:   30:	return 0;
        -:   31:
        -:   32:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest3.c
        -:    2://village
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:
        -:   11:
        1:   12:int main () {
        -:   13:		
        1:   14:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:	       sea_hag, tribute, smithy};
        -:   16:
        -:   17:	int x;
        -:   18:	int y;
        -:   19:	
        -:   20:	struct gameState before;
        -:   21:	struct gameState after;
        -:   22:
        1:   23:	initializeGame(2, k, 1, &before);
        1:   24:	memcpy (&before, &after, sizeof(struct gameState));
        -:   25:
        1:   26:	after.deckCount[0] = 3;
        1:   27:	before.deckCount[0] = 3;
        1:   28:	after.hand[0][0] = village;
        1:   29:	before.whoseTurn = 0;
        -:   30:	//playVillage(&after, 0);
        -:   31:	
        -:   32:	//test for numActions
        -:   33:	
        1:   34:	x = before.numActions;
        1:   35:	y = after.numActions;
        -:   36:	
        1:   37:	if((x+2) == y){
    #####:   38:		printf("village: Test Passed\n");
        -:   39:	}
        -:   40:	else{
        1:   41:		printf("village: Test Failed\n");
        -:   42:	}
        -:   43:
        1:   44:	return 0;
        -:   45:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest4.c
        -:    2://council_room
        -:    3:
        -:    4:#include "assert.h"
        -:    5:#include "dominion.h"
        -:    6:#include <stdio.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        1:   10:int main () {
        -:   11:	struct gameState state;
        -:   12:	
        1:   13:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   14:		sea_hag, tribute, smithy};
        -:   15:	
        1:   16:	initializeGame(2, k, 2, &state);
        -:   17:	
        1:   18:	state.numBuys = 0;
        -:   19:	int x;
        1:   20:	x = state.handCount[0];
        -:   21:	
        1:   22:	int card = council_room;
        1:   23:	state.hand[0][0] = card;
        1:   24:	playCard(0,0,0,0,&state);
        -:   25:	
        1:   26:	if (state.numBuys == 1){
        1:   27:		printf("council_room: Test 1 Passed\n");
        -:   28:	}
        -:   29:	else{
    #####:   30:		printf("council_room: Test 1 Failed\n");
        -:   31:	}
        1:   32:	if (state.handCount[0] == 8){
    #####:   33:		printf("council_room: Test 2 Passed\n");
        -:   34:	}
        -:   35:	else{
        1:   36:		printf("council_room: Test 2 Failed\n");
        -:   37:	}
        1:   38:	if (state.handCount[1] == 6){
    #####:   39:		printf("council_room: Test 3 Passed\n");
        -:   40:	}
        -:   41:	else{
        1:   42:		printf("council_room: Test 3 Failed\n");
        -:   43:	}
        -:   44:	
        -:   45:	
        1:   46:	return 0;
        -:   47:}	
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int reSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:    9:	//+3 Cards
        -:   10:	int i;
    #####:   11:    for (i = 0; i < 3; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:    //discard card from hand
    #####:   17:    discardCard(handPos, currentPlayer, state, 0);
    #####:   18:    return 0;
        -:   19:}
        -:   20:
    #####:   21:int reAdventurer(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z ){
    #####:   22:    while(drawntreasure<3){//bug
    #####:   23:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   24:	  shuffle(currentPlayer, state);
        -:   25:	}
    #####:   26:	drawCard(currentPlayer, state);
    #####:   27:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   28:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   29:	  drawntreasure++;
        -:   30:	else{
    #####:   31:	  temphand[z]=cardDrawn;
    #####:   32:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   33:	  z++;
        -:   34:	}
        -:   35:      }
    #####:   36:      while(z-1>=0){
    #####:   37:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   38:	z=z-1;
        -:   39:      }
    #####:   40:      return 0;
        -:   41:}
        -:   42:
        1:   43:int reCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
        -:   44:	int i;
        -:   45:	//+4 Cards
        6:   46:    for (i = 0; i <= 4; i++) //bug, i should be less than 4
        -:   47:	{
        5:   48:	  drawCard(currentPlayer, state);
        -:   49:	}
        -:   50:			
        -:   51:      //+1 Buy
        1:   52:      state->numBuys++;
        -:   53:			
        -:   54:      //Each other player draws a card
        3:   55:    for (i = 0; i < state->numPlayers; i++)
        -:   56:	{
        2:   57:		if ( i != currentPlayer )
        -:   58:	    {
        1:   59:	      drawCard(i, state);
        -:   60:	    }
        -:   61:	}
        -:   62:			
        -:   63:      //put played card in played card pile
        1:   64:      discardCard(handPos, currentPlayer, state, 0);
        -:   65:			
        1:   66:      return 0;
        -:   67:}
        -:   68:
    #####:   69:int reGreatHall(struct gameState *state, int currentPlayer, int handPos){
        -:   70:	  //+1 Card
    #####:   71:      drawCard(currentPlayer, state);
        -:   72:			
        -:   73:      //+1 Actions
        -:   74:      //state->numActions++; bug
        -:   75:			
        -:   76:      //discard card from hand
    #####:   77:      discardCard(handPos, currentPlayer, state, 0);
    #####:   78:	  return 0;
        -:   79:}
    #####:   80:int reEmbargo(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:   81:	//+2 Coins
    #####:   82:      state->coins = state->coins;  //bug 
        -:   83:			
        -:   84:      //see if selected pile is in play
    #####:   85:    if ( state->supplyCount[choice1] == -1 )
        -:   86:	{
    #####:   87:	  return -1;
        -:   88:	}
        -:   89:			
        -:   90:      //add embargo token to selected supply pile
    #####:   91:      state->embargoTokens[choice1]++;
        -:   92:			
        -:   93:      //trash card
    #####:   94:      discardCard(handPos, currentPlayer, state, 1);		
    #####:   95:      return 0;
        -:   96:}
        -:   97:
       30:   98:int compare(const void* a, const void* b) {
       30:   99:  if (*(int*)a > *(int*)b)
    #####:  100:    return 1;
       30:  101:  if (*(int*)a < *(int*)b)
        8:  102:    return -1;
       22:  103:  return 0;
        -:  104:}
        -:  105:
    #####:  106:struct gameState* newGame() {
    #####:  107:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  108:  return g;
        -:  109:}
        -:  110:
    #####:  111:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  112:		  int k8, int k9, int k10) {
    #####:  113:  int* k = malloc(10 * sizeof(int));
    #####:  114:  k[0] = k1;
    #####:  115:  k[1] = k2;
    #####:  116:  k[2] = k3;
    #####:  117:  k[3] = k4;
    #####:  118:  k[4] = k5;
    #####:  119:  k[5] = k6;
    #####:  120:  k[6] = k7;
    #####:  121:  k[7] = k8;
    #####:  122:  k[8] = k9;
    #####:  123:  k[9] = k10;
    #####:  124:  return k;
        -:  125:}
        -:  126:
        1:  127:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  128:		   struct gameState *state) {
        -:  129:
        -:  130:  int i;
        -:  131:  int j;
        -:  132:  int it;			
        -:  133:  //set up random number generator
        1:  134:  SelectStream(1);
        1:  135:  PutSeed((long)randomSeed);
        -:  136:  
        -:  137:  //check number of players
        1:  138:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  139:    {
    #####:  140:      return -1;
        -:  141:    }
        -:  142:
        -:  143:  //set number of players
        1:  144:  state->numPlayers = numPlayers;
        -:  145:
        -:  146:  //check selected kingdom cards are different
       11:  147:  for (i = 0; i < 10; i++)
        -:  148:    {
      110:  149:      for (j = 0; j < 10; j++)
        -:  150:        {
      100:  151:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  152:	    {
    #####:  153:	      return -1;
        -:  154:	    }
        -:  155:        }
        -:  156:    }
        -:  157:
        -:  158:
        -:  159:  //initialize supply
        -:  160:  ///////////////////////////////
        -:  161:
        -:  162:  //set number of Curse cards
        1:  163:  if (numPlayers == 2)
        -:  164:    {
        1:  165:      state->supplyCount[curse] = 10;
        -:  166:    }
    #####:  167:  else if (numPlayers == 3)
        -:  168:    {
    #####:  169:      state->supplyCount[curse] = 20;
        -:  170:    }
        -:  171:  else
        -:  172:    {
    #####:  173:      state->supplyCount[curse] = 30;
        -:  174:    }
        -:  175:
        -:  176:  //set number of Victory cards
        1:  177:  if (numPlayers == 2)
        -:  178:    {
        1:  179:      state->supplyCount[estate] = 8;
        1:  180:      state->supplyCount[duchy] = 8;
        1:  181:      state->supplyCount[province] = 8;
        -:  182:    }
        -:  183:  else
        -:  184:    {
    #####:  185:      state->supplyCount[estate] = 12;
    #####:  186:      state->supplyCount[duchy] = 12;
    #####:  187:      state->supplyCount[province] = 12;
        -:  188:    }
        -:  189:
        -:  190:  //set number of Treasure cards
        1:  191:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  192:  state->supplyCount[silver] = 40;
        1:  193:  state->supplyCount[gold] = 30;
        -:  194:
        -:  195:  //set number of Kingdom cards
       21:  196:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  197:    {
      165:  198:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  199:	{
      155:  200:	  if (kingdomCards[j] == i)
        -:  201:	    {
        -:  202:	      //check if card is a 'Victory' Kingdom card
       10:  203:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  204:		{
        2:  205:		  if (numPlayers == 2){ 
        1:  206:		    state->supplyCount[i] = 8; 
        -:  207:		  }
    #####:  208:		  else{ state->supplyCount[i] = 12; }
        -:  209:		}
        -:  210:	      else
        -:  211:		{
        9:  212:		  state->supplyCount[i] = 10;
        -:  213:		}
       10:  214:	      break;
        -:  215:	    }
        -:  216:	  else    //card is not in the set choosen for the game
        -:  217:	    {
      145:  218:	      state->supplyCount[i] = -1;
        -:  219:	    }
        -:  220:	}
        -:  221:
        -:  222:    }
        -:  223:
        -:  224:  ////////////////////////
        -:  225:  //supply intilization complete
        -:  226:
        -:  227:  //set player decks
        3:  228:  for (i = 0; i < numPlayers; i++)
        -:  229:    {
        2:  230:      state->deckCount[i] = 0;
        8:  231:      for (j = 0; j < 3; j++)
        -:  232:	{
        6:  233:	  state->deck[i][j] = estate;
        6:  234:	  state->deckCount[i]++;
        -:  235:	}
       16:  236:      for (j = 3; j < 10; j++)
        -:  237:	{
       14:  238:	  state->deck[i][j] = copper;
       14:  239:	  state->deckCount[i]++;		
        -:  240:	}
        -:  241:    }
        -:  242:
        -:  243:  //shuffle player decks
        3:  244:  for (i = 0; i < numPlayers; i++)
        -:  245:    {
        2:  246:      if ( shuffle(i, state) < 0 )
        -:  247:	{
    #####:  248:	  return -1;
        -:  249:	}
        -:  250:    }
        -:  251:
        -:  252:  //draw player hands
        3:  253:  for (i = 0; i < numPlayers; i++)
        -:  254:    {  
        -:  255:      //initialize hand size to zero
        2:  256:      state->handCount[i] = 0;
        2:  257:      state->discardCount[i] = 0;
        -:  258:      //draw 5 cards
        -:  259:      // for (j = 0; j < 5; j++)
        -:  260:      //	{
        -:  261:      //	  drawCard(i, state);
        -:  262:      //	}
        -:  263:    }
        -:  264:  
        -:  265:  //set embargo tokens to 0 for all supply piles
       28:  266:  for (i = 0; i <= treasure_map; i++)
        -:  267:    {
       27:  268:      state->embargoTokens[i] = 0;
        -:  269:    }
        -:  270:
        -:  271:  //initialize first player's turn
        1:  272:  state->outpostPlayed = 0;
        1:  273:  state->phase = 0;
        1:  274:  state->numActions = 1;
        1:  275:  state->numBuys = 1;
        1:  276:  state->playedCardCount = 0;
        1:  277:  state->whoseTurn = 0;
        1:  278:  state->handCount[state->whoseTurn] = 0;
        -:  279:  //int it; move to top
        -:  280:
        -:  281:  //Moved draw cards to here, only drawing at the start of a turn
        6:  282:  for (it = 0; it < 5; it++){
        5:  283:    drawCard(state->whoseTurn, state);
        -:  284:  }
        -:  285:
        1:  286:  updateCoins(state->whoseTurn, state, 0);
        -:  287:
        1:  288:  return 0;
        -:  289:}
        -:  290:
        2:  291:int shuffle(int player, struct gameState *state) {
        -:  292: 
        -:  293:
        -:  294:  int newDeck[MAX_DECK];
        2:  295:  int newDeckPos = 0;
        -:  296:  int card;
        -:  297:  int i;
        -:  298:
        2:  299:  if (state->deckCount[player] < 1)
    #####:  300:    return -1;
        2:  301:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  302:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  303:
       24:  304:  while (state->deckCount[player] > 0) {
       20:  305:    card = floor(Random() * state->deckCount[player]);
       20:  306:    newDeck[newDeckPos] = state->deck[player][card];
       20:  307:    newDeckPos++;
       81:  308:    for (i = card; i < state->deckCount[player]-1; i++) {
       61:  309:      state->deck[player][i] = state->deck[player][i+1];
        -:  310:    }
       20:  311:    state->deckCount[player]--;
        -:  312:  }
       22:  313:  for (i = 0; i < newDeckPos; i++) {
       20:  314:    state->deck[player][i] = newDeck[i];
       20:  315:    state->deckCount[player]++;
        -:  316:  }
        -:  317:
        2:  318:  return 0;
        -:  319:}
        -:  320:
        1:  321:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  322:{	
        -:  323:  int card;
        1:  324:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  325:
        -:  326:  //check if it is the right phase
        1:  327:  if (state->phase != 0)
        -:  328:    {
    #####:  329:      return -1;
        -:  330:    }
        -:  331:	
        -:  332:  //check if player has enough actions
        1:  333:  if ( state->numActions < 1 )
        -:  334:    {
    #####:  335:      return -1;
        -:  336:    }
        -:  337:	
        -:  338:  //get card played
        1:  339:  card = handCard(handPos, state);
        -:  340:	
        -:  341:  //check if selected card is an action
        1:  342:  if ( card < adventurer || card > treasure_map )
        -:  343:    {
    #####:  344:      return -1;
        -:  345:    }
        -:  346:	
        -:  347:  //play card
        1:  348:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  349:    {
    #####:  350:      return -1;
        -:  351:    }
        -:  352:	
        -:  353:  //reduce number of actions
        1:  354:  state->numActions--;
        -:  355:
        -:  356:  //update coins (Treasure cards may be added with card draws)
        1:  357:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  358:	
        1:  359:  return 0;
        -:  360:}
        -:  361:
    #####:  362:int buyCard(int supplyPos, struct gameState *state) {
        -:  363:  int who;
        -:  364:  if (DEBUG){
        -:  365:    printf("Entering buyCard...\n");
        -:  366:  }
        -:  367:
        -:  368:  // I don't know what to do about the phase thing.
        -:  369:
    #####:  370:  who = state->whoseTurn;
        -:  371:
    #####:  372:  if (state->numBuys < 1){
        -:  373:    if (DEBUG)
        -:  374:      printf("You do not have any buys left\n");
    #####:  375:    return -1;
    #####:  376:  } else if (supplyCount(supplyPos, state) <1){
        -:  377:    if (DEBUG)
        -:  378:      printf("There are not any of that type of card left\n");
    #####:  379:    return -1;
    #####:  380:  } else if (state->coins < getCost(supplyPos)){
        -:  381:    if (DEBUG) 
        -:  382:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  383:    return -1;
        -:  384:  } else {
    #####:  385:    state->phase=1;
        -:  386:    //state->supplyCount[supplyPos]--;
    #####:  387:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  388:  
    #####:  389:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  390:    state->numBuys--;
        -:  391:    if (DEBUG)
        -:  392:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  393:  }
        -:  394:
        -:  395:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  396:  //state->discardCount[who]++;
        -:  397:    
    #####:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int numHandCards(struct gameState *state) {
    #####:  402:  return state->handCount[ whoseTurn(state) ];
        -:  403:}
        -:  404:
        1:  405:int handCard(int handPos, struct gameState *state) {
        1:  406:  int currentPlayer = whoseTurn(state);
        1:  407:  return state->hand[currentPlayer][handPos];
        -:  408:}
        -:  409:
    #####:  410:int supplyCount(int card, struct gameState *state) {
    #####:  411:  return state->supplyCount[card];
        -:  412:}
        -:  413:
    #####:  414:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  415:  int i;
    #####:  416:  int count = 0;
        -:  417:
    #####:  418:  for (i = 0; i < state->deckCount[player]; i++)
        -:  419:    {
    #####:  420:      if (state->deck[player][i] == card) count++;
        -:  421:    }
        -:  422:
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == card) count++;
        -:  426:    }
        -:  427:
    #####:  428:  for (i = 0; i < state->discardCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->discard[player][i] == card) count++;
        -:  431:    }
        -:  432:
    #####:  433:  return count;
        -:  434:}
        -:  435:
        2:  436:int whoseTurn(struct gameState *state) {
        2:  437:  return state->whoseTurn;
        -:  438:}
        -:  439:
    #####:  440:int endTurn(struct gameState *state) {
        -:  441:  int k;
        -:  442:  int i;
    #####:  443:  int currentPlayer = whoseTurn(state);
        -:  444:  
        -:  445:  //Discard hand
    #####:  446:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  447:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  448:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  449:  }
    #####:  450:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  451:    
        -:  452:  //Code for determining the player
    #####:  453:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  454:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  455:  }
        -:  456:  else{
    #####:  457:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  458:  }
        -:  459:
    #####:  460:  state->outpostPlayed = 0;
    #####:  461:  state->phase = 0;
    #####:  462:  state->numActions = 1;
    #####:  463:  state->coins = 0;
    #####:  464:  state->numBuys = 1;
    #####:  465:  state->playedCardCount = 0;
    #####:  466:  state->handCount[state->whoseTurn] = 0;
        -:  467:
        -:  468:  //int k; move to top
        -:  469:  //Next player draws hand
    #####:  470:  for (k = 0; k < 5; k++){
    #####:  471:    drawCard(state->whoseTurn, state);//Draw a card
        -:  472:  }
        -:  473:
        -:  474:  //Update money
    #####:  475:  updateCoins(state->whoseTurn, state , 0);
        -:  476:
    #####:  477:  return 0;
        -:  478:}
        -:  479:
    #####:  480:int isGameOver(struct gameState *state) {
        -:  481:  int i;
        -:  482:  int j;
        -:  483:	
        -:  484:  //if stack of Province cards is empty, the game ends
    #####:  485:  if (state->supplyCount[province] == 0)
        -:  486:    {
    #####:  487:      return 1;
        -:  488:    }
        -:  489:
        -:  490:  //if three supply pile are at 0, the game ends
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < 25; i++)
        -:  493:    {
    #####:  494:      if (state->supplyCount[i] == 0)
        -:  495:	{
    #####:  496:	  j++;
        -:  497:	}
        -:  498:    }
    #####:  499:  if ( j >= 3)
        -:  500:    {
    #####:  501:      return 1;
        -:  502:    }
        -:  503:
    #####:  504:  return 0;
        -:  505:}
        -:  506:
    #####:  507:int scoreFor (int player, struct gameState *state) {
        -:  508:
        -:  509:  int i;
    #####:  510:  int score = 0;
        -:  511:  //score from hand
    #####:  512:  for (i = 0; i < state->handCount[player]; i++)
        -:  513:    {
    #####:  514:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  515:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  516:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  517:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  518:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  519:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  520:    }
        -:  521:
        -:  522:  //score from discard
    #####:  523:  for (i = 0; i < state->discardCount[player]; i++)
        -:  524:    {
    #####:  525:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  526:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  527:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  528:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  529:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  530:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  531:    }
        -:  532:
        -:  533:  //score from deck
    #####:  534:  for (i = 0; i < state->discardCount[player]; i++)
        -:  535:    {
    #####:  536:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  537:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  538:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  539:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  540:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  541:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  542:    }
        -:  543:
    #####:  544:  return score;
        -:  545:}
        -:  546:
    #####:  547:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  548:  int i;	
        -:  549:  int j;
        -:  550:  int highScore;
        -:  551:  int currentPlayer;
        -:  552:
        -:  553:  //get score for each player
    #####:  554:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  555:    {
        -:  556:      //set unused player scores to -9999
    #####:  557:      if (i >= state->numPlayers)
        -:  558:	{
    #####:  559:	  players[i] = -9999;
        -:  560:	}
        -:  561:      else
        -:  562:	{
    #####:  563:	  players[i] = scoreFor (i, state);
        -:  564:	}
        -:  565:    }
        -:  566:
        -:  567:  //find highest score
    #####:  568:  j = 0;
    #####:  569:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  570:    {
    #####:  571:      if (players[i] > players[j])
        -:  572:	{
    #####:  573:	  j = i;
        -:  574:	}
        -:  575:    }
    #####:  576:  highScore = players[j];
        -:  577:
        -:  578:  //add 1 to players who had less turns
    #####:  579:  currentPlayer = whoseTurn(state);
    #####:  580:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  581:    {
    #####:  582:      if ( players[i] == highScore && i > currentPlayer )
        -:  583:	{
    #####:  584:	  players[i]++;
        -:  585:	}
        -:  586:    }
        -:  587:
        -:  588:  //find new highest score
    #####:  589:  j = 0;
    #####:  590:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  591:    {
    #####:  592:      if ( players[i] > players[j] )
        -:  593:	{
    #####:  594:	  j = i;
        -:  595:	}
        -:  596:    }
    #####:  597:  highScore = players[j];
        -:  598:
        -:  599:  //set winners in array to 1 and rest to 0
    #####:  600:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  601:    {
    #####:  602:      if ( players[i] == highScore )
        -:  603:	{
    #####:  604:	  players[i] = 1;
        -:  605:	}
        -:  606:      else
        -:  607:	{
    #####:  608:	  players[i] = 0;
        -:  609:	}
        -:  610:    }
        -:  611:
    #####:  612:  return 0;
        -:  613:}
        -:  614:
       11:  615:int drawCard(int player, struct gameState *state)
        -:  616:{	int count;
        -:  617:  int deckCounter;
       11:  618:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  619:    
        -:  620:    //Step 1 Shuffle the discard pile back into a deck
        -:  621:    int i;
        -:  622:    //Move discard to deck
    #####:  623:    for (i = 0; i < state->discardCount[player];i++){
    #####:  624:      state->deck[player][i] = state->discard[player][i];
    #####:  625:      state->discard[player][i] = -1;
        -:  626:    }
        -:  627:
    #####:  628:    state->deckCount[player] = state->discardCount[player];
    #####:  629:    state->discardCount[player] = 0;//Reset discard
        -:  630:
        -:  631:    //Shufffle the deck
    #####:  632:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  633:   
        -:  634:    if (DEBUG){//Debug statements
        -:  635:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  636:    }
        -:  637:    
    #####:  638:    state->discardCount[player] = 0;
        -:  639:
        -:  640:    //Step 2 Draw Card
    #####:  641:    count = state->handCount[player];//Get current player's hand count
        -:  642:    
        -:  643:    if (DEBUG){//Debug statements
        -:  644:      printf("Current hand count: %d\n", count);
        -:  645:    }
        -:  646:    
    #####:  647:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  648:
    #####:  649:    if (deckCounter == 0)
    #####:  650:      return -1;
        -:  651:
    #####:  652:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  653:    state->deckCount[player]--;
    #####:  654:    state->handCount[player]++;//Increment hand count
        -:  655:  }
        -:  656:
        -:  657:  else{
       11:  658:    int count = state->handCount[player];//Get current hand count for player
        -:  659:    int deckCounter;
        -:  660:    if (DEBUG){//Debug statements
        -:  661:      printf("Current hand count: %d\n", count);
        -:  662:    }
        -:  663:
       11:  664:    deckCounter = state->deckCount[player];//Create holder for the deck count
       11:  665:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       11:  666:    state->deckCount[player]--;
       11:  667:    state->handCount[player]++;//Increment hand count
        -:  668:  }
        -:  669:
       11:  670:  return 0;
        -:  671:}
        -:  672:
    #####:  673:int getCost(int cardNumber)
        -:  674:{
    #####:  675:  switch( cardNumber ) 
        -:  676:    {
        -:  677:    case curse:
    #####:  678:      return 0;
        -:  679:    case estate:
    #####:  680:      return 2;
        -:  681:    case duchy:
    #####:  682:      return 5;
        -:  683:    case province:
    #####:  684:      return 8;
        -:  685:    case copper:
    #####:  686:      return 0;
        -:  687:    case silver:
    #####:  688:      return 3;
        -:  689:    case gold:
    #####:  690:      return 6;
        -:  691:    case adventurer:
    #####:  692:      return 6;
        -:  693:    case council_room:
    #####:  694:      return 5;
        -:  695:    case feast:
    #####:  696:      return 4;
        -:  697:    case gardens:
    #####:  698:      return 4;
        -:  699:    case mine:
    #####:  700:      return 5;
        -:  701:    case remodel:
    #####:  702:      return 4;
        -:  703:    case smithy:
    #####:  704:      return 4;
        -:  705:    case village:
    #####:  706:      return 3;
        -:  707:    case baron:
    #####:  708:      return 4;
        -:  709:    case great_hall:
    #####:  710:      return 3;
        -:  711:    case minion:
    #####:  712:      return 5;
        -:  713:    case steward:
    #####:  714:      return 3;
        -:  715:    case tribute:
    #####:  716:      return 5;
        -:  717:    case ambassador:
    #####:  718:      return 3;
        -:  719:    case cutpurse:
    #####:  720:      return 4;
        -:  721:    case embargo: 
    #####:  722:      return 2;
        -:  723:    case outpost:
    #####:  724:      return 5;
        -:  725:    case salvager:
    #####:  726:      return 4;
        -:  727:    case sea_hag:
    #####:  728:      return 4;
        -:  729:    case treasure_map:
    #####:  730:      return 4;
        -:  731:    }
        -:  732:	
    #####:  733:  return -1;
        -:  734:}
        -:  735:
        1:  736:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  737:{
        -:  738:  int i;
        -:  739:  int j;
        -:  740:  int k;
        -:  741:  int x;
        -:  742:  int index;
        1:  743:  int currentPlayer = whoseTurn(state);
        1:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
        1:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
        1:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
        1:  750:  int z = 0;// this is the counter for the temp hand
        1:  751:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:  
        -:  755:	
        -:  756:  //uses switch to select card and perform actions
        1:  757:  switch( card ) 
        -:  758:    {
        -:  759:    case adventurer:
    #####:  760:      reAdventurer(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
    #####:  761:      return 0;
        -:  762:			
        -:  763:    case council_room:
        1:  764:		reCouncilRoom(state, currentPlayer, handPos);
        1:  765:      return 0;
        -:  766:			
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }     
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:      			
    #####:  818:      return 0;
        -:  819:			
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:			
        -:  823:    case mine:
    #####:  824:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  825:
    #####:  826:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  827:	{
    #####:  828:	  return -1;
        -:  829:	}
        -:  830:		
    #####:  831:      if (choice2 > treasure_map || choice2 < curse)
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:
    #####:  836:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  837:	{
    #####:  838:	  return -1;
        -:  839:	}
        -:  840:
    #####:  841:      gainCard(choice2, state, 2, currentPlayer);
        -:  842:
        -:  843:      //discard card from hand
    #####:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:
        -:  846:      //discard trashed card
    #####:  847:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  848:	{
    #####:  849:	  if (state->hand[currentPlayer][i] == j)
        -:  850:	    {
    #####:  851:	      discardCard(i, currentPlayer, state, 0);			
    #####:  852:	      break;
        -:  853:	    }
        -:  854:	}
        -:  855:			
    #####:  856:      return 0;
        -:  857:			
        -:  858:    case remodel:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      gainCard(choice2, state, 0, currentPlayer);
        -:  867:
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
        -:  870:
        -:  871:      //discard trashed card
    #####:  872:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  873:	{
    #####:  874:	  if (state->hand[currentPlayer][i] == j)
        -:  875:	    {
    #####:  876:	      discardCard(i, currentPlayer, state, 0);			
    #####:  877:	      break;
        -:  878:	    }
        -:  879:	}
        -:  880:
        -:  881:
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case smithy:
    #####:  885:      reSmithy(state, currentPlayer, handPos);
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:	int p = 0;//Iterator for hand!
    #####:  892:	int card_not_discarded = 1;//Flag for discard set!
    #####:  893:	while(card_not_discarded){
    #####:  894:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:	    state->discardCount[currentPlayer]++;
    #####:  898:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:	    }
    #####:  901:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:	    state->handCount[currentPlayer]--;
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
    #####:  905:	  else if (p > state->handCount[currentPlayer]){
        -:  906:	    if(DEBUG) {
        -:  907:	      printf("No estate cards in your hand, invalid choice\n");
        -:  908:	      printf("Must gain an estate if there are any\n");
        -:  909:	    }
    #####:  910:	    if (supplyCount(estate, state) > 0){
    #####:  911:	      gainCard(estate, state, 0, currentPlayer);
    #####:  912:	      state->supplyCount[estate]--;//Decrement estates
    #####:  913:	      if (supplyCount(estate, state) == 0){
    #####:  914:		isGameOver(state);
        -:  915:	      }
        -:  916:	    }
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
        -:  919:			    
        -:  920:	  else{
    #####:  921:	    p++;//Next card
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:			    
        -:  926:      else{
    #####:  927:	if (supplyCount(estate, state) > 0){
    #####:  928:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  930:	  if (supplyCount(estate, state) == 0){
    #####:  931:	    isGameOver(state);
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case great_hall:
    #####:  940:		reGreatHall(state, currentPlayer, handPos);
    #####:  941:      return 0;
        -:  942:		
        -:  943:    case minion:
        -:  944:      //+1 action
    #####:  945:      state->numActions++;
        -:  946:			
        -:  947:      //discard card from hand
    #####:  948:      discardCard(handPos, currentPlayer, state, 0);
        -:  949:			
    #####:  950:      if (choice1)		//+2 coins
        -:  951:	{
    #####:  952:	  state->coins = state->coins + 2;
        -:  953:	}
        -:  954:			
    #####:  955:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:	{
        -:  957:	  //discard hand
    #####:  958:	  while(numHandCards(state) > 0)
        -:  959:	    {
    #####:  960:	      discardCard(handPos, currentPlayer, state, 0);
        -:  961:	    }
        -:  962:				
        -:  963:	  //draw 4
    #####:  964:	  for (i = 0; i < 4; i++)
        -:  965:	    {
    #####:  966:	      drawCard(currentPlayer, state);
        -:  967:	    }
        -:  968:				
        -:  969:	  //other players discard hand and redraw if hand size > 4
    #####:  970:	  for (i = 0; i < state->numPlayers; i++)
        -:  971:	    {
    #####:  972:	      if (i != currentPlayer)
        -:  973:		{
    #####:  974:		  if ( state->handCount[i] > 4 )
        -:  975:		    {
        -:  976:		      //discard hand
    #####:  977:		      while( state->handCount[i] > 0 )
        -:  978:			{
    #####:  979:			  discardCard(handPos, i, state, 0);
        -:  980:			}
        -:  981:							
        -:  982:		      //draw 4
    #####:  983:		      for (j = 0; j < 4; j++)
        -:  984:			{
    #####:  985:			  drawCard(i, state);
        -:  986:			}
        -:  987:		    }
        -:  988:		}
        -:  989:	    }
        -:  990:				
        -:  991:	}
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case steward:
    #####:  995:      if (choice1 == 1)
        -:  996:	{
        -:  997:	  //+2 cards
    #####:  998:	  drawCard(currentPlayer, state);
    #####:  999:	  drawCard(currentPlayer, state);
        -: 1000:	}
    #####: 1001:      else if (choice1 == 2)
        -: 1002:	{
        -: 1003:	  //+2 coins
    #####: 1004:	  state->coins = state->coins + 2;
        -: 1005:	}
        -: 1006:      else
        -: 1007:	{
        -: 1008:	  //trash 2 cards in hand
    #####: 1009:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
    #####: 1014:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:      return 0;
        -: 1016:		
        -: 1017:    case tribute:
    #####: 1018:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:	if (state->deckCount[nextPlayer] > 0){
    #####: 1020:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	  state->deckCount[nextPlayer]--;
        -: 1022:	}
    #####: 1023:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:	  state->discardCount[nextPlayer]--;
        -: 1026:	}
        -: 1027:	else{
        -: 1028:	  //No Card to Reveal
        -: 1029:	  if (DEBUG){
        -: 1030:	    printf("No cards to reveal\n");
        -: 1031:	  }
        -: 1032:	}
        -: 1033:      }
        -: 1034:	    
        -: 1035:      else{
    #####: 1036:	if (state->deckCount[nextPlayer] == 0){
    #####: 1037:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:	    state->deckCount[nextPlayer]++;
    #####: 1040:	    state->discard[nextPlayer][i] = -1;
    #####: 1041:	    state->discardCount[nextPlayer]--;
        -: 1042:	  }
        -: 1043:			    
    #####: 1044:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:	} 
    #####: 1046:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:	state->deckCount[nextPlayer]--;
    #####: 1049:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
        -: 1052:      }    
        -: 1053:		       
    #####: 1054:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:	state->playedCardCount++;
    #####: 1057:	tributeRevealedCards[1] = -1;
        -: 1058:      }
        -: 1059:
    #####: 1060:      for (i = 0; i <= 2; i ++){
    #####: 1061:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:	  state->coins += 2;
        -: 1063:	}
        -: 1064:		    
    #####: 1065:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:	  drawCard(currentPlayer, state);
    #####: 1067:	  drawCard(currentPlayer, state);
        -: 1068:	}
        -: 1069:	else{//Action Card
    #####: 1070:	  state->numActions = state->numActions + 2;
        -: 1071:	}
        -: 1072:      }
        -: 1073:	    
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case ambassador:
    #####: 1077:      j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:      if (choice2 > 2 || choice2 < 0)
        -: 1080:	{
    #####: 1081:	  return -1;				
        -: 1082:	}
        -: 1083:
    #####: 1084:      if (choice1 == handPos)
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:	{
    #####: 1091:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:	    {
    #####: 1093:	      j++;
        -: 1094:	    }
        -: 1095:	}
    #####: 1096:      if (j < choice2)
        -: 1097:	{
    #####: 1098:	  return -1;				
        -: 1099:	}
        -: 1100:
        -: 1101:      if (DEBUG) 
        -: 1102:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:      //increase supply count for choosen card by amount being discarded
    #####: 1105:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:			
        -: 1107:      //each other player gains a copy of revealed card
    #####: 1108:      for (i = 0; i < state->numPlayers; i++)
        -: 1109:	{
    #####: 1110:	  if (i != currentPlayer)
        -: 1111:	    {
    #####: 1112:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:	    }
        -: 1114:	}
        -: 1115:
        -: 1116:      //discard played card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:      //trash copies of cards returned to supply
    #####: 1120:      for (j = 0; j < choice2; j++)
        -: 1121:	{
    #####: 1122:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	    {
    #####: 1124:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:		{
    #####: 1126:		  discardCard(i, currentPlayer, state, 1);
    #####: 1127:		  break;
        -: 1128:		}
        -: 1129:	    }
        -: 1130:	}			
        -: 1131:
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case cutpurse:
        -: 1135:
    #####: 1136:      updateCoins(currentPlayer, state, 2);
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1142:		{
    #####: 1143:		  if (state->hand[i][j] == copper)
        -: 1144:		    {
    #####: 1145:		      discardCard(j, i, state, 0);
    #####: 1146:		      break;
        -: 1147:		    }
    #####: 1148:		  if (j == state->handCount[i])
        -: 1149:		    {
    #####: 1150:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1151:			{
        -: 1152:			  if (DEBUG)
        -: 1153:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:			}	
    #####: 1155:		      break;
        -: 1156:		    }		
        -: 1157:		}
        -: 1158:					
        -: 1159:	    }
        -: 1160:				
        -: 1161:	}				
        -: 1162:
        -: 1163:      //discard played card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:		
        -: 1169:    case embargo: 
    #####: 1170:      	reEmbargo(state, currentPlayer, handPos, choice1);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case outpost:
        -: 1174:      //set outpost flag
    #####: 1175:      state->outpostPlayed++;
        -: 1176:			
        -: 1177:      //discard card
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1179:      return 0;
        -: 1180:		
        -: 1181:    case salvager:
        -: 1182:      //+1 buy
    #####: 1183:      state->numBuys++;
        -: 1184:			
    #####: 1185:      if (choice1)
        -: 1186:	{
        -: 1187:	  //gain coins equal to trashed card
    #####: 1188:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1189:	  //trash card
    #####: 1190:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1191:	}
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case sea_hag:
    #####: 1198:      for (i = 0; i < state->numPlayers; i++){
    #####: 1199:	if (i != currentPlayer){
    #####: 1200:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1201:	  state->discardCount[i]++;
    #####: 1202:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1203:	}
        -: 1204:      }
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case treasure_map:
        -: 1208:      //search hand for another treasure_map
    #####: 1209:      index = -1;
    #####: 1210:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1211:	{
    #####: 1212:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1213:	    {
    #####: 1214:	      index = i;
    #####: 1215:	      break;
        -: 1216:	    }
        -: 1217:	}
    #####: 1218:      if (index > -1)
        -: 1219:	{
        -: 1220:	  //trash both treasure cards
    #####: 1221:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:	  discardCard(index, currentPlayer, state, 1);
        -: 1223:
        -: 1224:	  //gain 4 Gold cards
    #####: 1225:	  for (i = 0; i < 4; i++)
        -: 1226:	    {
    #####: 1227:	      gainCard(gold, state, 1, currentPlayer);
        -: 1228:	    }
        -: 1229:				
        -: 1230:	  //return success
    #####: 1231:	  return 1;
        -: 1232:	}
        -: 1233:			
        -: 1234:      //no second treasure_map found in hand
    #####: 1235:      return -1;
        -: 1236:    }
        -: 1237:	
    #####: 1238:  return -1;
        -: 1239:}
        -: 1240:
        1: 1241:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1242:{
        -: 1243:	
        -: 1244:  //if card is not trashed, added to Played pile 
        1: 1245:  if (trashFlag < 1)
        -: 1246:    {
        -: 1247:      //add card to played pile
        1: 1248:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1249:      state->playedCardCount++;
        -: 1250:    }
        -: 1251:	
        -: 1252:  //set played card to -1
        1: 1253:  state->hand[currentPlayer][handPos] = -1;
        -: 1254:	
        -: 1255:  //remove card from player's hand
        1: 1256:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
        1: 1261:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        -: 1266:  else 	
        -: 1267:    {
        -: 1268:      //replace discarded card with last card in hand
        1: 1269:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1270:      //set last card to -1
        1: 1271:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1272:      //reduce number of cards in hand
        1: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:	
        1: 1276:  return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1280:{
        -: 1281:  //Note: supplyPos is enum of choosen card
        -: 1282:	
        -: 1283:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1284:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1285:    {
    #####: 1286:      return -1;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //added card for [whoseTurn] current player:
        -: 1290:  // toFlag = 0 : add to discard
        -: 1291:  // toFlag = 1 : add to deck
        -: 1292:  // toFlag = 2 : add to hand
        -: 1293:
    #####: 1294:  if (toFlag == 1)
        -: 1295:    {
    #####: 1296:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1297:      state->deckCount[player]++;
        -: 1298:    }
    #####: 1299:  else if (toFlag == 2)
        -: 1300:    {
    #####: 1301:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1302:      state->handCount[player]++;
        -: 1303:    }
        -: 1304:  else
        -: 1305:    {
    #####: 1306:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1307:      state->discardCount[player]++;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //decrease number in supply pile
    #####: 1311:  state->supplyCount[supplyPos]--;
        -: 1312:	 
    #####: 1313:  return 0;
        -: 1314:}
        -: 1315:
        2: 1316:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1317:{
        -: 1318:  int i;
        -: 1319:	
        -: 1320:  //reset coin count
        2: 1321:  state->coins = 0;
        -: 1322:
        -: 1323:  //add coins for each Treasure card in player's hand
       16: 1324:  for (i = 0; i < state->handCount[player]; i++)
        -: 1325:    {
       14: 1326:      if (state->hand[player][i] == copper)
        -: 1327:	{
       10: 1328:	  state->coins += 1;
        -: 1329:	}
        4: 1330:      else if (state->hand[player][i] == silver)
        -: 1331:	{
    #####: 1332:	  state->coins += 2;
        -: 1333:	}
        4: 1334:      else if (state->hand[player][i] == gold)
        -: 1335:	{
    #####: 1336:	  state->coins += 3;
        -: 1337:	}	
        -: 1338:    }	
        -: 1339:
        -: 1340:  //add bonus
        2: 1341:  state->coins += bonus;
        -: 1342:
        2: 1343:  return 0;
        -: 1344:}
        -: 1345:
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
