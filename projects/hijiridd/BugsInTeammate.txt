David Hijirida (hijiridd)
cs362 Assignment 5
BugsInTeammate.txt

This is a text file version of the bugs that are listed in the PDF submitted for Assignment 5 (question #2). Apologies for the formatting issues as I've pasted tables from MS Word into a text file. Also some of the highlighting referred to in my text shows up in MS Word/PDF format but not here in the text file.



TEST: hijiridd_unittest1



Bug ID#	unittest1-1
Title	Incorrect score calculation by ignoring deck pile
Bug Class	Serious Bug
Date:           	2/28/2017
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(my github copy in /hijiirdd/hassbDominion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes
Steps to Reproduce:	Create a game state with 2 players, deck count of 8, discard count of 8, hand count of 8. The error occurs when calculating the second player score. The entire game state is printed below:
--START PRINTING GAME STATE -------------------
numPlayers = 2
SUPPLY TOTAL=238, supplyCount: #0: 10, #1: 8, #2: 8, #3: 8, #4: 46, #5: 40, #6: 30, #7: 10, #8: -1, #9: -1, #10: 8, #11: 10, #12: -1, #13: 10, #14: 10, #15: -1, #16: -1, #17: 10, #18: -1, #19: 10, #20: -1, #21: 10, #22: 10, #23: -1, #24: -1, #25: 10, #26: -1, 
embargoTokens: #0: 0, #1: 0, #2: 0, #3: 0, #4: 0, #5: 0, #6: 0, #7: 0, #8: 0, #9: 0, #10: 0, #11: 0, #12: 0, #13: 0, #14: 0, #15: 0, #16: 0, #17: 0, #18: 0, #19: 0, #20: 0, #21: 0, #22: 0, #23: 0, #24: 0, #25: 0, #26: 0, 
outpostPlayed = 0, outpostTurn = 0, whoseTurn = 0, phase = 0, numActions = 1, coins = 4, numBuys = 1
playedCardCount = 0, playedCards[x]: 
PLAYER #0, HANDCOUNT=8, hand[player][hand]: [0][hand:0] = 0, [0][hand:1] = 1, [0][hand:2] = 2, [0][hand:3] = 3, [0][hand:4] = 4, [0][hand:5] = 5, [0][hand:6] = 6, [0][hand:7] = 7, 
PLAYER #0, DECKCOUNT=8, deck[player][hand]: [0][deck:0] = 0, [0][deck:1] = 1, [0][deck:2] = 2, [0][deck:3] = 3, [0][deck:4] = 4, [0][deck:5] = 5, [0][deck:6] = 6, [0][deck:7] = 7, 
PLAYER #0, DISCARDCOUNT=8, discard[player][hand]: [0][discard: 0] = 0, [0][discard: 1] = 1, [0][discard: 2] = 2, [0][discard: 3] = 3, [0][discard: 4] = 4, [0][discard: 5] = 5, [0][discard: 6] = 6, [0][discard: 7] = 7, 
PLAYER #1, HANDCOUNT=8, hand[player][hand]: [1][hand:0] = 8, [1][hand:1] = 9, [1][hand:2] = 10, [1][hand:3] = 11, [1][hand:4] = 12, [1][hand:5] = 13, [1][hand:6] = 14, [1][hand:7] = 15, 
PLAYER #1, DECKCOUNT=8, deck[player][hand]: [1][deck:0] = 8, [1][deck:1] = 9, [1][deck:2] = 10, [1][deck:3] = 11, [1][deck:4] = 12, [1][deck:5] = 13, [1][deck:6] = 14, [1][deck:7] = 15, 
PLAYER #1, DISCARDCOUNT=8, discard[player][hand]: [1][discard: 0] = 8, [1][discard: 1] = 9, [1][discard: 2] = 10, [1][discard: 3] = 11, [1][discard: 4] = 12, [1][discard: 5] = 13, [1][discard: 6] = 14, [1][discard: 7] = 15, 
--END PRINTING GAME STATE -------------------

Expected Result:	The expected result (or the control response) is a total of 6
Actual Result:	The test response was 0
Bug Root Cause (if found):	I could see that the scoreFor() comments in dominion.c says that it is walking through all stacks (hand, discard, and deck), but the code is showing that it only loops through the hand and the discard pile. There is no loop for the deck pile. The discard loop is repeated twice! The incorrect code is shown below and highlighted in yellow.

  //score from discard
  for (i = 0; i < state->discardCount[player]; i++)
    {
      if (state->discard[player][i] == curse) { score = score - 1; };
      if (state->discard[player][i] == estate) { score = score + 1; };
      if (state->discard[player][i] == duchy) { score = score + 3; };
      if (state->discard[player][i] == province) { score = score + 6; };
      if (state->discard[player][i] == great_hall) { score = score + 1; };
      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    }
  //score from deck
  for (i = 0; i < state->discardCount[player]; i++)
    {
      if (state->deck[player][i] == curse) { score = score - 1; };
      if (state->deck[player][i] == estate) { score = score + 1; };
      if (state->deck[player][i] == duchy) { score = score + 3; };
      if (state->deck[player][i] == province) { score = score + 6; };
      if (state->deck[player][i] == great_hall) { score = score + 1; };
      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    }
Other Helpful Information:	

--- Trial #1 --- # players: 2, deckCt: 8, discardCt: 8, handCt: 8
player #0, point calculation successful: testresponse = controlresponse = 27
player #0, gameState compare successful: memcmp response = 0
player #1, FAILED point calculation: testresponse: 0, controlresponse 6
Printing game state for Gcontrol:

--START PRINTING GAME STATE -------------------
numPlayers = 2
SUPPLY TOTAL=238, supplyCount: #0: 10, #1: 8, #2: 8, #3: 8, #4: 46, #5: 40, #6: 30, #7: 10, #8: -1, #9: -1, #10: 8, #11: 10, #12: -1, #13: 10, #14: 10, #15: -1, #16: -1, #17: 10, #18: -1, #19: 10, #20: -1, #21: 10, #22: 10, #23: -1, #24: -1, #25: 10, #26: -1, 
embargoTokens: #0: 0, #1: 0, #2: 0, #3: 0, #4: 0, #5: 0, #6: 0, #7: 0, #8: 0, #9: 0, #10: 0, #11: 0, #12: 0, #13: 0, #14: 0, #15: 0, #16: 0, #17: 0, #18: 0, #19: 0, #20: 0, #21: 0, #22: 0, #23: 0, #24: 0, #25: 0, #26: 0, 
outpostPlayed = 0, outpostTurn = 0, whoseTurn = 0, phase = 0, numActions = 1, coins = 4, numBuys = 1
playedCardCount = 0, playedCards[x]: 
---------------------
PLAYER #0, HANDCOUNT=8, hand[player][hand]: [0][hand:0] = 0, [0][hand:1] = 1, [0][hand:2] = 2, [0][hand:3] = 3, [0][hand:4] = 4, [0][hand:5] = 5, [0][hand:6] = 6, [0][hand:7] = 7, 
PLAYER #0, DECKCOUNT=8, deck[player][hand]: [0][deck:0] = 0, [0][deck:1] = 1, [0][deck:2] = 2, [0][deck:3] = 3, [0][deck:4] = 4, [0][deck:5] = 5, [0][deck:6] = 6, [0][deck:7] = 7, 
PLAYER #0, DISCARDCOUNT=8, discard[player][hand]: [0][discard: 0] = 0, [0][discard: 1] = 1, [0][discard: 2] = 2, [0][discard: 3] = 3, [0][discard: 4] = 4, [0][discard: 5] = 5, [0][discard: 6] = 6, [0][discard: 7] = 7, 
---------------------
PLAYER #1, HANDCOUNT=8, hand[player][hand]: [1][hand:0] = 8, [1][hand:1] = 9, [1][hand:2] = 10, [1][hand:3] = 11, [1][hand:4] = 12, [1][hand:5] = 13, [1][hand:6] = 14, [1][hand:7] = 15, 
PLAYER #1, DECKCOUNT=8, deck[player][hand]: [1][deck:0] = 8, [1][deck:1] = 9, [1][deck:2] = 10, [1][deck:3] = 11, [1][deck:4] = 12, [1][deck:5] = 13, [1][deck:6] = 14, [1][deck:7] = 15, 
PLAYER #1, DISCARDCOUNT=8, discard[player][hand]: [1][discard: 0] = 8, [1][discard: 1] = 9, [1][discard: 2] = 10, [1][discard: 3] = 11, [1][discard: 4] = 12, [1][discard: 5] = 13, [1][discard: 6] = 14, [1][discard: 7] = 15, 
--END PRINTING GAME STATE -------------------

Printing game state for G (test):

--START PRINTING GAME STATE -------------------
numPlayers = 2
SUPPLY TOTAL=238, supplyCount: #0: 10, #1: 8, #2: 8, #3: 8, #4: 46, #5: 40, #6: 30, #7: 10, #8: -1, #9: -1, #10: 8, #11: 10, #12: -1, #13: 10, #14: 10, #15: -1, #16: -1, #17: 10, #18: -1, #19: 10, #20: -1, #21: 10, #22: 10, #23: -1, #24: -1, #25: 10, #26: -1, 
embargoTokens: #0: 0, #1: 0, #2: 0, #3: 0, #4: 0, #5: 0, #6: 0, #7: 0, #8: 0, #9: 0, #10: 0, #11: 0, #12: 0, #13: 0, #14: 0, #15: 0, #16: 0, #17: 0, #18: 0, #19: 0, #20: 0, #21: 0, #22: 0, #23: 0, #24: 0, #25: 0, #26: 0, 
outpostPlayed = 0, outpostTurn = 0, whoseTurn = 0, phase = 0, numActions = 1, coins = 4, numBuys = 1
playedCardCount = 0, playedCards[x]: 
---------------------
PLAYER #0, HANDCOUNT=8, hand[player][hand]: [0][hand:0] = 0, [0][hand:1] = 1, [0][hand:2] = 2, [0][hand:3] = 3, [0][hand:4] = 4, [0][hand:5] = 5, [0][hand:6] = 6, [0][hand:7] = 7, 
PLAYER #0, DECKCOUNT=8, deck[player][hand]: [0][deck:0] = 0, [0][deck:1] = 1, [0][deck:2] = 2, [0][deck:3] = 3, [0][deck:4] = 4, [0][deck:5] = 5, [0][deck:6] = 6, [0][deck:7] = 7, 
PLAYER #0, DISCARDCOUNT=8, discard[player][hand]: [0][discard: 0] = 0, [0][discard: 1] = 1, [0][discard: 2] = 2, [0][discard: 3] = 3, [0][discard: 4] = 4, [0][discard: 5] = 5, [0][discard: 6] = 6, [0][discard: 7] = 7, 
---------------------
PLAYER #1, HANDCOUNT=8, hand[player][hand]: [1][hand:0] = 8, [1][hand:1] = 9, [1][hand:2] = 10, [1][hand:3] = 11, [1][hand:4] = 12, [1][hand:5] = 13, [1][hand:6] = 14, [1][hand:7] = 15, 
PLAYER #1, DECKCOUNT=8, deck[player][hand]: [1][deck:0] = 8, [1][deck:1] = 9, [1][deck:2] = 10, [1][deck:3] = 11, [1][deck:4] = 12, [1][deck:5] = 13, [1][deck:6] = 14, [1][deck:7] = 15, 
PLAYER #1, DISCARDCOUNT=8, discard[player][hand]: [1][discard: 0] = 8, [1][discard: 1] = 9, [1][discard: 2] = 10, [1][discard: 3] = 11, [1][discard: 4] = 12, [1][discard: 5] = 13, [1][discard: 6] = 14, [1][discard: 7] = 15, 
--END PRINTING GAME STATE -------------------



TEST: hijiridd_unittest2



Interesting observation regarding BUG# unittest2-1: 
•	I caught this bug in this round of testing because of the modification I made to unittest2. This time I changed the bonus integer which was previously fixed at 15 (and varied by a small amount). This time I set the bonus amount at the maximum positive integer. The interesting part was not the expected error in calculation – I expected the wrong calculation when adding an int to a max int and the resulting memory issue  - but it was the fact that my test structure allowed this incorrect calculation to PASS! 
•	The issue was in my control function. I created a control function called myOwnUpdateCoins() to use as the correct "benchmark." However my own control function had the same error so the assert that both test and control results were equal passed. 
•	Net net, there are two bugs, one is the overflow in INT addition, and the second was in my own control/benchmark function which contained the same bug.

Other comments or observations
•	BUG# unittest2-1: This root cause implies that we would find coin calculation errors in scenarios where the running total coin count (in the player's hand) of bonus + gold_coins (x3) + silver_coins (x2) + copper_coins (x1) is greater than some maximum integer (e.g., 2147483642).
•	We did NOT find any issue when the bonus was set to the MIN INT (or -2147483648) because adding points from this level did not exceed memory allocation.
•	No bugs found if deck count or discard count was set to greater than MAX_DECK.
•	We tested for overall game state changes and both test and control game states were the same after calling the test and control functions. 
•	Further areas to test that I did not have time to do: invalid player number; deck, hand, discard sizes that are <0; loop through different supply cards to populate in hand


Bug ID#	unittest2-1
Title	Memory overflow if bonus coin amount is set to maximum int (2147483642)
Bug Class	Serious Bug
Date:           	2/28/2017
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(my github copy in /hijiirdd/hassbDominion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes
Steps to Reproduce:	Create a game state with any valid player, deck, discard, and hand. Set the bonus to max int value, in this case +2147483642. The errors occurs when adding this bonus amount with the running coin count and the resulting coins int variable runs out of memory (and in this case wraps to a negative number). 
Expected Result:	The expected result is a positive number is a total of 6
Actual Result:	The test response was 0
Bug Root Cause (if found):	The root cause is that "coins" is of type INT and when adding bonus (set to MAX INT), it will hit memory limits and the addition is no longer valid

int updateCoins(int player, struct gameState *state, int bonus)
{
  ...
  //add bonus
  state->coins += bonus;

  return 0;
}
Other Helpful Information:	

Note that the output of this unit test shows a coin calculation with a negative # (-2147483648) but the result of the test was "TEST SUCCESSFULLY COMPLETED" because both test and control calculated to the same number (areas highlighted below):

starting unittest2 -- testing updateCoins() function

--- Trial #1 --- # players: 2, deckCt: 9, discardCt: 4, handCt: 8
Control algorithm LOG Player 0 KEY COIN STATS -> copper cards: 1, silver cards: 1, gold cards: 1, bonus added: 2147483642
player 0, coin calculation successful: testresponse = controlresponse = -2147483648
gameState compare successful: memcmp response = 0
Control algorithm LOG Player 1 KEY COIN STATS -> copper cards: 0, silver cards: 0, gold cards: 0, bonus added: 2147483637
player 1, coin calculation successful: testresponse = controlresponse = 2147483637
gameState compare successful: memcmp response = 0

Unittest2: TEST SUCCESSFULLY COMPLETED



TEST: hijiridd_unittest3



•	No bugs were found in isGameOver() function using hijiridd_unittest3
•	No bugs were found for calculating if game is over with different # of hand counts, deck counts, and discard counts, and player counts
•	We tested for overall game state changes and both test and control game states were the same after calling the test and control functions. 
•	Further areas to test that I did not have time to do: invalid player number; deck, hand, discard sizes that are <0 or greater than MAX;



TEST: hijiridd_unittest4



•	No bugs were found in gainCard() function using hijiridd_unittest4
•	No bugs were found for calculating if game is over with different # of hand counts, deck counts, and discard counts, and player counts
•	Tests that passed include:
o	If a supply card was available to draw down (supply Count > 0):
	Supply count [card] post state should be 1 less than pre state [passed]
	Total sum of supply cards post state should 1 less than pre state [passed]
	If destination for gained card is deck: deck count post state should be 1 more than pre state [passed]
	If destination for gained card is hand: hand count post state should be 1 more than pre state [passed]
	If destination for gained card is discard: discard count post state should be 1 more than pre state [passed]
o	If a supply card was NOT available to draw down (supply Count ≤ 0):
	Supply count [card] post state should be 0 less than pre state [passed]
	Total sum of supply cards post state should 0 less than pre state [passed]
	If destination for gained card is deck: deck count post state should be 0 more than pre state [passed]
	If destination for gained card is hand: hand count post state should be 0 more than pre state [passed]
	If destination for gained card is discard: discard count post state should be 0 more than pre state [passed]
•	Further areas to test that I did not have time to do: invalid player number; deck, hand, discard sizes that are <0 or greater than MAX;



TEST: hijiridd_randomtestadventurer (Adventurer)



Bug ID#	Adv-1
Title	With Adventurer in hand, played card count does not increase by one
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes
Steps to Reproduce:	Add Adventurer card in hand. Add any number of treasure cards in deck or discard. Play adventurer card.
Expected Result:	If Adventurer exists in hand, when Adventurer is played, the played card count should increase by one. (comparing post vs. pre game states)
Actual Result:	The pre and post game state played card count were both zero.
Root Cause (if found):	There is no call to discard the played Adventurer card from "hand" and move it to "playedcards."

Other Helpful Information:	

*************** ITERATION # 0 ***************  
NOTE Player 3: found 97 treasure in player's DISCARD + DECK
Test1 (check played card change): FAILED: player #3, check if played card has increased by 1
Debug: G->playedCardCount: 0, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #3, check if total supply count has not changed
Debug Data: supplyTotalPost: 176, supplyTotalPre: 177
Test3 (check hand count): FAILED: player #3, check if hand count went up by 1 (minus Adventurer + 2 treasure cards)
Debug Data: G->handCount[p]: 402, Gpre.handCount[p]: 400
Test4 (check deck+discard count): branch-1 FAILED: player #3, ccheck deck+discard count decreased 2 (only 2 treasure moves to hand, rest are discard)
Test5 (check top cards of hand): topHand == 402
Branch-1 FAILED: player #3, check if top 2 cards of hand are treasure cards
Debug Data: G->hand[topHand-2]: 1522096448, Gpre.hand[topHand-2]): 1522070008
adventurer test - iteration 0 -> FAILED tests


Bug ID#	Adv-2
Title	With Adventurer in hand, supply count should not change
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Add Adventurer card in hand. Add any number of treasure cards in deck or discard. Play adventurer card.
Expected Result:	If Adventurer exists in hand, when Adventurer is played, the supply count should NOT change. (comparing post vs. pre game states)
Actual Result:	The post game state supply count was 1 less than the pre game 
Root Cause (if found):	I have not yet found the root cause (open)

Other Helpful Information:	

*************** ITERATION # 0 ***************  
NOTE Player 3: found 97 treasure in player's DISCARD + DECK
Test1 (check played card change): FAILED: player #3, check if played card has increased by 1
Debug: G->playedCardCount: 0, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #3, check if total supply count has not changed
Debug Data: supplyTotalPost: 176, supplyTotalPre: 177
Test3 (check hand count): FAILED: player #3, check if hand count went up by 1 (minus Adventurer + 2 treasure cards)
Debug Data: G->handCount[p]: 402, Gpre.handCount[p]: 400
Test4 (check deck+discard count): branch-1 FAILED: player #3, ccheck deck+discard count decreased 2 (only 2 treasure moves to hand, rest are discard)
Test5 (check top cards of hand): topHand == 402
Branch-1 FAILED: player #3, check if top 2 cards of hand are treasure cards
Debug Data: G->hand[topHand-2]: 1522096448, Gpre.hand[topHand-2]): 1522070008
adventurer test - iteration 0 -> FAILED tests adventurer test - iteration 0 -> FAILED tests


Bug ID#	Adv-3
Title	Playing Adventurer card, hand count does not change correctly when there are 2 treasure cards
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Add Adventurer card in hand. Add at least two treasure cards in deck or discard. Play adventurer card.
Expected Result:	When Adventurer is played, the net change in hand count is expected to increase by 1.  (Math: Minus one when Adventurer is played, then a plus 2 when two treasure cards are added)
Actual Result:	The post game hand count was 2 less than the pre game  hand count
Root Cause (if found):	The root cause is that the there is no call to take the adventurer card out of the player's hand
int playAdventurer(struct gameState *state){
	int currentPlayer = whoseTurn(state);
	int drawntreasure=0;
	int cardDrawn;
	int temphand[MAX_HAND];
	int z = 0;
      while(drawntreasure<2){
	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
	shuffle(currentPlayer, state);
	}
	drawCard(currentPlayer, state);
	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
	if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
		  drawntreasure++;
	else{
	    temphand[z]=cardDrawn;
	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
	    z++;
	}
      }
      while(z-1>=0){
	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
	z=z-1;
      }
      return 0;
}

Other Helpful Information:	

*************** ITERATION # 0 ***************  
NOTE Player 3: found 97 treasure in player's DISCARD + DECK
Test1 (check played card change): FAILED: player #3, check if played card has increased by 1
Debug: G->playedCardCount: 0, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #3, check if total supply count has not changed
Debug Data: supplyTotalPost: 176, supplyTotalPre: 177
Test3 (check hand count): FAILED: player #3, check if hand count went up by 1 (minus Adventurer + 2 treasure cards)
Debug Data: G->handCount[p]: 402, Gpre.handCount[p]: 400
Test4 (check deck+discard count): branch-1 FAILED: player #3, ccheck deck+discard count decreased 2 (only 2 treasure moves to hand, rest are discard)
Test5 (check top cards of hand): topHand == 402
Branch-1 FAILED: player #3, check if top 2 cards of hand are treasure cards
Debug Data: G->hand[topHand-2]: 1522096448, Gpre.hand[topHand-2]): 1522070008
adventurer test - iteration 0 -> FAILED tests adventurer test - iteration 0 -> FAILED tests


Bug ID#	Adv-4
Title	Playing Adventurer card, hand count does not change correctly when there are 2 treasure cards
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Add Adventurer card in hand. Add at least two treasure cards in deck or discard. Play adventurer card.
Expected Result:	When Adventurer is played, the net change in sum of discard+deck should go down by 2. 2 treasure cards are moved to hand.
Actual Result:	The post game state deck+discard count was only 1 less than the pre game state deck+discard
Root Cause (if found):	I have not found the root cause (OPEN)

Other Helpful Information:	

*************** ITERATION # 1 ***************  
NOTE Player 2: found 99 treasure in player's DISCARD + DECK
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 0, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 197, supplyTotalPre: 198
Test3 (check hand count): FAILED: player #2, check if hand count went up by 1 (minus Adventurer + 2 treasure cards)
Debug Data: G->handCount[p]: 387, Gpre.handCount[p]: 385
Test4 (check deck+discard count): branch-1 FAILED: player #2, ccheck deck+discard count decreased 2 (only 2 treasure moves to hand, rest are discard)
(G->deckCount[p] + G->discardCount[p]): 842, (Gpre.deckCount[p] + Gpre.discardCount[p]): 843
Test5 (check top cards of hand): topHand == 387
Branch-1 FAILED: player #2, check if top 2 cards of hand are treasure cards
Debug Data: G->hand[topHand-2]: 1565389840, Gpre.hand[topHand-2]): 1565363400
adventurer test - iteration 1 -> FAILED tests


Bug ID#	Adv-5
Title	Top of hand cards should be treasure cards
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Add Adventurer card in hand. Add at least two treasure cards in deck or discard. Play adventurer card.
Expected Result:	When Adventurer is played, the top two cards should be the new treasure cards
Actual Result:	The top hand cards are not valid card #s
Root Cause (if found):	I have not found the root cause (OPEN). Note this may be a due to an issue in the randomtestadventurer code, however I don't believe this is the most likely root cause.
Other Helpful Information:	

*************** ITERATION # 1 ***************  
NOTE Player 2: found 99 treasure in player's DISCARD + DECK
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 0, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 197, supplyTotalPre: 198
Test3 (check hand count): FAILED: player #2, check if hand count went up by 1 (minus Adventurer + 2 treasure cards)
Debug Data: G->handCount[p]: 387, Gpre.handCount[p]: 385
Test4 (check deck+discard count): branch-1 FAILED: player #2, ccheck deck+discard count decreased 2 (only 2 treasure moves to hand, rest are discard)
(G->deckCount[p] + G->discardCount[p]): 842, (Gpre.deckCount[p] + Gpre.discardCount[p]): 843
Test5 (check top cards of hand): topHand == 387
Branch-1 FAILED: player #2, check if top 2 cards of hand are treasure cards
Debug Data: G->hand[topHand-2]: 1565389840, Gpre.hand[topHand-2]): 1565363400
adventurer test - iteration 1 -> FAILED tests



TEST: hijiridd_randomtest1 (Smithy)



Bug ID#	Smithy-1
Title	System error when no Smithy card in hand and attempt to play Smithy
Bug Class	System Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, do not add Smithy in player's hand
Expected Result:	There should be no change in game state if an attempt to play Smithy and there is no Smithy in hand
Actual Result:	I consistently get segment faults and the program quits
Root Cause (if found):	I have not found the root cause (OPEN).

Other Helpful Information:	

------------ ITERATION # 1
NOTE Player 1: did NOT find Smithy in player's hand
Segmentation fault: 11

Bug ID#	Smithy-2
Title	Played card increases incorrectly
Bug Class	System Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Smithy card to hand
Expected Result:	Played card should increase by 1
Actual Result:	Played card countpost game state increases by 2 (vs. played card count pre game state)
Root Cause (if found):	I have not found the root cause (OPEN).

Other Helpful Information:	

------------ ITERATION # 0
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 2, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 199, supplyTotalPre: 201
Test3 (check hand count): FAILED: player #2, check if hand count went up by 2 (minus Smith + 3 cards)
Debug Data: G->handCount[p]: 7, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 3 (only 3 cards moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 9
Smithy test - iteration 0 -> FAILED tests


Bug ID#	Smithy-3
Title	Supply count changes incorrectly.
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Smithy card to hand. Play smithy card
Expected Result:	Supply count should not change
Actual Result:	Supply count post game state decreased by 2 (vs.supply count pre game state)
Root Cause (if found):	I have not found the root cause (OPEN).  
Other Helpful Information	

------------ ITERATION # 0
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 2, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 199, supplyTotalPre: 201
Test3 (check hand count): FAILED: player #2, check if hand count went up by 2 (minus Smith + 3 cards)
Debug Data: G->handCount[p]: 7, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 3 (only 3 cards moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 9
Smithy test - iteration 0 -> FAILED tests


Bug ID#	Smithy-4
Title	Hand count changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Smithy card to hand. Play smithy card
Expected Result:	Hand count should go up by 2. Math: minus 1 Smithy card, plus 3 drawn cards
Actual Result:	Hand count post game went up by 4 vs. pre game state
Root Cause (if found):	One of the bugs is the # of drawn cards is 4 (instead of 3). See highlighted code below. I believe there is one more bug because it's likely that Smithy card is not being discarded from hand correctly.
  int playSmithy(struct gameState *state, int handPos){
	  int currentPlayer = whoseTurn(state);
	  //+3 Cards
	  int i;
      for (i = 0; i <= 3; i++){
	  drawCard(currentPlayer, state);
	}
      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);
      return 0;
}

Other Helpful Information	

------------ ITERATION # 0
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 2, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 199, supplyTotalPre: 201
Test3 (check hand count): FAILED: player #2, check if hand count went up by 2 (minus Smith + 3 cards)
Debug Data: G->handCount[p]: 7, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 3 (only 3 cards moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 9
Smithy test - iteration 0 -> FAILED tests


Bug ID#	Smithy-5
Title	Deck + discount count changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Smithy card to hand. Play smithy card
Expected Result:	Sum of deck + discard should go down by 3. 
Actual Result:	Sum of deck + discard went down by 4 
Root Cause (if found):	The bug is the smithy code draws 4 cards (instead of 3). See highlighted code below.
  int playSmithy(struct gameState *state, int handPos){
	  int currentPlayer = whoseTurn(state);
	  //+3 Cards
	  int i;
      for (i = 0; i <= 3; i++){
	  drawCard(currentPlayer, state);
	}
      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);
      return 0;
}

Other Helpful Information:	

------------ ITERATION # 0
Test1 (check played card change): FAILED: player #2, check if played card has increased by 1
Debug: G->playedCardCount: 2, Gpre.playedCardCount: 0
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 199, supplyTotalPre: 201
Test3 (check hand count): FAILED: player #2, check if hand count went up by 2 (minus Smith + 3 cards)
Debug Data: G->handCount[p]: 7, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 3 (only 3 cards moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 9
Smithy test - iteration 0 -> FAILED tests



hijiridd_randomtest2 (Village)



Bug ID#	Village-1
Title	Supply count changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Village card
Expected Result:	Supply count should not change 
Actual Result:	Supply count changed (in this case it went down by 2) 
Root Cause (if found):	To be determined (Open). Note that from other output logs, that the specific supply card that is changing is copper card going down by 2 (consistently occurring)
Other Helpful Information:	

------------ ITERATION # 0
Test1 (check played card change): SUCCESS: player #0, check if played card has increased by 1
Test2 (check supply count): FAILED: player #0, check if total supply count has not changed
Debug Data: supplyTotalPost: 213, supplyTotalPre: 215
Test3 (check hand count): FAILED: player #0, check if hand count is unchanged (minus Village + 1 card)
G->handCount[p]: -1, Gpre.handCount[p]: 5
Test4 (check deck + discard count): FAILED: player #0, check deck+discard count decreased 1 (1 card moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 1, (Gpre.deckCount[p] + Gpre.discardCount[p]): 0
Test5 (check num Actions: FAILED: player #0, numActions increased +1 (minus 1 for Village, +2 new)
G->numActions: 3, Gpre.numActions: 1
Village test - iteration 0 -> FAILED tests


Bug ID#	Village-2
Title	Hand count changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Village card, play Village Card
Expected Result:	Hand count  should not change (minus one Village, plus one draw card)
Actual Result:	Hand count changed 
Root Cause (if found):	To be determined (Open). 
I do see from other logs that the driver for the mismatch is that the village card is not being removed from the hand properly. Suggesting an issue with discard function.
Other Helpful Information:	

------------ ITERATION # 1
Test1 (check played card change): SUCCESS: player #2, check if played card has increased by 1
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 226, supplyTotalPre: 228
Test3 (check hand count): FAILED: player #2, check if hand count is unchanged (minus Village + 1 card)
G->handCount[p]: 4, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 1 (1 card moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 5
Test5 (check num Actions: FAILED: player #2, numActions increased +1 (minus 1 for Village, +2 new)
G->numActions: 3, Gpre.numActions: 1
Village test - iteration 1 -> FAILED tests


Bug ID#	Village-3
Title	Deck plus discard sum changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Village card, play Village Card
Expected Result:	Deck plus discard should decrease by one
Actual Result:	Deck plus discard did not change
Root Cause (if found):	To be determined (Open)
Other Helpful Information:	

------------ ITERATION # 1
Test1 (check played card change): SUCCESS: player #2, check if played card has increased by 1
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 226, supplyTotalPre: 228
Test3 (check hand count): FAILED: player #2, check if hand count is unchanged (minus Village + 1 card)
G->handCount[p]: 4, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 1 (1 card moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 5
Test5 (check num Actions: FAILED: player #2, numActions increased +1 (minus 1 for Village, +2 new)
G->numActions: 3, Gpre.numActions: 1
Village test - iteration 1 -> FAILED tests


Bug ID#	Village-4
Title	Number of actions changes incorrectly
Bug Class	Serious Bug
Date:           	2017-03-02
Reported By:   	Hijiridd
Product: 	dominion.c 
Version:	(local copy in /hijiirdd/hassbDomnion/)
Platform: 	MacOS Sierra Verison 10.12.3
Is it reproducible: 	Yes 
Steps to Reproduce:	Create valid game state, add Village card, play Village Card
Expected Result:	# of Actions should increase by vs. pre game state (minus 1 action for playing village, plus 2 actions after village)
Actual Result:	# of actions went up by 2 vs. pre game state 
Root Cause (if found):	The bug is due to the fact that the playVillage code does not reduce Actions by 1 and just adds two more actions (for a net total of 3 Actions).

int playVillage(struct gameState *state, int handPos) {
	int currentPlayer = whoseTurn(state);
      //+1 Card
      drawCard(currentPlayer, state);
      //+2 Actions
      state->numActions = state->numActions + 2;
      //discard played card from hand
      discardCard(currentPlayer, handPos, state, 0);
      return 0;
}

Other Helpful Information:	

------------ ITERATION # 1
Test1 (check played card change): SUCCESS: player #2, check if played card has increased by 1
Test2 (check supply count): FAILED: player #2, check if total supply count has not changed
Debug Data: supplyTotalPost: 226, supplyTotalPre: 228
Test3 (check hand count): FAILED: player #2, check if hand count is unchanged (minus Village + 1 card)
G->handCount[p]: 4, Gpre.handCount[p]: 3
Test4 (check deck + discard count): FAILED: player #2, check deck+discard count decreased 1 (1 card moved to hand)
Debug Data: G->deckCount[p] + G->discardCount[p]): 5, (Gpre.deckCount[p] + Gpre.discardCount[p]): 5
Test5 (check num Actions: FAILED: player #2, numActions increased +1 (minus 1 for Village, +2 new)
G->numActions: 3, Gpre.numActions: 1
Village test - iteration 1 -> FAILED tests


