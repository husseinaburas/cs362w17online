=====================================================
TESTING GREAT HALL
=====================================================

Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
Test Failed: With at least 1 card in deck, incorrect card drawn
=====================================================
747/7875 Tests Failed
=====================================================

Function 'main'
Lines executed:70.00% of 60
Branches executed:93.33% of 30
Taken at least once:63.33% of 30
Calls executed:66.67% of 24

File 'randomtestcard2.c'
Lines executed:70.00% of 60
Branches executed:93.33% of 30
Taken at least once:63.33% of 30
Calls executed:66.67% of 24
Creating 'randomtestcard2.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <time.h>

//Testing Great Hall

#define greatHallMaxTests 1000

int main(int argc, char** argv) {

	int failedCount = 0;
	int totalTests = 0;
	int i, j;
	

	int curPlayer, handPos;

	printf("=====================================================\n");
	printf("TESTING GREAT HALL\n");
	printf("=====================================================\n\n");

	srand(time(NULL));
	for (i = 0; i < greatHallMaxTests; i++) {

		struct gameState pre, post;
		randomSetup(&pre);
		curPlayer = pre.whoseTurn;
		if (pre.handCount[curPlayer] != 0) {
			handPos = rand() % pre.handCount[curPlayer];
		}
		else {
			handPos = 0;
		}

		pre.hand[curPlayer][handPos] = great_hall;
		post = pre;

		//greatHallPlay(curPlayer, handPos, &post);
		int bonus = 0;
		cardEffect(great_hall, 0, 0, 0, &post, handPos, &bonus);

		if (supplyUnchanged(&pre, &post) == 0) {
			printf("Test Failed: Supply Unexpectedly Changed\n");
			failedCount++;
			
		}
		totalTests++;
		if (testFlags(&pre, &post) == 0) {
			printf("Test Failed: GameState Flags Unexpectedly Changed\n");
			failedCount++;
		}
		totalTests++;
		for (j = 0; j < pre.numPlayers; j++) {
			if (j == curPlayer) {
				//total card totals unchanged for current player
				if (cardNumbersConstant(j, &pre, &post) == 0) {
					printf("Test Failed: Current player's overall deck count unexpectedly changed.\n");
					failedCount++;
					
				}
				else {
					//test that correct number of cards were drawn from the correct places
					if (pre.deckCount[curPlayer] >= 1) {
						if (pre.deck[curPlayer][pre.deckCount[curPlayer] - 1] != post.hand[curPlayer][post.handCount[curPlayer] - 1]) {
							printf("Test Failed: With at least 1 card in deck, incorrect card drawn\n");
							failedCount++;
							
						}
						totalTests++;
						if (pre.handCount[curPlayer] != post.handCount[curPlayer]) {
							printf("Test Failed: Incorrect number of cards drawn or removed from hand when cards in deck.\n");
							failedCount++;
						}
						//>=1 cards in discard
						else if (pre.discardCount[curPlayer] >= 1) {
							if (pre.handCount[curPlayer] != post.handCount[curPlayer]) {
								printf("Test Failed: Incorrect number of cards drawn or removed from hand when cards in discard.\n");
								failedCount++;
							}
							totalTests++;
						}
						//0 cards in deck/discard
						else {
							if (pre.handCount[curPlayer] - 1 != post.handCount[curPlayer]) {
								printf("Test Failed: Incorrect number of cards drawn or removed from hand when cards in discard.\n");
								failedCount++;
							}
							totalTests++;
						}
					}
					totalTests++;
				}
				

				if (pre.numActions + 1 != post.numActions) {
					printf("Test Failed: No action was added for the Great Hall\n");
					failedCount++;
				}
				totalTests++;

			}
			else {
				if (compareGameState(j, &pre, &post) == 0) {
					printf("Test Failed: player %d's gameState unexpectedly changed\n", j + 1);
					failedCount++;

				}
				totalTests++;

			}
			
		}

	}


	printf("=====================================================\n");
	printf("%d/%d Tests Failed\n", failedCount, totalTests);
	printf("=====================================================\n\n");



	return 0;

}Function 'playRemodel'
Lines executed:0.00% of 10
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 5

Function 'playBaron'
Lines executed:0.00% of 29
Branches executed:0.00% of 18
Taken at least once:0.00% of 18
Calls executed:0.00% of 8

Function 'playFeast'
Lines executed:0.00% of 16
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 5

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 19
Branches executed:100.00% of 14
Taken at least once:92.86% of 14
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:53.85% of 13
Branches executed:66.67% of 6
Taken at least once:33.33% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:13.29% of 173
Branches executed:21.85% of 151
Taken at least once:9.27% of 151
Calls executed:12.77% of 47

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:100.00% of 42
Calls executed:100.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:78.26% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:39.01% of 564
Branches executed:45.58% of 419
Taken at least once:38.19% of 419
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:56
        -:    0:Programs:15
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2342 returned 100% blocks executed 100%
     2342:    8:int compare(const void* a, const void* b) {
     2342:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 413 (fallthrough)
branch  1 taken 1929
      413:   10:    return 1;
     1929:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 580 (fallthrough)
branch  1 taken 1349
      580:   12:    return -1;
     1349:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 42 returned 100% blocks executed 88%
       42:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       42:   44:  SelectStream(1);
call    0 returned 42
       42:   45:  PutSeed((long)randomSeed);
call    0 returned 42
        -:   46:  
        -:   47:  //check number of players
       42:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 42
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       42:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      462:   57:  for (i = 0; i < 10; i++)
branch  0 taken 420
branch  1 taken 42 (fallthrough)
        -:   58:    {
     4620:   59:      for (j = 0; j < 10; j++)
branch  0 taken 4200
branch  1 taken 420 (fallthrough)
        -:   60:        {
     4200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 3780 (fallthrough)
branch  1 taken 420
branch  2 taken 0 (fallthrough)
branch  3 taken 3780
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       42:   73:  if (numPlayers == 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
        -:   74:    {
       42:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       42:   87:  if (numPlayers == 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
        -:   88:    {
       42:   89:      state->supplyCount[estate] = 8;
       42:   90:      state->supplyCount[duchy] = 8;
       42:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       42:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       42:  102:  state->supplyCount[silver] = 40;
       42:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      882:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 840
branch  1 taken 42 (fallthrough)
        -:  107:  {
     6930:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 6510
branch  1 taken 420 (fallthrough)
        -:  109:	  {
     6510:  110:	    if (kingdomCards[j] == i)
branch  0 taken 420 (fallthrough)
branch  1 taken 6090
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      420:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 420 (fallthrough)
branch  1 taken 0
branch  2 taken 42 (fallthrough)
branch  3 taken 378
        -:  114:		    {
       84:  115:		      if (numPlayers == 2){ 
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:  116:		        state->supplyCount[i] = 8; 
        -:  117:		      }
    #####:  118:		      else{ state->supplyCount[i] = 12; }
        -:  119:		    }
        -:  120:	      else
        -:  121:		    {
      378:  122:		      state->supplyCount[i] = 10;
        -:  123:		    }
      420:  124:	      break;
        -:  125:	    }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
     6090:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	  }
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
      126:  137:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  138:    {
       84:  139:      state->deckCount[i] = 0;
      336:  140:      for (j = 0; j < 3; j++)
branch  0 taken 252
branch  1 taken 84 (fallthrough)
        -:  141:	{
      252:  142:	  state->deck[i][j] = estate;
      252:  143:	  state->deckCount[i]++;
        -:  144:	}
      672:  145:      for (j = 3; j < 10; j++)
branch  0 taken 588
branch  1 taken 84 (fallthrough)
        -:  146:	{
      588:  147:	  state->deck[i][j] = copper;
      588:  148:	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
      126:  153:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  154:    {
       84:  155:      if ( shuffle(i, state) < 0 )
call    0 returned 84
branch  1 taken 0 (fallthrough)
branch  2 taken 84
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
      126:  162:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       84:  165:      state->handCount[i] = 0;
       84:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
     1176:  175:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1134
branch  1 taken 42 (fallthrough)
        -:  176:    {
     1134:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
       42:  181:  state->outpostPlayed = 0;
       42:  182:  state->phase = 0;
       42:  183:  state->numActions = 1;
       42:  184:  state->numBuys = 1;
       42:  185:  state->playedCardCount = 0;
       42:  186:  state->whoseTurn = 0;
       42:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      252:  191:  for (it = 0; it < 5; it++){
branch  0 taken 210
branch  1 taken 42 (fallthrough)
      210:  192:    drawCard(state->whoseTurn, state);
call    0 returned 210
        -:  193:  }
        -:  194:
       42:  195:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 42
        -:  196:
       42:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 276 returned 100% blocks executed 100%
      276:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
      276:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
      276:  208:  if (state->deckCount[player] < 1)
branch  0 taken 121 (fallthrough)
branch  1 taken 155
      121:  209:    return -1;
      155:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 155
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
     1688:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 1378
branch  1 taken 155 (fallthrough)
     1378:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 1378
     1378:  215:    newDeck[newDeckPos] = state->deck[player][card];
     1378:  216:    newDeckPos++;
     4892:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 3514
branch  1 taken 1378 (fallthrough)
     3514:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
     1378:  220:    state->deckCount[player]--;
        -:  221:  }
     1533:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1378
branch  1 taken 155 (fallthrough)
     1378:  223:    state->deck[player][i] = newDeck[i];
     1378:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
      155:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  319:int supplyCount(int card, struct gameState *state) {
        8:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 78 returned 100% blocks executed 100%
       78:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
       78:  325:  int count = 0;
        -:  326:
      408:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 330
branch  1 taken 78 (fallthrough)
        -:  328:    {
      330:  329:      if (state->deck[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 276
        -:  330:    }
        -:  331:
      468:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 390
branch  1 taken 78 (fallthrough)
        -:  333:    {
      390:  334:      if (state->hand[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 336
        -:  335:    }
        -:  336:
      462:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 384
branch  1 taken 78 (fallthrough)
        -:  338:    {
      384:  339:      if (state->discard[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 330
        -:  340:    }
        -:  341:
       78:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 4006 returned 100% blocks executed 100%
     4006:  345:int whoseTurn(struct gameState *state) {
     4006:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 42 returned 100% blocks executed 100%
       42:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
       42:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 36
        -:  395:    {
        6:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
       36:  400:  j = 0;
      936:  401:  for (i = 0; i < 25; i++)
branch  0 taken 900
branch  1 taken 36 (fallthrough)
        -:  402:    {
      900:  403:      if (state->supplyCount[i] == 0)
branch  0 taken 66 (fallthrough)
branch  1 taken 834
        -:  404:	{
       66:  405:	  j++;
        -:  406:	}
        -:  407:    }
       36:  408:  if ( j >= 3)
branch  0 taken 12 (fallthrough)
branch  1 taken 24
        -:  409:    {
       12:  410:      return 1;
        -:  411:    }
        -:  412:
       24:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 66 returned 100% blocks executed 100%
       66:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
       66:  419:  int score = 0;
        -:  420:  //score from hand
      396:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 330
branch  1 taken 66 (fallthrough)
        -:  422:    {
      330:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 312
      330:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
call    2 returned 6
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
      390:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 324
branch  1 taken 66 (fallthrough)
        -:  433:    {
      324:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
      324:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
call    2 returned 6
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
      390:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 324
branch  1 taken 66 (fallthrough)
        -:  444:    {
      324:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
      324:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
call    2 returned 18
        -:  451:    }
        -:  452:
       66:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 41352 returned 100% blocks executed 100%
    41352:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
    41352:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 122 (fallthrough)
branch  1 taken 41230
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      660:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 538
branch  1 taken 122 (fallthrough)
      538:  533:      state->deck[player][i] = state->discard[player][i];
      538:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
      122:  537:    state->deckCount[player] = state->discardCount[player];
      122:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
      122:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 122
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
      122:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
      122:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
      122:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
      122:  558:    if (deckCounter == 0)
branch  0 taken 51 (fallthrough)
branch  1 taken 71
       51:  559:      return -1;
        -:  560:
       71:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       71:  562:    state->deckCount[player]--;
       71:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
    41230:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
    41230:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
    41230:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    41230:  575:    state->deckCount[player]--;
    41230:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
    41301:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 4006 returned 100% blocks executed 12%
     4006:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int index;
     4006:  651:  int currentPlayer = whoseTurn(state);
call    0 returned 4006
     4006:  652:  int nextPlayer = currentPlayer + 1;
     4006:  653:  int tributeRevealedCards[2] = {-1, -1};
        -:  654:
     4006:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1517 (fallthrough)
branch  1 taken 2489
     1517:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  
        -:  659:	
        -:  660:  //uses switch to select card and perform actions
     4006:  661:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 4003
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 3
branch 20 taken 0
        -:  662:    {
        -:  663:    case adventurer:
    #####:  664:      playAdventurer(currentPlayer, state);
call    0 never executed
    #####:  665:      return 0;
        -:  666:			
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  670:	{
    #####:  671:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  672:	}
        -:  673:			
        -:  674:      //+1 Buy
    #####:  675:      state->numBuys++;
        -:  676:			
        -:  677:      //Each other player draws a card
    #####:  678:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  679:	{
    #####:  680:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  681:	    {
    #####:  682:	      drawCard(i, state);
call    0 never executed
        -:  683:	    }
        -:  684:	}
        -:  685:			
        -:  686:      //put played card in played card pile
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:			
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case feast:
    #####:  692:      playFeast(currentPlayer, state, choice1);
call    0 never executed
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case gardens:
    #####:  696:      return -1;
        -:  697:			
        -:  698:    case mine:
    #####:  699:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  700:
    #####:  701:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:		
    #####:  706:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  712:	{
    #####:  713:	  return -1;
        -:  714:	}
        -:  715:
    #####:  716:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  717:
        -:  718:      //discard card from hand
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  720:
        -:  721:      //discard trashed card
    #####:  722:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  723:	{
    #####:  724:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  725:	    {
    #####:  726:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  727:	      break;
        -:  728:	    }
        -:  729:	}
        -:  730:			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case remodel:
    #####:  734:      i = playRemodel(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  735:      return i;
        -:  736:		
        -:  737:    case smithy:
    #####:  738:      playSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  739:      return 0;
        -:  740:		
        -:  741:    case village:
        -:  742:      //+1 Card
    #####:  743:      drawCard(currentPlayer, state);
call    0 never executed
        -:  744:			
        -:  745:      //+2 Actions
    #####:  746:      state->numActions = state->numActions + 2;
        -:  747:			
        -:  748:      //discard played card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  750:      return 0;
        -:  751:		
        -:  752:    case baron:
    #####:  753:      playBaron(currentPlayer, state, choice1); 
call    0 never executed
    #####:  754:      return 0;
        -:  755:		
        -:  756:    case great_hall:
        -:  757:      //+1 Card
     4003:  758:      drawCard(currentPlayer, state);
call    0 returned 4003
        -:  759:			
        -:  760:      //+1 Actions
     4003:  761:      state->numActions++;
        -:  762:			
        -:  763:      //discard card from hand
     4003:  764:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4003
     4003:  765:      return 0;
        -:  766:		
        -:  767:    case minion:
        -:  768:      //+1 action
    #####:  769:      state->numActions++;
        -:  770:			
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:			
    #####:  774:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  state->coins = state->coins + 2;
        -:  777:	}
        -:  778:			
    #####:  779:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  780:	{
        -:  781:	  //discard hand
    #####:  782:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  783:	    {
    #####:  784:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  785:	    }
        -:  786:				
        -:  787:	  //draw 4
    #####:  788:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  791:	    }
        -:  792:				
        -:  793:	  //other players discard hand and redraw if hand size > 4
    #####:  794:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	    {
    #####:  796:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  797:		{
    #####:  798:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  799:		    {
        -:  800:		      //discard hand
    #####:  801:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  802:			{
    #####:  803:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  804:			}
        -:  805:							
        -:  806:		      //draw 4
    #####:  807:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  808:			{
    #####:  809:			  drawCard(i, state);
call    0 never executed
        -:  810:			}
        -:  811:		    }
        -:  812:		}
        -:  813:	    }
        -:  814:				
        -:  815:	}
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case steward:
    #####:  819:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  820:	{
        -:  821:	  //+2 cards
    #####:  822:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  823:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  824:	}
    #####:  825:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //+2 coins
    #####:  828:	  state->coins = state->coins + 2;
        -:  829:	}
        -:  830:      else
        -:  831:	{
        -:  832:	  //trash 2 cards in hand
    #####:  833:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  834:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  835:	}
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  839:      return 0;
        -:  840:		
        -:  841:    case tribute:
    #####:  842:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  843:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  844:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  845:	  state->deckCount[nextPlayer]--;
        -:  846:	}
    #####:  847:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  848:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  849:	  state->discardCount[nextPlayer]--;
        -:  850:	}
        -:  851:	else{
        -:  852:	  //No Card to Reveal
        -:  853:	  if (DEBUG){
        -:  854:	    printf("No cards to reveal\n");
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:	    
        -:  859:      else{
    #####:  860:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  863:	    state->deckCount[nextPlayer]++;
    #####:  864:	    state->discard[nextPlayer][i] = -1;
    #####:  865:	    state->discardCount[nextPlayer]--;
        -:  866:	  }
        -:  867:			    
    #####:  868:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  869:	} 
    #####:  870:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  871:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  872:	state->deckCount[nextPlayer]--;
    #####:  873:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  874:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  875:	state->deckCount[nextPlayer]--;
        -:  876:      }    
        -:  877:		       
    #####:  878:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  879:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  880:	state->playedCardCount++;
    #####:  881:	tributeRevealedCards[1] = -1;
        -:  882:      }
        -:  883:
    #####:  884:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  886:	  state->coins += 2;
        -:  887:	}
        -:  888:		    
    #####:  889:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  891:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  892:	}
        -:  893:	else{//Action Card
    #####:  894:	  state->numActions = state->numActions + 2;
        -:  895:	}
        -:  896:      }
        -:  897:	    
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case ambassador:
    #####:  901:      j = 0;		//used to check if player has enough cards to discard
        -:  902:
    #####:  903:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;				
        -:  906:	}
        -:  907:
    #####:  908:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  916:	    {
    #####:  917:	      j++;
        -:  918:	    }
        -:  919:	}
    #####:  920:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  921:	{
    #####:  922:	  return -1;				
        -:  923:	}
        -:  924:
        -:  925:      if (DEBUG) 
        -:  926:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  927:
        -:  928:      //increase supply count for choosen card by amount being discarded
    #####:  929:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  930:			
        -:  931:      //each other player gains a copy of revealed card
    #####:  932:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  935:	    {
    #####:  936:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  937:	    }
        -:  938:	}
        -:  939:
        -:  940:      //discard played card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  942:
        -:  943:      //trash copies of cards returned to supply
    #####:  944:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  949:		{
    #####:  950:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  951:		  break;
        -:  952:		}
        -:  953:	    }
        -:  954:	}			
        -:  955:
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case cutpurse:
        -:  959:
    #####:  960:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  961:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  966:		{
    #####:  967:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  968:		    {
    #####:  969:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  970:		      break;
        -:  971:		    }
    #####:  972:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  973:		    {
    #####:  974:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  975:			{
        -:  976:			  if (DEBUG)
        -:  977:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  978:			}	
    #####:  979:		      break;
        -:  980:		    }		
        -:  981:		}
        -:  982:					
        -:  983:	    }
        -:  984:				
        -:  985:	}				
        -:  986:
        -:  987:      //discard played card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  989:
    #####:  990:      return 0;
        -:  991:
        -:  992:		
        -:  993:    case embargo: 
        -:  994:      //+2 Coins
    #####:  995:      state->coins = state->coins + 2;
        -:  996:			
        -:  997:      //see if selected pile is in play
    #####:  998:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:			
        -: 1003:      //add embargo token to selected supply pile
    #####: 1004:      state->embargoTokens[choice1]++;
        -: 1005:			
        -: 1006:      //trash card
    #####: 1007:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case outpost:
        -: 1011:      //set outpost flag
    #####: 1012:      state->outpostPlayed++;
        -: 1013:			
        -: 1014:      //discard card
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case salvager:
        -: 1019:      //+1 buy
    #####: 1020:      state->numBuys++;
        -: 1021:			
    #####: 1022:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
        -: 1024:	  //gain coins equal to trashed card
    #####: 1025:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1026:	  //trash card
    #####: 1027:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1028:	}
        -: 1029:			
        -: 1030:      //discard card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case sea_hag:
    #####: 1035:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1037:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1038:	  state->discardCount[i]++;
    #####: 1039:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1040:	}
        -: 1041:      }
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case treasure_map:
        -: 1045:      //search hand for another treasure_map
        3: 1046:      index = -1;
       10: 1047:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 9
branch  1 taken 1 (fallthrough)
        -: 1048:	{
        9: 1049:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 5 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 3
        -: 1050:	    {
        2: 1051:	      index = i;
        2: 1052:	      break;
        -: 1053:	    }
        -: 1054:	}
        3: 1055:      if (index > -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1056:	{
        -: 1057:	  //trash both treasure cards
        2: 1058:	  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 2
        2: 1059:	  discardCard(index, currentPlayer, state, 1);
call    0 returned 2
        -: 1060:
        -: 1061:	  //gain 4 Gold cards
       10: 1062:	  for (i = 0; i < 4; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1063:	    {
        8: 1064:	      gainCard(gold, state, 1, currentPlayer);
call    0 returned 8
        -: 1065:	    }
        -: 1066:				
        -: 1067:	  //return success
        2: 1068:	  return 1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //no second treasure_map found in hand
        1: 1072:      return -1;
        -: 1073:    }
        -: 1074:	
    #####: 1075:  return -1;
        -: 1076:}
        -: 1077:
function discardCard called 9047 returned 100% blocks executed 89%
     9047: 1078:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1079:{
        -: 1080:	
        -: 1081:  //if card is not trashed, added to Played pile 
     9047: 1082:  if (trashFlag < 1)
branch  0 taken 4003 (fallthrough)
branch  1 taken 5044
        -: 1083:    {
        -: 1084:      //add card to played pile
     4003: 1085:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4003: 1086:      state->playedCardCount++;
        -: 1087:    }
        -: 1088:	
        -: 1089:  //set played card to -1
     9047: 1090:  state->hand[currentPlayer][handPos] = -1;
        -: 1091:	
        -: 1092:  //remove card from player's hand
     9047: 1093:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 4 (fallthrough)
branch  1 taken 9043
        -: 1094:    {
        -: 1095:      //reduce number of cards in hand
        4: 1096:      state->handCount[currentPlayer]--;
        -: 1097:    }
     9043: 1098:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 9043
        -: 1099:    {
        -: 1100:      //reduce number of cards in hand
    #####: 1101:      state->handCount[currentPlayer]--;
        -: 1102:    }
        -: 1103:  else 	
        -: 1104:    {
        -: 1105:      //replace discarded card with last card in hand
     9043: 1106:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1107:      //set last card to -1
     9043: 1108:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1109:      //reduce number of cards in hand
     9043: 1110:      state->handCount[currentPlayer]--;
        -: 1111:    }
        -: 1112:	
     9047: 1113:  return 0;
        -: 1114:}
        -: 1115:
function gainCard called 8 returned 100% blocks executed 60%
        8: 1116:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1117:{
        -: 1118:  //Note: supplyPos is enum of choosen card
        -: 1119:	
        -: 1120:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1121:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -: 1122:    {
    #####: 1123:      return -1;
        -: 1124:    }
        -: 1125:	
        -: 1126:  //added card for [whoseTurn] current player:
        -: 1127:  // toFlag = 0 : add to discard
        -: 1128:  // toFlag = 1 : add to deck
        -: 1129:  // toFlag = 2 : add to hand
        -: 1130:
        8: 1131:  if (toFlag == 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -: 1132:    {
        8: 1133:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        8: 1134:      state->deckCount[player]++;
        -: 1135:    }
    #####: 1136:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1137:    {
    #####: 1138:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1139:      state->handCount[player]++;
        -: 1140:    }
        -: 1141:  else
        -: 1142:    {
    #####: 1143:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1144:      state->discardCount[player]++;
        -: 1145:    }
        -: 1146:	
        -: 1147:  //decrease number in supply pile
        8: 1148:  state->supplyCount[supplyPos]--;
        -: 1149:	 
        8: 1150:  return 0;
        -: 1151:}
        -: 1152:
function updateCoins called 66 returned 100% blocks executed 100%
       66: 1153:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1154:{
        -: 1155:  int i;
        -: 1156:	
        -: 1157:  //reset coin count
       66: 1158:  state->coins = 0;
        -: 1159:
        -: 1160:  //add coins for each Treasure card in player's hand
      396: 1161:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 330
branch  1 taken 66 (fallthrough)
        -: 1162:    {
      330: 1163:      if (state->hand[player][i] == copper)
branch  0 taken 132 (fallthrough)
branch  1 taken 198
        -: 1164:	{
      132: 1165:	  state->coins += 1;
        -: 1166:	}
      198: 1167:      else if (state->hand[player][i] == silver)
branch  0 taken 6 (fallthrough)
branch  1 taken 192
        -: 1168:	{
        6: 1169:	  state->coins += 2;
        -: 1170:	}
      192: 1171:      else if (state->hand[player][i] == gold)
branch  0 taken 6 (fallthrough)
branch  1 taken 186
        -: 1172:	{
        6: 1173:	  state->coins += 3;
        -: 1174:	}	
        -: 1175:    }	
        -: 1176:
        -: 1177:  //add bonus
       66: 1178:  state->coins += bonus;
        -: 1179:
       66: 1180:  return 0;
        -: 1181:}
        -: 1182:
function playAdventurer called 5056 returned 100% blocks executed 100%
     5056: 1183:void playAdventurer(int currentPlayer, struct gameState *state){
     5056: 1184:  int drawntreasure = 0;
     5056: 1185:  int z = 0;
        -: 1186:  int cardDrawn;
        -: 1187:  int temphand[MAX_HAND];
     5056: 1188:  int count = 0;
        -: 1189:
    32131: 1190:  while((drawntreasure<2) && (count < 500)){
branch  0 taken 22019 (fallthrough)
branch  1 taken 5056
branch  2 taken 22019
branch  3 taken 0 (fallthrough)
    22019: 1191:    count++;
    22019: 1192:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 70 (fallthrough)
branch  1 taken 21949
       70: 1193:      shuffle(currentPlayer, state);
call    0 returned 70
        -: 1194:    }
    22019: 1195:    drawCard(currentPlayer, state);
call    0 returned 22019
    22019: 1196:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    22019: 1197:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 16703 (fallthrough)
branch  1 taken 5316
branch  2 taken 13973 (fallthrough)
branch  3 taken 2730
branch  4 taken 2066 (fallthrough)
branch  5 taken 11907
    10112: 1198:      drawntreasure++;
        -: 1199:    else{
    11907: 1200:      temphand[z]=cardDrawn;
    11907: 1201:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    11907: 1202:      z++;
        -: 1203:    } 
        -: 1204:  }
    18208: 1205:  while(z-1>0){
branch  0 taken 8096
branch  1 taken 5056 (fallthrough)
     8096: 1206:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     8096: 1207:    z=z-1;
        -: 1208:  }
     5056: 1209:}
        -: 1210:
function playSmithy called 5040 returned 100% blocks executed 100%
     5040: 1211:void playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1212:  int i;
        -: 1213:
        -: 1214:  //+3 Cards
    20160: 1215:  for (i = 0; i < 3; i++)
branch  0 taken 15120
branch  1 taken 5040 (fallthrough)
        -: 1216:  {
    15120: 1217:    drawCard(currentPlayer, state);
call    0 returned 15120
        -: 1218:  }
        -: 1219:  
        -: 1220:  //discard card from hand
     5040: 1221:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 5040
     5040: 1222:}
        -: 1223:
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1224:void playFeast(int currentPlayer, struct gameState *state, int choice1){
        -: 1225:  int temphand[MAX_HAND];
        -: 1226:  int i, x;
        -: 1227:
        -: 1228:  //gain card with cost up to 5
        -: 1229:  //Backup hand
    #####: 1230:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1231:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1232:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1233:  }
        -: 1234:  //Backup hand
        -: 1235:
        -: 1236:  //Update Coins for Buy
    #####: 1237:  updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1238:
    #####: 1239:  x = 1;//Condition to loop on
    #####: 1240:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1241:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1242:      if (DEBUG)
        -: 1243:        printf("None of that card left, sorry!\n");
        -: 1244:
        -: 1245:      if (DEBUG){
        -: 1246:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1247:      }
        -: 1248:    }
    #####: 1249:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1250:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1251:
        -: 1252:      if (DEBUG){
        -: 1253:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1254:      }
        -: 1255:    }
        -: 1256:    else{
        -: 1257:      if (DEBUG){
        -: 1258:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1259:      }
        -: 1260:
    #####: 1261:      gainCard(choice1 + 1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1262:      x = 0;//No more buying cards
        -: 1263:
        -: 1264:      if (DEBUG){
        -: 1265:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }     
        -: 1269:
        -: 1270:  //Reset Hand
    #####: 1271:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1272:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1273:    temphand[i] = -1;
        -: 1274:  }
        -: 1275:  //Reset Hand
    #####: 1276:}
        -: 1277:
function playBaron called 0 returned 0% blocks executed 0%
    #####: 1278:void playBaron(int currentPlayer, struct gameState *state, int choice1){
    #####: 1279:  state->numBuys++;//Increase buys by 1!
    #####: 1280:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1281:    int p = 0;//Iterator for hand!
    #####: 1282:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1283:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1284:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1285:        state->coins = 4;//Add 4 coins to the amount of coins
    #####: 1286:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1287:        state->discardCount[currentPlayer]++;
    #####: 1288:        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1289:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1290:        }
    #####: 1291:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1292:        state->handCount[currentPlayer]--;
    #####: 1293:        card_not_discarded = 0;//Exit the loop
        -: 1294:      }
    #####: 1295:      else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1296:        if(DEBUG) {
        -: 1297:          printf("No estate cards in your hand, invalid choice\n");
        -: 1298:          printf("Must gain an estate if there are any\n");
        -: 1299:        }
    #####: 1300:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1302:          state->supplyCount[estate]--;//Decrement estates
    #####: 1303:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1304:            isGameOver(state);
call    0 never executed
        -: 1305:          }
        -: 1306:        }
    #####: 1307:        card_not_discarded = 0;//Exit the loop
        -: 1308:      }    
        -: 1309:      else{
    #####: 1310:        p++;//Next card
        -: 1311:      }
        -: 1312:    }
        -: 1313:  }        
        -: 1314:  else{
    #####: 1315:    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1317:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1318:      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1319:        isGameOver(state);
call    0 never executed
        -: 1320:      }
        -: 1321:    }
        -: 1322:  }
    #####: 1323:}
        -: 1324:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1325:int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -: 1326:  int j, i;
        -: 1327:
    #####: 1328:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1329:
    #####: 1330:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1331:  {
    #####: 1332:    return -1;
        -: 1333:  }
        -: 1334:
    #####: 1335:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1336:
        -: 1337:  //discard card from hand
    #####: 1338:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:
        -: 1340:  //discard trashed card
    #####: 1341:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1342:  {
    #####: 1343:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
    #####: 1345:      discardCard(i, currentPlayer, state, 0);      
call    0 never executed
        -: 1346:    }
        -: 1347:  }
    #####: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
