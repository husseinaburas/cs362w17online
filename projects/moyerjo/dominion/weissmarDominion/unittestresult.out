=============================================
Beginning testing of SMITHY card:
=============================================

Testing hand count increase:
Test passed
Testing cards drawn from deck:
Test passed
Testing first player card total remained same w/ 3+ cards:
Test Failed
Testing second player game state remained same w/ 3+ cards:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with fewer than 3 cards (2) - cards in discard:
Test passed
Testing first player card total remained same w/ 2 cards, cards in discard:
Test Failed
Testing second player game state remained same w/ 2 cards, cards in discard:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with fewer than 3 cards (0), cards in discard:
HANDCOUNT: 7
Test passed
Testing first player card total remained same w/ 0 cards, cards in discard:
Test Failed
Testing second player game state remained same w/ 0 cards, cards in discard:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with fewer than 3 cards in deck/discard (0):
Test passed
Testing first player card total remained same with fewer than 3 cards in deck/discard (0):
Test Failed
Testing second player game state remained same with fewer than 3 cards in deck/discard (0):
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with fewer than with fewer than 3 cards in deck/discard (2):
Test passed
Testing first player card total remained same with fewer than 3 cards in deck/discard (2):
Test Failed
Testing second player game state remained same with fewer than 3 cards in deck/discard (2):
Test Passed
Testing supply remained the same:
Test Passed

5/21 tests failed.

=============================================
Beginning testing of Adventurer card:
=============================================

Testing 2 cards were drawn for copper:
Test Failed
Testing 2 cards drawn were copper:
Test Passed
Testing first player card total remained same w/ copper:
Test Passed
Testing second player game state remained same w/ copper:
Test Passed
Testing supply remained the same:
Test Passed
Testing 2 cards were drawn for silver:
Test Failed
Testing 2 cards drawn were silver:
Test Passed
Testing first player card total remained same w/ silver:
Test Passed
Testing second player game state remained same w/ silver:
Test Passed
Testing supply remained the same:
Test Passed
Testing 2 cards were drawn for gold:
Test Failed
Testing 2 cards drawn were gold:
Test Passed
Testing first player card total remained same w/ gold:
Test Passed
Testing second player game state remained same w/ gold:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with no coins in deck, but coins in discard:
Testing correct cards in discard:
Test Failed - s/b five cards in discard
Testing correct number of cards drawn
Test Failed - did not draw correct number of cards
Testing correct number of cards in deck:
Test Failed - incorrect number of cards in deck
Testing first player card total remained same w/ shuffle of discard cards:
Test Failed
Testing second player game state remained same w/ shuffle of discard:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with one in deck, and one in discard:
Testing there are enough cards in discard:
Test Failed - s/b at least 4 cards in discard
Testing correct number of cards drawn:
Test Failed - did not draw correct number of cards
Testing correct  number of cards in deck:
Test Failed - incorrect number of cards in deck
Testing first player card total remained same w/ treasure split:
Test Failed
Testing second player game state remained same w/ treasure split:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with one in deck only:
Testing there are enough cards in discard pile:
Test Failed - s/b 9 cards in discard
Test correct number of cards drawn:
Test Failed - did not draw correct number of cards
Testing correct number of cards in deck:
Test Passed
Testing first player card total remained same w/ only 1 treasure:
Test Failed
Testing second player game state remained same w/ only 1 treasure:
Test Passed
Testing supply remained the same:
Test Passed
Testing drawing with no treasure in deck:
Test Failed - s/b 10 cards in discard
Test correct number of cards drawn:
Test Failed - did not draw correct number of cards (0)
Testing correct number of cards in deck:
Test Passed
Testing first player card total remained same w/ only 1 treasure:
Test Failed
Testing second player game state remained same w/ only 1 treasure:
Test Passed
Testing supply remained the same:
Test Passed

11/41 tests failed.

=============================================
Beginning testing of GREAT HALL card:
=============================================

Testing 1 card was drawn w/ cards in deck/discard:
Test Passed
Testing number of actions was increased:
Test Passed
Testing first player card total remained same:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing 1 card was drawn with no cards in deck:
Test Passed
Testing number of actions was increased:
Test Passed
Testing first player card total remained same:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing no card was drawn with no cards in deck/discard:
Test Passed
Testing number of actions was increased:
Test Passed
Testing first player card total remained same:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
0/15 Tests Failed

=============================================
Beginning testing of Treasure Map card:
=============================================

Testing more than two treasure maps in hand:
Testing deck size four larger:
Test Passed
Testing four gold cards added to deck:
Test Failed
Testing total cards in current players state increased by 2:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing two treasure maps in hand:
Testing deck size four largerTest Passed
Testing four gold cards added to deck:
Test Failed
Testing total cards in current players state increased by 2:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing one treasure maps in hand:
Testing deck size remains the same:
Test Passed
Testing no treasuremap cards in hand:
Test Failed
Testing total cards in current player's state decreased by 1:
Test Failed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
4/15 Tests Failed

=============================================
Beginning testing of isGameOver function:
=============================================

Testing Initial Game State Does Not End Game:
Test Passed
Testing 0 Provinces Ends Game:
Test Passed
Testing 1 Provinces Does Not End Game (All other supply present):
Test Passed
Testing three empty piles (including min):
Test Passed
Testing three empty piles (including max)
Test Failed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing two empty piles
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing four empty piles
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
1/16 Tests Failed

=============================================
Beginning testing of updateCoins function:
=============================================

Testing on hand with no treasure, no bonus:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing on hand with no treasure, negative bonus:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing on hand with no treasure, positive bonus:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing on hand with some treasure, positive bonus:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
0/16 tests failed

=============================================
Beginning testing of fullDeckCount function:
=============================================

Testing count of misc. card present in all locations:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing card not present (3):
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations at the beginning of hand/deck/discard are being found:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations at the end of hand/deck/discard are being found:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations with enum 0 (curse) are being found:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations with enum 26 (treasure_map) are being found:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations with enum below bounds finds nothing:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing locations above enum bounds finds nothing:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
0/32 tests failed

=============================================
Beginning testing of scoreFor function:
=============================================

Testing score with no scoring cards:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing estate and scoring cards centered in array:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing estate and scoring cards at beginning of array:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing estate and scoring cards at end of array:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing curse:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing duchy:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing province:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing great hall:
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing gardens - round down to one each (15 total cards):
Test Failed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing gardens - exactly divisible by 10, no rounding (10 total cards):
Test Failed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
Testing gardens - fewer than 10 cards (9 total cards):
Test Passed
Testing current player game state did not change:
Test Passed
Testing second player game state remained same:
Test Passed
Testing supply remained the same:
Test Passed
2/44 tests failed

File 'cardtest1.c'
Lines executed:77.84% of 167
Branches executed:100.00% of 48
Taken at least once:56.25% of 48
Calls executed:76.40% of 89
Creating 'cardtest1.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing Smithy

int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, handPos = 0, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;
	

	initializeGame(numPlayers, k, seed, &pre);
	for (i = 0; i < 5; i++) {
		pre.hand[curPlayer][i] = smithy;
	}
	pre.handCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.deck[curPlayer][i] = smithy;
	}
	pre.deckCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.discard[curPlayer][i] = smithy;
	}
	pre.discardCount[curPlayer] = 5;
	temp = post = pre; //hmm, are we using C90 or higher?
	
	printf("=============================================\n");
	printf("Beginning testing of SMITHY card:\n");
	printf("=============================================\n\n");
	playSmithy(curPlayer, &post, handPos);

	printf("Testing hand count increase:\n"); //should be net gain of two cards
		if (pre.handCount[curPlayer] + 2 != post.handCount[curPlayer]) {
			numFailed++;
			printf("Test failed\n");

		}
		else {
			printf("Test passed\n");
		}
		totalTests++;

		printf("Testing cards drawn from deck:\n");
			if (pre.deckCount[curPlayer] - 3 != post.deckCount[curPlayer]) {
				printf("Test failed\n");
				numFailed++;
			}
			else {
				printf("Test passed\n");
			}
			totalTests++;

			printf("Testing first player card total remained same w/ 3+ cards:\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same w/ 3+ cards:\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing drawing with fewer than 3 cards (2) - cards in discard:\n");
			pre = temp;
			pre.deckCount[curPlayer] = 2;
			post = pre;
			playSmithy(curPlayer, &post, handPos);
			if (pre.handCount[curPlayer] + 2 != post.handCount[curPlayer]) {
				printf("Test failed\n");
				numFailed++;
			}
			else {
				printf("Test passed\n");
			}
			totalTests++;

			printf("Testing first player card total remained same w/ 2 cards, cards in discard:\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same w/ 2 cards, cards in discard:\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing drawing with fewer than 3 cards (0), cards in discard:\n");
			pre = temp;
			pre.deckCount[curPlayer] = 0;
			post = pre;
			playSmithy(curPlayer, &post, handPos);
			printf("HANDCOUNT: %d\n", post.handCount[curPlayer]);
			if (pre.handCount[curPlayer] + 2 != post.handCount[curPlayer]) {
				printf("Test failed\n");
				numFailed++;
			}
			else {
				printf("Test passed\n");
			}
			totalTests++;

			printf("Testing first player card total remained same w/ 0 cards, cards in discard:\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same w/ 0 cards, cards in discard:\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing drawing with fewer than 3 cards in deck/discard (0):\n");
			pre = temp;
			pre.deckCount[curPlayer] = 0;
			pre.discardCount[curPlayer] = 0;
			post = pre;
			playSmithy(curPlayer, &post, handPos);
			if (pre.handCount[curPlayer] != post.handCount[curPlayer] + 1) {
				printf("Test failed\n");
				numFailed++;
			}
			else {
				printf("Test passed\n");
			}
			totalTests++;

			printf("Testing first player card total remained same with fewer than 3 cards in deck/discard (0):\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same with fewer than 3 cards in deck/discard (0):\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing drawing with fewer than with fewer than 3 cards in deck/discard (2):\n");
			pre = temp;
			pre.deckCount[curPlayer] = 0;
			pre.discardCount[curPlayer] = 2;
			post = pre;
			playSmithy(curPlayer, &post, handPos);
			if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
				printf("Test failed\n");
				numFailed++;
			}
			else {
				printf("Test passed\n");
			}
			totalTests++;

			printf("Testing first player card total remained same with fewer than 3 cards in deck/discard (2):\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same with fewer than 3 cards in deck/discard (2):\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("\n%d/%d tests failed.\n\n", numFailed, totalTests);

	return 0;
}

File 'cardtest2.c'
Lines executed:80.00% of 295
Branches executed:100.00% of 106
Taken at least once:60.38% of 106
Calls executed:74.51% of 153
Creating 'cardtest2.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//Testing adventurer


int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, handPos = 0, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;

	initializeGame(numPlayers, k, seed, &pre);
	pre.deckCount[curPlayer] = 5;
	pre.hand[curPlayer][handPos] = adventurer;
	for (i = 0; i < pre.deckCount[curPlayer]; i++) {
		pre.deck[curPlayer][i] = copper;
	}

	pre.deck[curPlayer][handPos] = adventurer;
	temp = post = pre; //hmm, are we using C90 or higher?
	printf("=============================================\n");
	printf("Beginning testing of Adventurer card:\n");
	printf("=============================================\n\n");

	playAdventurer(curPlayer, &post);
	//TESTING COPPER
	printf("Testing 2 cards were drawn for copper:\n");
		if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
			printf("Test Failed\n");
			numFailed++;
		}
		else {
			printf("Test Passed\n");
		}
		totalTests++;

		printf("Testing 2 cards drawn were copper:\n");
			if (post.hand[curPlayer][post.handCount[curPlayer] - 1] != copper || post.hand[curPlayer][post.handCount[curPlayer] - 2] != copper) {
				printf("Test Failed\n");
				numFailed++;
			}
			else {
				printf("Test Passed\n");
			}
			totalTests++;
			//printf("%d %d\n", post.hand[curPlayer][post.handCount[curPlayer] - 1], post.hand[curPlayer][post.handCount[curPlayer] - 2]);

			printf("Testing first player card total remained same w/ copper:\n");
			if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same w/ copper:\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (supplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				numFailed++;
			}
			totalTests++;

			//TESTING SILVER
			pre = temp;

			

			for (i = 0; i < pre.deckCount[curPlayer]; i++) {
				pre.deck[curPlayer][i] = silver;
			}
			totalTests++;

			post = pre;

			playAdventurer(curPlayer, &post);

			printf("Testing 2 cards were drawn for silver:\n"); 
				if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
					printf("Test Failed\n");
					numFailed++;
				}
				else {
					printf("Test Passed\n");
				}
				totalTests++;

				printf("Testing 2 cards drawn were silver:\n");
					if (post.hand[curPlayer][post.handCount[curPlayer] - 1] != silver || post.hand[curPlayer][post.handCount[curPlayer] - 2] != silver) {
						//printf("%d %d\n", post.hand[curPlayer][post.handCount[curPlayer] - 1], post.hand[curPlayer][post.handCount[curPlayer] - 2]);
						printf("Test Failed\n");
						numFailed++;
					}
					else {
						printf("Test Passed\n");
					}
					totalTests++;

					printf("Testing first player card total remained same w/ silver:\n");
					if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						numFailed++;
					}
					totalTests++;

					printf("Testing second player game state remained same w/ silver:\n");
					if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						numFailed++;
					}
					totalTests++;

					printf("Testing supply remained the same:\n");
					if (supplyUnchanged(&pre, &post) == 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						numFailed++;
					}
					totalTests++;

					//TESTING GOLD
					pre = temp;

					

					for (i = 0; i < pre.deckCount[curPlayer]; i++) {
						pre.deck[curPlayer][i] = gold;
					}

					post = pre;

					playAdventurer(curPlayer, &post);

					printf("Testing 2 cards were drawn for gold:\n");
						if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
							printf("Test Failed\n");
							numFailed++;
						}
						else {
							printf("Test Passed\n");
						}
						totalTests++;

						printf("Testing 2 cards drawn were gold:\n");
							if (post.hand[curPlayer][post.handCount[curPlayer] - 1] != gold || post.hand[curPlayer][post.handCount[curPlayer] - 2] != gold) {
								printf("Test Failed\n");
								numFailed++;
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;
							//printf("%d %d\n", post.hand[curPlayer][post.handCount[curPlayer] - 1], post.hand[curPlayer][post.handCount[curPlayer] - 2]);

							printf("Testing first player card total remained same w/ gold:\n");
							if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing second player game state remained same w/ gold:\n");
							if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing supply remained the same:\n");
							if (supplyUnchanged(&pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;


							printf("Testing drawing with no coins in deck, but coins in discard:\n");
							pre = temp;

							for (i = 0; i < pre.deckCount[curPlayer]; i++) {
								pre.deck[curPlayer][i] = smithy;
							}
							pre.discardCount[curPlayer] = 5;
							for (i = 0; i < pre.discardCount[curPlayer]; i++) {
								pre.discard[curPlayer][i] = copper;
							}
							totalTests++;

							post = pre;
							playAdventurer(curPlayer, &post);
							printf("Testing correct cards in discard:\n");
							if (post.discardCount[curPlayer] != 5) {
								printf("Test Failed - s/b five cards in discard\n");
								numFailed++;
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;
							
							printf("Testing correct number of cards drawn\n");
							if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
								printf("Test Failed - did not draw correct number of cards\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing correct number of cards in deck:\n");
							if(pre.deckCount[curPlayer] != post.deckCount[curPlayer] - 2){
								printf("Test Failed - incorrect number of cards in deck\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing first player card total remained same w/ shuffle of discard cards:\n");
							if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing second player game state remained same w/ shuffle of discard:\n");
							if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing supply remained the same:\n");
							if (supplyUnchanged(&pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing drawing with one in deck, and one in discard:\n");
							pre = temp;



							for (i = 0; i < pre.deckCount[curPlayer]; i++) {
								pre.deck[curPlayer][i] = smithy;
							}
							pre.discardCount[curPlayer] = 5;
							for (i = 0; i < pre.discardCount[curPlayer]; i++) {
								pre.discard[curPlayer][i] = smithy;
							}
							pre.deck[curPlayer][0] = silver;
							pre.discard[curPlayer][0] = gold;

							post = pre;

							playAdventurer(curPlayer, &post);

							printf("Testing there are enough cards in discard:\n");
							if (post.discardCount[curPlayer >= 4]) {
								printf("Test Failed - s/b at least 4 cards in discard\n");
								numFailed++;
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing correct number of cards drawn:\n");
							if (pre.handCount[curPlayer] + 1 != post.handCount[curPlayer]) {
								printf("Test Failed - did not draw correct number of cards\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing correct  number of cards in deck:\n");
							if (post.deckCount[curPlayer] <= 4) {
								printf("Test Failed - incorrect number of cards in deck\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing first player card total remained same w/ treasure split:\n");
							if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing second player game state remained same w/ treasure split:\n");
							if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing supply remained the same:\n");
							if (supplyUnchanged(&pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing drawing with one in deck only:\n");
							pre = temp;



							for (i = 0; i < pre.deckCount[curPlayer]; i++) {
								pre.deck[curPlayer][i] = smithy;
							}
							pre.discardCount[curPlayer] = 5;
							for (i = 0; i < pre.discardCount[curPlayer]; i++) {
								pre.discard[curPlayer][i] = smithy;
							}
							pre.deck[curPlayer][0] = silver;

							post = pre;

							playAdventurer(curPlayer, &post);

							printf("Testing there are enough cards in discard pile:\n");
							if (post.discardCount[curPlayer == 9]) {
								printf("Test Failed - s/b 9 cards in discard\n");
								numFailed++;
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Test correct number of cards drawn:\n");
							if (pre.handCount[curPlayer] + 0 != post.handCount[curPlayer]) {
								printf("Test Failed - did not draw correct number of cards\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing correct number of cards in deck:\n");
							if (post.deckCount[curPlayer] != 0) {
								printf("Test Failed - incorrect number of cards in deck\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing first player card total remained same w/ only 1 treasure:\n");
							if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing second player game state remained same w/ only 1 treasure:\n");
							if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing supply remained the same:\n");
							if (supplyUnchanged(&pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing drawing with no treasure in deck:\n");
							pre = temp;


							pre.deckCount[curPlayer] = 5;
							for (i = 0; i < pre.deckCount[curPlayer]; i++) {
								pre.deck[curPlayer][i] = smithy;
							}
							pre.discardCount[curPlayer] = 5;
							for (i = 0; i < pre.discardCount[curPlayer]; i++) {
								pre.discard[curPlayer][i] = smithy;
							}

							post = pre;

							playAdventurer(curPlayer, &post);

							if (post.discardCount[curPlayer == 10]) {
								printf("Test Failed - s/b 10 cards in discard\n");
								numFailed++;
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;
							
							printf("Test correct number of cards drawn:\n");
							if (pre.handCount[curPlayer] - 1 != post.handCount[curPlayer]) {
								printf("Test Failed - did not draw correct number of cards (0)\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing correct number of cards in deck:\n");
							if (post.deckCount[curPlayer] != 0) {
								printf("Test Failed - incorrect number of cards in deck\n");
							}
							else {
								printf("Test Passed\n");
							}
							totalTests++;

							printf("Testing first player card total remained same w/ only 1 treasure:\n");
							if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing second player game state remained same w/ only 1 treasure:\n");
							if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;

							printf("Testing supply remained the same:\n");
							if (supplyUnchanged(&pre, &post) == 1) {
								printf("Test Passed\n");
							}
							else {
								printf("Test Failed\n");
								numFailed++;
							}
							totalTests++;


							printf("\n%d/%d tests failed.\n\n", numFailed, totalTests);
							return 0;
	}

File 'cardtest3.c'
Lines executed:75.81% of 124
Branches executed:100.00% of 36
Taken at least once:58.33% of 36
Calls executed:75.81% of 62
Creating 'cardtest3.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing Great Hall


int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, handPos = 0, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;
	int bonus = 0;


	initializeGame(numPlayers, k, seed, &pre);
	for (i = 0; i < 5; i++) {
		pre.hand[curPlayer][i] = great_hall;
	}
	pre.handCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.deck[curPlayer][i] = great_hall;
	}
	pre.deckCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.discard[curPlayer][i] = great_hall;
	}
	pre.discardCount[curPlayer] = 5;
	temp = post = pre; //hmm, are we using C90 or higher?

	printf("=============================================\n");
	printf("Beginning testing of GREAT HALL card:\n");
	printf("=============================================\n\n");

	//greatHallPlay(curPlayer, handPos, &post);
		bonus;
		cardEffect(great_hall, 0, 0, 0, &post, handPos, &bonus);

	printf("Testing 1 card was drawn w/ cards in deck/discard:\n");
	if (pre.handCount[curPlayer] != post.handCount[curPlayer]) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing number of actions was increased:\n");
	if (pre.numActions + 1 != post.numActions) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing first player card total remained same:\n");
	if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.deckCount[curPlayer] = 0;
	post = pre;

	//greatHallPlay(curPlayer, handPos, &post);
	bonus = 0;
	cardEffect(great_hall, 0, 0, 0, &post, handPos, &bonus);

	printf("Testing 1 card was drawn with no cards in deck:\n");
	if (pre.handCount[curPlayer] != post.handCount[curPlayer]) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing number of actions was increased:\n");
	if (pre.numActions + 1 != post.numActions) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing first player card total remained same:\n");
	if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.deckCount[curPlayer] = 0;
	pre.discardCount[curPlayer] = 0;
	post = pre;

	//greatHallPlay(curPlayer, handPos, &post);
	bonus = 0;
	cardEffect(great_hall, 0, 0, 0, &post, handPos, bonus);

	printf("Testing no card was drawn with no cards in deck/discard:\n");
	if (pre.handCount[curPlayer] - 1 != post.handCount[curPlayer]) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing number of actions was increased:\n");
	if (pre.numActions + 1 != post.numActions) {
		printf("Test Failed\n");
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing first player card total remained same:\n");
	if (cardNumbersConstant(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("%d/%d Tests Failed\n\n", numFailed, totalTests);



	return 0;
}File 'cardtest4.c'
Lines executed:76.25% of 160
Branches executed:100.00% of 56
Taken at least once:66.07% of 56
Calls executed:74.60% of 63
Creating 'cardtest4.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing Treasure Map



int main(int argc, char** argv) {
	int i = 0, totalTests = 0, preCardTotal = 0, postCardTotal = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, handPos = 0, seed = 500, curPlayer = 0;
	int failed = 0, numFailed = 0;
	struct gameState pre, post, temp;
	int bonus = 0;


	initializeGame(numPlayers, k, seed, &pre);
	for (i = 0; i < 5; i++) {
		pre.hand[curPlayer][i] = treasure_map;
	}
	pre.handCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.deck[curPlayer][i] = great_hall;
	}
	pre.deckCount[curPlayer] = 5;
	for (i = 0; i < 5; i++) {
		pre.discard[curPlayer][i] = great_hall;
	}
	pre.discardCount[curPlayer] = 5;
	temp = post = pre; //hmm, are we using C90 or higher?
	printf("=============================================\n");
	printf("Beginning testing of Treasure Map card:\n");
	printf("=============================================\n\n");
	//treasureMapPlay(curPlayer, handPos, &post);
	bonus = 0;
	cardEffect(treasure_map, 0, 0, 0, &post, handPos, &bonus);

	printf("Testing more than two treasure maps in hand:\n");

	printf("Testing deck size four larger:\n"); //net hand increase of 2
	if (pre.deckCount[curPlayer] + 4 != post.deckCount[curPlayer]) {
		printf("Test Failed\n");
		failed = 1;
		numFailed++;
	}
	else {
		printf("Test Passed\n");
	}
	totalTests++;

	printf("Testing four gold cards added to deck:\n");
	failed = 0;
	for (i = pre.deckCount[curPlayer] - 4; i < post.deckCount[curPlayer] && failed != 1; i++) {
		if (post.deck[curPlayer][i] != gold) {
			printf("Test Failed\n");
			failed = 1;
			numFailed++;
		}
		else {
			printf("Test Passed\n");
		}
	}
	if (failed == 0) {
		printf("Test Passed\n");
	}
		totalTests++;

	printf("Testing total cards in current players state increased by 2:\n");
	preCardTotal = pre.deckCount[curPlayer] + pre.discardCount[curPlayer] + pre.handCount[curPlayer] + pre.playedCardCount;
	postCardTotal = post.deckCount[curPlayer] + post.discardCount[curPlayer] + post.handCount[curPlayer] + post.playedCardCount;
	if (preCardTotal + 2 == postCardTotal) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		failed = 1;
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		failed = 1;
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (treasureMapSupplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		failed = 1;
		numFailed++;
	}
	totalTests++;

	pre = temp;
	//set two treasure map cards in hand
	for (i = 2; i < 5; i++) {
		pre.hand[curPlayer][i] = great_hall;
	}

	post = pre;

	//treasureMapPlay(curPlayer, handPos, &post);
	bonus = 0;
	cardEffect(treasure_map, 0, 0, 0, &post, handPos, &bonus);

	printf("Testing two treasure maps in hand:\n");

	printf("Testing deck size four larger");
		if (pre.deckCount[curPlayer] + 4 != post.deckCount[curPlayer]) {
			printf("Test Failed\n");
			failed = 1;
			numFailed++;
		}
		else {
			printf("Test Passed\n");
		}
		totalTests++;

		printf("Testing four gold cards added to deck:\n");
		failed = 0;
		for (i = pre.deckCount[curPlayer] - 4; i < post.deckCount[curPlayer] && failed != 1; i++) {
			if (post.deck[curPlayer][i] != gold) {
				printf("Test Failed\n");
				failed = 1;
				numFailed++;
			}
		}
		if (failed == 0) {
			printf("Test Passed\n");
		}
			totalTests++;

			printf("Testing total cards in current players state increased by 2:\n");
			preCardTotal = pre.deckCount[curPlayer] + pre.discardCount[curPlayer] + pre.handCount[curPlayer] + pre.playedCardCount;
			postCardTotal = post.deckCount[curPlayer] + post.discardCount[curPlayer] + post.handCount[curPlayer] + post.playedCardCount;
			if (preCardTotal + 2 == postCardTotal) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				failed = 1;
				numFailed++;
			}
			totalTests++;

			printf("Testing second player game state remained same:\n");
			if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				failed = 1;
				numFailed++;
			}
			totalTests++;

			printf("Testing supply remained the same:\n");
			if (treasureMapSupplyUnchanged(&pre, &post) == 1) {
				printf("Test Passed\n");
			}
			else {
				printf("Test Failed\n");
				failed = 1;
				numFailed++;
			}
			totalTests++;

			pre = temp;
			//set one treasure card in hand
			for (i = 1; i < 5; i++) {
				pre.hand[curPlayer][i] = great_hall;
			}

			post = pre;

			//treasureMapPlay(curPlayer, handPos, &post);
			bonus = 0;
			cardEffect(treasure_map, 0, 0, 0, &post, handPos, &bonus);

			printf("Testing one treasure maps in hand:\n");

			printf("Testing deck size remains the same:\n");
				if (pre.deckCount[curPlayer] != post.deckCount[curPlayer]) {
					printf("Test Failed\n");
					failed = 1;
					numFailed++;
				}
				else {
					printf("Test Passed\n");
				}
				totalTests++;

				printf("Testing no treasuremap cards in hand:\n");
				failed = 0;
				for (i = 0; i < post.handCount[curPlayer]; i++) {
					if (post.hand[curPlayer][i] == treasure_map) {
						printf("Test Failed\n");
						failed = 1;
						numFailed++;
					}
				}
				if(failed == 0) {
						printf("Test Passed\n");
					}
					totalTests++;

					printf("Testing total cards in current player's state decreased by 1:\n");
					preCardTotal = pre.deckCount[curPlayer] + pre.discardCount[curPlayer] + pre.handCount[curPlayer] + pre.playedCardCount;
					postCardTotal = post.deckCount[curPlayer] + post.discardCount[curPlayer] + post.handCount[curPlayer] + post.playedCardCount;
					if (preCardTotal == postCardTotal + 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						failed = 1;
						numFailed++;
					}
					totalTests++;

					printf("Testing second player game state remained same:\n");
					if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						failed = 1;
						numFailed++;
					}
					totalTests++;

					printf("Testing supply remained the same:\n");
					if (treasureMapSupplyUnchanged(&pre, &post) == 1) {
						printf("Test Passed\n");
					}
					else {
						printf("Test Failed\n");
						failed = 1;
						numFailed++;
					}
					totalTests++;

					printf("%d/%d Tests Failed\n\n", numFailed, totalTests);


	return 0;
}File 'unittest1.c'
Lines executed:76.87% of 134
Branches executed:100.00% of 32
Taken at least once:50.00% of 32
Calls executed:76.81% of 69
Creating 'unittest1.c.gcov'


#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing isGameOver


int main(int argc, char** argv) {
	int totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;


	initializeGame(numPlayers, k, seed, &pre);
	
	printf("=============================================\n");
	printf("Beginning testing of isGameOver function:\n");
	printf("=============================================\n\n");

	temp = post = pre;

	printf("Testing Initial Game State Does Not End Game:\n");

	if (isGameOver(&post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing 0 Provinces Ends Game:\n");
	pre.supplyCount[province] = 0;

	post = pre;

	if (isGameOver(&post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing 1 Provinces Does Not End Game (All other supply present):\n");
		pre.supplyCount[province] = 1;

		post = pre;

	if (isGameOver(&post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing three empty piles (including min):\n");
	pre.supplyCount[0] = 0;
	pre.supplyCount[6] = 0;
	pre.supplyCount[7] = 0;

	post = pre;

	if (isGameOver(&post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing three empty piles (including max)\n");
	pre.supplyCount[6] = 0;
	pre.supplyCount[7] = 0;
	pre.supplyCount[26] = 0;

	post = pre;

	if (isGameOver(&post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing two empty piles\n");
	pre.supplyCount[6] = 0;
	pre.supplyCount[7] = 0;

	post = pre;

	if (isGameOver(&post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;

	printf("Testing four empty piles\n");
	pre.supplyCount[6] = 0;
	pre.supplyCount[7] = 0;
	pre.supplyCount[8] = 0;
	pre.supplyCount[9] = 0;

	post = pre;

	if (isGameOver(&post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;


	printf("%d/%d Tests Failed\n\n", numFailed, totalTests);


	return 0;
}



File 'unittest2.c'
Lines executed:73.98% of 123
Branches executed:100.00% of 34
Taken at least once:52.94% of 34
Calls executed:76.81% of 69
Creating 'unittest2.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing updateCoins

int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;


	initializeGame(numPlayers, k, seed, &pre);

	printf("=============================================\n");
	printf("Beginning testing of updateCoins function:\n");
	printf("=============================================\n\n");
	

	pre.handCount[curPlayer] = 5;
	for (i = 0; i < pre.handCount[curPlayer]; i++) {
		pre.hand[curPlayer][i] = adventurer;
	}
	temp = post = pre;


	printf("Testing on hand with no treasure, no bonus:\n");
	updateCoins(curPlayer, &post, 0);
	if (post.coins == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = post = temp;

	printf("Testing on hand with no treasure, negative bonus:\n");
	updateCoins(curPlayer, &post, -1);
	if (post.coins == -1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;


	pre = post = temp;
	
	printf("Testing on hand with no treasure, positive bonus:\n");
	updateCoins(curPlayer, &post, 5);
	if (post.coins == 5) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;


	temp.hand[curPlayer][0] = copper;
	temp.hand[curPlayer][1] = silver;
	temp.hand[curPlayer][2] = adventurer;
	temp.hand[curPlayer][3] = village;
	temp.hand[curPlayer][4] = gold;

	pre = post = temp;

	printf("Testing on hand with some treasure, positive bonus:\n");
	updateCoins(curPlayer, &post, 5);
	if (post.coins == 11) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;
	
		
	printf("%d/%d tests failed\n\n", numFailed, totalTests);
	
	
	return 0;
}

File 'unittest3.c'
Lines executed:72.88% of 236
Branches executed:100.00% of 70
Taken at least once:54.29% of 70
Calls executed:75.94% of 133
Creating 'unittest3.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing fullDeckCount


int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;


	initializeGame(numPlayers, k, seed, &pre);

	printf("=============================================\n");
	printf("Beginning testing of fullDeckCount function:\n");
	printf("=============================================\n\n");
	
	temp.handCount[curPlayer] = 5;
	for (i = 0; i < temp.handCount[curPlayer]; i++) {
		temp.hand[curPlayer][i] = great_hall;
	}
	temp.deckCount[curPlayer] = 5;
	for (i = 0; i < temp.deckCount[curPlayer]; i++) {
		temp.deck[curPlayer][i] = great_hall;
	}
	temp.discardCount[curPlayer] = 5;
	for (i = 0; i < temp.discardCount[curPlayer]; i++) {
		temp.discard[curPlayer][i] = great_hall;
	}

	pre = post = temp;

	printf("Testing count of misc. card present in all locations:\n");
	if (fullDeckCount(curPlayer, great_hall, &post) == 15) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = post = temp;

	printf("Testing card not present (3):\n");
	if (fullDeckCount(curPlayer, 3, &post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = post = temp;


	pre.hand[curPlayer][0] = gold;
	pre.discard[curPlayer][0] = gold;
	pre.deck[curPlayer][0] = gold;

	post = pre;


	printf("Testing locations at the beginning of hand/deck/discard are being found:\n");
	if (fullDeckCount(curPlayer, gold, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][4] = gold;
	pre.discard[curPlayer][4] = gold;
	pre.deck[curPlayer][4] = gold;

	post = pre;


	printf("Testing locations at the end of hand/deck/discard are being found:\n");
	if (fullDeckCount(curPlayer, gold, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = curse;
	pre.discard[curPlayer][2] = curse;
	pre.deck[curPlayer][2] = curse;

	post = pre;


	printf("Testing locations with enum 0 (curse) are being found:\n");
	if (fullDeckCount(curPlayer, curse, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = treasure_map;
	pre.discard[curPlayer][2] = treasure_map;
	pre.deck[curPlayer][2] = treasure_map;

	post = pre;


	printf("Testing locations with enum 26 (treasure_map) are being found:\n");
	if (fullDeckCount(curPlayer, treasure_map, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	
	pre = post = temp;
	
	printf("Testing locations with enum below bounds finds nothing:\n");
	if (fullDeckCount(curPlayer, -1, &post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = post = temp;


	printf("Testing locations above enum bounds finds nothing:\n");
	if (fullDeckCount(curPlayer, 54, &post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("%d/%d tests failed\n\n", numFailed, totalTests);

	return 0;
}File 'unittest4.c'
Lines executed:74.25% of 334
Branches executed:100.00% of 94
Taken at least once:53.19% of 94
Calls executed:75.69% of 181
Creating 'unittest4.c.gcov'

#include "dominion.h"
#include "dominion_helpers.h"
#include "testing_helpers.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

//testing scoreFor

int main(int argc, char** argv) {
	int i = 0, totalTests = 0;
	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
		sea_hag, tribute, smithy };
	int numPlayers = 2, seed = 500, curPlayer = 0;
	int numFailed = 0;
	struct gameState pre, post, temp;


	initializeGame(numPlayers, k, seed, &pre);
	printf("=============================================\n");
	printf("Beginning testing of scoreFor function:\n");
	printf("=============================================\n\n");
	temp.handCount[curPlayer] = 5;
	for (i = 0; i < temp.handCount[curPlayer]; i++) {
		temp.hand[curPlayer][i] = adventurer;
	}
	temp.deckCount[curPlayer] = 5;
	for (i = 0; i < temp.deckCount[curPlayer]; i++) {
		temp.deck[curPlayer][i] = adventurer;
	}
	temp.discardCount[curPlayer] = 5;
	for (i = 0; i < temp.discardCount[curPlayer]; i++) {
		temp.discard[curPlayer][i] = adventurer;
	}

	pre = post = temp;

	printf("Testing score with no scoring cards:\n");
	if (scoreFor(curPlayer, &post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = estate;
	pre.discard[curPlayer][2] = estate;
	pre.deck[curPlayer][2] = estate;
	post = pre;

	printf("Testing estate and scoring cards centered in array:\n");
	if (scoreFor(curPlayer, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][0] = estate;
	pre.discard[curPlayer][0] = estate;
	pre.deck[curPlayer][0] = estate;
	post = pre;

	printf("Testing estate and scoring cards at beginning of array:\n");
	if (scoreFor(curPlayer, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][4] = estate;
	pre.discard[curPlayer][4] = estate;
	pre.deck[curPlayer][4] = estate;
	post = pre;

	printf("Testing estate and scoring cards at end of array:\n");
	if (scoreFor(curPlayer, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = curse;
	pre.discard[curPlayer][2] = curse;
	pre.deck[curPlayer][2] = curse;
	post = pre;

	printf("Testing curse:\n");
	if (scoreFor(curPlayer, &post) == -3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = duchy;
	pre.discard[curPlayer][2] = duchy;
	pre.deck[curPlayer][2] = duchy;
	post = pre;

	printf("Testing duchy:\n");
	if (scoreFor(curPlayer, &post) == 9) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = province;
	pre.discard[curPlayer][2] = province;
	pre.deck[curPlayer][2] = province;
	post = pre;

	printf("Testing province:\n");
	if (scoreFor(curPlayer, &post) == 18) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = great_hall;
	pre.discard[curPlayer][2] = great_hall;
	pre.deck[curPlayer][2] = great_hall;
	post = pre;

	printf("Testing great hall:\n");
	if (scoreFor(curPlayer, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.hand[curPlayer][2] = gardens;
	pre.discard[curPlayer][2] = gardens;
	pre.deck[curPlayer][2] = gardens;
	post = pre;

	printf("Testing gardens - round down to one each (15 total cards):\n");
	if (scoreFor(curPlayer, &post) == 3) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.deck[curPlayer][2] = gardens;
	pre.deckCount[curPlayer] = 0;
	post = pre;

	printf("Testing gardens - exactly divisible by 10, no rounding (10 total cards):\n");
	if (scoreFor(curPlayer, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	pre = temp;
	pre.deck[curPlayer][2] = gardens;
	pre.deckCount[curPlayer] = 0;
	pre.discardCount[curPlayer] = 4;
	post = pre;

	printf("Testing gardens - fewer than 10 cards (9 total cards):\n");
	if (scoreFor(curPlayer, &post) == 0) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing current player game state did not change:\n");

	if (compareGameState(curPlayer, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing second player game state remained same:\n");
	if (compareGameState(curPlayer + 1, &pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("Testing supply remained the same:\n");
	if (supplyUnchanged(&pre, &post) == 1) {
		printf("Test Passed\n");
	}
	else {
		printf("Test Failed\n");
		numFailed++;
	}
	totalTests++;

	printf("%d/%d tests failed\n\n", numFailed, totalTests);

	return 0;
}File 'testing_helpers.c'
Lines executed:67.03% of 273
Branches executed:66.67% of 222
Taken at least once:57.21% of 222
Calls executed:84.21% of 57
Creating 'testing_helpers.c.gcov'

#include "testing_helpers.h"
#include <stdlib.h>
#include <stdio.h>

#define SUPPLYTOTAL 27

int compareGameState(int player, struct gameState *state1, struct gameState *state2) {

	int i = 0;
	if (state1->handCount[player] != state2->handCount[player]) {
		return 0;
	}
	for (i = 0; i < state1->handCount[player]; i++) {
		if (state1->hand[player][i] != state2->hand[player][i]) {
			return 0;
		}
	}

	if (state1->deckCount[player] != state2->deckCount[player]) {
		return 0;
	}

	for (i = 0; i < state1->deckCount[player]; i++) {
		if (state1->deck[player][i] != state2->deck[player][i]) {
			return 0;
		}
	}

	if (state1->discardCount[player] != state2->discardCount[player]) {
		return 0;
	}
	for (i = 0; i < state1->discardCount[player]; i++) {
		if (state1->discard[player][i] != state2->discard[player][i]) {
			return 0;
		}
	}
	return 1; //all compared values are equal
}

int cardNumbersConstant(int player, struct gameState *state1, struct gameState *state2) {
	int state1Cards = 0, state2Cards = 0;

	state1Cards = state1->handCount[player] + state1->deckCount[player] + state1->playedCardCount + state1->discardCount[player];
	
	state2Cards = state2->handCount[player] + state2->deckCount[player] + state2->playedCardCount + state2->discardCount[player];

	if (state1Cards == state2Cards) {
		return 1;
	}
	else {
		return 0;
	}

	return 0;
}

int supplyUnchanged(struct gameState *state1, struct gameState *state2) {
	int i;
	for (i = 0; i < SUPPLYTOTAL; i++) {
		if (state1->supplyCount[i] != state2->supplyCount[i]) {
			return 0;
		}
	}
	return 1;
}

int treasureMapSupplyUnchanged(struct gameState *state1, struct gameState *state2) {
	int i;
	for (i = 0; i < SUPPLYTOTAL; i++) {
		if (state1->supplyCount[i] != state2->supplyCount[i] && i != 6) {
			return 0;
		}
	}
	return 1;
}

int scoreForRefactor(int player, struct gameState *state) {

	int i;
	int score = 0;
	//score from hand

	for (i = 0; i < state->handCount[player]; i++)
	{
		if (state->hand[player][i] == curse) {
			score = score - 1;
		}
		else if (state->hand[player][i] == estate) {
			score = score + 1;
		}
		else if (state->hand[player][i] == duchy) {
			score = score + 3;
		}
		else if (state->hand[player][i] == province) {
			score = score + 6;
		}
		else if (state->hand[player][i] == great_hall) {
			score = score + 1;
		}
		else if (state->hand[player][i] == gardens) {
			score = score + ((state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10);
		}
	}

	//score from discard
	for (i = 0; i < state->discardCount[player]; i++)
	{
		if (state->discard[player][i] == curse) {
			score = score - 1;
		}
		else if (state->discard[player][i] == estate) {
			score = score + 1;
		}
		else if (state->discard[player][i] == duchy) {
			score = score + 3;
		}
		else if (state->discard[player][i] == province) {
			score = score + 6;
		}
		else if (state->discard[player][i] == great_hall) {
			score = score + 1;
		}
		else if (state->discard[player][i] == gardens) {
			score = score + ((state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10);
		}
	}

	//score from deck
	for (i = 0; i < state->deckCount[player]; i++)
	{
		if (state->deck[player][i] == curse) {
			score = score - 1;
		}
		else if (state->deck[player][i] == estate) {
			score = score + 1;
		}
		else if (state->deck[player][i] == duchy) {
			score = score + 3;
		}
		else if (state->deck[player][i] == province) {
			score = score + 6;
		}
		else if (state->deck[player][i] == great_hall) {
			score = score + 1;
		}
		else if (state->deck[player][i] == gardens) {
			score = score + ((state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10);
		}
	}

	return score;
}

void randomSetup(struct gameState *state) {
	int maxRemainingCopper;
	int kingdomCount = 0, kingdomCardStackSize;
	int i;
	int kingdomCard;
	int emptySupplies = 0;
	int outpostRandom = 0;

	//set supplies to -1
	for (i = 0; i <= treasure_map; i++) {
		state->supplyCount[i] = -1;
	}

	do {
		state->numPlayers = rand() % 3 + 2; //randomly set number of players

		for (i = 0; i < state->numPlayers; i++) {
			state->discardCount[i] = 0;
			state->handCount[i] = 0;
			state->deckCount[i] = 0;
		}
		state->playedCardCount = 0;

		if (state->numPlayers == 2) {
			state->supplyCount[curse] = rand() % 11;
			state->supplyCount[estate] = rand() % 9;
			state->supplyCount[duchy] = rand() % 9;
			state->supplyCount[province] = rand() % 9;
		}
		else if (state->numPlayers == 3) {
			state->supplyCount[curse] = rand() % 21;
			state->supplyCount[estate] = rand() % 13;
			state->supplyCount[duchy] = rand() % 13;
			state->supplyCount[province] = rand() % 13;
		}
		else {
			state->supplyCount[curse] = rand() % 31;
			state->supplyCount[estate] = rand() % 13;
			state->supplyCount[duchy] = rand() % 13;
			state->supplyCount[province] = rand() % 13;
		}
		
		maxRemainingCopper = 60 - (state->numPlayers * 7);
		state->supplyCount[copper] = rand() % (maxRemainingCopper + 1);
		state->supplyCount[silver] = rand() % 40;
		state->supplyCount[gold] = rand() % 30;
		
		for (i = 0; i < 7; i++) {
			if (state->supplyCount[i] == 0) {
				emptySupplies++;
			}
		}
	} while (emptySupplies < 3);


	if (state->numPlayers == 2) {
		kingdomCardStackSize = 8;
	}
	else {
		kingdomCardStackSize = 12;
	}


	while (kingdomCount <= 10) {
		kingdomCard = rand() % (treasure_map - 7) + 7; //random card - min is adventurer, max is treasure_map

		//fills up to 10 supply piles with cards - will create a game state with up to three empty piles (three empty would be last turn being completed)
		if (state->supplyCount[kingdomCard] <= 0) {
			state->supplyCount[kingdomCard] = rand() % (kingdomCardStackSize + 1);
			if (state->supplyCount[kingdomCard] <= 0 && emptySupplies < 3) {
				emptySupplies++;
				kingdomCount++;
			}
			else if (state->supplyCount[kingdomCard] > 0) {
				kingdomCount++;
			}
		}
	}


	if (state->numPlayers == 2) {
		addCards(curse, 10 - state->supplyCount[curse], state);
	}
	else if (state->numPlayers == 3) {
		addCards(curse, 20 - state->supplyCount[curse], state);
	}
	else {
		addCards(curse, 30 - state->supplyCount[curse], state);
	}

	//send the various cards to the deck, discard, hands, etc. of the various players
	addCards(copper, 60 - state->supplyCount[copper], state);
	addCards(silver, 40 - state->supplyCount[silver], state);
	addCards(gold, 30 - state->supplyCount[gold], state);

	if (state->numPlayers == 2) {
		for (i = 1; i < 4; i++) {
			if (state->supplyCount[i] >= 0) {
				addCards(i, 8 - state->supplyCount[i], state);
			}
		}

		for (i = 7; i < treasure_map + 1; i++) {
			if (state->supplyCount[i] >= 0) {
				addCards(i, 8 - state->supplyCount[i], state);
			}
		}
	}
	else {
		for (i = 1; i < 4; i++) {
			if (state->supplyCount[i] >= 0) {
				addCards(i, 12 - state->supplyCount[i], state);
			}
		}
		for (i = 7; i < treasure_map + 1; i++) {
			if (state->supplyCount[i] >= 0) {
				addCards(i, 12 - state->supplyCount[i], state);
			}
		}
	}

	//Set up the remaining gamestate
	state->whoseTurn = random() % state->numPlayers;

	state->coins = rand() % 1000; //the max gold can go quite high, but this is likely a safe bet for potential coins using the limited set we are allowed
	state->numActions = rand() % 50;
	state->numBuys = rand() % 50;
	state->phase = 0; //unclear, but it should likely be 0 for playing cards
	//sets outpost flags - appears to not be functioning yet

	//only mess with flags if outposts are in play
	if (state->supplyCount[outpost] >= 0) {
		outpostRandom = rand() % 10 + 1;
		switch (outpostRandom) {
		case 1:
			state->outpostPlayed = 1;
			break;
		case 2:
			state->outpostTurn = 1;
			break;
		default:
			break;
		}
	}
	else {
		state->outpostTurn = 0;
		state->outpostPlayed = 0;
	}

	//SHUFFLE THE DECKS, DISCARDS, HANDS, ETC. 50 times for each player
	for (i = 0; i < state->numPlayers; i++) {
		int j;

		for (j = 0; j < 50; j++) {
			shuffleCards(i, 0, state);
			shuffleCards(i, 1, state);
			shuffleCards(i, 2, state);
			shuffleCards(i, 3, state);
		}
	}


}

void addCards(int card, int numToAdd, struct gameState *state) {
	int i;
	int sendLocation; //represents the location to send the card to
	int playerPicked; //represents the player to send the card to

	for (i = 0; i < numToAdd; i++) {
		playerPicked = rand() % state->numPlayers;
		sendLocation = rand() % 23 + 1;
		//printf("TEST - ADDCARD ITERATION %d\n", i);
		//the switch is largely to add some granularity, some cards will go to the hand, while most will go to the deck/discard.
		//Rarely some will go to trash - e.g. they will go nowhere
		switch (sendLocation) {
		case 1:
		case 2:
		case 3:
			//printf("TEST - ADDCARD 1-3\n");
			//printf("PLAYER PICKED: %d Card: %d COUNT: %d\n", playerPicked, card, state->handCount[playerPicked]);
			//printf("TEST - ADDCARD 1-3\n");
			state->hand[playerPicked][state->handCount[playerPicked]] = card;
			state->handCount[playerPicked]++;
			//printf("TEST - ADDCARD 1-3 END\n");
			break;
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
			//printf("TEST - ADDCARD 13-21\n");
			//printf("PLAYER PICKED: %d Card: %d COUNT: %d\n", playerPicked, card, state->discardCount[playerPicked]);
			state->discard[playerPicked][state->discardCount[playerPicked]] = card;
			//printf("TEST - ADDCARD 13-21\n");
			state->discardCount[playerPicked]++;
			//printf("TEST - ADDCARD 4-12 END\n");
			break;
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
			//printf("TEST - ADDCARD 13-21\n");
			//printf("PLAYER PICKED: %d Card: %d COUNT: %d\n", playerPicked, card, state->deckCount[playerPicked]);
			state->deck[playerPicked][state->deckCount[playerPicked]] = card;
			//printf("TEST - ADDCARD 13-21\n");
			state->deckCount[playerPicked]++;
			//printf("TEST - ADDCARD 13-21 END\n");
			break;
		case 22:
			//printf("TEST - ADDCARD 22\n");
			//printf("PLAYER PICKED: %d Card: %d COUNT: %d\n", playerPicked, card, state->playedCardCount);
			state->playedCards[state->playedCardCount] = card;
			//printf("TEST - ADDCARD 22\n");
			state->playedCardCount++;
			//printf("TEST - ADDCARD 22 END\n");
			break;
		default:
			//printf("TEST - ADDCARD DEFAULT\n");
			//printf("PLAYER PICKED: %d\n", playerPicked);
			break;
		}
	}

}

void shuffleCards(int curPlayer, int deckSection, struct gameState * state){
	//0 = deck, 1 = discard, 2 = hand, 3 = played
	int cardPlace1, cardPlace2, temp;

	if (deckSection == 0 && state->deckCount[curPlayer] > 2) {

		cardPlace1 = rand() % state->deckCount[curPlayer];
		cardPlace2 = rand() % state->deckCount[curPlayer];
		temp = state->deck[curPlayer][cardPlace1];
		state->deck[curPlayer][cardPlace1] = state->deck[curPlayer][cardPlace2];
		state->deck[curPlayer][cardPlace2] = temp;
	}
	else if (deckSection == 1 && state->discardCount[curPlayer] > 2) {
		cardPlace1 = rand() % state->discardCount[curPlayer];
		cardPlace2 = rand() % state->discardCount[curPlayer];
		temp = state->discard[curPlayer][cardPlace1];
		state->discard[curPlayer][cardPlace1] = state->discard[curPlayer][cardPlace2];
		state->discard[curPlayer][cardPlace2] = temp;
	}
	else if (deckSection == 2 && state->handCount[curPlayer] > 2) {
		cardPlace1 = rand() % state->handCount[curPlayer];
		cardPlace2 = rand() % state->handCount[curPlayer];
		temp = state->hand[curPlayer][cardPlace1];
		state->hand[curPlayer][cardPlace1] = state->hand[curPlayer][cardPlace2];
		state->hand[curPlayer][cardPlace2] = temp;
	}
	else if (deckSection == 3 && state->playedCardCount > 2) {
		cardPlace1 = rand() % state->playedCardCount;
		cardPlace2 = rand() % state->playedCardCount;
		temp = state->playedCards[cardPlace1];
		state->playedCards[cardPlace1] = state->playedCards[cardPlace2];
		state->playedCards[cardPlace2] = temp;
	}
}

int validateAdventurerDraw(int curPlayer, struct gameState *state1, struct gameState *state2) {
	int i;
	int failed = 0;
	int coinCount = 0;
	int cardsToDiscard = 0;
	int totalTreasure = 0;
	//checks cards in deck
	for (i = state1->deckCount[curPlayer] - 1; i >= 0 && coinCount < 2; i--) {
		if (state1->deck[curPlayer][i] == copper || state1->deck[curPlayer][i] == silver || state1->deck[curPlayer][i] == gold) {
			if (state2->hand[curPlayer][state2->handCount[curPlayer] - (2 - coinCount)] != state1->deck[curPlayer][i]) {
				//incorrect position of the drawn card
				printf("Test Failed - Incorrect position of treasure cards drawn\n");
				failed = 1;
			}
			coinCount++;
		}
		else {
			//not a coin card
			cardsToDiscard++;
		}
	}
	if (coinCount >= 2) {
		if (state1->discardCount[curPlayer] + cardsToDiscard != state2->discardCount[curPlayer]) {
			printf("Test Failed - Discard did not increase by number of non-treasure cards drawn\n");
			failed = 1;
		}
	}
	else {
		//check discard for potential treasure cards
		for (i = 0; i < state1->discardCount[curPlayer]; i++) {
			if (state1->discard[curPlayer][i] == copper || state1->discard[curPlayer][i] == silver || state1->discard[curPlayer][i] == gold) {
				//found a coin
				if (state2->hand[curPlayer][state2->handCount[curPlayer] - (2 - coinCount)] != copper || state2->hand[curPlayer][state2->handCount[curPlayer] - (2 - coinCount)] != silver || state2->hand[curPlayer][state2->handCount[curPlayer] - (2 - coinCount)] != gold) {
					printf("Test Failed - expected drawn item was not treasure\n");
					failed = 1;
				}
				coinCount++;
			}
		}
		if (state1->handCount[curPlayer] + (coinCount - 1) != state2->handCount[curPlayer]) {
			printf("Test Failed - Hand size not as expected based up on treasure drawn\n");
			failed = 1;
		}
	}

	for (i = 0; i < state1->deckCount[curPlayer]; i++) {
		if (state1->deck[curPlayer][i] == copper || state1->deck[curPlayer][i] == silver || state1->deck[curPlayer][i] == gold) {
			totalTreasure++;
		}
	}

	for (i = 0; i < state1->discardCount[curPlayer]; i++) {
		if (state1->discard[curPlayer][i] == copper || state1->discard[curPlayer][i] == silver || state1->discard[curPlayer][i] == gold) {
			totalTreasure++;
		}
	}

	if (totalTreasure > 2) {
		totalTreasure = 2;
	}

	if (state1->handCount[curPlayer] + (totalTreasure - 1) != state2->handCount[curPlayer]) {
		printf("Test Failed - Hand size not as expected base on possible treasure cards to draw\n");
		failed = 1;
	}

	if (failed == 1) {
		return 0;
	}
	else {
		return 1;
	}
}

int testFlags(struct gameState *state1, struct gameState *state2) {
	int failed = 0, i;
	if (state1->numPlayers != state2->numPlayers) {
		printf("Test Failed - num players was changed\n");
		failed = 1;
	}
	if (state1->outpostPlayed != state2->outpostPlayed) {
		printf("Test Failed - outpostPlayed was changed\n");
		failed = 1;
	}
	if (state1->outpostTurn != state2->outpostTurn) {
		printf("Test Failed - outpostTurn was changed\n");
		failed = 1;
	}
	if (state1->whoseTurn != state2->whoseTurn) {
		printf("Test Failed - whose turn was changed\n");
		failed = 1;
	}
	if (state1->phase != state2->phase) {
		printf("Test Failed - phase was changed\n");
		failed = 1;
	}
	//not testing coins - implementation is a little too ambiguous at the moment
	for (i = 0; i < treasure_map + 1; i++) {
		if (state1->embargoTokens[i] != state2->embargoTokens[i]) {
			failed = 1;
		}
	}
	if (failed == 1) {
		return 0;
	}
	else {
		return 1; //tests ok
	}
}


/*
struct gameState {
int numPlayers; //number of players
int supplyCount[treasure_map+1];  //this is the amount of a specific type of card given a specific number.
int embargoTokens[treasure_map+1];
int outpostPlayed;
int outpostTurn;
int whoseTurn;
int phase;
int numActions; // Starts at 1 each turn 
int coins; // Use as you see fit! 
int numBuys; // Starts at 1 each turn 
int hand[MAX_PLAYERS][MAX_HAND];
int handCount[MAX_PLAYERS];
int deck[MAX_PLAYERS][MAX_DECK];
int deckCount[MAX_PLAYERS];
int discard[MAX_PLAYERS][MAX_DECK];
int discardCount[MAX_PLAYERS];
int playedCards[MAX_DECK];
int playedCardCount;
};
*/File 'dominion.c'
Lines executed:38.65% of 564
Branches executed:45.58% of 419
Taken at least once:37.71% of 419
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:44
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1766 returned 100% blocks executed 100%
     1766:    8:int compare(const void* a, const void* b) {
     1766:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 123 (fallthrough)
branch  1 taken 1643
      123:   10:    return 1;
     1643:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 411 (fallthrough)
branch  1 taken 1232
      411:   12:    return -1;
     1232:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 42 returned 100% blocks executed 88%
       42:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       42:   44:  SelectStream(1);
call    0 returned 42
       42:   45:  PutSeed((long)randomSeed);
call    0 returned 42
        -:   46:  
        -:   47:  //check number of players
       42:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 42
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       42:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      462:   57:  for (i = 0; i < 10; i++)
branch  0 taken 420
branch  1 taken 42 (fallthrough)
        -:   58:    {
     4620:   59:      for (j = 0; j < 10; j++)
branch  0 taken 4200
branch  1 taken 420 (fallthrough)
        -:   60:        {
     4200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 3780 (fallthrough)
branch  1 taken 420
branch  2 taken 0 (fallthrough)
branch  3 taken 3780
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       42:   73:  if (numPlayers == 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
        -:   74:    {
       42:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       42:   87:  if (numPlayers == 2)
branch  0 taken 42 (fallthrough)
branch  1 taken 0
        -:   88:    {
       42:   89:      state->supplyCount[estate] = 8;
       42:   90:      state->supplyCount[duchy] = 8;
       42:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       42:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       42:  102:  state->supplyCount[silver] = 40;
       42:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      882:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 840
branch  1 taken 42 (fallthrough)
        -:  107:  {
     6930:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 6510
branch  1 taken 420 (fallthrough)
        -:  109:	  {
     6510:  110:	    if (kingdomCards[j] == i)
branch  0 taken 420 (fallthrough)
branch  1 taken 6090
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      420:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 420 (fallthrough)
branch  1 taken 0
branch  2 taken 42 (fallthrough)
branch  3 taken 378
        -:  114:		    {
       84:  115:		      if (numPlayers == 2){ 
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:  116:		        state->supplyCount[i] = 8; 
        -:  117:		      }
    #####:  118:		      else{ state->supplyCount[i] = 12; }
        -:  119:		    }
        -:  120:	      else
        -:  121:		    {
      378:  122:		      state->supplyCount[i] = 10;
        -:  123:		    }
      420:  124:	      break;
        -:  125:	    }
        -:  126:	    else    //card is not in the set choosen for the game
        -:  127:	    {
     6090:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	  }
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
      126:  137:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  138:    {
       84:  139:      state->deckCount[i] = 0;
      336:  140:      for (j = 0; j < 3; j++)
branch  0 taken 252
branch  1 taken 84 (fallthrough)
        -:  141:	{
      252:  142:	  state->deck[i][j] = estate;
      252:  143:	  state->deckCount[i]++;
        -:  144:	}
      672:  145:      for (j = 3; j < 10; j++)
branch  0 taken 588
branch  1 taken 84 (fallthrough)
        -:  146:	{
      588:  147:	  state->deck[i][j] = copper;
      588:  148:	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
      126:  153:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  154:    {
       84:  155:      if ( shuffle(i, state) < 0 )
call    0 returned 84
branch  1 taken 0 (fallthrough)
branch  2 taken 84
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
      126:  162:  for (i = 0; i < numPlayers; i++)
branch  0 taken 84
branch  1 taken 42 (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       84:  165:      state->handCount[i] = 0;
       84:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
     1176:  175:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1134
branch  1 taken 42 (fallthrough)
        -:  176:    {
     1134:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
       42:  181:  state->outpostPlayed = 0;
       42:  182:  state->phase = 0;
       42:  183:  state->numActions = 1;
       42:  184:  state->numBuys = 1;
       42:  185:  state->playedCardCount = 0;
       42:  186:  state->whoseTurn = 0;
       42:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      252:  191:  for (it = 0; it < 5; it++){
branch  0 taken 210
branch  1 taken 42 (fallthrough)
      210:  192:    drawCard(state->whoseTurn, state);
call    0 returned 210
        -:  193:  }
        -:  194:
       42:  195:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 42
        -:  196:
       42:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 256 returned 100% blocks executed 100%
      256:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
      256:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
      256:  208:  if (state->deckCount[player] < 1)
branch  0 taken 111 (fallthrough)
branch  1 taken 145
      111:  209:    return -1;
      145:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 145
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
     1483:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 1193
branch  1 taken 145 (fallthrough)
     1193:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 1193
     1193:  215:    newDeck[newDeckPos] = state->deck[player][card];
     1193:  216:    newDeckPos++;
     3665:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 2472
branch  1 taken 1193 (fallthrough)
     2472:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
     1193:  220:    state->deckCount[player]--;
        -:  221:  }
     1338:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1193
branch  1 taken 145 (fallthrough)
     1193:  223:    state->deck[player][i] = newDeck[i];
     1193:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
      145:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  319:int supplyCount(int card, struct gameState *state) {
        8:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 78 returned 100% blocks executed 100%
       78:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
       78:  325:  int count = 0;
        -:  326:
      408:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 330
branch  1 taken 78 (fallthrough)
        -:  328:    {
      330:  329:      if (state->deck[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 276
        -:  330:    }
        -:  331:
      468:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 390
branch  1 taken 78 (fallthrough)
        -:  333:    {
      390:  334:      if (state->hand[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 336
        -:  335:    }
        -:  336:
      462:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 384
branch  1 taken 78 (fallthrough)
        -:  338:    {
      384:  339:      if (state->discard[player][i] == card) count++;
branch  0 taken 54 (fallthrough)
branch  1 taken 330
        -:  340:    }
        -:  341:
       78:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  345:int whoseTurn(struct gameState *state) {
        6:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 42 returned 100% blocks executed 100%
       42:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
       42:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 36
        -:  395:    {
        6:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
       36:  400:  j = 0;
      936:  401:  for (i = 0; i < 25; i++)
branch  0 taken 900
branch  1 taken 36 (fallthrough)
        -:  402:    {
      900:  403:      if (state->supplyCount[i] == 0)
branch  0 taken 66 (fallthrough)
branch  1 taken 834
        -:  404:	{
       66:  405:	  j++;
        -:  406:	}
        -:  407:    }
       36:  408:  if ( j >= 3)
branch  0 taken 12 (fallthrough)
branch  1 taken 24
        -:  409:    {
       12:  410:      return 1;
        -:  411:    }
        -:  412:
       24:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 66 returned 100% blocks executed 100%
       66:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
       66:  419:  int score = 0;
        -:  420:  //score from hand
      396:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 330
branch  1 taken 66 (fallthrough)
        -:  422:    {
      330:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 312
      330:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
      330:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 6 (fallthrough)
branch  1 taken 324
call    2 returned 6
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
      390:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 324
branch  1 taken 66 (fallthrough)
        -:  433:    {
      324:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
      324:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
call    2 returned 6
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
      390:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 324
branch  1 taken 66 (fallthrough)
        -:  444:    {
      324:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
      324:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 318
      324:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 18 (fallthrough)
branch  1 taken 306
call    2 returned 18
        -:  451:    }
        -:  452:
       66:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 8025 returned 100% blocks executed 100%
     8025:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
     8025:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 112 (fallthrough)
branch  1 taken 7913
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      465:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 353
branch  1 taken 112 (fallthrough)
      353:  533:      state->deck[player][i] = state->discard[player][i];
      353:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
      112:  537:    state->deckCount[player] = state->discardCount[player];
      112:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
      112:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 112
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
      112:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
      112:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
      112:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
      112:  558:    if (deckCounter == 0)
branch  0 taken 51 (fallthrough)
branch  1 taken 61
       51:  559:      return -1;
        -:  560:
       61:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       61:  562:    state->deckCount[player]--;
       61:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
     7913:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
     7913:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
     7913:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7913:  575:    state->deckCount[player]--;
     7913:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
     7974:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 6 returned 100% blocks executed 12%
        6:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int index;
        6:  651:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        6:  652:  int nextPlayer = currentPlayer + 1;
        6:  653:  int tributeRevealedCards[2] = {-1, -1};
        -:  654:
        6:  655:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:  
        -:  659:	
        -:  660:  //uses switch to select card and perform actions
        6:  661:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 3
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 3
branch 20 taken 0
        -:  662:    {
        -:  663:    case adventurer:
    #####:  664:      playAdventurer(currentPlayer, state);
call    0 never executed
    #####:  665:      return 0;
        -:  666:			
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  670:	{
    #####:  671:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  672:	}
        -:  673:			
        -:  674:      //+1 Buy
    #####:  675:      state->numBuys++;
        -:  676:			
        -:  677:      //Each other player draws a card
    #####:  678:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  679:	{
    #####:  680:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  681:	    {
    #####:  682:	      drawCard(i, state);
call    0 never executed
        -:  683:	    }
        -:  684:	}
        -:  685:			
        -:  686:      //put played card in played card pile
    #####:  687:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  688:			
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case feast:
    #####:  692:      playFeast(currentPlayer, state, choice1);
call    0 never executed
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case gardens:
    #####:  696:      return -1;
        -:  697:			
        -:  698:    case mine:
    #####:  699:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  700:
    #####:  701:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:		
    #####:  706:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  712:	{
    #####:  713:	  return -1;
        -:  714:	}
        -:  715:
    #####:  716:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  717:
        -:  718:      //discard card from hand
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  720:
        -:  721:      //discard trashed card
    #####:  722:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  723:	{
    #####:  724:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  725:	    {
    #####:  726:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  727:	      break;
        -:  728:	    }
        -:  729:	}
        -:  730:			
    #####:  731:      return 0;
        -:  732:			
        -:  733:    case remodel:
    #####:  734:      i = playRemodel(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  735:      return i;
        -:  736:		
        -:  737:    case smithy:
    #####:  738:      playSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  739:      return 0;
        -:  740:		
        -:  741:    case village:
        -:  742:      //+1 Card
    #####:  743:      drawCard(currentPlayer, state);
call    0 never executed
        -:  744:			
        -:  745:      //+2 Actions
    #####:  746:      state->numActions = state->numActions + 2;
        -:  747:			
        -:  748:      //discard played card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  750:      return 0;
        -:  751:		
        -:  752:    case baron:
    #####:  753:      playBaron(currentPlayer, state, choice1); 
call    0 never executed
    #####:  754:      return 0;
        -:  755:		
        -:  756:    case great_hall:
        -:  757:      //+1 Card
        3:  758:      drawCard(currentPlayer, state);
call    0 returned 3
        -:  759:			
        -:  760:      //+1 Actions
        3:  761:      state->numActions++;
        -:  762:			
        -:  763:      //discard card from hand
        3:  764:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3:  765:      return 0;
        -:  766:		
        -:  767:    case minion:
        -:  768:      //+1 action
    #####:  769:      state->numActions++;
        -:  770:			
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:			
    #####:  774:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  775:	{
    #####:  776:	  state->coins = state->coins + 2;
        -:  777:	}
        -:  778:			
    #####:  779:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  780:	{
        -:  781:	  //discard hand
    #####:  782:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  783:	    {
    #####:  784:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  785:	    }
        -:  786:				
        -:  787:	  //draw 4
    #####:  788:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  789:	    {
    #####:  790:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  791:	    }
        -:  792:				
        -:  793:	  //other players discard hand and redraw if hand size > 4
    #####:  794:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	    {
    #####:  796:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  797:		{
    #####:  798:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  799:		    {
        -:  800:		      //discard hand
    #####:  801:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  802:			{
    #####:  803:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  804:			}
        -:  805:							
        -:  806:		      //draw 4
    #####:  807:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  808:			{
    #####:  809:			  drawCard(i, state);
call    0 never executed
        -:  810:			}
        -:  811:		    }
        -:  812:		}
        -:  813:	    }
        -:  814:				
        -:  815:	}
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case steward:
    #####:  819:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  820:	{
        -:  821:	  //+2 cards
    #####:  822:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  823:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  824:	}
    #####:  825:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //+2 coins
    #####:  828:	  state->coins = state->coins + 2;
        -:  829:	}
        -:  830:      else
        -:  831:	{
        -:  832:	  //trash 2 cards in hand
    #####:  833:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  834:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  835:	}
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  839:      return 0;
        -:  840:		
        -:  841:    case tribute:
    #####:  842:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  843:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  844:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  845:	  state->deckCount[nextPlayer]--;
        -:  846:	}
    #####:  847:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  848:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  849:	  state->discardCount[nextPlayer]--;
        -:  850:	}
        -:  851:	else{
        -:  852:	  //No Card to Reveal
        -:  853:	  if (DEBUG){
        -:  854:	    printf("No cards to reveal\n");
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:	    
        -:  859:      else{
    #####:  860:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  863:	    state->deckCount[nextPlayer]++;
    #####:  864:	    state->discard[nextPlayer][i] = -1;
    #####:  865:	    state->discardCount[nextPlayer]--;
        -:  866:	  }
        -:  867:			    
    #####:  868:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  869:	} 
    #####:  870:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  871:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  872:	state->deckCount[nextPlayer]--;
    #####:  873:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  874:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  875:	state->deckCount[nextPlayer]--;
        -:  876:      }    
        -:  877:		       
    #####:  878:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  879:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  880:	state->playedCardCount++;
    #####:  881:	tributeRevealedCards[1] = -1;
        -:  882:      }
        -:  883:
    #####:  884:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  885:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  886:	  state->coins += 2;
        -:  887:	}
        -:  888:		    
    #####:  889:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  891:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  892:	}
        -:  893:	else{//Action Card
    #####:  894:	  state->numActions = state->numActions + 2;
        -:  895:	}
        -:  896:      }
        -:  897:	    
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case ambassador:
    #####:  901:      j = 0;		//used to check if player has enough cards to discard
        -:  902:
    #####:  903:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;				
        -:  906:	}
        -:  907:
    #####:  908:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  916:	    {
    #####:  917:	      j++;
        -:  918:	    }
        -:  919:	}
    #####:  920:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  921:	{
    #####:  922:	  return -1;				
        -:  923:	}
        -:  924:
        -:  925:      if (DEBUG) 
        -:  926:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  927:
        -:  928:      //increase supply count for choosen card by amount being discarded
    #####:  929:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  930:			
        -:  931:      //each other player gains a copy of revealed card
    #####:  932:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  935:	    {
    #####:  936:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  937:	    }
        -:  938:	}
        -:  939:
        -:  940:      //discard played card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  942:
        -:  943:      //trash copies of cards returned to supply
    #####:  944:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  949:		{
    #####:  950:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  951:		  break;
        -:  952:		}
        -:  953:	    }
        -:  954:	}			
        -:  955:
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case cutpurse:
        -:  959:
    #####:  960:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  961:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  966:		{
    #####:  967:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  968:		    {
    #####:  969:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  970:		      break;
        -:  971:		    }
    #####:  972:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  973:		    {
    #####:  974:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  975:			{
        -:  976:			  if (DEBUG)
        -:  977:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  978:			}	
    #####:  979:		      break;
        -:  980:		    }		
        -:  981:		}
        -:  982:					
        -:  983:	    }
        -:  984:				
        -:  985:	}				
        -:  986:
        -:  987:      //discard played card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  989:
    #####:  990:      return 0;
        -:  991:
        -:  992:		
        -:  993:    case embargo: 
        -:  994:      //+2 Coins
    #####:  995:      state->coins = state->coins + 2;
        -:  996:			
        -:  997:      //see if selected pile is in play
    #####:  998:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:			
        -: 1003:      //add embargo token to selected supply pile
    #####: 1004:      state->embargoTokens[choice1]++;
        -: 1005:			
        -: 1006:      //trash card
    #####: 1007:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case outpost:
        -: 1011:      //set outpost flag
    #####: 1012:      state->outpostPlayed++;
        -: 1013:			
        -: 1014:      //discard card
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case salvager:
        -: 1019:      //+1 buy
    #####: 1020:      state->numBuys++;
        -: 1021:			
    #####: 1022:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
        -: 1024:	  //gain coins equal to trashed card
    #####: 1025:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1026:	  //trash card
    #####: 1027:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1028:	}
        -: 1029:			
        -: 1030:      //discard card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case sea_hag:
    #####: 1035:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1037:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1038:	  state->discardCount[i]++;
    #####: 1039:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1040:	}
        -: 1041:      }
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case treasure_map:
        -: 1045:      //search hand for another treasure_map
        3: 1046:      index = -1;
       10: 1047:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 9
branch  1 taken 1 (fallthrough)
        -: 1048:	{
        9: 1049:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 5 (fallthrough)
branch  1 taken 4
branch  2 taken 2 (fallthrough)
branch  3 taken 3
        -: 1050:	    {
        2: 1051:	      index = i;
        2: 1052:	      break;
        -: 1053:	    }
        -: 1054:	}
        3: 1055:      if (index > -1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1056:	{
        -: 1057:	  //trash both treasure cards
        2: 1058:	  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 2
        2: 1059:	  discardCard(index, currentPlayer, state, 1);
call    0 returned 2
        -: 1060:
        -: 1061:	  //gain 4 Gold cards
       10: 1062:	  for (i = 0; i < 4; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1063:	    {
        8: 1064:	      gainCard(gold, state, 1, currentPlayer);
call    0 returned 8
        -: 1065:	    }
        -: 1066:				
        -: 1067:	  //return success
        2: 1068:	  return 1;
        -: 1069:	}
        -: 1070:			
        -: 1071:      //no second treasure_map found in hand
        1: 1072:      return -1;
        -: 1073:    }
        -: 1074:	
    #####: 1075:  return -1;
        -: 1076:}
        -: 1077:
function discardCard called 1047 returned 100% blocks executed 78%
     1047: 1078:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1079:{
        -: 1080:	
        -: 1081:  //if card is not trashed, added to Played pile 
     1047: 1082:  if (trashFlag < 1)
branch  0 taken 3 (fallthrough)
branch  1 taken 1044
        -: 1083:    {
        -: 1084:      //add card to played pile
        3: 1085:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1086:      state->playedCardCount++;
        -: 1087:    }
        -: 1088:	
        -: 1089:  //set played card to -1
     1047: 1090:  state->hand[currentPlayer][handPos] = -1;
        -: 1091:	
        -: 1092:  //remove card from player's hand
     1047: 1093:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 1047
        -: 1094:    {
        -: 1095:      //reduce number of cards in hand
    #####: 1096:      state->handCount[currentPlayer]--;
        -: 1097:    }
     1047: 1098:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 1047
        -: 1099:    {
        -: 1100:      //reduce number of cards in hand
    #####: 1101:      state->handCount[currentPlayer]--;
        -: 1102:    }
        -: 1103:  else 	
        -: 1104:    {
        -: 1105:      //replace discarded card with last card in hand
     1047: 1106:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1107:      //set last card to -1
     1047: 1108:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1109:      //reduce number of cards in hand
     1047: 1110:      state->handCount[currentPlayer]--;
        -: 1111:    }
        -: 1112:	
     1047: 1113:  return 0;
        -: 1114:}
        -: 1115:
function gainCard called 8 returned 100% blocks executed 60%
        8: 1116:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1117:{
        -: 1118:  //Note: supplyPos is enum of choosen card
        -: 1119:	
        -: 1120:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1121:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -: 1122:    {
    #####: 1123:      return -1;
        -: 1124:    }
        -: 1125:	
        -: 1126:  //added card for [whoseTurn] current player:
        -: 1127:  // toFlag = 0 : add to discard
        -: 1128:  // toFlag = 1 : add to deck
        -: 1129:  // toFlag = 2 : add to hand
        -: 1130:
        8: 1131:  if (toFlag == 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -: 1132:    {
        8: 1133:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        8: 1134:      state->deckCount[player]++;
        -: 1135:    }
    #####: 1136:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1137:    {
    #####: 1138:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1139:      state->handCount[player]++;
        -: 1140:    }
        -: 1141:  else
        -: 1142:    {
    #####: 1143:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1144:      state->discardCount[player]++;
        -: 1145:    }
        -: 1146:	
        -: 1147:  //decrease number in supply pile
        8: 1148:  state->supplyCount[supplyPos]--;
        -: 1149:	 
        8: 1150:  return 0;
        -: 1151:}
        -: 1152:
function updateCoins called 66 returned 100% blocks executed 100%
       66: 1153:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1154:{
        -: 1155:  int i;
        -: 1156:	
        -: 1157:  //reset coin count
       66: 1158:  state->coins = 0;
        -: 1159:
        -: 1160:  //add coins for each Treasure card in player's hand
      396: 1161:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 330
branch  1 taken 66 (fallthrough)
        -: 1162:    {
      330: 1163:      if (state->hand[player][i] == copper)
branch  0 taken 132 (fallthrough)
branch  1 taken 198
        -: 1164:	{
      132: 1165:	  state->coins += 1;
        -: 1166:	}
      198: 1167:      else if (state->hand[player][i] == silver)
branch  0 taken 6 (fallthrough)
branch  1 taken 192
        -: 1168:	{
        6: 1169:	  state->coins += 2;
        -: 1170:	}
      192: 1171:      else if (state->hand[player][i] == gold)
branch  0 taken 6 (fallthrough)
branch  1 taken 186
        -: 1172:	{
        6: 1173:	  state->coins += 3;
        -: 1174:	}	
        -: 1175:    }	
        -: 1176:
        -: 1177:  //add bonus
       66: 1178:  state->coins += bonus;
        -: 1179:
       66: 1180:  return 0;
        -: 1181:}
        -: 1182:
function playAdventurer called 1056 returned 100% blocks executed 100%
     1056: 1183:void playAdventurer(int currentPlayer, struct gameState *state){
     1056: 1184:  int drawntreasure = 0;
     1056: 1185:  int z = 0;
        -: 1186:  int cardDrawn;
        -: 1187:  int temphand[MAX_HAND];
     1056: 1188:  int count = 0;
        -: 1189:
     6804: 1190:  while((drawntreasure<2) && (count < 500)){
branch  0 taken 4692 (fallthrough)
branch  1 taken 1056
branch  2 taken 4692
branch  3 taken 0 (fallthrough)
     4692: 1191:    count++;
     4692: 1192:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 60 (fallthrough)
branch  1 taken 4632
       60: 1193:      shuffle(currentPlayer, state);
call    0 returned 60
        -: 1194:    }
     4692: 1195:    drawCard(currentPlayer, state);
call    0 returned 4692
     4692: 1196:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     4692: 1197:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 3571 (fallthrough)
branch  1 taken 1121
branch  2 taken 3017 (fallthrough)
branch  3 taken 554
branch  4 taken 437 (fallthrough)
branch  5 taken 2580
     2112: 1198:      drawntreasure++;
        -: 1199:    else{
     2580: 1200:      temphand[z]=cardDrawn;
     2580: 1201:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2580: 1202:      z++;
        -: 1203:    } 
        -: 1204:  }
     3924: 1205:  while(z-1>0){
branch  0 taken 1812
branch  1 taken 1056 (fallthrough)
     1812: 1206:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1812: 1207:    z=z-1;
        -: 1208:  }
     1056: 1209:}
        -: 1210:
function playSmithy called 1040 returned 100% blocks executed 100%
     1040: 1211:void playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1212:  int i;
        -: 1213:
        -: 1214:  //+3 Cards
     4160: 1215:  for (i = 0; i < 3; i++)
branch  0 taken 3120
branch  1 taken 1040 (fallthrough)
        -: 1216:  {
     3120: 1217:    drawCard(currentPlayer, state);
call    0 returned 3120
        -: 1218:  }
        -: 1219:  
        -: 1220:  //discard card from hand
     1040: 1221:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 1040
     1040: 1222:}
        -: 1223:
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1224:void playFeast(int currentPlayer, struct gameState *state, int choice1){
        -: 1225:  int temphand[MAX_HAND];
        -: 1226:  int i, x;
        -: 1227:
        -: 1228:  //gain card with cost up to 5
        -: 1229:  //Backup hand
    #####: 1230:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1231:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1232:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1233:  }
        -: 1234:  //Backup hand
        -: 1235:
        -: 1236:  //Update Coins for Buy
    #####: 1237:  updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1238:
    #####: 1239:  x = 1;//Condition to loop on
    #####: 1240:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1241:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1242:      if (DEBUG)
        -: 1243:        printf("None of that card left, sorry!\n");
        -: 1244:
        -: 1245:      if (DEBUG){
        -: 1246:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1247:      }
        -: 1248:    }
    #####: 1249:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1250:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1251:
        -: 1252:      if (DEBUG){
        -: 1253:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1254:      }
        -: 1255:    }
        -: 1256:    else{
        -: 1257:      if (DEBUG){
        -: 1258:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1259:      }
        -: 1260:
    #####: 1261:      gainCard(choice1 + 1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1262:      x = 0;//No more buying cards
        -: 1263:
        -: 1264:      if (DEBUG){
        -: 1265:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1266:      }
        -: 1267:    }
        -: 1268:  }     
        -: 1269:
        -: 1270:  //Reset Hand
    #####: 1271:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1272:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1273:    temphand[i] = -1;
        -: 1274:  }
        -: 1275:  //Reset Hand
    #####: 1276:}
        -: 1277:
function playBaron called 0 returned 0% blocks executed 0%
    #####: 1278:void playBaron(int currentPlayer, struct gameState *state, int choice1){
    #####: 1279:  state->numBuys++;//Increase buys by 1!
    #####: 1280:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1281:    int p = 0;//Iterator for hand!
    #####: 1282:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1283:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1284:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1285:        state->coins = 4;//Add 4 coins to the amount of coins
    #####: 1286:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1287:        state->discardCount[currentPlayer]++;
    #####: 1288:        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1289:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1290:        }
    #####: 1291:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1292:        state->handCount[currentPlayer]--;
    #####: 1293:        card_not_discarded = 0;//Exit the loop
        -: 1294:      }
    #####: 1295:      else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1296:        if(DEBUG) {
        -: 1297:          printf("No estate cards in your hand, invalid choice\n");
        -: 1298:          printf("Must gain an estate if there are any\n");
        -: 1299:        }
    #####: 1300:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:          gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1302:          state->supplyCount[estate]--;//Decrement estates
    #####: 1303:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1304:            isGameOver(state);
call    0 never executed
        -: 1305:          }
        -: 1306:        }
    #####: 1307:        card_not_discarded = 0;//Exit the loop
        -: 1308:      }    
        -: 1309:      else{
    #####: 1310:        p++;//Next card
        -: 1311:      }
        -: 1312:    }
        -: 1313:  }        
        -: 1314:  else{
    #####: 1315:    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1317:      state->supplyCount[estate]--;//Decrement Estates
    #####: 1318:      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1319:        isGameOver(state);
call    0 never executed
        -: 1320:      }
        -: 1321:    }
        -: 1322:  }
    #####: 1323:}
        -: 1324:
function playRemodel called 0 returned 0% blocks executed 0%
    #####: 1325:int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -: 1326:  int j, i;
        -: 1327:
    #####: 1328:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1329:
    #####: 1330:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1331:  {
    #####: 1332:    return -1;
        -: 1333:  }
        -: 1334:
    #####: 1335:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1336:
        -: 1337:  //discard card from hand
    #####: 1338:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:
        -: 1340:  //discard trashed card
    #####: 1341:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1342:  {
    #####: 1343:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1344:    {
    #####: 1345:      discardCard(i, currentPlayer, state, 0);      
call    0 never executed
        -: 1346:    }
        -: 1347:  }
    #####: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
