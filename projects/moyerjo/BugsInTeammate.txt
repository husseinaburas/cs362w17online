BUGS IN TEAMMATE CODE
I was able to locate a number of bugs in Rachel’s code, including bugs I had already located during my own testing, as well as bugs that were native to her code.

playAdventurer Hand Positioning

As previously mentioned, the lack of a handPos found while trying to refactor my test code in order to test Rachel’s code meant that nothing was being done with the Adventurer card after it had been played.  It was staying in the hand and could have potentially been played multiple times each turn.

playAdventurer Temporary Hand Discard

When playAdventurer draws a card in order to fulfill drawing two treasures, if the card is not a treasure card it will move it to an array representing a temporary hand.  In Rachel’s refactored code there is an off by one error in the loop that moves cards from the temporary hand to the discard which unintentionally neglects to move the first card added to the temporary hand.

This bug was caught by both the card unit tests and the card random tests I had created for Adventurer.  While the immediate cause could not be determined by my code, the overall number of cards the player controlled (deck, discard, hand, played) changed after playing the Adventurer card.  As no cards should be trashed when in an Adventurer is played, there was clearly an error present in the code.  There were two likely culprits for this based on the Adventurer card - something unexpected was happening either with the cards being put into the temporary hand or when the cards in the temporary hand were moved to the discard.  

Upon viewing Rachel’s code it was readily apparent that the issue was an off by one error in her while statement, which should read while(z-1 >= 0) or while (z>0) if using a while statement.  The while loop that moved the cards was the only place where cards in the temporary hand were dealt with, and the discard function was not used in favor of directly moving the cards, which narrowed it down to a problem with the loop itself.



isGameOver Neglects Highest Supply Pile

From unit testing it was clear that the isGameOver function neglected the highest supply pile in checking if three piles were empty.  However, upon reviewing the code, it was apparent that based on the number, it actually neglected the Sea Hag card as well (25th in enum).  In order to adjust this, the comparison in the for loop checking the piles would need to read i <= 26, as there are 27 total cards in the enum (beginning at 0).


Smithy Trashes the Card After Played

Card and random testing determined that the overall hand count of the player changed.  This requires that either a new card was added/purchased unexpectedly or a card was trashed.  Reviewing the code there were no apparent opportunities to gain additional cards, and checking the flag of the discard it was set to trash the Smithy card rather than move to play/discard.

playAdventurer Contains Unnecessary Shuffles

Noticed while reviewing other errors in playAdventurer, the code shuffles an empty deck unnecessarily, claiming it is shuffling the discard.  This does nothing.

Smithy Card Test Results in Incorrect Number of Cards Drawn In Certain Circumstances

While testing Rachel’s Smithy card, I noticed I was getting errors in my testing that were showing failures when the deck and discard had fewer than three cards.  I recall that I had not had errors on these tests, and reviewing her code it appeared to be functioning correctly.  I noticed two errors in my testing code based on these results.  One was not setting the discard pile size to 2 for one of the tests, and one was having a -1 instead of a +1 in a comparison.  These two errors were found when trying to calculate handcounts after drawing cards with insufficient cards between the hand and deck.  The off by one error on my own Smithy version would have offset this in my testing.  After adjusting the test suite for the errors discovered, Rachel’s Smithy passed all the tests related to these specific problems.

Treasure Map Card Test Results in Incorrect Handling of Only One Treasure Map

If there is only one Treasure Map in hand, it does not trash that Treasure Map, instead it just remains in hand.  This was determined from the card testing and from previous testing under earlier assignments.  These two tests were immediately outputted on failure, making it easy to track.

scoreFor Doesn’t Accurately Calculate Garden Scores

Garden Scores that do not round to 0 are not accurately counted.  It counts the total number of Curse cards rather than total number of cards.  This was found in the unit tests as well as from previous testing under earlier assignments.  When it was testing instances where gardens were in the deck, it was not acting as expected - a quick review of the code made the result apparent.
