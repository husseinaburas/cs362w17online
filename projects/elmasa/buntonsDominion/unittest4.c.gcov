        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Method fullDeckCount
        -:    3: *  --------------------
        -:    4: * unittest4: unittest4.c dominion.o rngs.o
        -:    5: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include "asserttrue.h"
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:#define CARDORFUNCTIONTOTEST "fullDeckCount"
        -:   20:#define GAMEISOVER 1
        -:   21:
function main called 1 returned 100% blocks executed 98%
        -:   22:int main() {
        -:   23:
        -:   24:    /****************************** Main Setup ******************************/
        -:   25:
        1:   26:    int constantSeedForRandomSeed = 1;
        1:   27:    int numPlayer = 2;
        -:   28:    struct gameState NewGameStateStruct, OldVersionOfGameStruct;
        -:   29:
        1:   30:    memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
        1:   31:    memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   32:
        1:   33:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   34:        sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:    // initialize a game state and player cards
        1:   37:    initializeGame(numPlayer, k, constantSeedForRandomSeed, &NewGameStateStruct);
        -:   38:    //memcpy(&NewGameStateStruct, &OldVersionOfGameStruct, sizeof(struct gameState)); // copy game state to have before - after comparision
        -:   39:
        -:   40:
        1:   41:    printf("----------------- Testing: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   42:
        -:   43:    // Did Any Test Fail Variable
        1:   44:    int atLeast1TestFailed = 0;
        -:   45:
        -:   46:
        -:   47:    //Invariable Conditions for all Tests
        1:   48:    int fillDeckAmount = 4;
        -:   49:
        -:   50:
        -:   51:    // ----------- TEST 1: Test count of copper in entire deck --------------
        -:   52:    //Invariable Conditions for this Test
        1:   53:    int indexCurrentPlayer = 0;
        -:   54:
        1:   55:    printf("TEST 1: Test count of copper in entire deck \n");
        -:   56:    // copy the game state to compare (before + expected) with after
        1:   57:    OldVersionOfGameStruct = NewGameStateStruct;
        -:   58:
        -:   59:    /**** Call Func ****/
        1:   60:    printf("Filling All Deck With All Copper, 0 Estate\n");
        -:   61:
        1:   62:    memset(NewGameStateStruct.deck, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:   63:    NewGameStateStruct.deckCount[indexCurrentPlayer] = fillDeckAmount;
       10:   64:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:   65:        NewGameStateStruct.deck[indexCurrentPlayer][i] = copper;
        4:   66:    }
        1:   67:    memset(NewGameStateStruct.hand, 0, sizeof(int)*MAX_HAND); // Reset deck
        1:   68:    NewGameStateStruct.handCount[indexCurrentPlayer] = fillDeckAmount;
       10:   69:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:   70:        NewGameStateStruct.hand[indexCurrentPlayer][i] = copper;
        4:   71:    }
        1:   72:    memset(NewGameStateStruct.discard, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:   73:    NewGameStateStruct.discardCount[indexCurrentPlayer] = fillDeckAmount;
       10:   74:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:   75:        NewGameStateStruct.discard[indexCurrentPlayer][i] = copper;
        4:   76:    }
        -:   77:
        -:   78:
        -:   79:    // copy the game state to compare (before + expected) with after
        1:   80:    OldVersionOfGameStruct = NewGameStateStruct;
        1:   81:    printf("Copper Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct), fillDeckAmount*3);
        -:   82:
        -:   83:    /**** Assert Results ****/
        1:   84:    asserttrue(fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct) == fillDeckAmount*3, &atLeast1TestFailed);
        -:   85:
        1:   86:    printf("Estate Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct), fillDeckAmount*0);
        1:   87:    asserttrue(fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct) == fillDeckAmount*0, &atLeast1TestFailed);
        -:   88:
        -:   89:    /**** End Assert Results ****/
        -:   90:
        -:   91:
        -:   92:
        -:   93:
        -:   94:
        -:   95:
        -:   96:    // ----------- TEST 2: Test count of half copper, half estate in entire deck --------------
        -:   97:    //Invariable Conditions for this Test
        -:   98:
        1:   99:    printf("TEST 2: Test count of half copper, half estate in entire deck \n");
        -:  100:    // copy the game state to compare (before + expected) with after
        1:  101:    OldVersionOfGameStruct = NewGameStateStruct;
        -:  102:
        -:  103:    /**** Call Func ****/
        1:  104:    printf("Filling All Deck With 6 Copper, 6 Estate\n");
        -:  105:
        1:  106:    memset(NewGameStateStruct.deck, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:  107:    NewGameStateStruct.deckCount[indexCurrentPlayer] = fillDeckAmount;
       10:  108:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  109:        if (i % 2 == 0) {
branch  0 taken 50%
branch  1 taken 50%
        2:  110:            NewGameStateStruct.deck[indexCurrentPlayer][i] = estate;
        2:  111:        } else {
        2:  112:            NewGameStateStruct.deck[indexCurrentPlayer][i] = copper;
        -:  113:        }
        4:  114:    }
        1:  115:    memset(NewGameStateStruct.hand, 0, sizeof(int)*MAX_HAND); // Reset deck
        1:  116:    NewGameStateStruct.handCount[indexCurrentPlayer] = fillDeckAmount;
       10:  117:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  118:        if (i % 2 == 0) {
branch  0 taken 50%
branch  1 taken 50%
        2:  119:            NewGameStateStruct.hand[indexCurrentPlayer][i] = estate;
        2:  120:        } else {
        2:  121:            NewGameStateStruct.hand[indexCurrentPlayer][i] = copper;
        4:  122:        }    }
        1:  123:    memset(NewGameStateStruct.discard, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:  124:    NewGameStateStruct.discardCount[indexCurrentPlayer] = fillDeckAmount;
       10:  125:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  126:        if (i % 2 == 0) {
branch  0 taken 50%
branch  1 taken 50%
        2:  127:            NewGameStateStruct.discard[indexCurrentPlayer][i] = estate;
        2:  128:        } else {
        2:  129:            NewGameStateStruct.discard[indexCurrentPlayer][i] = copper;
        4:  130:        }    }
        -:  131:
        -:  132:
        -:  133:    // copy the game state to compare (before + expected) with after
        1:  134:    OldVersionOfGameStruct = NewGameStateStruct;
        1:  135:    printf("Copper Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct), (fillDeckAmount*3)/2);
        -:  136:
        -:  137:    /**** Assert Results ****/
        1:  138:    asserttrue(fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct) == (fillDeckAmount*3)/2, &atLeast1TestFailed);
        -:  139:
        1:  140:    printf("Estate Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct), (fillDeckAmount*3)/2);
        1:  141:    asserttrue(fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct) == (fillDeckAmount*3)/2, &atLeast1TestFailed);
        -:  142:
        -:  143:    /**** End Assert Results ****/
        -:  144:    
        -:  145:    
        -:  146:    // ----------- TEST 3: Test count of 2/3 copper only in discard & hand, 1/3 estate only in deck --------------
        -:  147:    //Invariable Conditions for this Test
        -:  148:    
        1:  149:    printf("TEST 3: Test count of 2/3 copper only in discard & hand, 1/3 estate only in deck \n");
        -:  150:    // copy the game state to compare (before + expected) with after
        1:  151:    OldVersionOfGameStruct = NewGameStateStruct;
        -:  152:    
        -:  153:    /**** Call Func ****/
        1:  154:    printf("Filling All Deck With 8 Copper only in discard & hand, 4 Estate only in deck\n");
        -:  155:    
        1:  156:    memset(NewGameStateStruct.deck, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:  157:    NewGameStateStruct.deckCount[indexCurrentPlayer] = fillDeckAmount;
       10:  158:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  159:        NewGameStateStruct.deck[indexCurrentPlayer][i] = estate;
        4:  160:    }
        1:  161:    memset(NewGameStateStruct.hand, 0, sizeof(int)*MAX_HAND); // Reset deck
        1:  162:    NewGameStateStruct.handCount[indexCurrentPlayer] = fillDeckAmount;
       10:  163:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  164:        NewGameStateStruct.hand[indexCurrentPlayer][i] = copper;
        4:  165:    }
        1:  166:    memset(NewGameStateStruct.discard, 0, sizeof(int)*MAX_DECK); // Reset deck
        1:  167:    NewGameStateStruct.discardCount[indexCurrentPlayer] = fillDeckAmount;
       10:  168:    for (int i = 0; i < fillDeckAmount; i++) {
branch  0 taken 80%
branch  1 taken 20%
        4:  169:        NewGameStateStruct.discard[indexCurrentPlayer][i] = copper;
        4:  170:    }
        -:  171:    
        -:  172:    // copy the game state to compare (before + expected) with after
        1:  173:    OldVersionOfGameStruct = NewGameStateStruct;
        1:  174:    printf("Copper Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct), (fillDeckAmount*2));
        -:  175:    
        -:  176:    /**** Assert Results ****/
        1:  177:    asserttrue(fullDeckCount(indexCurrentPlayer, copper, &NewGameStateStruct) == (fillDeckAmount*2), &atLeast1TestFailed);
        -:  178:    
        1:  179:    printf("Estate Count = %d, expected = %d\n", fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct), (fillDeckAmount));
        1:  180:    asserttrue(fullDeckCount(indexCurrentPlayer, estate, &NewGameStateStruct) == (fillDeckAmount*1), &atLeast1TestFailed);
        -:  181:    
        -:  182:    /**** End Assert Results ****/
        -:  183:
        -:  184:
        -:  185:
        -:  186:
        1:  187:    if (atLeast1TestFailed == 0) {
branch  0 taken 100%
branch  1 taken 0%
        1:  188:        printf("All TESTS PASSED...\n");
        1:  189:    }else{
    #####:  190:        printf("All TESTS DID NOT PASS X...\n");
        -:  191:    }
        1:  192:    return 0;
        -:  193:}
