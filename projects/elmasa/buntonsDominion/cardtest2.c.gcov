        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Card Village
        -:    3: *  ------------
        -:    4: * cardtest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest2 -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include "asserttrue.h"
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:#define CARDORFUNCTIONTOTEST "Village"
        -:   20:
function main called 1 returned 100% blocks executed 80%
        -:   21:int main() {
        -:   22:
        -:   23:    /****************************** Main Setup ******************************/
        -:   24:
        1:   25:    int constantSeedForRandomSeed = 1;
        1:   26:    int numPlayer = 2;
        -:   27:    struct gameState NewGameStateStruct, OldVersionOfGameStruct;
        -:   28:
        1:   29:    memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
        1:   30:    memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   31:
        1:   32:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   33:        sea_hag, tribute, smithy, council_room};
        -:   34:
        -:   35:    // initialize a game state and player cards
        1:   36:    initializeGame(numPlayer, k, constantSeedForRandomSeed, &NewGameStateStruct);
        -:   37:    //memcpy(&NewGameStateStruct, &OldVersionOfGameStruct, sizeof(struct gameState)); // copy game state to have before - after comparision
        -:   38:
        -:   39:
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   41:
        -:   42:    // Did Any Test Fail Variable
        1:   43:    int atLeast1TestFailed = 0;
        -:   44:
        -:   45:
        -:   46:    //Invariable Conditions for all Tests
        1:   47:    int expectedNumCardDrawn = 1;
        1:   48:    int expectedNumCardDiscarded = 1;
        1:   49:    int indexOfCardBeingPlayed = 0;
        1:   50:    int expectedNumActionsIncrease = 2;
        -:   51:
        -:   52:    // ----------- TEST 1: Test playVillage when deckCount is undepleted --------------
        -:   53:    //Invariable Conditions for this Test
        1:   54:    int indexCurrentPlayer = 0;
        -:   55:
        1:   56:    printf("TEST 1: Test playVillage when deckCount is undepleted \n");
        -:   57:    // copy the game state to compare (before + expected) with after
        1:   58:    OldVersionOfGameStruct = NewGameStateStruct;
        -:   59:
        -:   60:    /**** Call Func ****/
        1:   61:    printf("Testing Successful Return of 0 for calling Method\n");
        1:   62:    asserttrue(playVillage(&NewGameStateStruct, indexOfCardBeingPlayed) == 0, &atLeast1TestFailed);
        -:   63:    /**** End Call Func ****/
        -:   64:    /**** Assert Results ****/
        1:   65:    printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded);
        1:   66:    asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded, &atLeast1TestFailed);
        -:   67:
        1:   68:    printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + expectedNumCardDiscarded);
        1:   69:    asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] +  expectedNumCardDiscarded, &atLeast1TestFailed);
        -:   70:
        1:   71:    printf("numActions count = %d, expected = %d\n", NewGameStateStruct.numActions, OldVersionOfGameStruct.numActions + expectedNumActionsIncrease);
        1:   72:    asserttrue(NewGameStateStruct.numActions == OldVersionOfGameStruct.numActions +  expectedNumActionsIncrease, &atLeast1TestFailed);
        -:   73:    /**** End Assert Results ****/
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        -:   78:    // ----------- TEST 2: Test playVillage when deckCount is depleted --------------
        -:   79:    //Invariable Conditions for this Test
        1:   80:     indexCurrentPlayer = 0;
        1:   81:    NewGameStateStruct.deckCount[indexCurrentPlayer] = 0;
        -:   82:
        1:   83:    printf("TEST 2: Test playVillage when deckCount is depleted \n");
        -:   84:    // copy the game state to compare (before + expected) with after
        1:   85:    OldVersionOfGameStruct = NewGameStateStruct;
        -:   86:    
        -:   87:    /**** Call Func ****/
        1:   88:    printf("Testing Successful Return of 0 for calling Method\n");
        1:   89:    asserttrue(playVillage(&NewGameStateStruct, indexOfCardBeingPlayed) == 0, &atLeast1TestFailed);
        -:   90:    /**** End Call Func ****/
        -:   91:    /**** Assert Results ****/
        1:   92:    printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded);
        1:   93:    asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded, &atLeast1TestFailed);
        -:   94:    
        1:   95:    printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + expectedNumCardDiscarded);
        1:   96:    asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] +  expectedNumCardDiscarded, &atLeast1TestFailed);
        -:   97:    
        1:   98:    printf("numActions count = %d, expected = %d\n", NewGameStateStruct.numActions, OldVersionOfGameStruct.numActions + expectedNumActionsIncrease);
        1:   99:    asserttrue(NewGameStateStruct.numActions == OldVersionOfGameStruct.numActions +  expectedNumActionsIncrease, &atLeast1TestFailed);
        -:  100:    /**** End Assert Results ****/
        -:  101:
        -:  102:
        -:  103:
        -:  104:
        -:  105:
        1:  106:    if (atLeast1TestFailed == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  107:        printf("All TESTS PASSED...\n");
    #####:  108:    }else{
        1:  109:        printf("All TESTS DID NOT PASS X...\n");
        -:  110:    }
        1:  111:    return 0;
        -:  112:}
