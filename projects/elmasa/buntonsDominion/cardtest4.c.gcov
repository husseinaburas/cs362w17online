        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Card Adventurer
        -:    3: *  ---------------
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include "asserttrue.h"
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:#define CARDORFUNCTIONTOTEST "Adventurer"
        -:   20:
function main called 1 returned 100% blocks executed 87%
        -:   21:int main() {
        -:   22:
        -:   23:    /****************************** Main Setup ******************************/
        -:   24:
        1:   25:    int constantSeedForRandomSeed = 1;
        1:   26:    int numPlayer = 2;
        -:   27:    struct gameState NewGameStateStruct, OldVersionOfGameStruct;
        -:   28:
        1:   29:    memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
        1:   30:    memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   31:
        1:   32:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   33:        sea_hag, tribute, smithy, council_room};
        -:   34:
        -:   35:    // initialize a game state and player cards
        1:   36:    initializeGame(numPlayer, k, constantSeedForRandomSeed, &NewGameStateStruct);
        -:   37:    //memcpy(&NewGameStateStruct, &OldVersionOfGameStruct, sizeof(struct gameState)); // copy game state to have before - after comparision
        -:   38:
        -:   39:
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   41:
        -:   42:    // Did Any Test Fail Variable
        1:   43:    int atLeast1TestFailed = 0;
        -:   44:
        -:   45:
        -:   46:    //Invariable Conditions for all Tests
        1:   47:    int expectedNumCardAddedToHand = 2;
        -:   48:
        -:   49:    // ----------- TEST 1: Test playAdventurer with Treasure Cards --------------
        -:   50:    //Invariable Conditions for this Test
        1:   51:    int indexCurrentPlayer = 0;
        -:   52:
        1:   53:    printf("TEST 1: Test playAdventurer with Treasure Cards\n");
        -:   54:    // copy the game state to compare (before + expected) with after
        1:   55:    OldVersionOfGameStruct = NewGameStateStruct;
        -:   56:
        -:   57:
        -:   58:    // Capture number of Cards in Deck before first 2 Treasure Cards (will be discarded)
        1:   59:    int countTreasureCards = 0;
        1:   60:    int countCardsRevealedBefore2TreasureCardsRevealed = 0;
        -:   61:
        8:   62:    for (int i = 0; i < NewGameStateStruct.deckCount[indexCurrentPlayer]; i++) {
branch  0 taken 100%
branch  1 taken 0%
        8:   63:        if (NewGameStateStruct.deck[indexCurrentPlayer][i] == copper || NewGameStateStruct.deck[indexCurrentPlayer][i] == silver || NewGameStateStruct.deck[indexCurrentPlayer][i] == gold ) {
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        2:   64:            countTreasureCards++;
        2:   65:            if (countTreasureCards >= 2) {
branch  0 taken 50%
branch  1 taken 50%
        1:   66:                break;      // Break out of loop once found 2 Treasure cards
        -:   67:            }
        -:   68:
        1:   69:        } else {
        2:   70:            countCardsRevealedBefore2TreasureCardsRevealed++;
        -:   71:        }
        3:   72:    }
        -:   73:
        -:   74:    // Afterward: • deckCount -= countCardsRevealedBefore2TreasureCardsRevealed
        -:   75:    // Afterward: • discardCount += countCardsRevealedBefore2TreasureCardsRevealed
        -:   76:    // Afterward: • handCount += 2
        -:   77:
        -:   78:    /**** Call Func ****/
        1:   79:    printf("Testing Successful Return of 0 for calling Method\n");
        1:   80:    int resultPlayAdventurer = playAdventurer(&NewGameStateStruct);
        1:   81:    asserttrue(resultPlayAdventurer == 0, &atLeast1TestFailed);
        -:   82:    /**** End Call Func ****/
        -:   83:    /**** Assert Results ****/
        1:   84:    printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardAddedToHand);
        1:   85:    asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardAddedToHand, &atLeast1TestFailed);
        -:   86:
        1:   87:    printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + countCardsRevealedBefore2TreasureCardsRevealed);
        1:   88:    asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] - countCardsRevealedBefore2TreasureCardsRevealed, &atLeast1TestFailed);
        -:   89:
        1:   90:    printf("deck count = %d, expected = %d\n", NewGameStateStruct.deckCount[indexCurrentPlayer], OldVersionOfGameStruct.deckCount[indexCurrentPlayer] + countCardsRevealedBefore2TreasureCardsRevealed);
        1:   91:    asserttrue(NewGameStateStruct.deckCount[indexCurrentPlayer] == OldVersionOfGameStruct.deckCount[indexCurrentPlayer] -  countCardsRevealedBefore2TreasureCardsRevealed, &atLeast1TestFailed);
        -:   92:    /**** End Assert Results ****/
        -:   93:
        -:   94:
        -:   95:    // ----------- TEST 2: Test playAdventurer with No Treasure Cards in Deck --------------
        -:   96:    //Invariable Conditions for this Test
        1:   97:    indexCurrentPlayer = 0;
        -:   98:    
        1:   99:    printf("TEST 2: Test playAdventurer with No Treasure Cards in Deck \n");
        -:  100:    // copy the game state to compare (before + expected) with after
        1:  101:    NewGameStateStruct = OldVersionOfGameStruct;
        -:  102:    
        -:  103:    
        -:  104:    // Capture number of Cards in Deck before first 2 Treasure Cards (will be discarded)
        1:  105:    countTreasureCards = 0;
        1:  106:    countCardsRevealedBefore2TreasureCardsRevealed = 0;
        -:  107:    
        -:  108:    
     1002:  109:    for (int i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  110:    {
      500:  111:        NewGameStateStruct.deck[indexCurrentPlayer][i] = estate;
      500:  112:    }
        -:  113:    
       12:  114:    for (int i = 0; i < NewGameStateStruct.deckCount[indexCurrentPlayer]; i++) {
branch  0 taken 83%
branch  1 taken 17%
       15:  115:        if (NewGameStateStruct.deck[indexCurrentPlayer][i] == copper || NewGameStateStruct.deck[indexCurrentPlayer][i] == silver || NewGameStateStruct.deck[indexCurrentPlayer][i] == gold ) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
    #####:  116:            countTreasureCards++;
    #####:  117:            if (countTreasureCards >= 2) {
branch  0 never executed
branch  1 never executed
    #####:  118:                break;      // Break out of loop once found 2 Treasure cards
        -:  119:            }
        -:  120:            
    #####:  121:        } else {
        5:  122:            countCardsRevealedBefore2TreasureCardsRevealed++;
        -:  123:        }
        5:  124:    }
        -:  125:    
        -:  126:    // Afterward: • deckCount -= countCardsRevealedBefore2TreasureCardsRevealed
        -:  127:    // Afterward: • discardCount += countCardsRevealedBefore2TreasureCardsRevealed
        -:  128:    // Afterward: • handCount += 2
        -:  129:    
        -:  130:    /**** Call Func ****/
        1:  131:    printf("Testing Successful Return of 0 for calling Method\n");
        1:  132:    resultPlayAdventurer = playAdventurer(&NewGameStateStruct);
        1:  133:    asserttrue(resultPlayAdventurer == 0, &atLeast1TestFailed);
        -:  134:    /**** End Call Func ****/
        -:  135:    /**** Assert Results ****/
        1:  136:    printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardAddedToHand);
        1:  137:    asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardAddedToHand, &atLeast1TestFailed);
        -:  138:    
        1:  139:    printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + countCardsRevealedBefore2TreasureCardsRevealed);
        1:  140:    asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] - countCardsRevealedBefore2TreasureCardsRevealed, &atLeast1TestFailed);
        -:  141:    
        1:  142:    printf("deck count = %d, expected = %d\n", NewGameStateStruct.deckCount[indexCurrentPlayer], OldVersionOfGameStruct.deckCount[indexCurrentPlayer] + countCardsRevealedBefore2TreasureCardsRevealed);
        1:  143:    asserttrue(NewGameStateStruct.deckCount[indexCurrentPlayer] == OldVersionOfGameStruct.deckCount[indexCurrentPlayer] -  countCardsRevealedBefore2TreasureCardsRevealed, &atLeast1TestFailed);
        -:  144:    /**** End Assert Results ****/
        -:  145:
        -:  146:
        -:  147:
        1:  148:    if (atLeast1TestFailed == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  149:        printf("All TESTS PASSED...\n");
    #####:  150:    }else{
        1:  151:        printf("All TESTS DID NOT PASS X...\n");
        -:  152:    }
        1:  153:    return 0;
        -:  154:}
