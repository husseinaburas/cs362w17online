        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Method isGameOver
        -:    3: *  -----------------
        -:    4: * unittest3: unittest3.c dominion.o rngs.o
        -:    5: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include "asserttrue.h"
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:#define CARDORFUNCTIONTOTEST "isGameOver"
        -:   20:#define GAMEISOVER 1
        -:   21:
function main called 1 returned 100% blocks executed 80%
        -:   22:int main() {
        -:   23:
        -:   24:    /****************************** Main Setup ******************************/
        -:   25:
        1:   26:    int constantSeedForRandomSeed = 1;
        1:   27:    int numPlayer = 2;
        -:   28:    struct gameState NewGameStateStruct, OldVersionOfGameStruct;
        -:   29:
        1:   30:    memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
        1:   31:    memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   32:
        1:   33:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   34:        sea_hag, tribute, smithy, council_room};
        -:   35:
        -:   36:    // initialize a game state and player cards
        1:   37:    initializeGame(numPlayer, k, constantSeedForRandomSeed, &NewGameStateStruct);
        -:   38:    //memcpy(&NewGameStateStruct, &OldVersionOfGameStruct, sizeof(struct gameState)); // copy game state to have before - after comparision
        -:   39:
        -:   40:
        1:   41:    printf("----------------- Testing: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   42:
        -:   43:    // Did Any Test Fail Variable
        1:   44:    int atLeast1TestFailed = 0;
        -:   45:
        -:   46:    // ----------- TEST 1: Test isGameOver with No Depleted Pile --------------
        -:   47:    //Invariable Conditions for this Test
        -:   48:    
        1:   49:    printf("TEST 1: Test isGameOver with No Depleted Pile \n");
        -:   50:    // copy the game state to compare (before + expected) with after
        1:   51:    OldVersionOfGameStruct = NewGameStateStruct;
        -:   52:    
        -:   53:    /**** Call Func ****/
        1:   54:    printf("Depleting Province Pile, Should make game over\n");
        -:   55:    // copy the game state to compare (before + expected) with after
        1:   56:    OldVersionOfGameStruct = NewGameStateStruct;
        1:   57:    int isGameOverResult = isGameOver(&NewGameStateStruct);
        1:   58:    printf("is Game Over? = %d, expected = %d\n", isGameOverResult, !GAMEISOVER);
        -:   59:    
        -:   60:    /**** Assert Results ****/
        1:   61:    asserttrue(isGameOverResult == !GAMEISOVER, &atLeast1TestFailed);
        -:   62:    
        1:   63:    printf("Province Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[province], OldVersionOfGameStruct.supplyCount[province]);
        1:   64:    asserttrue(NewGameStateStruct.supplyCount[province] == OldVersionOfGameStruct.supplyCount[province], &atLeast1TestFailed);
        -:   65:    
        1:   66:    printf("Card Index 0 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[0]], OldVersionOfGameStruct.supplyCount[k[0]]);
        1:   67:    asserttrue(NewGameStateStruct.supplyCount[k[0]] == OldVersionOfGameStruct.supplyCount[k[0]], &atLeast1TestFailed);
        -:   68:    
        1:   69:    printf("Card Index 1 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[1]], OldVersionOfGameStruct.supplyCount[k[1]]);
        1:   70:    asserttrue(NewGameStateStruct.supplyCount[k[1]] == OldVersionOfGameStruct.supplyCount[k[1]], &atLeast1TestFailed);
        -:   71:    
        1:   72:    printf("Card Index 9 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[9]], OldVersionOfGameStruct.supplyCount[k[9]]);
        1:   73:    asserttrue(NewGameStateStruct.supplyCount[k[9]] == OldVersionOfGameStruct.supplyCount[k[9]], &atLeast1TestFailed);
        -:   74:    /**** End Assert Results ****/
        -:   75:
        -:   76:    
        -:   77:    
        -:   78:    
        -:   79:    
        -:   80:    
        -:   81:    
        -:   82:    
        -:   83:    // ----------- TEST 2: Test isGameOver with Depleted Province Pile --------------
        -:   84:    //Invariable Conditions for this Test
        -:   85:
        1:   86:    printf("TEST 2: Test isGameOver with Depleted Province Pile \n");
        -:   87:    // copy the game state to compare (before + expected) with after
        1:   88:    NewGameStateStruct = OldVersionOfGameStruct;
        -:   89:
        -:   90:    /**** Call Func ****/
        1:   91:    printf("Depleting Province Pile, Should make game over\n");
        1:   92:    NewGameStateStruct.supplyCount[province] = 0;
        -:   93:    // copy the game state to compare (before + expected) with after
        1:   94:    OldVersionOfGameStruct = NewGameStateStruct;
        1:   95:    isGameOverResult = isGameOver(&NewGameStateStruct);
        1:   96:    printf("is Game Over? = %d, expected = %d\n", isGameOverResult, GAMEISOVER);
        -:   97:
        -:   98:    /**** Assert Results ****/
        1:   99:    asserttrue(isGameOver(&NewGameStateStruct) == GAMEISOVER, &atLeast1TestFailed);
        -:  100:
        1:  101:    printf("Province Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[province], OldVersionOfGameStruct.supplyCount[province]);
        1:  102:    asserttrue(NewGameStateStruct.supplyCount[province] == OldVersionOfGameStruct.supplyCount[province], &atLeast1TestFailed);
        -:  103:    
        1:  104:    printf("Card Index 0 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[0]], OldVersionOfGameStruct.supplyCount[k[0]]);
        1:  105:    asserttrue(NewGameStateStruct.supplyCount[k[0]] == OldVersionOfGameStruct.supplyCount[k[0]], &atLeast1TestFailed);
        -:  106:    
        1:  107:    printf("Card Index 1 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[1]], OldVersionOfGameStruct.supplyCount[k[1]]);
        1:  108:    asserttrue(NewGameStateStruct.supplyCount[k[1]] == OldVersionOfGameStruct.supplyCount[k[1]], &atLeast1TestFailed);
        -:  109:    
        1:  110:    printf("Card Index 9 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[9]], OldVersionOfGameStruct.supplyCount[k[9]]);
        1:  111:    asserttrue(NewGameStateStruct.supplyCount[k[9]] == OldVersionOfGameStruct.supplyCount[k[9]], &atLeast1TestFailed);
        -:  112:
        -:  113:    /**** End Assert Results ****/
        -:  114:
        -:  115:    
        -:  116:    
        -:  117:    
        -:  118:    
        -:  119:    
        -:  120:    
        -:  121:    
        -:  122:    
        -:  123:    
        -:  124:    // ----------- TEST 3: Test isGameOver with Boundry Card Piles 0, 1, and 9 --------------
        -:  125:    //Invariable Conditions for this Test
        -:  126:
        1:  127:    printf("TEST 2: Test isGameOver with Boundry Card Piles 0, 1, and 9\n");
        -:  128:    // copy the game state to compare (before + expected) with after
        1:  129:    NewGameStateStruct = OldVersionOfGameStruct;
        -:  130:
        -:  131:    /**** Call Func ****/
        1:  132:    printf("Depleting 3 OTHER Piles, Should make game over\n");
        1:  133:    NewGameStateStruct.supplyCount[province] = 4;
        1:  134:    NewGameStateStruct.supplyCount[k[0]] = 0;
        1:  135:    NewGameStateStruct.supplyCount[k[1]] = 0;
        1:  136:    NewGameStateStruct.supplyCount[k[9]] = 0;
        -:  137:
        -:  138:    // copy the game state to compare (before + expected) with after
        1:  139:    OldVersionOfGameStruct = NewGameStateStruct;
        1:  140:    isGameOverResult =isGameOver(&NewGameStateStruct);
        1:  141:    printf("is Game Over? = %d, expected = %d\n", isGameOverResult, GAMEISOVER);
        -:  142:
        -:  143:    /**** Assert Results ****/
        1:  144:    asserttrue(isGameOverResult == GAMEISOVER, &atLeast1TestFailed);
        -:  145:
        1:  146:    printf("Province Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[province], OldVersionOfGameStruct.supplyCount[province]);
        1:  147:    asserttrue(NewGameStateStruct.supplyCount[province] == OldVersionOfGameStruct.supplyCount[province], &atLeast1TestFailed);
        -:  148:
        1:  149:    printf("Card Index 0 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[0]], OldVersionOfGameStruct.supplyCount[k[0]]);
        1:  150:    asserttrue(NewGameStateStruct.supplyCount[k[0]] == OldVersionOfGameStruct.supplyCount[k[0]], &atLeast1TestFailed);
        -:  151:
        1:  152:    printf("Card Index 1 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[1]], OldVersionOfGameStruct.supplyCount[k[1]]);
        1:  153:    asserttrue(NewGameStateStruct.supplyCount[k[1]] == OldVersionOfGameStruct.supplyCount[k[1]], &atLeast1TestFailed);
        -:  154:
        1:  155:    printf("Card Index 9 Supply Count = %d, expected = %d\n", NewGameStateStruct.supplyCount[k[9]], OldVersionOfGameStruct.supplyCount[k[9]]);
        1:  156:    asserttrue(NewGameStateStruct.supplyCount[k[9]] == OldVersionOfGameStruct.supplyCount[k[9]], &atLeast1TestFailed);
        -:  157:
        -:  158:    /**** End Assert Results ****/
        -:  159:
        -:  160:
        -:  161:
        -:  162:
        -:  163:
        -:  164:
        1:  165:    if (atLeast1TestFailed == 0) {
branch  0 taken 100%
branch  1 taken 0%
        1:  166:        printf("All TESTS PASSED...\n");
        1:  167:    }else{
    #####:  168:        printf("All TESTS DID NOT PASS X...\n");
        -:  169:    }
        1:  170:    return 0;
        -:  171:}
