        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Method updateCoins
        -:    3: *  ------------------
        -:    4: * Template provided by Ali Aburas
        -:    5: *
        -:    6: * unittest1: unittest1.c dominion.o rngs.o
        -:    7: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:    8: * -----------------------------------------------------------------------
        -:    9: */
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include "asserttrue.h"
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:
        -:   19:// set NOISY_TEST to 0 to remove printfs from output
        -:   20:#define NOISY_TEST 1
        -:   21:#define CARDORFUNCTIONTOTEST "updateCoins"
        -:   22:
function main called 1 returned 100% blocks executed 97%
        -:   23:int main() {
        1:   24:    int constantSeedForRandomSeed = 1;
        1:   25:    int numPlayer = 2;
        1:   26:    int maxBonus = 10;
        1:   27:    int arrayOfKindomCardsAvailableDuringGamePlay[10] = {adventurer, council_room, feast, gardens, mine
        -:   28:        , remodel, smithy, village, baron, great_hall};
        -:   29:    struct gameState NewGameStateStruct;
        -:   30:    struct gameState OldVersionOfGameStruct;
        -:   31:    
        1:   32:    int maxHandCount = 5;
        -:   33:    
        -:   34:    // arrays of all coppers, silvers, and golds
        -:   35:    int coppers[MAX_HAND];
        -:   36:    int silvers[MAX_HAND];
        -:   37:    int golds[MAX_HAND];
        -:   38:    int estates[MAX_HAND];
        -:   39:    
        -:   40:    int i;
     1002:   41:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   42:    {
      500:   43:        coppers[i] = copper;        // Copper Treasure Card (Should give value of 1)
      500:   44:        silvers[i] = silver;        // Silver Treasure Card (Should give value of 2)
      500:   45:        golds[i] = gold;            // Gold Treasure Card (Should give value of 3)
      500:   46:        estates[i] = estate;        // Non Treasure Card (Should give value of 0)
      500:   47:    }
        -:   48:    
        1:   49:    printf("----------------- Testing: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   50:    
        -:   51:    // Did Any Test Fail Variable
        1:   52:    int atLeast1TestFailed = 0;
        -:   53:    
        -:   54:    int currentPlayer, handCount, bonus;
        -:   55:    
        -:   56:    /* LOOP OVER EACH OF THE 2 PLAYERS*/
        6:   57:    for (currentPlayer = 0; currentPlayer < numPlayer; currentPlayer++)
branch  0 taken 67%
branch  1 taken 33%
        -:   58:    {
        -:   59:        /* LOOP OVER THE NUMBER OF UNUSED CARDS THE CURRENT PLAYER CURRENTLY HAS IN HIS HAND */
       24:   60:        for (handCount = 1; handCount <= maxHandCount; handCount++)
branch  0 taken 83%
branch  1 taken 17%
        -:   61:        {
        -:   62:            /* LOOP OVER ALL POSSIBLE BONUS AMOUNTS FOR THE GAME */
      240:   63:            for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8%
        -:   64:            {
        -:   65:                
        -:   66:                
        -:   67:                
        -:   68:                /***************************************************************************
        -:   69:                 Init the test for this loop
        -:   70:                 ***************************************************************************/
        -:   71:#if (NOISY_TEST == 1)
      110:   72:                printf("Test player %d with %d treasure card(s) and %d bonus.\n", currentPlayer, handCount, bonus);
        -:   73:#endif
      110:   74:                memset(&NewGameStateStruct, 23, sizeof(struct gameState));  // clear the game state
      110:   75:                memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   76:                
      110:   77:                asserttrue(initializeGame(numPlayer, arrayOfKindomCardsAvailableDuringGamePlay, constantSeedForRandomSeed, &NewGameStateStruct) == 0, &atLeast1TestFailed); // initialize a new game
      110:   78:                NewGameStateStruct.handCount[currentPlayer] = handCount;    // set the number of cards on hand FOR THE CURRENT PLAYER
        -:   79:                
        -:   80:                
        -:   81:                
        -:   82:                
        -:   83:                
        -:   84:                /***************************************************************************
        -:   85:                 Unit Test condition 1: TEST THE GAME STATE STRUCT'S COIN PROPERTY IF THE CURRENT PLAYER HAD ALL COPPER COINS ($1 EACH) IN THEIR HAND
        -:   86:                 ***************************************************************************/
      110:   87:                memcpy(NewGameStateStruct.hand[currentPlayer], coppers, sizeof(int) * handCount); // set all the cards to copper
      110:   88:                OldVersionOfGameStruct = NewGameStateStruct;                    // Save the Old State of the Game Struct to Compare effect of updateCoins()
        -:   89:                
      110:   90:                updateCoins(currentPlayer, &NewGameStateStruct, bonus);
        -:   91:#if (NOISY_TEST == 1)
      110:   92:                printf("NewGameStateStruct.coins = %d, expected = %d\n", NewGameStateStruct.coins, handCount * 1 + bonus);
        -:   93:#endif
      110:   94:                asserttrue(NewGameStateStruct.coins == handCount * 1 + bonus, &atLeast1TestFailed); // check if the number of coins is correct
        -:   95:                
        -:   96:#if (NOISY_TEST == 1)
      110:   97:                printf("NewGameStateStruct.coins = %d, expected = %d\n", NewGameStateStruct.coins, handCount * 1 + bonus);
        -:   98:#endif
      110:   99:                asserttrue(NewGameStateStruct.coins == handCount * 1 + bonus, &atLeast1TestFailed); // check if the number of coins is correct
        -:  100:                
        -:  101:                /************ Properties that Should not Change ************/
      110:  102:                printf("    Testing Properties that should Not change...\n");
        -:  103:                
        -:  104:                /* Make sure whoseTurn is the same */
        -:  105:#if (NOISY_TEST == 1)
      110:  106:                printf("    NewGameStateStruct.whoseTurn = %d, expected = %d\n", NewGameStateStruct.whoseTurn, OldVersionOfGameStruct.whoseTurn);
        -:  107:#endif
      110:  108:                asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
        -:  109:                
        -:  110:                /* Make sure numPlayers is the same */
        -:  111:#if (NOISY_TEST == 1)
      110:  112:                printf("    NewGameStateStruct.numPlayers  = %d, expected = %d\n", NewGameStateStruct.numPlayers , OldVersionOfGameStruct.numPlayers );
        -:  113:#endif
      110:  114:                asserttrue(NewGameStateStruct.numPlayers  == OldVersionOfGameStruct.numPlayers, &atLeast1TestFailed ); // check if the number of coins is correct
        -:  115:                
        -:  116:                /* LOOP OVER EACH OF THE 2 PLAYERS to make sure handCount the same*/
      660:  117:                for (int currentPlayerAgain = 0; currentPlayerAgain < numPlayer; currentPlayerAgain++)
branch  0 taken 67%
branch  1 taken 33%
        -:  118:                {
        -:  119:#if (NOISY_TEST == 1)
      220:  120:                    printf("    NewGameStateStruct.handCount[%d] = %d, expected = %d\n", currentPlayerAgain, NewGameStateStruct.handCount[currentPlayerAgain], OldVersionOfGameStruct.handCount[currentPlayerAgain]);
        -:  121:#endif
      220:  122:                    asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
      220:  123:                }
        -:  124:                
        -:  125:                
        -:  126:                
        -:  127:                
        -:  128:                /***************************************************************************
        -:  129:                 Unit Test condition 2: TEST THE GAME STATE STRUCT'S COIN PROPERTY IF THE CURRENT PLAYER HAD ALL SILVER COINS ($2 EACH) IN THEIR HAND
        -:  130:                 ***************************************************************************/
      110:  131:                memcpy(NewGameStateStruct.hand[currentPlayer], silvers, sizeof(int) * handCount); // set all the cards to silver
      110:  132:                OldVersionOfGameStruct = NewGameStateStruct;                    // Save the Old State of the Game Struct to Compare effect of updateCoins()
        -:  133:                
        -:  134:                
      110:  135:                updateCoins(currentPlayer, &NewGameStateStruct, bonus);
        -:  136:#if (NOISY_TEST == 1)
      110:  137:                printf("NewGameStateStruct.coins = %d, expected = %d\n", NewGameStateStruct.coins, handCount * 2 + bonus);
        -:  138:#endif
      110:  139:                asserttrue(NewGameStateStruct.coins == handCount * 2 + bonus, &atLeast1TestFailed); // check if the number of coins is correct
        -:  140:                
        -:  141:                /************ Properties that Should not Change ************/
      110:  142:                printf("    Testing Properties that should Not change...\n");
        -:  143:                
        -:  144:                /* Make sure whoseTurn is the same */
        -:  145:#if (NOISY_TEST == 1)
      110:  146:                printf("    NewGameStateStruct.whoseTurn = %d, expected = %d\n", NewGameStateStruct.whoseTurn, OldVersionOfGameStruct.whoseTurn);
        -:  147:#endif
      110:  148:                asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
        -:  149:                
        -:  150:                /* Make sure numPlayers is the same */
        -:  151:#if (NOISY_TEST == 1)
      110:  152:                printf("    NewGameStateStruct.numPlayers  = %d, expected = %d\n", NewGameStateStruct.numPlayers , OldVersionOfGameStruct.numPlayers );
        -:  153:#endif
      110:  154:                asserttrue(NewGameStateStruct.numPlayers  == OldVersionOfGameStruct.numPlayers, &atLeast1TestFailed ); // check if the number of coins is correct
        -:  155:                
        -:  156:                /* LOOP OVER EACH OF THE 2 PLAYERS to make sure handCount the same*/
      660:  157:                for (int currentPlayerAgain = 0; currentPlayerAgain < numPlayer; currentPlayerAgain++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:                {
        -:  159:#if (NOISY_TEST == 1)
      220:  160:                    printf("    NewGameStateStruct.handCount[%d] = %d, expected = %d\n", currentPlayerAgain, NewGameStateStruct.handCount[currentPlayerAgain], OldVersionOfGameStruct.handCount[currentPlayerAgain]);
        -:  161:#endif
      220:  162:                    asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
      220:  163:                }
        -:  164:                
        -:  165:                
        -:  166:                
        -:  167:                
        -:  168:                /***************************************************************************
        -:  169:                 Unit Test condition 3: TEST THE GAME STATE STRUCT'S COIN PROPERTY IF THE CURRENT PLAYER HAD ALL GOLD COINS ($3 EACH) IN THEIR HAND
        -:  170:                 ***************************************************************************/
      110:  171:                memcpy(NewGameStateStruct.hand[currentPlayer], golds, sizeof(int) * handCount); // set all the cards to gold
      110:  172:                OldVersionOfGameStruct = NewGameStateStruct;                    // Save the Old State of the Game Struct to Compare effect of updateCoins()
        -:  173:                
        -:  174:                
      110:  175:                updateCoins(currentPlayer, &NewGameStateStruct, bonus);
        -:  176:#if (NOISY_TEST == 1)
      110:  177:                printf("NewGameStateStruct.coins = %d, expected = %d\n", NewGameStateStruct.coins, handCount * 3 + bonus);
        -:  178:#endif
      110:  179:                asserttrue(NewGameStateStruct.coins == handCount * 3 + bonus, &atLeast1TestFailed); // check if the number of coins is correct
        -:  180:                
        -:  181:                /************ Properties that Should not Change ************/
      110:  182:                printf("    Testing Properties that should Not change...\n");
        -:  183:                
        -:  184:                /* Make sure whoseTurn is the same */
        -:  185:#if (NOISY_TEST == 1)
      110:  186:                printf("    NewGameStateStruct.whoseTurn = %d, expected = %d\n", NewGameStateStruct.whoseTurn, OldVersionOfGameStruct.whoseTurn);
        -:  187:#endif
      110:  188:                asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
        -:  189:                
        -:  190:                /* Make sure numPlayers is the same */
        -:  191:#if (NOISY_TEST == 1)
      110:  192:                printf("    NewGameStateStruct.numPlayers  = %d, expected = %d\n", NewGameStateStruct.numPlayers , OldVersionOfGameStruct.numPlayers );
        -:  193:#endif
      110:  194:                asserttrue(NewGameStateStruct.numPlayers  == OldVersionOfGameStruct.numPlayers, &atLeast1TestFailed); // check if the number of coins is correct
        -:  195:                
        -:  196:                /* LOOP OVER EACH OF THE 2 PLAYERS to make sure handCount the same*/
      660:  197:                for (int currentPlayerAgain = 0; currentPlayerAgain < numPlayer; currentPlayerAgain++)
branch  0 taken 67%
branch  1 taken 33%
        -:  198:                {
        -:  199:#if (NOISY_TEST == 1)
      220:  200:                    printf("    NewGameStateStruct.handCount[%d] = %d, expected = %d\n", currentPlayerAgain, NewGameStateStruct.handCount[currentPlayerAgain], OldVersionOfGameStruct.handCount[currentPlayerAgain]);
        -:  201:#endif
      220:  202:                    asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
      220:  203:                }
        -:  204:                
        -:  205:                
        -:  206:                
        -:  207:                
        -:  208:                
        -:  209:                
        -:  210:                
        -:  211:                /***************************************************************************
        -:  212:                 Unit Test condition 4: TEST THE GAME STATE STRUCT'S COIN PROPERTY IF THE CURRENT PLAYER HAD NO TREASURE COINS ($0 EACH) IN THEIR HAND
        -:  213:                 ***************************************************************************/
      110:  214:                memcpy(NewGameStateStruct.hand[currentPlayer], estates, sizeof(int) * handCount); // set all the cards to copper
      110:  215:                OldVersionOfGameStruct = NewGameStateStruct;                    // Save the Old State of the Game Struct to Compare effect of updateCoins()
        -:  216:                
        -:  217:                
      110:  218:                updateCoins(currentPlayer, &NewGameStateStruct, bonus);
        -:  219:#if (NOISY_TEST == 1)
      110:  220:                printf("NewGameStateStruct.coins = %d, expected = %d\n", NewGameStateStruct.coins, 0 + bonus);
        -:  221:#endif
      110:  222:                asserttrue(NewGameStateStruct.coins == 0 + bonus, &atLeast1TestFailed); // check if the number of coins is correct
        -:  223:                
        -:  224:                /************ Properties that Should not Change ************/
      110:  225:                printf("    Testing Properties that should Not change...\n");
        -:  226:                
        -:  227:                /* Make sure whoseTurn is the same */
        -:  228:#if (NOISY_TEST == 1)
      110:  229:                printf("    NewGameStateStruct.whoseTurn = %d, expected = %d\n", NewGameStateStruct.whoseTurn, OldVersionOfGameStruct.whoseTurn);
        -:  230:#endif
      110:  231:                asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
        -:  232:                
        -:  233:                /* Make sure numPlayers is the same */
        -:  234:#if (NOISY_TEST == 1)
      110:  235:                printf("    NewGameStateStruct.numPlayers  = %d, expected = %d\n", NewGameStateStruct.numPlayers , OldVersionOfGameStruct.numPlayers );
        -:  236:#endif
      110:  237:                asserttrue(NewGameStateStruct.numPlayers  == OldVersionOfGameStruct.numPlayers , &atLeast1TestFailed); // check if the number of coins is correct
        -:  238:                
        -:  239:                /* LOOP OVER EACH OF THE 2 PLAYERS to make sure handCount the same*/
      660:  240:                for (int currentPlayerAgain = 0; currentPlayerAgain < numPlayer; currentPlayerAgain++)
branch  0 taken 67%
branch  1 taken 33%
        -:  241:                {
        -:  242:#if (NOISY_TEST == 1)
      220:  243:                    printf("    NewGameStateStruct.handCount[%d] = %d, expected = %d\n", currentPlayerAgain, NewGameStateStruct.handCount[currentPlayerAgain], OldVersionOfGameStruct.handCount[currentPlayerAgain]);
        -:  244:#endif
      220:  245:                    asserttrue(NewGameStateStruct.whoseTurn == OldVersionOfGameStruct.whoseTurn, &atLeast1TestFailed); // check if the number of coins is correct
      220:  246:                }
      110:  247:            }
       10:  248:        }
        2:  249:    }
        -:  250:    
        1:  251:    if (atLeast1TestFailed == 0) {
branch  0 taken 100%
branch  1 taken 0%
        1:  252:        printf("All TESTS PASSED...\n");
        1:  253:    }else{
    #####:  254:        printf("All TESTS DID NOT PASS X...\n");
        -:  255:    }
        -:  256:    
        1:  257:    return 0;
        -:  258:}
