----------------- Testing: updateCoins ----------------
Test player 0 with 1 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 1 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 1, expected = 1
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 2 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 3 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 3, expected = 3
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 21, expected = 21
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 4 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 22, expected = 22
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 4, expected = 4
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 21, expected = 21
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 22, expected = 22
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 23, expected = 23
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 24, expected = 24
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 0 with 5 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 25, expected = 25
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 0, expected = 0
l The Test Passed
Test player 1 with 1 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 1 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 1, expected = 1
l The Test Passed
Test player 1 with 2 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 2 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 2, expected = 2
l The Test Passed
Test player 1 with 3 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 3 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 3, expected = 3
l The Test Passed
Test player 1 with 4 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 21, expected = 21
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 4 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 22, expected = 22
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 4, expected = 4
l The Test Passed
Test player 1 with 5 treasure card(s) and 0 bonus.
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 0, expected = 0
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 1 bonus.
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 1, expected = 1
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 2 bonus.
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 2, expected = 2
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 3 bonus.
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 3, expected = 3
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 4 bonus.
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 4, expected = 4
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 5 bonus.
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 5, expected = 5
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 6 bonus.
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
NewGameStateStruct.coins = 11, expected = 11
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 16, expected = 16
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 21, expected = 21
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 6, expected = 6
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 7 bonus.
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
NewGameStateStruct.coins = 12, expected = 12
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 17, expected = 17
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 22, expected = 22
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 7, expected = 7
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 8 bonus.
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
NewGameStateStruct.coins = 13, expected = 13
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 18, expected = 18
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 23, expected = 23
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 8, expected = 8
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 9 bonus.
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
NewGameStateStruct.coins = 14, expected = 14
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 19, expected = 19
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 24, expected = 24
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 9, expected = 9
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
Test player 1 with 5 treasure card(s) and 10 bonus.
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
NewGameStateStruct.coins = 15, expected = 15
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 20, expected = 20
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 25, expected = 25
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
NewGameStateStruct.coins = 10, expected = 10
l The Test Passed
    Testing Properties that should Not change...
    NewGameStateStruct.whoseTurn = 0, expected = 0
l The Test Passed
    NewGameStateStruct.numPlayers  = 2, expected = 2
l The Test Passed
    NewGameStateStruct.handCount[0] = 5, expected = 5
l The Test Passed
    NewGameStateStruct.handCount[1] = 5, expected = 5
l The Test Passed
All TESTS PASSED...
Function 'main'
Lines executed:98.85% of 87
Branches executed:100.00% of 18
Taken at least once:94.44% of 18
No calls

Function 'asserttrue'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

File 'unittest1.c'
Lines executed:98.85% of 87
Branches executed:100.00% of 18
Taken at least once:94.44% of 18
No calls
unittest1.c:creating 'unittest1.c.gcov'

File './asserttrue.h'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:17.05% of 651
Branches executed:15.90% of 415
Taken at least once:13.49% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 3080 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
     3080:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
     3080:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     1100:   14:    return -1;
     1980:   15:  return 0;
     3080:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 110 returned 100% blocks executed 87%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
      110:   46:  SelectStream(1);
      110:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
      220:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
      110:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
     2420:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
    24200:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
    20900:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
    11000:   67:        }
     1100:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
      110:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
      110:   77:      state->supplyCount[curse] = 10;
      110:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
      110:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
      110:   91:      state->supplyCount[estate] = 8;
      110:   92:      state->supplyCount[duchy] = 8;
      110:   93:      state->supplyCount[province] = 8;
      110:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
      110:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      110:  104:  state->supplyCount[silver] = 40;
      110:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
     4620:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
    36300:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
    17050:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
     2090:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  116:		{
      220:  117:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
      220:  118:		    state->supplyCount[i] = 8; 
      220:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
      220:  121:		}
        -:  122:	      else
        -:  123:		{
      880:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
     1100:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    15950:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
    15950:  132:	}
        -:  133:
     2200:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
      660:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
      220:  142:      state->deckCount[i] = 0;
     1760:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
      660:  145:	  state->deck[i][j] = estate;
      660:  146:	  state->deckCount[i]++;
      660:  147:	}
     3520:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
     1540:  150:	  state->deck[i][j] = copper;
     1540:  151:	  state->deckCount[i]++;		
     1540:  152:	}
      220:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
      660:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
      220:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
      220:  162:    }
        -:  163:
        -:  164:  //draw player hands
      660:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
      220:  168:      state->handCount[i] = 0;
      220:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
      220:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
     6160:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
     2970:  180:      state->embargoTokens[i] = 0;
     2970:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
      110:  184:  state->outpostPlayed = 0;
      110:  185:  state->phase = 0;
      110:  186:  state->numActions = 1;
      110:  187:  state->numBuys = 1;
      110:  188:  state->playedCardCount = 0;
      110:  189:  state->whoseTurn = 0;
      110:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
     1320:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      550:  195:    drawCard(state->whoseTurn, state);
      550:  196:  }
        -:  197:
      110:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
      110:  200:  return 0;
      110:  201:}
        -:  202:
function shuffle called 220 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      220:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      220:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
      220:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     4840:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     2200:  217:    card = floor(Random() * state->deckCount[player]);
     2200:  218:    newDeck[newDeckPos] = state->deck[player][card];
     2200:  219:    newDeckPos++;
    14740:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
     5170:  221:      state->deck[player][i] = state->deck[player][i+1];
     5170:  222:    }
     2200:  223:    state->deckCount[player]--;
        -:  224:  }
     4840:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     2200:  226:    state->deck[player][i] = newDeck[i];
     2200:  227:    state->deckCount[player]++;
     2200:  228:  }
        -:  229:
      220:  230:  return 0;
      220:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 550 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      550:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
      550:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      550:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      550:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      550:  578:    state->deckCount[player]--;
      550:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      550:  582:  return 0;
      550:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
    #####: 1143:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1144:    {
        -: 1145:      //add card to played pile
    #####: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1147:      state->playedCardCount++;
    #####: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
    #####: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
    #####: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
    #####: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
    #####: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
    #####: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 550 returned 100% blocks executed 100%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
      550: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
     4840: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 77%
branch  1 taken 23%
        -: 1223:    {
     1870: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 41%
branch  1 taken 59%
        -: 1225:	{
      770: 1226:	  state->coins += 1;
      770: 1227:	}
     1100: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 30%
branch  1 taken 70%
        -: 1229:	{
      330: 1230:	  state->coins += 2;
      330: 1231:	}
      770: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 43%
branch  1 taken 57%
        -: 1233:	{
      330: 1234:	  state->coins += 3;
      330: 1235:	}	
     1870: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
      550: 1239:  state->coins += bonus;
        -: 1240:
      550: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
nn******** END OF CODE COVERAGE FOR UNIT TEST Method 1 ********nn
----------------- Testing: buyCard ----------------
--- TEST 1: Test no more buys left
l The Test Passed
Buy Success Status = -1, expected = -1
l The Test Passed
Coin Count = 2, expected = 2
l The Test Passed
num Buys Count = 0, expected = 0
l The Test Passed
handCount Count = 5, expected = 5
l The Test Passed
supply Count = 3, expected = 3
l The Test Passed
--- TEST 2: Test no more estate card left
l The Test Passed
Buy Success Status = -1, expected = -1
l The Test Passed
Coin Count = 2, expected = 2
l The Test Passed
num Buys Count = 2, expected = 2
l The Test Passed
handCount Count = 5, expected = 5
l The Test Passed
supply Count = 0, expected = 0
l The Test Passed
--- TEST 3: Test not enough coins for Estate buy
l The Test Passed
Buy Success Status = -1, expected = -1
l The Test Passed
Coin Count = 2, expected = 2
l The Test Passed
num Buys Count = 2, expected = 2
l The Test Passed
handCount Count = 5, expected = 5
l The Test Passed
supply Count = 0, expected = 0
l The Test Passed
--- TEST 4: Test Sufficient Conditions to Buy Estate
Buy Success Status = 0, expected = 0
l The Test Passed
Coin Count = 0, expected = 0
l The Test Passed
num Buys Count = 0, expected = 0
l The Test Passed
handCount Count = 5, expected = 6
X The Test did NOT Pass
supply Count = 1, expected = 1
l The Test Passed
All TESTS DID NOT PASS X...
Function 'main'
Lines executed:97.83% of 92
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

Function 'asserttrue'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

File 'unittest2.c'
Lines executed:97.83% of 92
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
unittest2.c:creating 'unittest2.c.gcov'

File './asserttrue.h'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:10.00% of 30
Branches executed:100.00% of 28
Taken at least once:3.57% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:19.51% of 651
Branches executed:25.06% of 415
Taken at least once:14.46% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 7 returned 100% blocks executed 91%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
        7:  282:  who = state->whoseTurn;
        -:  283:
        7:  284:  if (state->numBuys < 1){
branch  0 taken 43%
branch  1 taken 57%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
        3:  287:    return -1;
        4:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 75%
branch  1 taken 25%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
        3:  291:    return -1;
        1:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 0%
branch  1 taken 100%
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
        1:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
        1:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
        1:  301:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
        1:  310:  return 0;
        7:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 5 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 5 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        5:  583:}
        -:  584:
function getCost called 4 returned 100% blocks executed 12%
        -:  585:int getCost(int cardNumber)
        -:  586:{
        4:  587:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
        4:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        4:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
    #####: 1143:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1144:    {
        -: 1145:      //add card to played pile
    #####: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1147:      state->playedCardCount++;
    #####: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
    #####: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
    #####: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
    #####: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
    #####: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
    #####: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 1 returned 100% blocks executed 72%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
        1: 1192:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
        1: 1197:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
        1: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
        1: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
        1: 1211:  return 0;
        1: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
nn******** END OF CODE COVERAGE FOR UNIT TEST Method 2 ********nn
----------------- Testing: isGameOver ----------------
TEST 1: Test isGameOver with No Depleted Pile 
Depleting Province Pile, Should make game over
is Game Over? = 0, expected = 0
l The Test Passed
Province Supply Count = 8, expected = 8
l The Test Passed
Card Index 0 Supply Count = 10, expected = 10
l The Test Passed
Card Index 1 Supply Count = 10, expected = 10
l The Test Passed
Card Index 9 Supply Count = 10, expected = 10
l The Test Passed
TEST 2: Test isGameOver with Depleted Province Pile 
Depleting Province Pile, Should make game over
is Game Over? = 1, expected = 1
l The Test Passed
Province Supply Count = 0, expected = 0
l The Test Passed
Card Index 0 Supply Count = 10, expected = 10
l The Test Passed
Card Index 1 Supply Count = 10, expected = 10
l The Test Passed
Card Index 9 Supply Count = 10, expected = 10
l The Test Passed
TEST 2: Test isGameOver with Boundry Card Piles 0, 1, and 9
Depleting 3 OTHER Piles, Should make game over
is Game Over? = 1, expected = 1
l The Test Passed
Province Supply Count = 4, expected = 4
l The Test Passed
Card Index 0 Supply Count = 0, expected = 0
l The Test Passed
Card Index 1 Supply Count = 0, expected = 0
l The Test Passed
Card Index 9 Supply Count = 0, expected = 0
l The Test Passed
All TESTS PASSED...
Function 'main'
Lines executed:98.41% of 63
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

Function 'asserttrue'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

File 'unittest3.c'
Lines executed:98.41% of 63
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
unittest3.c:creating 'unittest3.c.gcov'

File './asserttrue.h'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:17.67% of 651
Branches executed:17.35% of 415
Taken at least once:14.22% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 50%
branch  1 taken 50%
        -:  398:    {
        2:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        2:  403:  j = 0;
      104:  404:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  405:    {
       50:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  407:	{
        3:  408:	  j++;
        3:  409:	}
       50:  410:    }
        2:  411:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        1:  416:  return 0;
        4:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 5 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        5:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
    #####: 1143:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1144:    {
        -: 1145:      //add card to played pile
    #####: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1147:      state->playedCardCount++;
    #####: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
    #####: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
    #####: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
    #####: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
    #####: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
    #####: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
--nn******** END OF CODE COVERAGE FOR UNIT TEST Method 3 ********nn
----------------- Testing: fullDeckCount ----------------
TEST 1: Test count of copper in entire deck 
Filling All Deck With All Copper, 0 Estate
Copper Count = 12, expected = 12
l The Test Passed
Estate Count = 0, expected = 0
l The Test Passed
TEST 2: Test count of half copper, half estate in entire deck 
Filling All Deck With 6 Copper, 6 Estate
Copper Count = 6, expected = 6
l The Test Passed
Estate Count = 6, expected = 6
l The Test Passed
TEST 3: Test count of 2/3 copper only in discard & hand, 1/3 estate only in deck 
Filling All Deck With 8 Copper only in discard & hand, 4 Estate only in deck
Copper Count = 8, expected = 8
l The Test Passed
Estate Count = 4, expected = 4
l The Test Passed
All TESTS PASSED...
Function 'asserttrue'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

Function 'main'
Lines executed:98.92% of 93
Branches executed:100.00% of 26
Taken at least once:96.15% of 26
No calls

File './asserttrue.h'
Lines executed:66.67% of 6
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

File 'unittest4.c'
Lines executed:98.92% of 93
Branches executed:100.00% of 26
Taken at least once:96.15% of 26
No calls
unittest4.c:creating 'unittest4.c.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:17.51% of 651
Branches executed:18.31% of 415
Taken at least once:15.18% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 12 returned 100% blocks executed 100%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       12:  328:  int count = 0;
        -:  329:
      120:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  331:    {
       72:  332:      if (state->deck[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       48:  333:    }
        -:  334:
      120:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  336:    {
       72:  337:      if (state->hand[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       48:  338:    }
        -:  339:
      120:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  341:    {
       72:  342:      if (state->discard[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       48:  343:    }
        -:  344:
       12:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 5 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        5:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
    #####: 1143:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1144:    {
        -: 1145:      //add card to played pile
    #####: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1147:      state->playedCardCount++;
    #####: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
    #####: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
    #####: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
    #####: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
    #####: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
    #####: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
--nn******** END OF CODE COVERAGE FOR UNIT TEST Method 4 ********nn
----------------- Testing Card: Smithy ----------------
TEST 1: Test Player 0 has a handCount of equal to gained 3 cards minus discarded 1 card
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 6, expected = 7
X The Test did NOT Pass
discard count = 0, expected = 1
X The Test did NOT Pass
deck count = 2, expected = 5
l The Test Passed
TEST 2: Test Player 1 has a handCount of equal to gained 3 cards minus discarded 1 card
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 6, expected = 7
X The Test did NOT Pass
discard count = 0, expected = 1
X The Test did NOT Pass
deck count = 2, expected = -3
X The Test did NOT Pass
All TESTS DID NOT PASS X...
Function 'asserttrue'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'main'
Lines executed:94.87% of 39
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

File './asserttrue.h'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

File 'cardtest1.c'
Lines executed:94.87% of 39
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest1.c:creating 'cardtest1.c.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:100.00% of 7
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:18.74% of 651
Branches executed:17.35% of 415
Taken at least once:13.49% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 2 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        2:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 11 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       11:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
       11:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       11:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       11:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       11:  578:    state->deckCount[player]--;
       11:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       11:  582:  return 0;
       11:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 4 returned 100% blocks executed 80%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
        4: 1143:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1144:    {
        -: 1145:      //add card to played pile
        4: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1147:      state->playedCardCount++;
        4: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
        4: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
        4: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
        4: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
        4: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
        4: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
        4: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
        4: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 2 returned 100% blocks executed 100%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
        2: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
       16: 1273:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1274:	{
        6: 1275:        drawCard(currentPlayer, state);
        6: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
        2: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
        2: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
        2: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
--nn******** END OF CODE COVERAGE FOR UNIT TEST CARD 1 ********nn
----------------- Testing Card: Village ----------------
TEST 1: Test playVillage when deckCount is undepleted 
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 5, expected = 5
l The Test Passed
discard count = 0, expected = 1
X The Test did NOT Pass
numActions count = 3, expected = 3
l The Test Passed
TEST 2: Test playVillage when deckCount is depleted 
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 4, expected = 5
X The Test did NOT Pass
discard count = 0, expected = 1
X The Test did NOT Pass
numActions count = 5, expected = 5
l The Test Passed
All TESTS DID NOT PASS X...
Function 'asserttrue'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'main'
Lines executed:95.00% of 40
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

File './asserttrue.h'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

File 'cardtest2.c'
Lines executed:95.00% of 40
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest2.c:creating 'cardtest2.c.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:100.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:19.97% of 651
Branches executed:17.83% of 415
Taken at least once:13.98% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 3 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        3:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        3:  211:  if (state->deckCount[player] < 1)
branch  0 taken 33%
branch  1 taken 67%
        1:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        3:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 2 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        2:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 7 returned 100% blocks executed 75%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        7:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 14%
branch  1 taken 86%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        2:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
        1:  540:    state->deckCount[player] = state->discardCount[player];
        1:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        1:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        1:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        1:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        1:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        1:  561:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
        6:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        6:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  578:    state->deckCount[player]--;
        6:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        6:  582:  return 0;
        7:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
        2: 1143:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1144:    {
        -: 1145:      //add card to played pile
        2: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1147:      state->playedCardCount++;
        2: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
        2: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
        2: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
        2: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
        2: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
        2: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
        2: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
        2: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 2 returned 100% blocks executed 100%
        -: 1354:int playVillage(struct gameState *state, int handPos){
        2: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
        2: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
        2: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
        2: 1364:    discardCard(handPos, currentPlayer, state, 0);
        2: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
--nn******** END OF CODE COVERAGE FOR UNIT TEST CARD 2 ********nn
----------------- Testing Card: GreatHall ----------------
TEST 1: Test Great Hall via cardEffect
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 5, expected = 5
l The Test Passed
discard count = 0, expected = 1
X The Test did NOT Pass
numActions count = 2, expected = 2
l The Test Passed
TEST 1: Test Great Hall via cardEffect
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 5, expected = 5
l The Test Passed
discard count = 0, expected = 1
X The Test did NOT Pass
numActions count = 3, expected = 3
l The Test Passed
All TESTS DID NOT PASS X...
Function 'asserttrue'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'main'
Lines executed:94.87% of 39
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls

File './asserttrue.h'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

File 'cardtest3.c'
Lines executed:94.87% of 39
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest3.c:creating 'cardtest3.c.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:4.92% of 244
Branches executed:13.94% of 165
Taken at least once:1.21% of 165
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:19.51% of 651
Branches executed:22.41% of 415
Taken at least once:13.49% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        2:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 2 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        2:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 7 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        7:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
        7:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        7:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  578:    state->deckCount[player]--;
        7:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        7:  582:  return 0;
        7:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 2 returned 100% blocks executed 2%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        2:  655:  int currentPlayer = whoseTurn(state);
        2:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        2:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        2:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        2:  662:  int z = 0;// this is the counter for the temp hand
        2:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        2:  669:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
        2:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
        2:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
        2:  825:      discardCard(handPos, currentPlayer, state, 0);
        2:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
        2: 1137:}
        -: 1138:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
        2: 1143:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1144:    {
        -: 1145:      //add card to played pile
        2: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1147:      state->playedCardCount++;
        2: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
        2: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
        2: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
        2: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
        2: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
        2: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
        2: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
        2: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1244:int playAdventurer(struct gameState *state){
    #####: 1245:    int drawntreasure = 0;
    #####: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
    #####: 1251:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1252:        drawCard(currentPlayer, state);
    #####: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1255:            drawntreasure++;
        -: 1256:        else{
    #####: 1257:            temphand[z]=cardDrawn;
    #####: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
    #####: 1262:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1264:        z=z-1;
        -: 1265:    }
    #####: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
--nn******** END OF CODE COVERAGE FOR UNIT TEST CARD 3 ********nn
----------------- Testing Card: Adventurer ----------------
TEST 1: Test playAdventurer with Treasure Cards
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 7, expected = 7
l The Test Passed
discard count = 0, expected = 2
X The Test did NOT Pass
deck count = 3, expected = 7
l The Test Passed
TEST 2: Test playAdventurer with No Treasure Cards in Deck 
Testing Successful Return of 0 for calling Method
l The Test Passed
hand count = 4, expected = 7
X The Test did NOT Pass
discard count = 6, expected = 5
X The Test did NOT Pass
deck count = 0, expected = 10
l The Test Passed
All TESTS DID NOT PASS X...
Function 'asserttrue'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'main'
Lines executed:90.16% of 61
Branches executed:91.67% of 24
Taken at least once:62.50% of 24
No calls

File './asserttrue.h'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls
./asserttrue.h:creating 'asserttrue.h.gcov'

File 'cardtest4.c'
Lines executed:90.16% of 61
Branches executed:91.67% of 24
Taken at least once:62.50% of 24
No calls
cardtest4.c:creating 'cardtest4.c.gcov'

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 244
Branches executed:0.00% of 165
Taken at least once:0.00% of 165
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
No calls

Function 'playSmithy'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playRemodel'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playMine'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'playVillage'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:19.82% of 651
Branches executed:18.80% of 415
Taken at least once:15.18% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 28 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
       28:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
       28:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   14:    return -1;
       18:   15:  return 0;
       28:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
      190:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
      100:   67:        }
       10:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        1:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        1:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
      145:  132:	}
        -:  133:
       20:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        6:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
       14:  152:	}
        2:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        2:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        2:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
       27:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  195:    drawCard(state->whoseTurn, state);
        5:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        1:  201:}
        -:  202:
function shuffle called 5 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        5:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        5:  211:  if (state->deckCount[player] < 1)
branch  0 taken 60%
branch  1 taken 40%
        3:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       44:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
      134:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
       47:  221:      state->deck[player][i] = state->deck[player][i+1];
       47:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
       20:  228:  }
        -:  229:
        2:  230:  return 0;
        5:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 2 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
        2:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
    #####:  409:	}
    #####:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 15 returned 100% blocks executed 75%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       15:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 20%
branch  1 taken 80%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        6:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
        3:  540:    state->deckCount[player] = state->discardCount[player];
        3:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        3:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        3:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        3:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        3:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        3:  561:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        3:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
       12:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       12:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       12:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       12:  578:    state->deckCount[player]--;
       12:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       12:  582:  return 0;
       15:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
    #####:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		playAdventurer(state);
        -:  673:	  
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
    #####:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
    #####:  690:	    }
    #####:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
    #####:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
    #####:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
    #####:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:	  playMine(state, handPos, choice1, choice2);
        -:  756:	  
        -:  757:    case remodel:
    #####:  758:	  playRemodel(state, handPos, choice1, choice2);
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      playSmithy(state, handPos);
        -:  762:		
        -:  763:    case village:
    #####:  764:      playVillage(state, handPos);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
    #####:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
    #####: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
    #####: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
    #####: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
    #####: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
    #####: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1099:	  state->discardCount[i]++;
    #####: 1100:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1101:	}
    #####: 1102:      }
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case treasure_map:
        -: 1106:      //search hand for another treasure_map
    #####: 1107:      index = -1;
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1111:	    {
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //trash both treasure cards
    #####: 1119:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1120:	  discardCard(index, currentPlayer, state, 1);
        -: 1121:
        -: 1122:	  //gain 4 Gold cards
    #####: 1123:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1126:	    }
        -: 1127:				
        -: 1128:	  //return success
    #####: 1129:	  return 1;
        -: 1130:	}
        -: 1131:			
        -: 1132:      //no second treasure_map found in hand
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:	
    #####: 1136:  return -1;
    #####: 1137:}
        -: 1138:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1139:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1140:{
        -: 1141:	
        -: 1142:  //if card is not trashed, added to Played pile 
    #####: 1143:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1144:    {
        -: 1145:      //add card to played pile
    #####: 1146:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1147:      state->playedCardCount++;
    #####: 1148:    }
        -: 1149:	
        -: 1150:  //set played card to -1
    #####: 1151:  state->hand[currentPlayer][handPos] = -1;
        -: 1152:	
        -: 1153:  //remove card from player's hand
    #####: 1154:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
    #####: 1159:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1160:    {
        -: 1161:      //reduce number of cards in hand
    #####: 1162:      state->handCount[currentPlayer]--;
    #####: 1163:    }
        -: 1164:  else 	
        -: 1165:    {
        -: 1166:      //replace discarded card with last card in hand
    #####: 1167:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1168:      //set last card to -1
    #####: 1169:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1170:      //reduce number of cards in hand
    #####: 1171:      state->handCount[currentPlayer]--;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1177:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1178:{
        -: 1179:  //Note: supplyPos is enum of choosen card
        -: 1180:	
        -: 1181:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1182:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1183:    {
    #####: 1184:      return -1;
        -: 1185:    }
        -: 1186:	
        -: 1187:  //added card for [whoseTurn] current player:
        -: 1188:  // toFlag = 0 : add to discard
        -: 1189:  // toFlag = 1 : add to deck
        -: 1190:  // toFlag = 2 : add to hand
        -: 1191:
    #####: 1192:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1193:    {
    #####: 1194:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1195:      state->deckCount[player]++;
    #####: 1196:    }
    #####: 1197:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1198:    {
    #####: 1199:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1200:      state->handCount[player]++;
    #####: 1201:    }
        -: 1202:  else
        -: 1203:    {
    #####: 1204:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1205:      state->discardCount[player]++;
        -: 1206:    }
        -: 1207:	
        -: 1208:  //decrease number in supply pile
    #####: 1209:  state->supplyCount[supplyPos]--;
        -: 1210:	 
    #####: 1211:  return 0;
    #####: 1212:}
        -: 1213:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
        1: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
       12: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1223:    {
        5: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1225:	{
        4: 1226:	  state->coins += 1;
        4: 1227:	}
        1: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
        1: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
        5: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
        1: 1239:  state->coins += bonus;
        -: 1240:
        1: 1241:  return 0;
        -: 1242:}
        -: 1243:
function playAdventurer called 2 returned 100% blocks executed 100%
        -: 1244:int playAdventurer(struct gameState *state){
        2: 1245:    int drawntreasure = 0;
        2: 1246:    int currentPlayer = whoseTurn(state);
        -: 1247:    int cardDrawn;
        -: 1248:    int temphand[MAX_HAND];// moved above the if statement
        2: 1249:    int z = 0;// this is the counter for the temp hand
        -: 1250:
       24: 1251:    while(drawntreasure<2){
branch  0 taken 83%
branch  1 taken 17%
       10: 1252:        drawCard(currentPlayer, state);
       10: 1253:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       22: 1254:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60%
branch  1 taken 40%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        4: 1255:            drawntreasure++;
        -: 1256:        else{
        6: 1257:            temphand[z]=cardDrawn;
        6: 1258:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6: 1259:            z++;
        -: 1260:        }
        -: 1261:    }
       16: 1262:    while(z-1>=0){
branch  0 taken 75%
branch  1 taken 25%
        6: 1263:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6: 1264:        z=z-1;
        -: 1265:    }
        2: 1266:}
        -: 1267:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1268:int playSmithy(struct gameState *state, int handPos){
    #####: 1269:    int currentPlayer = whoseTurn(state);
        -: 1270:    int i;
        -: 1271:
        -: 1272:    //+3 Cards
    #####: 1273:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:        drawCard(currentPlayer, state);
    #####: 1276:	}
        -: 1277:
        -: 1278:    //discard card from hand
    #####: 1279:    discardCard(handPos, currentPlayer, state, 0);
        -: 1280:    //discard card from hand
    #####: 1281:    discardCard(handPos-1, currentPlayer, state, 0);
    #####: 1282:    return 0;
        -: 1283:}
        -: 1284:
function playRemodel called 0 returned 0% blocks executed 0%
        -: 1285:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1286:    int currentPlayer = whoseTurn(state);
        -: 1287:    int j, i;
        -: 1288:
    #####: 1289:    j = state->hand[currentPlayer][choice1];  
        -: 1290:
    #####: 1291:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1292:	{
    #####: 1293:        return -1;
        -: 1294:	}
        -: 1295:
    #####: 1296:    gainCard(choice2, state, 0, currentPlayer);
        -: 1297:
        -: 1298:    //discard card from hand
    #####: 1299:    discardCard(handPos, currentPlayer, state, 1);
        -: 1300:
        -: 1301:    //discard trashed card
    #####: 1302:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
    #####: 1304:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1305:        {
    #####: 1306:            discardCard(i, currentPlayer, state, 0);
    #####: 1307:            break;
        -: 1308:	    }
    #####: 1309:	}
        -: 1310:
        -: 1311:
    #####: 1312:    return 0;
    #####: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1316:    int currentPlayer = whoseTurn(state);
        -: 1317:    int j, i;
        -: 1318:
    #####: 1319:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1320:
    #####: 1321:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1322:	{
    #####: 1323:        return -1;
        -: 1324:	}
        -: 1325:
    #####: 1326:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1327:	{
    #####: 1328:        return -1;
        -: 1329:	}
        -: 1330:
    #####: 1331:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:        return -1;
        -: 1334:	}
        -: 1335:
    #####: 1336:    gainCard(choice2, state, 1, 0);
        -: 1337:
        -: 1338:      //discard card from hand
    #####: 1339:    discardCard(handPos, currentPlayer, state, 0);
        -: 1340:
        -: 1341:      //discard trashed card
    #####: 1342:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1345:	    {
    #####: 1346:            discardCard(i, currentPlayer, state, 0);
    #####: 1347:            break;
        -: 1348:	    }
    #####: 1349:	}
        -: 1350:
    #####: 1351:    return 0;
    #####: 1352:}
        -: 1353:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1354:int playVillage(struct gameState *state, int handPos){
    #####: 1355:    int currentPlayer = whoseTurn(state);
        -: 1356:
        -: 1357:    //+1 Card
    #####: 1358:    drawCard(currentPlayer, state);
        -: 1359:
        -: 1360:    //+2 Actions
    #####: 1361:    state->numActions = state->numActions + 2;
        -: 1362:
        -: 1363:    //discard played card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
nn******** END OF CODE COVERAGE FOR UNIT TEST CARD 4 ********nn
