        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: *  Card Smithy
        -:    3: *  -----------
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: * -----------------------------------------------------------------------
        -:    7: */
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdlib.h>     // needed for srand and rand
        -:   13:#include <stdio.h>
        -:   14:#include "asserttrue.h"
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:
        -:   18:// set NOISY_TEST to 0 to remove printfs from output
        -:   19:#define NOISY_TEST 1
        -:   20:#define CARDORFUNCTIONTOTEST "Smithy"
        -:   21:
function main called 1 returned 100% blocks executed 94%
        -:   22:int main(int argc, char** argv) {
        -:   23:    
        -:   24:    
        1:   25:    int passedSeed = atoi(argv[1]); // first char is '/'
        1:   26:    srand(passedSeed); // seed the random number generator with the passed int that is passed from the command line when running the program
        -:   27:    
        -:   28:    
        -:   29:    /****************************** Main Setup ******************************/
        -:   30:    struct gameState NewGameStateStruct, OldVersionOfGameStruct;
        -:   31:    
        1:   32:    memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
        1:   33:    memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   34:    
        1:   35:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:        sea_hag, tribute, smithy, council_room};
        -:   37:    
        -:   38:    
        -:   39:    
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", CARDORFUNCTIONTOTEST);
        -:   41:    
        -:   42:    
        -:   43:    // Did Any Test Fail Variable
        1:   44:    int atLeast1TestFailed = 0;
        -:   45:    
        -:   46:    
        -:   47:    //Invariable Conditions for all Tests
        1:   48:    int expectedNumCardDrawn = 3;
        1:   49:    int expectedNumCardDiscarded = 1;
        1:   50:    int indexOfCardBeingPlayed = 0;
        1:   51:    int indexCurrentPlayer = 0;
        -:   52:    
        1:   53:    int numRandomTestRuns = 5000;                           // Number of Random Tests to Run
        -:   54:    
    10002:   55:    for (int i = 0; i < numRandomTestRuns; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   56:    {
        -:   57:        
        -:   58:        //Randomized Variable Conditions
     5000:   59:        int numPlayer = 2 + (rand()%2);
        -:   60:        
        -:   61:        
     5000:   62:        memset(&NewGameStateStruct, 23, sizeof(struct gameState));      // clear the game state
     5000:   63:        memset(&OldVersionOfGameStruct, 23, sizeof(struct gameState));  // clear the old game state (used to compare before after effect of method call)
        -:   64:        
        -:   65:        
        -:   66:        // initialize a game state and player cards
     5000:   67:        initializeGame(numPlayer, k, passedSeed, &NewGameStateStruct);
        -:   68:        //memcpy(&NewGameStateStruct, &OldVersionOfGameStruct, sizeof(struct gameState)); // copy game state to have before - after comparision
        -:   69:        
        -:   70:        
        -:   71:        
     5000:   72:        NewGameStateStruct.hand[indexCurrentPlayer][0] = smithy; //set the first card in player's hand to smithy to guarantee he has smithy to use
        -:   73:        
        -:   74:        
     5000:   75:        int currentHandCount = 1+(rand()%4); // choose a random number of cards in current hand from 1 to 5
        -:   76:        // Discard the difference between the former handcount (5) and the randomized handcount
    34954:   77:        for (int currentCardInHand=5; currentCardInHand > currentHandCount; currentCardInHand--) {
branch  0 taken 71%
branch  1 taken 29%
    12477:   78:            NewGameStateStruct.discard[indexCurrentPlayer][NewGameStateStruct.discardCount[indexCurrentPlayer]] = NewGameStateStruct.hand[indexCurrentPlayer][currentCardInHand];       // copy the current card in hand to discard pile
    12477:   79:            NewGameStateStruct.discardCount[indexCurrentPlayer]++;                  // increment discard count
    12477:   80:            NewGameStateStruct.hand[indexCurrentPlayer][currentCardInHand] = -1;    // reset the removed card position to -1
    12477:   81:            NewGameStateStruct.handCount[indexCurrentPlayer] -= 1;                  // decrement hand count
    12477:   82:        }
        -:   83:        
     5000:   84:        if (rand()%5 == 0) {                                                        // Fill all cards in Deck with non Treasure cards 20% of the time
branch  0 taken 20%
branch  1 taken 80%
  1005006:   85:            for (int i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   86:            {
   501500:   87:                NewGameStateStruct.deck[indexCurrentPlayer][i] = estate;
   501500:   88:            }
     1003:   89:        }
        -:   90:        
        -:   91:        
        -:   92:        
        -:   93:        // ----------- TEST 1: Test playSmithy when deckCount is not depleted --------------
        -:   94:        
     5000:   95:        printf("TEST 1: Test Player 0 has a handCount of equal to gained 3 cards minus discarded 1 card\n");
        -:   96:        // copy the game state to compare (before + expected) with after
     5000:   97:        OldVersionOfGameStruct = NewGameStateStruct;
        -:   98:        
        -:   99:        /**** Call Func ****/
     5000:  100:        printf("Testing Successful Return of 0 for calling Method\n");
     5000:  101:        asserttrue(playSmithy(&NewGameStateStruct, indexOfCardBeingPlayed) == 0, &atLeast1TestFailed);
        -:  102:        /**** End Call Func ****/
        -:  103:        /**** Assert Results ****/
     5000:  104:        printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded);
     5000:  105:        asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded, &atLeast1TestFailed);
        -:  106:        
     5000:  107:        printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + expectedNumCardDiscarded);
     5000:  108:        asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] +  expectedNumCardDiscarded, &atLeast1TestFailed);
        -:  109:        
     5000:  110:        printf("deck count = %d, expected = %d\n", NewGameStateStruct.deckCount[indexCurrentPlayer], OldVersionOfGameStruct.deckCount[indexCurrentPlayer]);
     5000:  111:        asserttrue(NewGameStateStruct.deckCount[indexCurrentPlayer] == OldVersionOfGameStruct.deckCount[indexCurrentPlayer] - 3, &atLeast1TestFailed);
        -:  112:        /**** End Assert Results ****/
        -:  113:        
        -:  114:        // ----------- TEST 2: Test playSmithy when deckCount is depleted --------------
        -:  115:        //Invariable Conditions for this Test
     5000:  116:        indexCurrentPlayer = 0;
     5000:  117:        NewGameStateStruct.deckCount[indexCurrentPlayer] = 0;
     5000:  118:        printf("TEST 2: Test Player 1 has a handCount of equal to gained 3 cards minus discarded 1 card\n");
        -:  119:        // copy the game state to compare (before + expected) with after
     5000:  120:        NewGameStateStruct = OldVersionOfGameStruct;
        -:  121:        
        -:  122:        /**** Call Func ****/
     5000:  123:        printf("Testing Successful Return of 0 for calling Method\n");
     5000:  124:        asserttrue(playSmithy(&NewGameStateStruct, indexOfCardBeingPlayed) == 0, &atLeast1TestFailed);
        -:  125:        /**** End Call Func ****/
        -:  126:        /**** Assert Results ****/
     5000:  127:        printf("hand count = %d, expected = %d\n", NewGameStateStruct.handCount[indexCurrentPlayer], OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded);
     5000:  128:        asserttrue(NewGameStateStruct.handCount[indexCurrentPlayer] == OldVersionOfGameStruct.handCount[indexCurrentPlayer] + expectedNumCardDrawn - expectedNumCardDiscarded, &atLeast1TestFailed);
        -:  129:        
     5000:  130:        printf("discard count = %d, expected = %d\n", NewGameStateStruct.discardCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] + expectedNumCardDiscarded);
     5000:  131:        asserttrue(NewGameStateStruct.discardCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer]*0 + 1, &atLeast1TestFailed);
        -:  132:        
     5000:  133:        printf("deck count = %d, expected = %d\n", NewGameStateStruct.deckCount[indexCurrentPlayer], OldVersionOfGameStruct.discardCount[indexCurrentPlayer] - 3);
     5000:  134:        asserttrue(NewGameStateStruct.deckCount[indexCurrentPlayer] == OldVersionOfGameStruct.discardCount[indexCurrentPlayer] - 3 , &atLeast1TestFailed);
        -:  135:        /**** End Assert Results ****/
        -:  136:        
        -:  137:        
     5000:  138:    }
        -:  139:    
        1:  140:    if (atLeast1TestFailed == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  141:        printf("All TESTS PASSED...\n");
    #####:  142:    }else{
        1:  143:        printf("All TESTS DID NOT PASS X...\n");
        -:  144:    }
        1:  145:    return 0;
        -:  146:}
