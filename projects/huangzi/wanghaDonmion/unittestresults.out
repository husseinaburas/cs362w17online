** Function being tested: scoreFor **

TEST 1:

Expecting player to have score of 6 from 1 province card.

*** Passed test ***
Player1 has a score of 6

TEST 2:

Expecting player to have score of 1 from 1 estate card.

*** Passed test ***
Player1 has a score of 1

TEST 3:

Expecting player to have score of 3 from 1 duchy card.

*** Passed test ***
Player1 has a score of 3

TEST 4:

Expecting player to have score of 0 from no cards of value in any portion tested.

*** Passed test ***
Player1 has a score of 0

TEST 5:

Expecting player to have score of 5 from 1 estate and 1 great hall in hand, and 1 duchy in discard.

*** Passed test ***
Player1 has a score of 5

TEST 6:

Expecting player to have score of 8 from 1 estate and 1 great hall in hand, and 1 province in deck.

*** Passed test ***
Player1 has a score of 8

TEST 7:

Expecting player to have score of 5 from 1 province in deck and 1 curse in discard.

*** Passed test ***
Player1 has a score of 5

TEST 8:

Expecting player to have score of 10 from use of garden card.

*** Failed test ***
Player1 has a score of 9

** Function being tested: updateCoins **

TEST 1:

Expecting one gold card in hand to result in total of 3 coins for player1.

*** Passed test ***
Player1 has 3 coins

TEST 2:

Expecting one silver card in hand to result in total of 2 coins for player1.

*** Passed test ***
Player1 has 2 coins

TEST 3:

Expecting one copper card in hand to result in total of 1 coins for player1.

*** Passed test ***
Player1 has 1 coins

TEST 4:

Expecting bonus of 4 coins to player1.

*** Passed test ***
Player1 has 4 coins

** Function being tested: endTurn **

TEST 1

Expecting hand count to be zero

*** Test passed ***

handCount is 0

TEST 2

Expecting all cards in hand to have a value of -1

*** Test passed ***
There are 5 cards in the hand and 5 have a value of -1.

TEST 3

Expecting outpostPlayed to have value of 0

*** Test passed ***
outpostPlayed has a value of 0.

TEST 4

Expecting phase to have value of 0

*** Test passed ***
phase has a value of 0.

TEST 5

Expecting numActions to have value of 1

*** Test passed ***
numActions has a value of 1.

TEST 6

Expecting numBuys to have value of 1

*** Test passed ***
numBuys has a value of 1.

TEST 7

Expecting playedCardCount to have value of 0

*** Test passed ***
playedCardCount has a value of 0.

TEST 8

Expecting handCount of player1 to have value of 0

*** Test passed ***
handCount[player1] has a value of 0.
** Function being tested: isGameOver **

TEST 1

Expecting result to be 1, game is over because provinces exhausted.

*** Test passed ***
Result equals 1, which means the game is over.

TEST 2

Expecting result to be 1, game is over because 3 supply cards are exhausted.

*** Test passed ***
Result equals 1, which means the game is over.
** Card being tested: adventurer **

TEST 1

*** Test failed ***
Expected postHandCount of 7, actual postHandCount was 5

TEST 2

*** Test failed ***
Expected postDeckCount of 3, actual postDeckCount was 0

TEST 3

*** Test failed ***
Expected postDiscardCount of 1, actual postDiscardCount was 6

TEST 4

*** Test failed ***
Expected [postDeckCount of 5, actual postDiscardCount was 0

TEST 5

*** Test passed ***
Expected hand size of 0 for player2, actual hand size was 0

** Card being tested: smithy **

TEST 1

*** Test failed ***
Expected hand count of 7, actual hand count is 8

TEST 2

*** Test passed ***
Expected hand size of 0 for player2, actual hand size was 0

** Card being tested: great_hall **

TEST 1

*** Test passed ***
Expected hand size of 5; function check was 5 and iterative check was 5

TEST 2

*** Test passed ***
Expected numActions of 1, actual numActions was 2

TEST 3

*** Test passed ***
Expected hand size of 0 for player2, actual hand size was 0

** Card being tested: council_room **

TEST 1

*** Test failed ***
Expecting a hand size of 8, actual hand size was 9

TEST 2

*** Test passed ***
Expecting numBuys of 2, actual numBuys was 2

TEST 3

*** Test passed ***
Expecting a player2 hand size of 1, actual player2 hand size was 1

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 627 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
      627:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        5:   10:        return 1;
      622:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      223:   12:        return -1;
      399:   13:    return 0;
      627:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 22 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
       22:   44:    SelectStream(1);
       22:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
       44:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
       22:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
      484:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     4840:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     4180:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     2200:   65:        }
      220:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
       22:   73:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       22:   75:        state->supplyCount[curse] = 10;
       22:   76:    }
    #####:   77:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
       22:   87:    if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       22:   89:        state->supplyCount[estate] = 8;
       22:   90:        state->supplyCount[duchy] = 8;
       22:   91:        state->supplyCount[province] = 8;
       22:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
       22:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       22:  102:    state->supplyCount[silver] = 40;
       22:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
      924:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     7260:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     3410:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      440:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:                {
       22:  115:                    if (numPlayers == 2){
branch  0 taken 100%
branch  1 taken 0%
       22:  116:                        state->supplyCount[i] = 8;
       22:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
       22:  119:                }
        -:  120:                else
        -:  121:                {
      198:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
      220:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     3190:  128:                state->supplyCount[i] = -1;
        -:  129:            }
     3190:  130:        }
        -:  131:        
      440:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
      132:  138:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       44:  140:        state->deckCount[i] = 0;
      352:  141:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:        {
      132:  143:            state->deck[i][j] = estate;
      132:  144:            state->deckCount[i]++;
      132:  145:        }
      704:  146:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:        {
      308:  148:            state->deck[i][j] = copper;
      308:  149:            state->deckCount[i]++;
      308:  150:        }
       44:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
      132:  154:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       44:  156:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
       44:  160:    }
        -:  161:    
        -:  162:    //draw player hands
      132:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {
        -:  165:        //initialize hand size to zero
       44:  166:        state->handCount[i] = 0;
       44:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
       44:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
     1232:  176:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      594:  178:        state->embargoTokens[i] = 0;
      594:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
       22:  182:    state->outpostPlayed = 0;
       22:  183:    state->phase = 0;
       22:  184:    state->numActions = 1;
       22:  185:    state->numBuys = 1;
       22:  186:    state->playedCardCount = 0;
       22:  187:    state->whoseTurn = 0;
       22:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
      264:  192:    for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      110:  193:        drawCard(state->whoseTurn, state);
      110:  194:    }
        -:  195:    
       22:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
       22:  198:    return 0;
       22:  199:}
        -:  200:
function shuffle called 56 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
       56:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
       56:  209:    if (state->deckCount[player] < 1)
branch  0 taken 20%
branch  1 taken 80%
       11:  210:        return -1;
       45:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
      984:  214:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      447:  215:        card = floor(Random() * state->deckCount[player]);
      447:  216:        newDeck[newDeckPos] = state->deck[player][card];
      447:  217:        newDeckPos++;
     3122:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     1114:  219:            state->deck[player][i] = state->deck[player][i+1];
     1114:  220:        }
      447:  221:        state->deckCount[player]--;
        -:  222:    }
      984:  223:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      447:  224:        state->deck[player][i] = newDeck[i];
      447:  225:        state->deckCount[player]++;
      447:  226:    }
        -:  227:    
       45:  228:    return 0;
       56:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:    who = state->whoseTurn;
        -:  281:    
    #####:  282:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
    #####:  308:    return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 1 returned 100% blocks executed 55%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
        1:  326:    int count = 0;
        -:  327:    
        2:  328:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:    
       22:  333:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  334:    {
       10:  335:        if (state->hand[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
       10:  336:    }
        -:  337:    
        2:  338:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:    
        1:  343:    return count;
        -:  344:}
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
        8:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 92%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
        3:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
       28:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 79%
branch  1 taken 21%
       11:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       11:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
       11:  359:    }
        3:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
        3:  363:    if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 100%
branch  1 taken 0%
        3:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        3:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
        3:  370:    state->outpostPlayed = 0;
        3:  371:    state->phase = 0;
        3:  372:    state->numActions = 1;
        3:  373:    state->coins = 0;
        3:  374:    state->numBuys = 1;
        3:  375:    state->playedCardCount = 0;
        3:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
       36:  380:    for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       15:  381:        drawCard(state->whoseTurn, state);//Draw a card
       15:  382:    }
        -:  383:    
        -:  384:    //Update money
        3:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
        3:  387:    return 0;
        -:  388:}
        -:  389:
function isGameOver called 2 returned 100% blocks executed 92%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
        2:  395:    if (state->supplyCount[province] == 0)
branch  0 taken 50%
branch  1 taken 50%
        -:  396:    {
        1:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
        1:  401:    j = 0;
       52:  402:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
       25:  404:        if (state->supplyCount[i] == 0)
branch  0 taken 12%
branch  1 taken 88%
        -:  405:        {
        3:  406:            j++;
        3:  407:        }
       25:  408:    }
        1:  409:    if ( j >= 3)
branch  0 taken 100%
branch  1 taken 0%
        -:  410:    {
        1:  411:        return 1;
        -:  412:    }
        -:  413:    
    #####:  414:    return 0;
        2:  415:}
        -:  416:
function scoreFor called 8 returned 100% blocks executed 80%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
        8:  420:    int score = 0;
        -:  421:    //score from hand
      106:  422:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15%
        -:  423:    {
       45:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       57:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 27%
branch  1 taken 73%
       46:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 2%
branch  1 taken 98%
       46:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 2%
branch  1 taken 98%
       47:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4%
branch  1 taken 96%
       46:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2%
branch  1 taken 98%
       45:  430:    }
        -:  431:    
        -:  432:    //score from discard
       46:  433:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 65%
branch  1 taken 35%
        -:  434:    {
       16:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 7%
branch  1 taken 93%
       15:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       16:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7%
branch  1 taken 93%
       15:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
       15:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       15:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       15:  441:    }
        -:  442:    
        -:  443:    //score from deck
       46:  444:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 65%
branch  1 taken 35%
        -:  445:    {
       15:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       15:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       15:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
       17:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 13%
branch  1 taken 87%
       15:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       15:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       15:  452:    }
        -:  453:    
        8:  454:    return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
function drawCard called 152 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
      152:  528:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4%
branch  1 taken 96%
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
       26:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 54%
branch  1 taken 46%
        7:  534:            state->deck[player][i] = state->discard[player][i];
        7:  535:            state->discard[player][i] = -1;
        7:  536:        }
        -:  537:        
        6:  538:        state->deckCount[player] = state->discardCount[player];
        6:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
        6:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:        
        6:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
        6:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:        
        6:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
        6:  559:        if (deckCounter == 0)
branch  0 taken 83%
branch  1 taken 17%
        5:  560:            return -1;
        -:  561:        
        1:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:        state->deckCount[player]--;
        1:  564:        state->handCount[player]++;//Increment hand count
        1:  565:    }
        -:  566:    
        -:  567:    else{
      146:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:        
      146:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
      146:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      146:  576:        state->deckCount[player]--;
      146:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
      147:  580:    return 0;
      152:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:    
    #####:  643:    return -1;
    #####:  644:}
        -:  645:
function smithy_action called 1 returned 100% blocks executed 100%
        -:  646:int smithy_action(int handPos, struct gameState *state, int currentPlayer){
        -:  647:    
        -:  648:    int i;
       10:  649:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  650:    {
        4:  651:        drawCard(currentPlayer, state);
        4:  652:    }
        -:  653:    
        -:  654:    //discard card from hand
        1:  655:    discardCard(handPos, currentPlayer, state, 1);
        1:  656:    return 0;
        -:  657:}
        -:  658:
function adventurer_action called 2 returned 100% blocks executed 100%
        -:  659:int adventurer_action(int currentPlayer, struct gameState *state){
        2:  660:    int z = 0;
        2:  661:    int drawntreasure = 0;
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
       38:  664:    while(drawntreasure<=2){
branch  0 taken 89%
branch  1 taken 11%
       17:  665:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 35%
branch  1 taken 65%
        6:  666:            shuffle(currentPlayer, state);
        6:  667:        }
       17:  668:        drawCard(currentPlayer, state);
       17:  669:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
       39:  670:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 65%
branch  1 taken 35%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6:  671:            drawntreasure++;
        -:  672:        else{
       11:  673:            temphand[z]=cardDrawn;
       11:  674:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       11:  675:            z++;
        -:  676:        }
        -:  677:    }
       26:  678:    while(z-1>=0){
branch  0 taken 85%
branch  1 taken 15%
       11:  679:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       11:  680:        z=z-1;
        -:  681:    }
        2:  682:    return 0;
        -:  683:}
        -:  684:
function council_room_action called 1 returned 100% blocks executed 100%
        -:  685:int council_room_action(int handPos, int currentPlayer, struct gameState *state){
        -:  686:    //+4 Cards
        -:  687:    int i;
       10:  688:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  689:    {
        4:  690:        drawCard(currentPlayer, state);
        4:  691:    }
        -:  692:    
        -:  693:    //+1 Buy
        1:  694:    state->numBuys++;
        -:  695:    
        -:  696:    //Each other player draws a card
        6:  697:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  698:    {
        2:  699:        if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  700:        {
        1:  701:            drawCard(i, state);
        1:  702:        }
        2:  703:    }
        -:  704:    
        -:  705:    
        1:  706:    return 0;
        -:  707:}
        -:  708:
function village_action called 0 returned 0% blocks executed 0%
        -:  709:int village_action(int handPos, int currentPlayer, struct gameState *state){
        -:  710:    //+1 Card
    #####:  711:    drawCard(currentPlayer, state);
        -:  712:    
        -:  713:    //+2 Actions
    #####:  714:    state->numActions = state->numBuys + 2;
        -:  715:    
        -:  716:    //discard played card from hand
    #####:  717:    discardCard(handPos, currentPlayer, state, 0);
    #####:  718:    return 0;
        -:  719:}
        -:  720:
function great_hall_action called 1 returned 100% blocks executed 100%
        -:  721:int great_hall_action(int handPos, int currentPlayer, struct gameState *state){
        -:  722:    //+1 Card
        1:  723:    drawCard(currentPlayer, state);
        -:  724:    
        -:  725:    //+1 Actions
        1:  726:    state->numActions++;
        -:  727:    
        -:  728:    //discard card from hand
        1:  729:    discardCard(handPos, currentPlayer, state, 0);
        1:  730:    return 0;
        -:  731:}
        -:  732:
function cardEffect called 5 returned 100% blocks executed 5%
        -:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:    int i;
        -:  736:    int j;
        -:  737:    int k;
        -:  738:    int x;
        -:  739:    int index;
        5:  740:    int currentPlayer = whoseTurn(state);
        5:  741:    int nextPlayer = currentPlayer + 1;
        -:  742:    
        5:  743:    int tributeRevealedCards[2] = {-1, -1};
        -:  744:    int temphand[MAX_HAND];// moved above the if statement
        5:  745:    int drawntreasure=0;
        -:  746:    int cardDrawn;
        5:  747:    int z = 0;// this is the counter for the temp hand
        5:  748:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  749:        nextPlayer = 0;
    #####:  750:    }
        -:  751:    
        -:  752:    
        -:  753:    //refactor
        -:  754:    
        5:  755:    if (card == smithy){
branch  0 taken 20%
branch  1 taken 80%
        1:  756:        return smithy_action(handPos, state, currentPlayer);
        -:  757:    }
        4:  758:    else if(card == adventurer){
branch  0 taken 50%
branch  1 taken 50%
        2:  759:        return adventurer_action(currentPlayer, state);
        -:  760:    }
        2:  761:    else if(card == council_room){
branch  0 taken 50%
branch  1 taken 50%
        1:  762:        return council_room_action(handPos, currentPlayer, state);
        -:  763:    }
        1:  764:    else if(card == village){
branch  0 taken 0%
branch  1 taken 100%
    #####:  765:        return village_action(handPos, currentPlayer, state);
        -:  766:    }
        1:  767:    else if(card == great_hall){
branch  0 taken 100%
branch  1 taken 0%
        1:  768:        return great_hall_action(handPos, currentPlayer, state);
        -:  769:    }
        -:  770:    
        -:  771:    //uses switch to select card and perform actions
    #####:  772:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  773:    {
        -:  774:            /*case adventurer:
        -:  775:             while(drawntreasure<2){
        -:  776:             if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  777:             shuffle(currentPlayer, state);
        -:  778:             }
        -:  779:             drawCard(currentPlayer, state);
        -:  780:             cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  781:             if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  782:             drawntreasure++;
        -:  783:             else{
        -:  784:             temphand[z]=cardDrawn;
        -:  785:             state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  786:             z++;
        -:  787:             }
        -:  788:             }
        -:  789:             while(z-1>=0){
        -:  790:             state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  791:             z=z-1;
        -:  792:             }
        -:  793:             return 0;
        -:  794:             
        -:  795:             case council_room:
        -:  796:             //+4 Cards
        -:  797:             for (i = 0; i < 4; i++)
        -:  798:             {
        -:  799:             drawCard(currentPlayer, state);
        -:  800:             }
        -:  801:             
        -:  802:             //+1 Buy
        -:  803:             state->numBuys++;
        -:  804:             
        -:  805:             //Each other player draws a card
        -:  806:             for (i = 0; i < state->numPlayers; i++)
        -:  807:             {
        -:  808:             if ( i != currentPlayer )
        -:  809:             {
        -:  810:             drawCard(i, state);
        -:  811:             }
        -:  812:             }
        -:  813:             
        -:  814:             //put played card in played card pile
        -:  815:             discardCard(handPos, currentPlayer, state, 0);
        -:  816:             
        -:  817:             return 0;*/
        -:  818:            
        -:  819:        case feast:
        -:  820:            //gain card with cost up to 5
        -:  821:            //Backup hand
    #####:  822:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  823:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  824:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  825:            }
        -:  826:            //Backup hand
        -:  827:            
        -:  828:            //Update Coins for Buy
    #####:  829:            updateCoins(currentPlayer, state, 5);
    #####:  830:            x = 1;//Condition to loop on
    #####:  831:            while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  832:                if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  833:                    if (DEBUG)
        -:  834:                        printf("None of that card left, sorry!\n");
        -:  835:                    
        -:  836:                    if (DEBUG){
        -:  837:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  838:                    }
    #####:  839:                }
    #####:  840:                else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  841:                    printf("That card is too expensive!\n");
        -:  842:                    
        -:  843:                    if (DEBUG){
        -:  844:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  845:                    }
    #####:  846:                }
        -:  847:                else{
        -:  848:                    
        -:  849:                    if (DEBUG){
        -:  850:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:                    }
        -:  852:                    
    #####:  853:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  854:                    x = 0;//No more buying cards
        -:  855:                    
        -:  856:                    if (DEBUG){
        -:  857:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  858:                    }
        -:  859:                    
        -:  860:                }
        -:  861:            }
        -:  862:            
        -:  863:            //Reset Hand
    #####:  864:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  865:                state->hand[currentPlayer][i] = temphand[i];
    #####:  866:                temphand[i] = -1;
    #####:  867:            }
        -:  868:            //Reset Hand
        -:  869:            
    #####:  870:            return 0;
        -:  871:            
        -:  872:        case gardens:
    #####:  873:            return -1;
        -:  874:            
        -:  875:        case mine:
    #####:  876:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  877:            
    #####:  878:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  879:            {
    #####:  880:                return -1;
        -:  881:            }
        -:  882:            
    #####:  883:            if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  884:            {
    #####:  885:                return -1;
        -:  886:            }
        -:  887:            
    #####:  888:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  889:            {
    #####:  890:                return -1;
        -:  891:            }
        -:  892:            
    #####:  893:            gainCard(choice2, state, 2, currentPlayer);
        -:  894:            
        -:  895:            //discard card from hand
    #####:  896:            discardCard(handPos, currentPlayer, state, 0);
        -:  897:            
        -:  898:            //discard trashed card
    #####:  899:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  900:            {
    #####:  901:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  902:                {
    #####:  903:                    discardCard(i, currentPlayer, state, 0);
    #####:  904:                    break;
        -:  905:                }
    #####:  906:            }
        -:  907:            
    #####:  908:            return 0;
        -:  909:            
        -:  910:        case remodel:
    #####:  911:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  912:            
    #####:  913:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  914:            {
    #####:  915:                return -1;
        -:  916:            }
        -:  917:            
    #####:  918:            gainCard(choice2, state, 0, currentPlayer);
        -:  919:            
        -:  920:            //discard card from hand
    #####:  921:            discardCard(handPos, currentPlayer, state, 0);
        -:  922:            
        -:  923:            //discard trashed card
    #####:  924:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  925:            {
    #####:  926:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  927:                {
    #####:  928:                    discardCard(i, currentPlayer, state, 0);
    #####:  929:                    break;
        -:  930:                }
    #####:  931:            }
        -:  932:            
        -:  933:            
    #####:  934:            return 0;
        -:  935:            
        -:  936:            /*case smithy:
        -:  937:             //+3 Cards
        -:  938:             for (i = 0; i < 3; i++)
        -:  939:             {
        -:  940:             drawCard(currentPlayer, state);
        -:  941:             }
        -:  942:             
        -:  943:             //discard card from hand
        -:  944:             discardCard(handPos, currentPlayer, state, 0);
        -:  945:             return 0;*/
        -:  946:            
        -:  947:            /*case village:
        -:  948:             //+1 Card
        -:  949:             drawCard(currentPlayer, state);
        -:  950:             
        -:  951:             //+2 Actions
        -:  952:             state->numActions = state->numActions + 2;
        -:  953:             
        -:  954:             //discard played card from hand
        -:  955:             discardCard(handPos, currentPlayer, state, 0);
        -:  956:             return 0;*/
        -:  957:            
        -:  958:        case baron:
    #####:  959:            state->numBuys++;//Increase buys by 1!
    #####:  960:            if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  961:                int p = 0;//Iterator for hand!
    #####:  962:                int card_not_discarded = 1;//Flag for discard set!
    #####:  963:                while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  964:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  965:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  966:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  967:                        state->discardCount[currentPlayer]++;
    #####:  968:                        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  969:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  970:                        }
    #####:  971:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  972:                        state->handCount[currentPlayer]--;
    #####:  973:                        card_not_discarded = 0;//Exit the loop
    #####:  974:                    }
    #####:  975:                    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  976:                        if(DEBUG) {
        -:  977:                            printf("No estate cards in your hand, invalid choice\n");
        -:  978:                            printf("Must gain an estate if there are any\n");
        -:  979:                        }
    #####:  980:                        if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  981:                            gainCard(estate, state, 0, currentPlayer);
    #####:  982:                            state->supplyCount[estate]--;//Decrement estates
    #####:  983:                            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  984:                                isGameOver(state);
    #####:  985:                            }
    #####:  986:                        }
    #####:  987:                        card_not_discarded = 0;//Exit the loop
    #####:  988:                    }
        -:  989:                    
        -:  990:                    else{
    #####:  991:                        p++;//Next card
        -:  992:                    }
        -:  993:                }
    #####:  994:            }
        -:  995:            
        -:  996:            else{
    #####:  997:                if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  999:                    state->supplyCount[estate]--;//Decrement Estates
    #####: 1000:                    if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1001:                        isGameOver(state);
    #####: 1002:                    }
    #####: 1003:                }
        -: 1004:            }
        -: 1005:            
        -: 1006:            
    #####: 1007:            return 0;
        -: 1008:            
        -: 1009:            /*case great_hall:
        -: 1010:             //+1 Card
        -: 1011:             drawCard(currentPlayer, state);
        -: 1012:             
        -: 1013:             //+1 Actions
        -: 1014:             state->numActions++;
        -: 1015:             
        -: 1016:             //discard card from hand
        -: 1017:             discardCard(handPos, currentPlayer, state, 0);
        -: 1018:             return 0;*/
        -: 1019:            
        -: 1020:        case minion:
        -: 1021:            //+1 action
    #####: 1022:            state->numActions++;
        -: 1023:            
        -: 1024:            //discard card from hand
    #####: 1025:            discardCard(handPos, currentPlayer, state, 0);
        -: 1026:            
    #####: 1027:            if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1028:            {
    #####: 1029:                state->coins = state->coins + 2;
    #####: 1030:            }
        -: 1031:            
    #####: 1032:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:            {
        -: 1034:                //discard hand
    #####: 1035:                while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1036:                {
    #####: 1037:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1038:                }
        -: 1039:                
        -: 1040:                //draw 4
    #####: 1041:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1042:                {
    #####: 1043:                    drawCard(currentPlayer, state);
    #####: 1044:                }
        -: 1045:                
        -: 1046:                //other players discard hand and redraw if hand size > 4
    #####: 1047:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:                {
    #####: 1049:                    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1050:                    {
    #####: 1051:                        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1052:                        {
        -: 1053:                            //discard hand
    #####: 1054:                            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1055:                            {
    #####: 1056:                                discardCard(handPos, i, state, 0);
        -: 1057:                            }
        -: 1058:                            
        -: 1059:                            //draw 4
    #####: 1060:                            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1061:                            {
    #####: 1062:                                drawCard(i, state);
    #####: 1063:                            }
    #####: 1064:                        }
    #####: 1065:                    }
    #####: 1066:                }
        -: 1067:                
    #####: 1068:            }
    #####: 1069:            return 0;
        -: 1070:            
        -: 1071:        case steward:
    #####: 1072:            if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1073:            {
        -: 1074:                //+2 cards
    #####: 1075:                drawCard(currentPlayer, state);
    #####: 1076:                drawCard(currentPlayer, state);
    #####: 1077:            }
    #####: 1078:            else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1079:            {
        -: 1080:                //+2 coins
    #####: 1081:                state->coins = state->coins + 2;
    #####: 1082:            }
        -: 1083:            else
        -: 1084:            {
        -: 1085:                //trash 2 cards in hand
    #####: 1086:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1087:                discardCard(choice3, currentPlayer, state, 1);
        -: 1088:            }
        -: 1089:            
        -: 1090:            //discard card from hand
    #####: 1091:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:            return 0;
        -: 1093:            
        -: 1094:        case tribute:
    #####: 1095:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1096:                if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1097:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1098:                    state->deckCount[nextPlayer]--;
    #####: 1099:                }
    #####: 1100:                else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1101:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1102:                    state->discardCount[nextPlayer]--;
    #####: 1103:                }
        -: 1104:                else{
        -: 1105:                    //No Card to Reveal
        -: 1106:                    if (DEBUG){
        -: 1107:                        printf("No cards to reveal\n");
        -: 1108:                    }
        -: 1109:                }
    #####: 1110:            }
        -: 1111:            
        -: 1112:            else{
    #####: 1113:                if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1114:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1115:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1116:                        state->deckCount[nextPlayer]++;
    #####: 1117:                        state->discard[nextPlayer][i] = -1;
    #####: 1118:                        state->discardCount[nextPlayer]--;
    #####: 1119:                    }
        -: 1120:                    
    #####: 1121:                    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1122:                }
    #####: 1123:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1125:                state->deckCount[nextPlayer]--;
    #####: 1126:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1127:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1128:                state->deckCount[nextPlayer]--;
        -: 1129:            }
        -: 1130:            
    #####: 1131:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1132:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1133:                state->playedCardCount++;
    #####: 1134:                tributeRevealedCards[1] = -1;
    #####: 1135:            }
        -: 1136:            
    #####: 1137:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1138:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1139:                    state->coins += 2;
    #####: 1140:                }
        -: 1141:                
    #####: 1142:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1143:                    drawCard(currentPlayer, state);
    #####: 1144:                    drawCard(currentPlayer, state);
    #####: 1145:                }
        -: 1146:                else{//Action Card
    #####: 1147:                    state->numActions = state->numActions + 2;
        -: 1148:                }
    #####: 1149:            }
        -: 1150:            
    #####: 1151:            return 0;
        -: 1152:            
        -: 1153:        case ambassador:
    #####: 1154:            j = 0;		//used to check if player has enough cards to discard
        -: 1155:            
    #####: 1156:            if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1157:            {
    #####: 1158:                return -1;				
        -: 1159:            }
        -: 1160:            
    #####: 1161:            if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1162:            {
    #####: 1163:                return -1;
        -: 1164:            }
        -: 1165:            
    #####: 1166:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:            {
    #####: 1168:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1169:                {
    #####: 1170:                    j++;
    #####: 1171:                }
    #####: 1172:            }
    #####: 1173:            if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1174:            {
    #####: 1175:                return -1;				
        -: 1176:            }
        -: 1177:            
        -: 1178:            if (DEBUG) 
        -: 1179:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1180:            
        -: 1181:            //increase supply count for choosen card by amount being discarded
    #####: 1182:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1183:            
        -: 1184:            //each other player gains a copy of revealed card
    #####: 1185:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1186:            {
    #####: 1187:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1188:                {
    #####: 1189:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1190:                }
    #####: 1191:            }
        -: 1192:            
        -: 1193:            //discard played card from hand
    #####: 1194:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1195:            
        -: 1196:            //trash copies of cards returned to supply
    #####: 1197:            for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1198:            {
    #####: 1199:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:                {
    #####: 1201:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1202:                    {
    #####: 1203:                        discardCard(i, currentPlayer, state, 1);
    #####: 1204:                        break;
        -: 1205:                    }
    #####: 1206:                }
    #####: 1207:            }			
        -: 1208:            
    #####: 1209:            return 0;
        -: 1210:            
        -: 1211:        case cutpurse:
        -: 1212:            
    #####: 1213:            updateCoins(currentPlayer, state, 2);
    #####: 1214:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:            {
    #####: 1216:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1217:                {
    #####: 1218:                    for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1219:                    {
    #####: 1220:                        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1221:                        {
    #####: 1222:                            discardCard(j, i, state, 0);
    #####: 1223:                            break;
        -: 1224:                        }
    #####: 1225:                        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1226:                        {
    #####: 1227:                            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1228:                            {
        -: 1229:                                if (DEBUG)
        -: 1230:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1231:                            }	
    #####: 1232:                            break;
        -: 1233:                        }		
    #####: 1234:                    }
        -: 1235:                    
    #####: 1236:                }
        -: 1237:                
    #####: 1238:            }				
        -: 1239:            
        -: 1240:            //discard played card from hand
    #####: 1241:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1242:            
    #####: 1243:            return 0;
        -: 1244:            
        -: 1245:            
        -: 1246:        case embargo: 
        -: 1247:            //+2 Coins
    #####: 1248:            state->coins = state->coins + 2;
        -: 1249:            
        -: 1250:            //see if selected pile is in play
    #####: 1251:            if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1252:            {
    #####: 1253:                return -1;
        -: 1254:            }
        -: 1255:            
        -: 1256:            //add embargo token to selected supply pile
    #####: 1257:            state->embargoTokens[choice1]++;
        -: 1258:            
        -: 1259:            //trash card
    #####: 1260:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1261:            return 0;
        -: 1262:            
        -: 1263:        case outpost:
        -: 1264:            //set outpost flag
    #####: 1265:            state->outpostPlayed++;
        -: 1266:            
        -: 1267:            //discard card
    #####: 1268:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1269:            return 0;
        -: 1270:            
        -: 1271:        case salvager:
        -: 1272:            //+1 buy
    #####: 1273:            state->numBuys++;
        -: 1274:            
    #####: 1275:            if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1276:            {
        -: 1277:                //gain coins equal to trashed card
    #####: 1278:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1279:                //trash card
    #####: 1280:                discardCard(choice1, currentPlayer, state, 1);	
    #####: 1281:            }
        -: 1282:            
        -: 1283:            //discard card
    #####: 1284:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1285:            return 0;
        -: 1286:            
        -: 1287:        case sea_hag:
    #####: 1288:            for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1289:                if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1290:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1291:                    state->discardCount[i]++;
    #####: 1292:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1293:                }
    #####: 1294:            }
    #####: 1295:            return 0;
        -: 1296:            
        -: 1297:        case treasure_map:
        -: 1298:            //search hand for another treasure_map
    #####: 1299:            index = -1;
    #####: 1300:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1301:            {
    #####: 1302:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1303:                {
    #####: 1304:                    index = i;
    #####: 1305:                    break;
        -: 1306:                }
    #####: 1307:            }
    #####: 1308:            if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1309:            {
        -: 1310:                //trash both treasure cards
    #####: 1311:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1312:                discardCard(index, currentPlayer, state, 1);
        -: 1313:                
        -: 1314:                //gain 4 Gold cards
    #####: 1315:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1316:                {
    #####: 1317:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1318:                }
        -: 1319:                
        -: 1320:                //return success
    #####: 1321:                return 1;
        -: 1322:            }
        -: 1323:            
        -: 1324:            //no second treasure_map found in hand
    #####: 1325:            return -1;
        -: 1326:    }
        -: 1327:    
    #####: 1328:    return -1;
        5: 1329:}
        -: 1330:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1331:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1332:{
        -: 1333:    
        -: 1334:    //if card is not trashed, added to Played pile 
        2: 1335:    if (trashFlag < 1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1336:    {
        -: 1337:        //add card to played pile
        1: 1338:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1339:        state->playedCardCount++;
        1: 1340:    }
        -: 1341:    
        -: 1342:    //set played card to -1
        2: 1343:    state->hand[currentPlayer][handPos] = -1;
        -: 1344:    
        -: 1345:    //remove card from player's hand
        2: 1346:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1347:    {
        -: 1348:        //reduce number of cards in hand
    #####: 1349:        state->handCount[currentPlayer]--;
    #####: 1350:    }
        2: 1351:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1352:    {
        -: 1353:        //reduce number of cards in hand
    #####: 1354:        state->handCount[currentPlayer]--;
    #####: 1355:    }
        -: 1356:    else 	
        -: 1357:    {
        -: 1358:        //replace discarded card with last card in hand
        2: 1359:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1360:        //set last card to -1
        2: 1361:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1362:        //reduce number of cards in hand
        2: 1363:        state->handCount[currentPlayer]--;
        -: 1364:    }
        -: 1365:    
        2: 1366:    return 0;
        -: 1367:}
        -: 1368:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1369:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1370:{
        -: 1371:    //Note: supplyPos is enum of choosen card
        -: 1372:    
        -: 1373:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1374:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1375:    {
    #####: 1376:        return -1;
        -: 1377:    }
        -: 1378:    
        -: 1379:    //added card for [whoseTurn] current player:
        -: 1380:    // toFlag = 0 : add to discard
        -: 1381:    // toFlag = 1 : add to deck
        -: 1382:    // toFlag = 2 : add to hand
        -: 1383:    
    #####: 1384:    if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1385:    {
    #####: 1386:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1387:        state->deckCount[player]++;
    #####: 1388:    }
    #####: 1389:    else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1390:    {
    #####: 1391:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1392:        state->handCount[player]++;
    #####: 1393:    }
        -: 1394:    else
        -: 1395:    {
    #####: 1396:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1397:        state->discardCount[player]++;
        -: 1398:    }
        -: 1399:    
        -: 1400:    //decrease number in supply pile
    #####: 1401:    state->supplyCount[supplyPos]--;
        -: 1402:    
    #####: 1403:    return 0;
    #####: 1404:}
        -: 1405:
function updateCoins called 29 returned 100% blocks executed 100%
        -: 1406:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1407:{
        -: 1408:    int i;
        -: 1409:    
        -: 1410:    //reset coin count
       29: 1411:    state->coins = 0;
        -: 1412:    
        -: 1413:    //add coins for each Treasure card in player's hand
      348: 1414:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1415:    {
      145: 1416:        if (state->hand[player][i] == copper)
branch  0 taken 68%
branch  1 taken 32%
        -: 1417:        {
       98: 1418:            state->coins += 1;
       98: 1419:        }
       47: 1420:        else if (state->hand[player][i] == silver)
branch  0 taken 2%
branch  1 taken 98%
        -: 1421:        {
        1: 1422:            state->coins += 2;
        1: 1423:        }
       46: 1424:        else if (state->hand[player][i] == gold)
branch  0 taken 2%
branch  1 taken 98%
        -: 1425:        {
        1: 1426:            state->coins += 3;
        1: 1427:        }	
      145: 1428:    }	
        -: 1429:    
        -: 1430:    //add bonus
       29: 1431:    state->coins += bonus;
        -: 1432:    
       29: 1433:    return 0;
        -: 1434:}
        -: 1435:
        -: 1436:
        -: 1437://end of dominion.c
