Teammate ONID: vuli

The following cards were tested:
Adventurer 	
Smithy 		
Village                   
Council Room 

Bug 1: 	
	The card effect of adventurer doesn’t work as intended – (handCount and discardCount).
Symptom: 
	After calling card effect with adventurer, the resulting handCount and discardCount were not correct.
		--Testing with >2 Treasure Cards in Deck
		TEST 1 - cards in hand +1
			TEST 1 FAILED
			EXPECTED 6 ---- ACTUAL 5
		TEST 5 - discard count +5
			TEST 5 FAILED
			EXPECTED 5 ---- ACTUAL 10
How I found it: 
	In my cardtest2.c, the first test calls the card effect of adventurer when there are 5 cards in the hand, 10 cards in the deck, and 0 cards in the discard pile. The cards in the deck are: [gold, estate, gold, estate, gold, estate, gold, estate, estate, estate]. Adventurer should pull off cards one by one (starting from the last position in the array) until 2 treasure cards are found. This should lead to 2 gold cards added to the hand and 4 estate cards added to the discard pile. Then, the adventurer card itself should be moved from the hand to the discard pile. The result should be 6 cards in the hand, 4 cards in the deck, and 5 cards in the discard pile. However, the actual result is 5 cards in the hand, 0 cards in the deck and 10 cards in the discard pile. 
Cause: 
	Because there were more than 2 treasure cards in the deck, yet none were added to the hand, the cardEffectAdventurer function is not recognizing treasure cards correctly. This is due to the cardDrawn variable being assigned incorrectly. In my teammate’s code (within cardEffectAdventurer): 
	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
	This states that (initially) cardDrawn = the card at position 5 in the hand array of the current player. But the array is 0-indexed so position 5 is not the last card drawn. That’s why when we go to analyze the results, all of the cards analyzed are discarded. 

	
Bug 2: 
	The card effect of adventurer doesn’t work as intended – (playedCardCount and array of played cards).
Symptom: 
	Even after accounting for Bug 1 (described above), the card effect of adventurer still results in an incorrect handCount, discardCount, playedCardCount, and the array of played cards does not contain adventurer.
		--Testing with >2 Treasure Cards in Deck
		TEST 3 - played card count +1
			TEST 3 FAILED
			EXPECTED 1 ---- ACTUAL 0
		TEST 4 - check adventurer in played cards
			TEST 4 FAILED
			EXPECTED 1 ---- ACTUAL 0
How I found it: 
	In my cardtest2.c, the first test calls the card effect of adventurer when there are 5 cards in the hand, 10 cards in the deck, and 0 cards in the discard pile. The cards in the deck are: [gold, estate, gold, estate, gold, estate, gold, estate, estate, estate]. Adventurer can’t recognize which cards from the deck are treasure, so it discards them all and adds none to the hand. This should lead to 10 cards added to the discard pile. Then, the adventurer card itself should be moved from the hand to the discard pile. The result should be 4 cards in the hand, 0 cards in the deck, and 11 cards in the discard pile. However, the actual result is 5 cards in the hand, 0 cards in the deck and 10 cards in the discard pile. Also, playedCardCount remains unchanged and the played card array does not contain adventurer.
Cause: 
	Clearly, the adventurer card itself is not being discarded which is causing the problems. All of the other cardEffect methods include a call to discardCard just before returning, but my teammate’s does not.

	
Bug 3: 
	The discard count does not reflect the actual number of cards discarded.
Symptom: 
	Even after Bugs 1 and 2 (described above) are accounted for, the discardCount does not increase. 		
		---------------- Random Testing: Village ----------------
		TEST 4 - discard count +1
			TEST 4 FAILED
			EXPECTED 206 ---- ACTUAL 205
How I found it: 
	In my randomtestcard1.c, I have tests which look at the discardCount after the village card is played. In every case, when the card being played is discarded, the discardCount didn’t increase.
Cause: 
	The discardCount isn’t reflecting the accurate number because of a bug in the discardCard function of dominion.c. Within that function, discardCount is never increased, which leads to an incorrect count of the cards in the discard pile.


Bug 4: 
	The card effect of adventurer results in a segmentation fault.
Symptom: 
	When random tests are executed to check the functionality of card effect for adventurer, the system produces a segmentation fault.
		./randomtestadventurer 10000 &> randomtestadventurer.out
		/bin/sh: line 1: 11952 Segmentation fault  	(core dumped) ./randomtestadventurer 10000 &>randomtestadventurer.out
		make: *** [randomtestadventurer.out] error 139

How I found it: 
	In my randomtestadventurer.c, when I tried to run it I would get the segmentation fault error message
Cause: 
	In cardEffectAdventurer.c, the order of the declaration of the variables used leads to this fault. In my teammate’s code (within cardEffectAdventurer) the variables are declared in this order:
		int temphand[MAX_HAND];
		int drawntreasure=0;
		int cardDrawn;
		int z = 0;// this is the counter for the temp hand
	However, if z is declared before temphand[MAX_HAND], the program runs normally:
		int z = 0;// this is the counter for the temp hand
		int temphand[MAX_HAND];
		int drawntreasure=0;
		int cardDrawn;

 
Bug 5: 
	The card effect of council_room doesn’t work as intended – (handCount and deckCount).
Symptom: 
	After calling card effect with council_room, the resulting handCount and deckCount were not correct.
		--Testing with Council Room as First Card in Player's Hand
		TEST 1 - Cards In Hand
			TEST 1 FAILED
			EXPECTED 8 ---- ACTUAL 9
		TEST 5 - Deck Count
			TEST 5 FAILED
			EXPECTED 1 ---- ACTUAL 0	
How I found it: 
	In my cardtest4.c, the first test calls the card effect of council_room when there are 5 cards in the hand, 5 cards in the deck, and 0 cards in the discard pile.  Council_room should add 4 cards to the current player’s hand (removing 4 cards from the deck), increase the number of buys by 1, and add 1 card to each of the other players’ hands (each time removing a card from that player’s deck). Then, the council_room card itself should be moved from the hand to the discard pile. The result should be 8 cards in the player’s hand, 1 cards in the deck, and 1 card in the discard pile. However, the actual result is 9 cards in the hand, 0 cards in the deck and 0 cards in the discard pile.
Cause: 
	The miscalculation in the discard pile has already been accounted for with Bug 3, so we can focus on the incorrect hand and deck counts. Clearly, this signifies that an extra card is being drawn by the current player. It is due to an omission in the cardEffectCouncil_Room function which has each player draw another card. In my teammate’s code:
		//Each other player draws a card
		for (i=0; i < state->numPlayers; i++) {
			  drawCard(i, state);
		}
	This is looping over all players which is causing the error as only opponents should draw a card- not the current player.  


Bug 6: 
	The card effect of smithy doesn’t work as intended – (handCount and deckCount).
Symptom: 
	After calling card effect with smithy, the resulting handCount and deckCount were not correct.
		--Testing with Smithy as First Card in Player's Hand
		TEST 1 - cards in hand +2
			TEST 1 FAILED
			EXPECTED 7 ---- ACTUAL 9
		TEST 5 - deck count -3
			TEST 5 FAILED
			EXPECTED 2 ---- ACTUAL 1
How I found it: 
	In my cardtest1.c, the first test calls the card effect of smithy when there are 5 cards in the hand, 5 cards in the deck, and 0 cards in the discard pile.  Smithy should simply add 3 cards to the current player’s hand (removing 3 cards from the deck). Then, the smithy card itself should be moved from the hand to the discard pile. The result should be 7 cards in the player’s hand, 2 cards in the deck, and 1 card in the discard pile. However, the actual result is 9 cards in the hand, 1 card in the deck and 0 cards in the discard pile.
Cause: 
	The miscalculation in the discard pile has already been accounted for with Bug 3, so we can focus on the incorrect hand and deck counts. Clearly, this signifies that an extra card is being drawn by the current player. It is due to an error in the cardEffectSmithy function which has each player draw an extra card. In my teammate’s code (within cardEffectSmithy):
		//+3 Cards
		for (i = 0; i <= 3; i++) {
			  drawCard(currentPlayer, state);
		}
	This for loop iterates 4 times, each time drawing a card. This is clearly causing an extra card to be added from the deck to the hand.

	
Bug 7: 
	The card effect of smithy doesn’t work as intended – (playedCardCount and array of played cards).
Symptom: 
	Even after accounting for Bug 6 (described above), the card effect of smithy still results in an incorrect handCount, discardCount, playedCardCount, and the array of played cards does not contain smithy.
		--Testing with Smithy as First Card in Player's Hand
		TEST 3 - played card count +1
			TEST 3 FAILED
			EXPECTED 1 ---- ACTUAL 0
		TEST 4 - check smithy in played cards
			TEST 4 FAILED
			EXPECTED 1 ---- ACTUAL 0
		TEST 55 - discard count +1
			TEST 55 FAILED
			EXPECTED 1 ---- ACTUAL 0
How I found it: 
	In my cardtest1.c, the first test calls the card effect of smithy when there are 5 cards in the hand, 5 cards in the deck, and 0 cards in the discard pile. The way my teammate’s code processes the card effect of smithy currently is that is adds 4 cards to the hand (removing 4 cards from the deck). Then, the smithy card itself should be moved from the hand to the discard pile. The result should be 8 cards in the hand, 1 card in the deck, and 1 card in the discard pile. However, the actual result is 9 cards in the hand, 1 card in the deck and 0 cards in the discard pile. Also, playedCardCount remains unchanged and the played card array does not contain smithy.
Cause: 
	Clearly, the smithy card itself is not being discarded which is causing the problems. All of the other cardEffect methods include a call to discardCard just before returning, but my teammate’s does not.
		int cardEffectSmithy(int handPos, int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3) {
			  int i;
			  
			  //+3 Cards
			  for (i = 0; i <= 3; i++) {
					drawCard(currentPlayer, state);
			  }  
			  
			  return 0;
		}
