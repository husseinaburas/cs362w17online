///// ----- STARTING UNIT TEST 1 (updateCoins) -----/////
UNIT TEST 1: Test Case 1 of 4 for function 'updateCoins()' PASSED
UNIT TEST 1: Test Case 2 of 4 for function 'updateCoins()' PASSED
UNIT TEST 1: Test Case 3 of 4 for function 'updateCoins()' PASSED
UNIT TEST 1: Test Case 4 of 4 for function 'updateCoins()' PASSED
**UNIT TEST 1 SUCCESSFULLY PASSED**
///// ----- STARTING UNIT TEST 2 (getCost) -----/////
UNIT TEST 2: Test Case 1 of 27 for function 'getCost()' for card 'curse' PASSED
UNIT TEST 2: Test Case 2 of 27 for function 'getCost()' for card 'estate' PASSED
UNIT TEST 2: Test Case 3 of 27 for function 'getCost()' for card 'duchy' PASSED
UNIT TEST 2: Test Case 4 of 27 for function 'getCost()' for card 'provinence' PASSED
UNIT TEST 2: Test Case 5 of 27 for function 'getCost()' for card 'copper' PASSED
UNIT TEST 2: Test Case 6 of 27 for function 'getCost()' for card 'silver' PASSED
UNIT TEST 2: Test Case 7 of 27 for function 'getCost()' for card 'gold' PASSED
UNIT TEST 2: Test Case 8 of 27 for function 'getCost()' for card 'adventurer' PASSED
UNIT TEST 2: Test Case 9 of 27 for function 'getCost()' for card 'council room' PASSED
UNIT TEST 2: Test Case 10 of 27 for function 'getCost()' for card 'feast' PASSED
UNIT TEST 2: Test Case 11 of 27 for function 'getCost()' for card 'gardens' PASSED
UNIT TEST 2: Test Case 12 of 27 for function 'getCost()' for card 'mine' PASSED
UNIT TEST 2: Test Case 13 of 27 for function 'getCost()' for card 'remodel' PASSED
UNIT TEST 2: Test Case 14 of 27 for function 'getCost()' for card 'smithy' PASSED
UNIT TEST 2: Test Case 15 of 27 for function 'getCost()' for card 'village' PASSED
UNIT TEST 2: Test Case 16 of 27 for function 'getCost()' for card 'baron' PASSED
UNIT TEST 2: Test Case 17 of 27 for function 'getCost()' for card 'great hall' PASSED
UNIT TEST 2: Test Case 18 of 27 for function 'getCost()' for card 'minion' PASSED
UNIT TEST 2: Test Case 19 of 27 for function 'getCost()' for card 'steward' PASSED
UNIT TEST 2: Test Case 20 of 27 for function 'getCost()' for card 'tribute' PASSED
UNIT TEST 2: Test Case 21 of 27 for function 'getCost()' for card 'ambassador' PASSED
UNIT TEST 2: Test Case 22 of 27 for function 'getCost()' for card 'curpurse' PASSED
UNIT TEST 2: Test Case 23 of 27 for function 'getCost()' for card 'embargo' PASSED
UNIT TEST 2: Test Case 24 of 27 for function 'getCost()' for card 'outpost' PASSED
UNIT TEST 2: Test Case 25 of 27 for function 'getCost()' for card 'salvager' PASSED
UNIT TEST 2: Test Case 26 of 27 for function 'getCost()' for card 'sea hag' PASSED
UNIT TEST 2: Test Case 27 of 27 for function 'getCost()' for card 'treasure map' PASSED
**UNIT TEST 2 SUCCESSFULLY PASSED**
///// ----- STARTING UNIT TEST 1 (supplyCount) -----/////
UNIT TEST 3: Test Case 1 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 2 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 3 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 4 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 5 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 6 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 6 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 7 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 8 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 9 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 10 of 11 for function 'supplyCount()' PASSED
UNIT TEST 3: Test Case 11 of 11 for function 'supplyCount()' PASSED
**UNIT TEST 3 SUCCESSFULLY PASSED**
///// ----- STARTING UNIT TEST 4 (endTurn) -----/////
UNIT TEST 4: Test Case 1 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 2 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 3 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 4 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 5 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 6 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 7 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 8 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 9 of 10 for function 'endTurn()' PASSED
UNIT TEST 4: Test Case 10 of 10 for function 'endTurn()' PASSED
**UNIT TEST 4 SUCCESSFULLY PASSED**
///// ----- STARTING CARD TEST 4 (SMITHY) -----/////
CARD TEST 1: Test Case 1 of 4 of card 'smithy' PASSED
CARD TEST 1: Test Case 2 of 4 of card 'smithy' PASSED
CARD TEST 1: Test Case 3 of 4 of card 'smithy' FAILED
CARD TEST 1: Test Case 4 of 4 of card 'smithy' PASSED
**CARD TEST 1 FAILED**
///// ----- STARTING CARD TEST 3 (VILLAGE) -----/////
CARD TEST 2: Test Case 1 of 5 of card 'village' PASSED
CARD TEST 2: Test Case 2 of 5 of card 'village' PASSED
CARD TEST 2: Test Case 3 of 5 of card 'village' FAILED
CARD TEST 2: Test Case 4 of 5 of card 'village' PASSED
CARD TEST 2: Test Case 5 of 5 of card 'village' PASSED
**CARD TEST 2 FAILED**
///// ----- STARTING CARD TEST 3 (GREAT HALL) -----/////
CARD TEST 3: Test Case 1 of 5 of card 'great hall' PASSED
CARD TEST 3: Test Case 2 of 5 of card 'great hall' PASSED
CARD TEST 3: Test Case 3 of 5 of card 'great hall' FAILED
CARD TEST 3: Test Case 4 of 5 of card 'great hall' PASSED
CARD TEST 3: Test Case 5 of 5 of card 'great hall' PASSED
**CARD TEST 3 FAILED**
///// ----- STARTING CARD TEST 4 (ADVENTURER) -----/////
CARD TEST 4: Test Case 1 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 2 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 3 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 4 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 5 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 6 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 7 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 8 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 9 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 8 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 9 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 10 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 11 of 13 of card 'adventurer' PASSED
CARD TEST 4: Test Case 12 of 13 of card 'adventurer' FAILED
CARD TEST 4: Test Case 13 of 13 of card 'adventurer' PASSED
**CARD TEST 4 FAILED**
File 'dominion.c'
Lines executed:37.38% of 650
Branches executed:32.23% of 422
Taken at least once:29.38% of 422
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 12709842 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
 12709842:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 12%
branch  1 taken 88%
  1494058:   10:    return 1;
 11215784:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 41%
branch  1 taken 59%
  4634397:   12:    return -1;
  6581387:   13:  return 0;
 12709842:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 210463 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   210463:   44:  SelectStream(1);
   210463:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   420926:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   210463:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4630186:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
 46301860:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
 39987970:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 21046300:   65:        }
  2104630:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   210463:   73:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
    69933:   75:      state->supplyCount[curse] = 10;
    69933:   76:    }
   140530:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
    70472:   79:      state->supplyCount[curse] = 20;
    70472:   80:    }
        -:   81:  else
        -:   82:    {
    70058:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   210463:   87:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
    69933:   89:      state->supplyCount[estate] = 8;
    69933:   90:      state->supplyCount[duchy] = 8;
    69933:   91:      state->supplyCount[province] = 8;
    69933:   92:    }
        -:   93:  else
        -:   94:    {
   140530:   95:      state->supplyCount[estate] = 12;
   140530:   96:      state->supplyCount[duchy] = 12;
   140530:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   210463:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   210463:  102:  state->supplyCount[silver] = 40;
   210463:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  8839446:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
 69452790:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
 32621765:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  4209260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  114:		{
   210463:  115:		  if (numPlayers == 2){ 
branch  0 taken 33%
branch  1 taken 67%
    69933:  116:		    state->supplyCount[i] = 8; 
    69933:  117:		  }
   140530:  118:		  else{ state->supplyCount[i] = 12; }
   210463:  119:		}
        -:  120:	      else
        -:  121:		{
  1894167:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2104630:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 30517135:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 30517135:  130:	}
        -:  131:
  4209260:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1683954:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
   631514:  140:      state->deckCount[i] = 0;
  5052112:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
  1894542:  143:	  state->deck[i][j] = estate;
  1894542:  144:	  state->deckCount[i]++;
  1894542:  145:	}
 10104224:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
  4420598:  148:	  state->deck[i][j] = copper;
  4420598:  149:	  state->deckCount[i]++;		
  4420598:  150:	}
   631514:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1683954:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
   631514:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   631514:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1683954:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   631514:  166:      state->handCount[i] = 0;
   631514:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   631514:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 11785928:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
  5682501:  178:      state->embargoTokens[i] = 0;
  5682501:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   210463:  182:  state->outpostPlayed = 0;
   210463:  183:  state->phase = 0;
   210463:  184:  state->numActions = 1;
   210463:  185:  state->numBuys = 1;
   210463:  186:  state->playedCardCount = 0;
   210463:  187:  state->whoseTurn = 0;
   210463:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2525556:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
  1052315:  193:    drawCard(state->whoseTurn, state);
  1052315:  194:  }
        -:  195:
   210463:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   210463:  198:  return 0;
   210463:  199:}
        -:  200:
function shuffle called 639138 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   639138:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   639138:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
     4230:  210:    return -1;
   634908:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 15608804:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8%
  7169494:  215:    card = floor(Random() * state->deckCount[player]);
  7169494:  216:    newDeck[newDeckPos] = state->deck[player][card];
  7169494:  217:    newDeckPos++;
189417774:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8%
 87539393:  219:      state->deck[player][i] = state->deck[player][i+1];
 87539393:  220:    }
  7169494:  221:    state->deckCount[player]--;
        -:  222:  }
 15608804:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8%
  7169494:  224:    state->deck[player][i] = newDeck[i];
  7169494:  225:    state->deckCount[player]++;
  7169494:  226:  }
        -:  227:
   634908:  228:  return 0;
   639138:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 12 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 200006 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
   200006:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 5 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        5:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       60:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       25:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       25:  359:  }
        5:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        5:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 80%
branch  1 taken 20%
        4:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        4:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        5:  370:  state->outpostPlayed = 0;
        5:  371:  state->phase = 0;
        5:  372:  state->numActions = 1;
        5:  373:  state->coins = 0;
        5:  374:  state->numBuys = 1;
        5:  375:  state->playedCardCount = 0;
        5:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       60:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       25:  381:    drawCard(state->whoseTurn, state);//Draw a card
       25:  382:  }
        -:  383:
        -:  384:  //Update money
        5:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        5:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 2911792 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  2911792:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1716332:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
   854354:  534:      state->deck[player][i] = state->discard[player][i];
   854354:  535:      state->discard[player][i] = -1;
   854354:  536:    }
        -:  537:
     3812:  538:    state->deckCount[player] = state->discardCount[player];
     3812:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     3812:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     3812:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     3812:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     3812:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     3812:  559:    if (deckCounter == 0)
branch  0 taken 11%
branch  1 taken 89%
      418:  560:      return -1;
        -:  561:
     3394:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     3394:  563:    state->deckCount[player]--;
     3394:  564:    state->handCount[player]++;//Increment hand count
     3394:  565:  }
        -:  566:
        -:  567:  else{
  2907980:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  2907980:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2907980:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2907980:  576:    state->deckCount[player]--;
  2907980:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  2911374:  580:  return 0;
  2911792:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       27:  644:}
        -:  645:
        -:  646://new functions
        -:  647:
function playAdventurer called 100001 returned 100% blocks executed 100%
        -:  648:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int cardDrawn, int z) {
        -:  649:  
        -:  650:  //printf("IN CARD\n");
  3718892:  651:  while(drawntreasure<2){
branch  0 taken 95%
branch  1 taken 5%
  1759445:  652:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
     3812:  653:        shuffle(currentPlayer, state);
        -:  654:  
     3812:  655:      }
        -:  656:
        -:  657:
  1759445:  658:    drawCard(currentPlayer, state);    
  1759445:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  5079174:  660:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 96%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 96%
   200002:  661:        drawntreasure++;
        -:  662:    else{
  1559443:  663:        temphand[z]=cardDrawn;
  1559443:  664:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  665:       
        -:  666:      }
  1759445:  667:      z++;
        -:  668:    
        -:  669:    }
        -:  670:
  3718892:  671:  while(z-1>=0){
branch  0 taken 95%
branch  1 taken 5%
  1759445:  672:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1759445:  673:  z=z-1;
        -:  674:      }
        -:  675:
        -:  676:
   100001:  677:      return 0;
        -:  678:}
        -:  679:
function playSmithy called 1 returned 100% blocks executed 100%
        -:  680:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -:  681:    
        -:  682:    int i; 
       10:  683:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  684:  {
        4:  685:    drawCard(currentPlayer, state);
        4:  686:  }
        -:  687:      
        -:  688:      //discard card from hand
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
        1:  690:      return 0;
        -:  691:
        -:  692:}
        -:  693:
function playVillage called 2 returned 100% blocks executed 100%
        -:  694:int playVillage(struct gameState *state, int currentPlayer, int handPos) {
        -:  695:  
        -:  696:  //+1 Card
        2:  697:      drawCard(currentPlayer, state);
        -:  698:      
        -:  699:      //+2 Actions
        2:  700:      state->numActions += state->numActions + 2;   
        -:  701:      
        -:  702:      //discard played card from hand
        2:  703:      discardCard(handPos, currentPlayer, state, 0);
        2:  704:      return 0;
        -:  705:}
        -:  706:
        -:  707:
function playGreatHall called 100001 returned 100% blocks executed 100%
        -:  708:int playGreatHall(struct gameState *state, int currentPlayer, int handPos) {
        -:  709:  
        -:  710:  //+1 Card
   100001:  711:      drawCard(currentPlayer, state);
        -:  712:      
        -:  713:      //+1 Actions
   100001:  714:      state->numActions++;
        -:  715:      
        -:  716:      //discard card from hand
   100001:  717:      discardCard(handPos, currentPlayer, state, 0);
   100001:  718:      return 0;
        -:  719:}
        -:  720:
function playEmbargo called 0 returned 0% blocks executed 0%
        -:  721:int playEmbargo(struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  722:  
        -:  723:  //+2 Coins
    #####:  724:      state->coins == state->coins + 2;
        -:  725:      
        -:  726:      //see if selected pile is in play
    #####:  727:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  728:  {
    #####:  729:    return -1;
        -:  730:  }
        -:  731:      
        -:  732:      //add embargo token to selected supply pile
    #####:  733:      state->embargoTokens[choice1]++;
        -:  734:      
        -:  735:      //trash card
    #####:  736:      discardCard(handPos, currentPlayer, state, 1);    
    #####:  737:      return 0;
    #####:  738:}
        -:  739:
function cardEffect called 200001 returned 100% blocks executed 4%
        -:  740:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  741:{
        -:  742:  int i;
        -:  743:  int j;
        -:  744:  int k;
        -:  745:  int x;
        -:  746:  int index;
   200001:  747:  int currentPlayer = whoseTurn(state);
   200001:  748:  int nextPlayer = currentPlayer + 1;
        -:  749:
   200001:  750:  int tributeRevealedCards[2] = {-1, -1};
        -:  751:  int temphand[MAX_HAND];// moved above the if statement
   200001:  752:  int drawntreasure=0;
        -:  753:  int cardDrawn;
   200001:  754:  int z = 0;// this is the counter for the temp hand
   200001:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  756:    nextPlayer = 0;
    #####:  757:  }
        -:  758:
   200001:  759:  if (card == adventurer) {
branch  0 taken 50%
branch  1 taken 50%
        -:  760:  
   100000:  761:  return playAdventurer(drawntreasure, state, currentPlayer, temphand, cardDrawn, z);
        -:  762:
        -:  763:}
        -:  764:
   100001:  765:else if (card == smithy) {
branch  0 taken 0%
branch  1 taken 100%
        -:  766:
    #####:  767:  return playSmithy(state, currentPlayer, handPos);
        -:  768:  
        -:  769:}
        -:  770:
   100001:  771:else if (card == village) {
branch  0 taken 1%
branch  1 taken 99%
        -:  772:  
        1:  773:  return playVillage(state, currentPlayer, handPos);
        -:  774:}
        -:  775:
   100000:  776:else if (card == great_hall) {
branch  0 taken 100%
branch  1 taken 0%
        -:  777:
   100000:  778:  return playGreatHall(state, currentPlayer, handPos);
        -:  779:  
        -:  780:}
        -:  781:
    #####:  782:else if (card == embargo) {
branch  0 never executed
branch  1 never executed
        -:  783:  
    #####:  784:  return playEmbargo(state, currentPlayer, handPos, choice1);
        -:  785:}
        -:  786:
        -:  787:else {
        -:  788:  
        -:  789:  //uses switch to select card and perform actions
    #####:  790:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  791:    {
        -:  792: 			
        -:  793:    case council_room:
        -:  794:      //+4 Cards
    #####:  795:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  drawCard(currentPlayer, state);
    #####:  798:	}
        -:  799:			
        -:  800:      //+1 Buy
    #####:  801:      state->numBuys++;
        -:  802:			
        -:  803:      //Each other player draws a card
    #####:  804:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  805:	{
    #####:  806:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  807:	    {
    #####:  808:	      drawCard(i, state);
    #####:  809:	    }
    #####:  810:	}
        -:  811:			
        -:  812:      //put played card in played card pile
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
        -:  814:			
    #####:  815:      return 0;
        -:  816:			
        -:  817:    case feast:
        -:  818:      //gain card with cost up to 5
        -:  819:      //Backup hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  821:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  822:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  823:      }
        -:  824:      //Backup hand
        -:  825:
        -:  826:      //Update Coins for Buy
    #####:  827:      updateCoins(currentPlayer, state, 5);
    #####:  828:      x = 1;//Condition to loop on
    #####:  829:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  830:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  831:	  if (DEBUG)
        -:  832:	    printf("None of that card left, sorry!\n");
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  836:	  }
    #####:  837:	}
    #####:  838:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  839:	  printf("That card is too expensive!\n");
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  843:	  }
    #####:  844:	}
        -:  845:	else{
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
    #####:  851:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  852:	  x = 0;//No more buying cards
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  856:	  }
        -:  857:
        -:  858:	}
        -:  859:      }     
        -:  860:
        -:  861:      //Reset Hand
    #####:  862:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  863:	state->hand[currentPlayer][i] = temphand[i];
    #####:  864:	temphand[i] = -1;
    #####:  865:      }
        -:  866:      //Reset Hand
        -:  867:      			
    #####:  868:      return 0;
        -:  869:			
        -:  870:    case gardens:
    #####:  871:      return -1;
        -:  872:			
        -:  873:    case mine:
    #####:  874:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:		
    #####:  881:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  887:	{
    #####:  888:	  return -1;
        -:  889:	}
        -:  890:
    #####:  891:      gainCard(choice2, state, 2, currentPlayer);
        -:  892:
        -:  893:      //discard card from hand
    #####:  894:      discardCard(handPos, currentPlayer, state, 0);
        -:  895:
        -:  896:      //discard trashed card
    #####:  897:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  898:	{
    #####:  899:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  900:	    {
    #####:  901:	      discardCard(i, currentPlayer, state, 0);			
    #####:  902:	      break;
        -:  903:	    }
    #####:  904:	}
        -:  905:			
    #####:  906:      return 0;
        -:  907:			
        -:  908:    case remodel:
    #####:  909:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  910:
    #####:  911:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  912:	{
    #####:  913:	  return -1;
        -:  914:	}
        -:  915:
    #####:  916:      gainCard(choice2, state, 0, currentPlayer);
        -:  917:
        -:  918:      //discard card from hand
    #####:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:
        -:  921:      //discard trashed card
    #####:  922:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  925:	    {
    #####:  926:	      discardCard(i, currentPlayer, state, 0);			
    #####:  927:	      break;
        -:  928:	    }
    #####:  929:	}
        -:  930:
        -:  931:
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
    #####:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:		isGameOver(state);
    #####:  961:	      }
    #####:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
    #####:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
    #####:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  977:	    isGameOver(state);
    #####:  978:	  }
    #####:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:		
        -:  986:    case minion:
        -:  987:      //+1 action
    #####:  988:      state->numActions++;
        -:  989:			
        -:  990:      //discard card from hand
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:			
    #####:  993:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  state->coins = state->coins + 2;
    #####:  996:	}
        -:  997:			
    #####:  998:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //discard hand
    #####: 1001:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1004:	    }
        -: 1005:				
        -: 1006:	  //draw 4
    #####: 1007:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      drawCard(currentPlayer, state);
    #####: 1010:	    }
        -: 1011:				
        -: 1012:	  //other players discard hand and redraw if hand size > 4
    #####: 1013:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	    {
    #####: 1015:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1016:		{
    #####: 1017:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1018:		    {
        -: 1019:		      //discard hand
    #####: 1020:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1021:			{
    #####: 1022:			  discardCard(handPos, i, state, 0);
        -: 1023:			}
        -: 1024:							
        -: 1025:		      //draw 4
    #####: 1026:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:			{
    #####: 1028:			  drawCard(i, state);
    #####: 1029:			}
    #####: 1030:		    }
    #####: 1031:		}
    #####: 1032:	    }
        -: 1033:				
    #####: 1034:	}
    #####: 1035:      return 0;
        -: 1036:		
        -: 1037:    case steward:
    #####: 1038:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
        -: 1040:	  //+2 cards
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	  drawCard(currentPlayer, state);
    #####: 1043:	}
    #####: 1044:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1045:	{
        -: 1046:	  //+2 coins
    #####: 1047:	  state->coins = state->coins + 2;
    #####: 1048:	}
        -: 1049:      else
        -: 1050:	{
        -: 1051:	  //trash 2 cards in hand
    #####: 1052:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1053:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1054:	}
        -: 1055:			
        -: 1056:      //discard card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
    #####: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
    #####: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
    #####: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
    #####: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
    #####: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1105:	  state->coins += 2;
    #####: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
    #####: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
    #####: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1135:	    {
    #####: 1136:	      j++;
    #####: 1137:	    }
    #####: 1138:	}
    #####: 1139:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1156:	    }
    #####: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
    #####: 1172:	    }
    #####: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1187:		    {
    #####: 1188:		      discardCard(j, i, state, 0);
    #####: 1189:		      break;
        -: 1190:		    }
    #####: 1191:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1192:		    {
    #####: 1193:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1194:			{
        -: 1195:			  if (DEBUG)
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1197:			}	
    #####: 1198:		      break;
        -: 1199:		    }		
    #####: 1200:		}
        -: 1201:					
    #####: 1202:	    }
        -: 1203:				
    #####: 1204:	}				
        -: 1205:
        -: 1206:      //discard played card from hand
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1208:
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1229:	}
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1237:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1241:	}
    #####: 1242:      }
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
        -: 1254:	    }
    #####: 1255:	}
    #####: 1256:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1266:	    }
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
        -: 1277:}
   200001: 1278:}
        -: 1279:
function discardCard called 100004 returned 100% blocks executed 80%
        -: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:	
        -: 1283:  //if card is not trashed, added to Played pile 
   100004: 1284:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1285:    {
        -: 1286:      //add card to played pile
   100004: 1287:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   100004: 1288:      state->playedCardCount++;
   100004: 1289:    }
        -: 1290:	
        -: 1291:  //set played card to -1
   100004: 1292:  state->hand[currentPlayer][handPos] = -1;
        -: 1293:	
        -: 1294:  //remove card from player's hand
   100004: 1295:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
    #####: 1299:    }
   100004: 1300:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1301:    {
        -: 1302:      //reduce number of cards in hand
    #####: 1303:      state->handCount[currentPlayer]--;
    #####: 1304:    }
        -: 1305:  else 	
        -: 1306:    {
        -: 1307:      //replace discarded card with last card in hand
   100004: 1308:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:      //set last card to -1
   100004: 1310:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:      //reduce number of cards in hand
   100004: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:	
   100004: 1315:  return 0;
        -: 1316:}
        -: 1317:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:  //Note: supplyPos is enum of choosen card
        -: 1321:	
        -: 1322:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1324:    {
    #####: 1325:      return -1;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //added card for [whoseTurn] current player:
        -: 1329:  // toFlag = 0 : add to discard
        -: 1330:  // toFlag = 1 : add to deck
        -: 1331:  // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1334:    {
    #####: 1335:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:      state->deckCount[player]++;
    #####: 1337:    }
    #####: 1338:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:      state->handCount[player]++;
    #####: 1342:    }
        -: 1343:  else
        -: 1344:    {
    #####: 1345:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:      state->discardCount[player]++;
        -: 1347:    }
        -: 1348:	
        -: 1349:  //decrease number in supply pile
    #####: 1350:  state->supplyCount[supplyPos]--;
        -: 1351:	 
    #####: 1352:  return 0;
    #####: 1353:}
        -: 1354:
function updateCoins called 210472 returned 100% blocks executed 100%
        -: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:  int i;
        -: 1358:	
        -: 1359:  //reset coin count
   210472: 1360:  state->coins = 0;
        -: 1361:
        -: 1362:  //add coins for each Treasure card in player's hand
  2525664: 1363:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1364:    {
  1052360: 1365:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1366:	{
   841876: 1367:	  state->coins += 1;
   841876: 1368:	}
   210484: 1369:      else if (state->hand[player][i] == silver)
branch  0 taken 1%
branch  1 taken 99%
        -: 1370:	{
        7: 1371:	  state->coins += 2;
        7: 1372:	}
   210477: 1373:      else if (state->hand[player][i] == gold)
branch  0 taken 1%
branch  1 taken 99%
        -: 1374:	{
        3: 1375:	  state->coins += 3;
        3: 1376:	}	
  1052360: 1377:    }	
        -: 1378:
        -: 1379:  //add bonus
   210472: 1380:  state->coins += bonus;
        -: 1381:
   210472: 1382:  return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
        -: 1388:
