
***********BEGINNING SMITHY CARD TESTING**********

Giving the current player a smithy card in the last position of their hand
Testing that the current player has a smithy card in the last position of their hand
SUCCESS

Playing the Smithy card in the last position of the hand
Testing that the played card was the Smithy card.
FAILURE

Testing that the player drew 3 cards (Gaining 2 cards overall, after discard)
SUCCESS

Testing that 3 cards were taken from the deck
SUCCESS

Testing that only 1 card was played
SUCCESS

Testing the the other players hand has the same number of cards that it started with
SUCCESS

Checking that the other players deck count remained the same
SUCCESS

Testing that the other players deck has the same cards in it as at game initialization
Card #0 SUCCESS

Card #1 SUCCESS

Card #2 SUCCESS

Card #3 SUCCESS

Card #4 SUCCESS

Card #5 SUCCESS

Card #6 SUCCESS

Card #7 SUCCESS

Card #8 SUCCESS

Card #9 SUCCESS

Testing the the other players discard pile has the same number of cards that it started with
SUCCESS

***********FINISHING SMITHY CARD TESTING**********


***********BEGINNING ADVENTURER CARD TESTING**********

Giving the current player a Adventurer card in the last position of their hand
Testing that the current player has a Adventurer card in the last position of their hand
SUCCESS

Setting up the players deck so that we know what is in it.
Playing the Adventurer card in the last position of the hand
Testing the top of the discard pile for a cutpurse card
FAILURE

Testing for a smithy card under the cutpurse card in the discard pile
FAILURE

Testing whether the player gained 2 treasure cards
FAILURE

Testing the the other players hand has the same number of cards that it started with
SUCCESS

Checking that the other players deck count remained the same
SUCCESS

Testing that the other players deck has the same cards in it as at game initialization
Card #0 SUCCESS

Card #1 SUCCESS

Card #2 SUCCESS

Card #3 SUCCESS

Card #4 SUCCESS

Card #5 SUCCESS

Card #6 SUCCESS

Card #7 SUCCESS

Card #8 SUCCESS

Card #9 SUCCESS

Testing the the other players discard pile has the same number of cards that it started with
SUCCESS

Testing that the players hand has 2 more cards in it than at game start
FAILURE

Testing that the top two cards in the players hand are treasure cards
Top Card
SUCCESS

2nd Card
SUCCESS

***********FINISHING ADVENTURER CARD TESTING**********


***********BEGINNING VILLAGE CARD TESTING**********

Giving the current player a Village card in the last position of their hand
Testing that the current player has a Village card in the last position of their hand
SUCCESS

Playing the Village card in the last position of the hand
Testing that the played card was the Village card.
FAILURE

Testing that the player drew 1 cards (Gaining 0 cards overall, after discard)
(This could give a false positive)
SUCCESS

Testing that 1 card was drawn from the deck
FAILURE

Testing that the current number of actions increased by 2
SUCCESS

Testing that only 1 card was played
SUCCESS

Testing the the other players hand has the same number of cards that it started with
SUCCESS

Testing that the other players deck count remained the same
FAILURE

Testing that the other players deck has the same cards in it as at game initialization
Card #0 FAILURE

Card #1 SUCCESS

Card #2 SUCCESS

Card #3 SUCCESS

Card #4 FAILURE

Card #5 SUCCESS

Card #6 SUCCESS

Card #7 SUCCESS

Card #8 SUCCESS

Card #9 SUCCESS

Testing the the other players discard pile has the same number of cards that it started with
SUCCESS

***********FINISHING VILLAGE CARD TESTING**********


***********BEGINNING COUNCIL ROOM CARD TESTING**********

Giving the current player a Council Room card in the last position of their hand
Testing that the current player has a Council Room card in the last position of their hand
SUCCESS

Playing the Council Room card in the last position of the hand
Testing that the played card was the Council Room card.
SUCCESS

Testing that the current player drew 4 cards (Gaining 3 cards overall, after discard)
FAILURE

Testing that 4 cards were taken from the current players deck
FAILURE

Testing that 1 card was taken from the other players deck
FAILURE

Testing that the other player drew a card, increasing their handCount by 1
FAILURE

Testing that numBuys was increased by 1
SUCCESS

Testing that only 1 card was played
SUCCESS

Testing that the other players deck has the same cards in it as at game initialization 
(Card #0 should fail) 
Card #0 SUCCESS

Card #1 SUCCESS

Card #2 SUCCESS

Card #3 SUCCESS

Card #4 SUCCESS

Card #5 SUCCESS

Card #6 SUCCESS

Card #7 SUCCESS

Card #8 SUCCESS

Card #9 SUCCESS

Testing the the other players discard pile has the same number of cards that it started with
SUCCESS

***********FINISHING COUNCIL ROOM CARD TESTING**********


***********BEGINNING updateCoins() TESTING**********

Filling the current players hand with smithys
Testing that updateCoins() sets coins to 0 if no treasure cards are found in hand and bonus is 0
SUCCESS

Testing that updateCoins() correctly sets coins with no treasure cards and a non-zero bonus
SUCCESS

Testing that updateCoins() correctly resets coins at the beginning of the function if coins is
something other than 0 when it is called
SUCCESS

Testing that updateCoins() correctly calculates and sets coins with the players hand full 
of coppers
SUCCESS

Testing that updateCoins() correctly calculates and sets coins with the players hand full 
of silvers
SUCCESS

Testing that updateCoins() correctly calculates and sets coins with the players hand full 
of golds
SUCCESS

Testing that updateCoins() correctly calculates and sets coins with the players hand full 
of a random mix of treasure cards
SUCCESS

Testing that the current players deck count has remained the same after all these updateCoins() 
calls
SUCCESS

Testing that the current players hand count has remained the same after all these updateCoins() 
calls
SUCCESS

***********FINISHING updateCoins() TESTING**********


***********BEGINNING shuffle() TESTING**********

Testing if shuffle changes at least one card in the current players deck.
SUCCESS

Test that shuffles sorting method actually sorts a passed array.
SUCCESS

Testing that the deck of the other player stays the same
Card #0 SUCCESS

Card #1 SUCCESS

Card #2 SUCCESS

Card #3 SUCCESS

Card #4 SUCCESS

Card #5 SUCCESS

Card #6 SUCCESS

Card #7 SUCCESS

Card #8 SUCCESS

Card #9 SUCCESS

Testing that shuffle terminates in the correct spot and returns -1 if deckCount is 0
SUCCESS

Testing that shuffle terminates in the correct spot and returns -1 if deckCount is negative
SUCCESS

Testing that shuffle terminates in the correct spot and returns 0 if deckCount is 1
SUCCESS

Testing that shuffle() terminates in the correct spot and returns 0 if deckCount is a 
large positive number
SUCCESS

***********FINISHING shuffle() TESTING**********


***********BEGINNING getCost() TESTING**********

Testing each card passed into the getCost method, making sure they all return the correct values
Curse Cost: 0. Testing.
SUCCESS

Estate Cost: 2. Testing.
SUCCESS

Duchy Cost: 5. Testing.
SUCCESS

Province Cost: 8. Testing.
SUCCESS

Copper Cost: 0. Testing.
SUCCESS

Silver Cost: 3. Testing.
SUCCESS

Gold Cost: 6. Testing.
SUCCESS

Adventurer Cost: 6. Testing.
SUCCESS

Council Room Cost: 5. Testing.
SUCCESS

Feast Cost: 4. Testing.
SUCCESS

Gardens Cost: 4. Testing.
SUCCESS

Mine Cost: 5. Testing.
SUCCESS

Remodel Cost: 4. Testing.
SUCCESS

Smithy Cost: 4. Testing.
SUCCESS

Village Cost: 3. Testing.
SUCCESS

Baron Cost: 4. Testing.
SUCCESS

Great Hall Cost: 3. Testing.
SUCCESS

Minion Cost: 5. Testing.
SUCCESS

Steward Cost: 3. Testing.
SUCCESS

Tribute Cost: 5. Testing.
SUCCESS

Ambassador Cost: 3. Testing.
SUCCESS

Cutpurse Cost: 4. Testing.
SUCCESS

Embargo Cost: 2. Testing.
SUCCESS

Outpost Cost: 5. Testing.
SUCCESS

Salvager Cost: 4. Testing.
SUCCESS

Sea Hag Cost: 4. Testing.
SUCCESS

Treasure Map Cost: 4. Testing.
SUCCESS

Testing conditions to return -1
Testing getCost with 200. Expectation: -1 returned. 
SUCCESS

Testing getCost with -25. Expectation: -1 returned. 
SUCCESS

***********FINISHING getCost() TESTING**********


***********BEGINNING isGameOver() TESTING**********

Testing if game is over if just the treasure_map supply pile contains cards
Expected result: Game Over (return 1).
SUCCESS

Testing if game is over with all the supply piles containing cards
Expected result: Game Not Over (return 0).
SUCCESS

Testing if game is over with all the supply piles but one containing cards
Expected result: Game Not Over (return 0).
SUCCESS

Testing if game is over with all the supply piles but two containing cards
Expected result: Game Not Over (return 0).
SUCCESS

Testing if game is over with all the supply piles but three containing cards
Expected result: Game Over (return 1).
SUCCESS

Testing if game is over with all the supply piles containing cards except for the province pile
Expected result: Game Over (return 1).
SUCCESS

Testing if game is over with 3 supply piles being empty, two of those supply piles being at the 
min and max of the isGameOver supply pile checks, 0 and 24
Expected result: Game Over (return 1).
SUCCESS

***********FINISHING isGameOver() TESTING**********

File 'dominion.c'
Lines executed:32.57% of 571
Branches executed:29.79% of 423
Taken at least once:26.24% of 423
Calls executed:18.81% of 101
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6559 returned 100% blocks executed 100%
     6559:    8:int compare(const void* a, const void* b) {
     6559:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     1499:   10:    return 1;
     5060:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       73:   12:    return -1;
     4987:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 22 returned 100% blocks executed 100%
       22:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        2:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1210:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     1170:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1170:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1170:  217:    newDeckPos++;
   250173:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   249003:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1170:  221:    state->deckCount[player]--;
        -:  222:  }
      687:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
      667:  224:    state->deck[player][i] = newDeck[i];
      667:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 3 returned 100% blocks executed 100%
        3:  320:int supplyCount(int card, struct gameState *state) {
        3:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 100%
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        5:  401:  j = 0;
      130:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  405:	{
        9:  406:	  j++;
        -:  407:	}
        -:  408:    }
        5:  409:  if ( j >= 3)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 49 returned 100% blocks executed 38%
       49:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       49:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       49:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       49:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       49:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       49:  576:    state->deckCount[player]--;
       49:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       49:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 29 returned 100% blocks executed 100%
       29:  583:int getCost(int cardNumber)
        -:  584:{
       29:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return playAdventurer(state);
call    0 never executed
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
call    0 never executed
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return playGardens();
call    0 never executed
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		return playSmithy(state, handPos);
call    0 never executed
        -:  815:		
        -:  816:    case village:
    #####:  817:      return playVillage(state, handPos);
call    0 never executed
        -:  818:		
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
        -:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:		isGameOver(state);
call    0 never executed
        -:  846:	      }
        -:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
        -:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
        -:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  862:	    isGameOver(state);
call    0 never executed
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
        -:  871:      //+1 Card
    #####:  872:      drawCard(currentPlayer, state);
call    0 never executed
        -:  873:			
        -:  874:      //+1 Actions
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case minion:
        -:  882:      //+1 action
    #####:  883:      state->numActions++;
        -:  884:			
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  887:			
    #####:  888:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  889:	{
    #####:  890:	  state->coins = state->coins + 2;
        -:  891:	}
        -:  892:			
    #####:  893:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //discard hand
    #####:  896:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  897:	    {
    #####:  898:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  899:	    }
        -:  900:				
        -:  901:	  //draw 4
    #####:  902:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  903:	    {
    #####:  904:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  905:	    }
        -:  906:				
        -:  907:	  //other players discard hand and redraw if hand size > 4
    #####:  908:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  911:		{
    #####:  912:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  913:		    {
        -:  914:		      //discard hand
    #####:  915:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  916:			{
    #####:  917:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  918:			}
        -:  919:							
        -:  920:		      //draw 4
    #####:  921:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  922:			{
    #####:  923:			  drawCard(i, state);
call    0 never executed
        -:  924:			}
        -:  925:		    }
        -:  926:		}
        -:  927:	    }
        -:  928:				
        -:  929:	}
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case steward:
    #####:  933:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  934:	{
        -:  935:	  //+2 cards
    #####:  936:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  937:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  938:	}
    #####:  939:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  940:	{
        -:  941:	  //+2 coins
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:      else
        -:  945:	{
        -:  946:	  //trash 2 cards in hand
    #####:  947:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  948:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  949:	}
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case tribute:
    #####:  956:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  957:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	  state->deckCount[nextPlayer]--;
        -:  960:	}
    #####:  961:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  962:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  963:	  state->discardCount[nextPlayer]--;
        -:  964:	}
        -:  965:	else{
        -:  966:	  //No Card to Reveal
        -:  967:	  if (DEBUG){
        -:  968:	    printf("No cards to reveal\n");
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      else{
    #####:  974:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  975:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  976:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  977:	    state->deckCount[nextPlayer]++;
    #####:  978:	    state->discard[nextPlayer][i] = -1;
    #####:  979:	    state->discardCount[nextPlayer]--;
        -:  980:	  }
        -:  981:			    
    #####:  982:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  983:	} 
    #####:  984:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  985:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  986:	state->deckCount[nextPlayer]--;
    #####:  987:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  988:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  989:	state->deckCount[nextPlayer]--;
        -:  990:      }    
        -:  991:		       
    #####:  992:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  993:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  994:	state->playedCardCount++;
    #####:  995:	tributeRevealedCards[1] = -1;
        -:  996:      }
        -:  997:
    #####:  998:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  999:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1000:	  state->coins += 2;
        -: 1001:	}
        -: 1002:		    
    #####: 1003:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1004:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1005:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1006:	}
        -: 1007:	else{//Action Card
    #####: 1008:	  state->numActions = state->numActions + 2;
        -: 1009:	}
        -: 1010:      }
        -: 1011:	    
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case ambassador:
    #####: 1015:      j = 0;		//used to check if player has enough cards to discard
        -: 1016:
    #####: 1017:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
    #####: 1022:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  return -1;
        -: 1025:	}
        -: 1026:
    #####: 1027:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1030:	    {
    #####: 1031:	      j++;
        -: 1032:	    }
        -: 1033:	}
    #####: 1034:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1035:	{
    #####: 1036:	  return -1;				
        -: 1037:	}
        -: 1038:
        -: 1039:      if (DEBUG) 
        -: 1040:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1041:
        -: 1042:      //increase supply count for choosen card by amount being discarded
    #####: 1043:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1044:			
        -: 1045:      //each other player gains a copy of revealed card
    #####: 1046:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1049:	    {
    #####: 1050:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1051:	    }
        -: 1052:	}
        -: 1053:
        -: 1054:      //discard played card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1056:
        -: 1057:      //trash copies of cards returned to supply
    #####: 1058:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1065:		  break;
        -: 1066:		}
        -: 1067:	    }
        -: 1068:	}			
        -: 1069:
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case cutpurse:
        -: 1073:
    #####: 1074:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1075:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1078:	    {
    #####: 1079:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1080:		{
    #####: 1081:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1082:		    {
    #####: 1083:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1084:		      break;
        -: 1085:		    }
    #####: 1086:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1087:		    {
    #####: 1088:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1089:			{
        -: 1090:			  if (DEBUG)
        -: 1091:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1092:			}	
    #####: 1093:		      break;
        -: 1094:		    }		
        -: 1095:		}
        -: 1096:					
        -: 1097:	    }
        -: 1098:				
        -: 1099:	}				
        -: 1100:
        -: 1101:      //discard played card from hand
    #####: 1102:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:
        -: 1106:		
        -: 1107:    case embargo: 
        -: 1108:      //+2 Coins
    #####: 1109:      state->coins = state->coins + 2;
        -: 1110:			
        -: 1111:      //see if selected pile is in play
    #####: 1112:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //add embargo token to selected supply pile
    #####: 1118:      state->embargoTokens[choice1]++;
        -: 1119:			
        -: 1120:      //trash card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case outpost:
        -: 1125:      //set outpost flag
    #####: 1126:      state->outpostPlayed++;
        -: 1127:			
        -: 1128:      //discard card
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case salvager:
        -: 1133:      //+1 buy
    #####: 1134:      state->numBuys++;
        -: 1135:			
    #####: 1136:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
        -: 1138:	  //gain coins equal to trashed card
    #####: 1139:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1140:	  //trash card
    #####: 1141:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1142:	}
        -: 1143:			
        -: 1144:      //discard card
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case sea_hag:
    #####: 1149:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1150:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1151:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1152:	  state->discardCount[i]++;
    #####: 1153:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1154:	}
        -: 1155:      }
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case treasure_map:
        -: 1159:      //search hand for another treasure_map
    #####: 1160:      index = -1;
    #####: 1161:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1164:	    {
    #####: 1165:	      index = i;
    #####: 1166:	      break;
        -: 1167:	    }
        -: 1168:	}
    #####: 1169:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
        -: 1171:	  //trash both treasure cards
    #####: 1172:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1173:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1174:
        -: 1175:	  //gain 4 Gold cards
    #####: 1176:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:	    {
    #####: 1178:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1179:	    }
        -: 1180:				
        -: 1181:	  //return success
    #####: 1182:	  return 1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //no second treasure_map found in hand
    #####: 1186:      return -1;
        -: 1187:    }
        -: 1188:	
    #####: 1189:  return -1;
        -: 1190:}
        -: 1191:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1192:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1193:{
        -: 1194:	
        -: 1195:  //if card is not trashed, added to Played pile 
        3: 1196:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1197:    {
        -: 1198:      //add card to played pile
        3: 1199:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1200:      state->playedCardCount++;
        -: 1201:    }
        -: 1202:	
        -: 1203:  //set played card to -1
        3: 1204:  state->hand[currentPlayer][handPos] = -1;
        -: 1205:	
        -: 1206:  //remove card from player's hand
        3: 1207:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1208:    {
        -: 1209:      //reduce number of cards in hand
    #####: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        3: 1212:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1213:    {
        -: 1214:      //reduce number of cards in hand
        1: 1215:      state->handCount[currentPlayer]--;
        -: 1216:    }
        -: 1217:  else 	
        -: 1218:    {
        -: 1219:      //replace discarded card with last card in hand
        2: 1220:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1221:      //set last card to -1
        2: 1222:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1223:      //reduce number of cards in hand
        2: 1224:      state->handCount[currentPlayer]--;
        -: 1225:    }
        -: 1226:	
        3: 1227:  return 0;
        -: 1228:}
        -: 1229:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1230:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1231:{
        -: 1232:  //Note: supplyPos is enum of choosen card
        -: 1233:	
        -: 1234:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1235:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1236:    {
    #####: 1237:      return -1;
        -: 1238:    }
        -: 1239:	
        -: 1240:  //added card for [whoseTurn] current player:
        -: 1241:  // toFlag = 0 : add to discard
        -: 1242:  // toFlag = 1 : add to deck
        -: 1243:  // toFlag = 2 : add to hand
        -: 1244:
        3: 1245:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
    #####: 1247:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1248:      state->deckCount[player]++;
        -: 1249:    }
        3: 1250:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1251:    {
        3: 1252:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1253:      state->handCount[player]++;
        -: 1254:    }
        -: 1255:  else
        -: 1256:    {
    #####: 1257:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1258:      state->discardCount[player]++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //decrease number in supply pile
        3: 1262:  state->supplyCount[supplyPos]--;
        -: 1263:	 
        3: 1264:  return 0;
        -: 1265:}
        -: 1266:
function updateCoins called 15 returned 100% blocks executed 100%
       15: 1267:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1268:{
        -: 1269:  int i;
        -: 1270:	
        -: 1271:  //reset coin count
       15: 1272:  state->coins = 0;
        -: 1273:
        -: 1274:  //add coins for each Treasure card in player's hand
       90: 1275:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1276:    {
       75: 1277:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1278:	{
       38: 1279:	  state->coins += 1;
        -: 1280:	}
       37: 1281:      else if (state->hand[player][i] == silver)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1282:	{
        8: 1283:	  state->coins += 2;
        -: 1284:	}
       29: 1285:      else if (state->hand[player][i] == gold)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 1286:	{
        6: 1287:	  state->coins += 3;
        -: 1288:	}	
        -: 1289:    }	
        -: 1290:
        -: 1291:  //add bonus
       15: 1292:  state->coins += bonus;
        -: 1293:
       15: 1294:  return 0;
        -: 1295:}
        -: 1296:
        -: 1297://************ADVENTURER
        -: 1298:
function playAdventurer called 1 returned 100% blocks executed 44%
        1: 1299:int playAdventurer(struct gameState *state) {
        1: 1300:	int drawntreasure = 3;
        1: 1301:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1302:	int cardDrawn;
        -: 1303:	int temphand[MAX_HAND];
        1: 1304:	int z = 0;
        -: 1305:	
        2: 1306:	while(drawntreasure<2){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1307:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1308:		  shuffle(currentPlayer, state);
call    0 never executed
        -: 1309:		}
        -: 1310:		
    #####: 1311:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1312:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:		
    #####: 1314:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1315:		  drawntreasure++;
        -: 1316:		else{
    #####: 1317:		  temphand[z]=cardDrawn;
    #####: 1318:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1319:		  z++;
        -: 1320:		}
        -: 1321:      }
        -: 1322:	  
        2: 1323:    while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1324:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1325:	z=z-1;
        -: 1326:      }
        -: 1327:	  
        1: 1328:    return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://************SMITHY
        -: 1333:
function playSmithy called 1 returned 100% blocks executed 100%
        1: 1334:int playSmithy(struct gameState *state, int handPos) {
        1: 1335:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1336:	int i;
        -: 1337:	//+3 Cards
        4: 1338:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1339:	{
        3: 1340:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1341:	}
        -: 1342:			
        -: 1343:      //discard card from hand
        1: 1344:      discardCard(handPos - 1, currentPlayer, state, 0);
call    0 returned 100%
        1: 1345:      return 0;
        -: 1346:}
        -: 1347:
        -: 1348://************VILLAGE
        -: 1349:
function playVillage called 1 returned 100% blocks executed 100%
        1: 1350:int playVillage(struct gameState *state, int handPos) {
        1: 1351:	int currentPlayer = whoseTurn(state) + 1;
call    0 returned 100%
        -: 1352:	
        -: 1353:	//+1 Card
        1: 1354:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1355:			
        -: 1356:      //+2 Actions
        1: 1357:      state->numActions = state->numActions + 2;
        -: 1358:			
        -: 1359:      //discard played card from hand
        1: 1360:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1361:      return 0;
        -: 1362:	
        -: 1363:}
        -: 1364:
        -: 1365://************COUNCILROOM
        -: 1366:
function playCouncil_Room called 1 returned 100% blocks executed 100%
        1: 1367:int playCouncil_Room(struct gameState *state, int handPos) {
        1: 1368:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1369:	int i;
        -: 1370:	
        -: 1371:	//+4 Cards
        5: 1372:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1373:	{
        4: 1374:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1375:	}
        -: 1376:			
        -: 1377:      //+1 Buy
        1: 1378:      state->numBuys++;
        -: 1379:			
        -: 1380:      //Each other player draws a card
        3: 1381:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1382:	{
        2: 1383:	  if ( i == currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1384:	    {
        1: 1385:	      drawCard(i, state);
call    0 returned 100%
        -: 1386:	    }
        -: 1387:	}
        -: 1388:			
        -: 1389:      //put played card in played card pile
        1: 1390:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1391:			
        1: 1392:      return 0;
        -: 1393:
        -: 1394:}
        -: 1395:
        -: 1396://************GARDENS
        -: 1397:
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1398:int playGardens(void) {
    #####: 1399:	return -1;
        -: 1400:}
        -: 1401:
        -: 1402://end of dominion.c
        -: 1403:
