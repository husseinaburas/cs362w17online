Test isGameOver() 
Test success.
Test success.
Test failure.
Test success.
Test buyCard() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test whoseTurn() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test Adventurer card
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test Smithy card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test Great Hall card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test Village card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
File 'dominion.c'
Lines executed:43.89% of 565
Branches executed:46.28% of 417
Taken at least once:29.26% of 417
Calls executed:46.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 479 returned 100% blocks executed 100%
      479:    8:int compare(const void* a, const void* b) {
      479:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       77:   10:    return 1;
      402:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       91:   12:    return -1;
      311:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 157 returned 100% blocks executed 100%
      157:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      157:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      157:  209:  if (state->deckCount[player] < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      131:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      306:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  215:    card = (int)(Random() * state->deckCount[player]);
call    0 returned 100%
      254:  216:    newDeck[newDeckPos] = state->deck[player][card];
      254:  217:    newDeckPos++;
     1387:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     1133:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      254:  221:    state->deckCount[player]--;
        -:  222:  }
      280:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  224:    state->deck[player][i] = newDeck[i];
      254:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       26:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 12 returned 100% blocks executed 80%
       12:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       12:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       12:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       12:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
       12:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  259:    {
        6:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        6:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 93%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 12 returned 100% blocks executed 100%
       12:  315:int handCard(int handPos, struct gameState *state) {
       12:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 28 returned 100% blocks executed 100%
       28:  320:int supplyCount(int card, struct gameState *state) {
       28:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 53 returned 100% blocks executed 100%
       53:  346:int whoseTurn(struct gameState *state) {
       53:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 82%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 165 returned 100% blocks executed 100%
      165:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      165:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      154:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 51%
branch  1 taken 49% (fallthrough)
       78:  534:      state->deck[player][i] = state->discard[player][i];
       78:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       76:  538:    state->deckCount[player] = state->discardCount[player];
       76:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       76:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       76:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       76:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       76:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       76:  559:    if (deckCounter == 0)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       68:  560:      return -1;
        -:  561:
        8:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  563:    state->deckCount[player]--;
        8:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       89:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       89:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       89:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       89:  576:    state->deckCount[player]--;
       89:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       97:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 8 returned 100% blocks executed 13%
        8:  583:int getCost(int cardNumber)
        -:  584:{
        8:  585:  switch( cardNumber )
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 12 returned 100% blocks executed 10%
       12:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       12:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       12:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       12:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       12:  660:  int z = 0;// this is the counter for the temp hand
       12:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       12:  667:  switch( card )
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 17%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        6:  670:      playAdventurer(state);
call    0 returned 100%
        -:  671:
        -:  672:    case council_room:
        6:  673:      playCouncil_Room(state, handPos);
call    0 returned 100%
        -:  674:
        -:  675:    case feast:
        6:  676:      playFeast(state, choice1);
call    0 returned 100%
        -:  677:
        -:  678:    case gardens:
        6:  679:      return -1;
        -:  680:
        -:  681:    case mine:
    #####:  682:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  683:
    #####:  684:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  685:	{
    #####:  686:	  return -1;
        -:  687:	}
        -:  688:
    #####:  689:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  695:	{
    #####:  696:	  return -1;
        -:  697:	}
        -:  698:
    #####:  699:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  700:
        -:  701:      //discard card from hand
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  703:
        -:  704:      //discard trashed card
    #####:  705:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  710:	      break;
        -:  711:	    }
        -:  712:	}
        -:  713:
    #####:  714:      return 0;
        -:  715:
        -:  716:    case remodel:
    #####:  717:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  720:	{
    #####:  721:	  return -1;
        -:  722:	}
        -:  723:
    #####:  724:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  725:
        -:  726:      //discard card from hand
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  735:	      break;
        -:  736:	    }
        -:  737:	}
        -:  738:
        -:  739:
    #####:  740:      return 0;
        -:  741:
        -:  742:    case smithy:
        2:  743:      playSmithy(state, handPos);
call    0 returned 100%
        -:  744:
        -:  745:    case village:
        4:  746:      playVillage(state, handPos);
call    0 returned 100%
        -:  747:
        -:  748:    case baron:
        4:  749:      state->numBuys++;//Increase buys by 1!
        4:  750:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  751:	int p = 0;//Iterator for hand!
    #####:  752:	int card_not_discarded = 1;//Flag for discard set!
    #####:  753:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  754:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  755:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  756:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  757:	    state->discardCount[currentPlayer]++;
    #####:  758:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  759:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  760:	    }
    #####:  761:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  762:	    state->handCount[currentPlayer]--;
    #####:  763:	    card_not_discarded = 0;//Exit the loop
        -:  764:	  }
    #####:  765:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  766:	    if(DEBUG) {
        -:  767:	      printf("No estate cards in your hand, invalid choice\n");
        -:  768:	      printf("Must gain an estate if there are any\n");
        -:  769:	    }
    #####:  770:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  771:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  772:	      state->supplyCount[estate]--;//Decrement estates
    #####:  773:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:		isGameOver(state);
call    0 never executed
        -:  775:	      }
        -:  776:	    }
    #####:  777:	    card_not_discarded = 0;//Exit the loop
        -:  778:	  }
        -:  779:
        -:  780:	  else{
    #####:  781:	    p++;//Next card
        -:  782:	  }
        -:  783:	}
        -:  784:      }
        -:  785:
        -:  786:      else{
        4:  787:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  788:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        4:  789:	  state->supplyCount[estate]--;//Decrement Estates
        4:  790:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  791:	    isGameOver(state);
call    0 never executed
        -:  792:	  }
        -:  793:	}
        -:  794:      }
        -:  795:
        -:  796:
        4:  797:      return 0;
        -:  798:
        -:  799:    case great_hall:
        -:  800:      //+1 Card
        2:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:
        -:  803:      //+1 Actions
        2:  804:      state->numActions++;
        -:  805:
        -:  806:      //discard card from hand
        2:  807:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  808:      return 0;
        -:  809:
        -:  810:    case minion:
        -:  811:      //+1 action
    #####:  812:      state->numActions++;
        -:  813:
        -:  814:      //discard card from hand
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  816:
    #####:  817:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  state->coins = state->coins + 2;
        -:  820:	}
        -:  821:
    #####:  822:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  823:	{
        -:  824:	  //discard hand
    #####:  825:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  826:	    {
    #####:  827:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  828:	    }
        -:  829:
        -:  830:	  //draw 4
    #####:  831:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  832:	    {
    #####:  833:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:	    }
        -:  835:
        -:  836:	  //other players discard hand and redraw if hand size > 4
    #####:  837:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  840:		{
    #####:  841:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  842:		    {
        -:  843:		      //discard hand
    #####:  844:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  845:			{
    #####:  846:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  847:			}
        -:  848:
        -:  849:		      //draw 4
    #####:  850:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  drawCard(i, state);
call    0 never executed
        -:  853:			}
        -:  854:		    }
        -:  855:		}
        -:  856:	    }
        -:  857:
        -:  858:	}
    #####:  859:      return 0;
        -:  860:
        -:  861:    case steward:
    #####:  862:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  863:	{
        -:  864:	  //+2 cards
    #####:  865:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  866:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  867:	}
    #####:  868:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 coins
    #####:  871:	  state->coins = state->coins + 2;
        -:  872:	}
        -:  873:      else
        -:  874:	{
        -:  875:	  //trash 2 cards in hand
    #####:  876:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  877:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  878:	}
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:
        -:  884:    case tribute:
    #####:  885:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  886:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  887:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  888:	  state->deckCount[nextPlayer]--;
        -:  889:	}
    #####:  890:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  891:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  892:	  state->discardCount[nextPlayer]--;
        -:  893:	}
        -:  894:	else{
        -:  895:	  //No Card to Reveal
        -:  896:	  if (DEBUG){
        -:  897:	    printf("No cards to reveal\n");
        -:  898:	  }
        -:  899:	}
        -:  900:      }
        -:  901:
        -:  902:      else{
    #####:  903:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  904:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  905:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  906:	    state->deckCount[nextPlayer]++;
    #####:  907:	    state->discard[nextPlayer][i] = -1;
    #####:  908:	    state->discardCount[nextPlayer]--;
        -:  909:	  }
        -:  910:
    #####:  911:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  912:	}
    #####:  913:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
    #####:  916:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
        -:  919:      }
        -:  920:
    #####:  921:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  922:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  923:	state->playedCardCount++;
    #####:  924:	tributeRevealedCards[1] = -1;
        -:  925:      }
        -:  926:
    #####:  927:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  928:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  929:	  state->coins += 2;
        -:  930:	}
        -:  931:
    #####:  932:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  934:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  935:	}
        -:  936:	else{//Action Card
    #####:  937:	  state->numActions = state->numActions + 2;
        -:  938:	}
        -:  939:      }
        -:  940:
    #####:  941:      return 0;
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;		//used to check if player has enough cards to discard
        -:  945:
    #####:  946:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  947:	{
    #####:  948:	  return -1;
        -:  949:	}
        -:  950:
    #####:  951:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  return -1;
        -:  954:	}
        -:  955:
    #####:  956:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  959:	    {
    #####:  960:	      j++;
        -:  961:	    }
        -:  962:	}
    #####:  963:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:
        -:  968:      if (DEBUG)
        -:  969:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  970:
        -:  971:      //increase supply count for choosen card by amount being discarded
    #####:  972:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  973:
        -:  974:      //each other player gains a copy of revealed card
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  980:	    }
        -:  981:	}
        -:  982:
        -:  983:      //discard played card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  985:
        -:  986:      //trash copies of cards returned to supply
    #####:  987:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	    {
    #####:  991:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  994:		  break;
        -:  995:		}
        -:  996:	    }
        -:  997:	}
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001:    case cutpurse:
        -: 1002:
    #####: 1003:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:	    {
    #####: 1008:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1009:		{
    #####: 1010:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
    #####: 1012:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1013:		      break;
        -: 1014:		    }
    #####: 1015:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
    #####: 1017:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
        -: 1019:			  if (DEBUG)
        -: 1020:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1021:			}
    #####: 1022:		      break;
        -: 1023:		    }
        -: 1024:		}
        -: 1025:
        -: 1026:	    }
        -: 1027:
        -: 1028:	}
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:
        -: 1035:
        -: 1036:    case embargo:
        -: 1037:      //+2 Coins
    #####: 1038:      state->coins = state->coins + 2;
        -: 1039:
        -: 1040:      //see if selected pile is in play
    #####: 1041:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
        -: 1046:      //add embargo token to selected supply pile
    #####: 1047:      state->embargoTokens[choice1]++;
        -: 1048:
        -: 1049:      //trash card
    #####: 1050:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:    case outpost:
        -: 1054:      //set outpost flag
    #####: 1055:      state->outpostPlayed++;
        -: 1056:
        -: 1057:      //discard card
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:    case salvager:
        -: 1062:      //+1 buy
    #####: 1063:      state->numBuys++;
        -: 1064:
    #####: 1065:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
        -: 1067:	  //gain coins equal to trashed card
    #####: 1068:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1069:	  //trash card
    #####: 1070:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case sea_hag:
    #####: 1078:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1079:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1080:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1081:	  state->discardCount[i]++;
    #####: 1082:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1083:	}
        -: 1084:      }
    #####: 1085:      return 0;
        -: 1086:
        -: 1087:    case treasure_map:
        -: 1088:      //search hand for another treasure_map
    #####: 1089:      index = -1;
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1093:	    {
    #####: 1094:	      index = i;
    #####: 1095:	      break;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //trash both treasure cards
    #####: 1101:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1102:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1103:
        -: 1104:	  //gain 4 Gold cards
    #####: 1105:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	    {
    #####: 1107:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1108:	    }
        -: 1109:
        -: 1110:	  //return success
    #####: 1111:	  return 1;
        -: 1112:	}
        -: 1113:
        -: 1114:      //no second treasure_map found in hand
    #####: 1115:      return -1;
        -: 1116:    }
        -: 1117:
    #####: 1118:  return -1;
        -: 1119:}
        -: 1120:
function discardCard called 14 returned 100% blocks executed 89%
       14: 1121:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1122:{
        -: 1123:
        -: 1124:  //if card is not trashed, added to Played pile
       14: 1125:  if (trashFlag < 1)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -: 1126:    {
        -: 1127:      //add card to played pile
       12: 1128:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1129:      state->playedCardCount++;
        -: 1130:    }
        -: 1131:
        -: 1132:  //set played card to -1
       14: 1133:  state->hand[currentPlayer][handPos] = -1;
        -: 1134:
        -: 1135:  //remove card from player's hand
       14: 1136:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1137:    {
        -: 1138:      //reduce number of cards in hand
        2: 1139:      state->handCount[currentPlayer]--;
        -: 1140:    }
       12: 1141:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
    #####: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
        -: 1146:  else
        -: 1147:    {
        -: 1148:      //replace discarded card with last card in hand
       12: 1149:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1150:      //set last card to -1
       12: 1151:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1152:      //reduce number of cards in hand
       12: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:
       14: 1156:  return 0;
        -: 1157:}
        -: 1158:
function gainCard called 11 returned 100% blocks executed 70%
       11: 1159:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1160:{
        -: 1161:  //Note: supplyPos is enum of choosen card
        -: 1162:
        -: 1163:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1164:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1165:    {
    #####: 1166:      return -1;
        -: 1167:    }
        -: 1168:
        -: 1169:  //added card for [whoseTurn] current player:
        -: 1170:  // toFlag = 0 : add to discard
        -: 1171:  // toFlag = 1 : add to deck
        -: 1172:  // toFlag = 2 : add to hand
        -: 1173:
       11: 1174:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1175:    {
    #####: 1176:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1177:      state->deckCount[player]++;
        -: 1178:    }
       11: 1179:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1180:    {
    #####: 1181:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1182:      state->handCount[player]++;
        -: 1183:    }
        -: 1184:  else
        -: 1185:    {
       11: 1186:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1187:      state->discardCount[player]++;
        -: 1188:    }
        -: 1189:
        -: 1190:  //decrease number in supply pile
       11: 1191:  state->supplyCount[supplyPos]--;
        -: 1192:
       11: 1193:  return 0;
        -: 1194:}
        -: 1195:
function updateCoins called 21 returned 100% blocks executed 82%
       21: 1196:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1197:{
        -: 1198:  int i;
        -: 1199:
        -: 1200:  //reset coin count
       21: 1201:  state->coins = 0;
        -: 1202:
        -: 1203:  //add coins for each Treasure card in player's hand
       95: 1204:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1205:    {
       74: 1206:      if (state->hand[player][i] == copper)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1207:	{
       32: 1208:	  state->coins += 1;
        -: 1209:	}
       42: 1210:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1211:	{
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
       42: 1214:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1215:	{
    #####: 1216:	  state->coins += 3;
        -: 1217:	}
        -: 1218:    }
        -: 1219:
        -: 1220:  //add bonus
       21: 1221:  state->coins += bonus;
        -: 1222:
       21: 1223:  return 0;
        -: 1224:}
        -: 1225:
function playAdventurer called 6 returned 100% blocks executed 100%
        6: 1226:int playAdventurer(struct gameState *state) {
        6: 1227:  int drawntreasure = 0;
        6: 1228:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6: 1229:  int z = 1;
        -: 1230:  int cardDrawn;
        -: 1231:  int temphand[MAX_HAND];
        -: 1232:
       87: 1233:  while(drawntreasure<2){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
       75: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       60: 1235:      shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1236:    }
        -: 1237:
       75: 1238:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1239:
       75: 1240:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1241:
       75: 1242:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12: 1243:      drawntreasure++;
        -: 1244:    else  {
       63: 1245:      temphand[z]=cardDrawn;
       63: 1246:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       63: 1247:      z++;
        -: 1248:    }
        -: 1249:  }
        -: 1250:
       81: 1251:  while(z-1>=0){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       69: 1252:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       69: 1253:    z=z-1;
        -: 1254:  }
        -: 1255:
        6: 1256:  return 0;
        -: 1257:}
        -: 1258:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1259:int playSmithy(struct gameState *state, int handPos) {
        -: 1260:  int i;
        2: 1261:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1262:  //+3 Cards
        6: 1263:  for (i = 1; i < 3; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1264:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1265:  }
        -: 1266:
        -: 1267:  //discard card from hand
        2: 1268:  discardCard(handPos, currentPlayer, state, 3);
call    0 returned 100%
        2: 1269:  return 0;
        -: 1270:}
        -: 1271:
function playVillage called 4 returned 100% blocks executed 100%
        4: 1272:int playVillage(struct gameState *state, int handPos) {
        4: 1273:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1274:
        -: 1275:  //+1 Card
        4: 1276:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1277:
        -: 1278:  //+2 Actions
        4: 1279:  state->numActions = state->numActions + 2;
        -: 1280:
        -: 1281:  //discard played card from hand
        4: 1282:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4: 1283:  return 0;
        -: 1284:}
        -: 1285:
function playFeast called 6 returned 100% blocks executed 95%
        6: 1286:int playFeast(struct gameState *state, int choice1) {
        -: 1287:  int i;
        6: 1288:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1289:  int temphand[MAX_HAND];
        -: 1290:  //gain card with cost up to 5
        -: 1291:  //Backup hand
       33: 1292:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1293:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       27: 1294:    state->hand[currentPlayer][i] = -2;//Set to nothing
        -: 1295:  }
        -: 1296:  //Backup hand
        -: 1297:
        -: 1298:  //Update Coins for Buy
        6: 1299:  updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        6: 1300:  int x = 1;//Condition to loop on
        -: 1301:
       18: 1302:  while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        6: 1303:    if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1304:      if (DEBUG)
        -: 1305:        printf("None of that card left, sorry!\n");
        -: 1306:
        -: 1307:      if (DEBUG){
        -: 1308:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1309:      }
        -: 1310:    }
        6: 1311:    else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1312:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1313:
        -: 1314:      if (DEBUG){
        -: 1315:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1316:      }
        -: 1317:    }
        -: 1318:    else  {
        -: 1319:      if (DEBUG){
        -: 1320:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1321:      }
        -: 1322:
        6: 1323:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        6: 1324:      x = 0;//No more buying cards
        -: 1325:
        -: 1326:      if (DEBUG){
        -: 1327:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1328:      }
        -: 1329:
        -: 1330:    }
        -: 1331:  }
        -: 1332:
        -: 1333:  //Reset Hand
       33: 1334:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1335:    state->hand[currentPlayer][i] = temphand[i];
       27: 1336:    temphand[i] = -1;
        -: 1337:  }
        -: 1338:  //Reset Hand
        -: 1339:
        6: 1340:  return 0;
        -: 1341:}
        -: 1342:
function playCouncil_Room called 6 returned 100% blocks executed 100%
        6: 1343:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1344:  int i;
        6: 1345:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1346:  //+4 Cards
       30: 1347:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24: 1348:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1349:  }
        -: 1350:
        -: 1351:  //+1 Buy
        6: 1352:  state->numBuys++;
        -: 1353:
        -: 1354:  //Each other player draws a card
       22: 1355:  for (i = 0; i < state->numBuys; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       16: 1356:    if ( i != currentPlayer ) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       11: 1357:      drawCard(i, state);
call    0 returned 100%
        -: 1358:    }
        -: 1359:  }
        -: 1360:
        -: 1361:  //put played card in played card pile
        6: 1362:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1363:
        6: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
Test shuffle() 
Test success.
Test success.
Test success.
Test isGameOver() 
Test success.
Test success.
Test failure.
Test success.
Test buyCard() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test whoseTurn() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test Adventurer card
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test Smithy card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test Great Hall card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test Village card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
File 'dominion.c'
Lines executed:43.89% of 565
Branches executed:46.28% of 417
Taken at least once:29.26% of 417
Calls executed:46.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 479 returned 100% blocks executed 100%
      479:    8:int compare(const void* a, const void* b) {
      479:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       77:   10:    return 1;
      402:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       91:   12:    return -1;
      311:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 157 returned 100% blocks executed 100%
      157:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      157:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      157:  209:  if (state->deckCount[player] < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      131:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      306:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  215:    card = (int)(Random() * state->deckCount[player]);
call    0 returned 100%
      254:  216:    newDeck[newDeckPos] = state->deck[player][card];
      254:  217:    newDeckPos++;
     1387:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     1133:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      254:  221:    state->deckCount[player]--;
        -:  222:  }
      280:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  224:    state->deck[player][i] = newDeck[i];
      254:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       26:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 12 returned 100% blocks executed 80%
       12:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       12:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       12:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       12:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
       12:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  259:    {
        6:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        6:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 93%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 12 returned 100% blocks executed 100%
       12:  315:int handCard(int handPos, struct gameState *state) {
       12:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 28 returned 100% blocks executed 100%
       28:  320:int supplyCount(int card, struct gameState *state) {
       28:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 53 returned 100% blocks executed 100%
       53:  346:int whoseTurn(struct gameState *state) {
       53:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 82%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 165 returned 100% blocks executed 100%
      165:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      165:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      154:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 51%
branch  1 taken 49% (fallthrough)
       78:  534:      state->deck[player][i] = state->discard[player][i];
       78:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       76:  538:    state->deckCount[player] = state->discardCount[player];
       76:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       76:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       76:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       76:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       76:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       76:  559:    if (deckCounter == 0)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       68:  560:      return -1;
        -:  561:
        8:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  563:    state->deckCount[player]--;
        8:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       89:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       89:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       89:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       89:  576:    state->deckCount[player]--;
       89:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       97:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 8 returned 100% blocks executed 13%
        8:  583:int getCost(int cardNumber)
        -:  584:{
        8:  585:  switch( cardNumber )
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 12 returned 100% blocks executed 10%
       12:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       12:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       12:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       12:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       12:  660:  int z = 0;// this is the counter for the temp hand
       12:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       12:  667:  switch( card )
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 17%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        6:  670:      playAdventurer(state);
call    0 returned 100%
        -:  671:
        -:  672:    case council_room:
        6:  673:      playCouncil_Room(state, handPos);
call    0 returned 100%
        -:  674:
        -:  675:    case feast:
        6:  676:      playFeast(state, choice1);
call    0 returned 100%
        -:  677:
        -:  678:    case gardens:
        6:  679:      return -1;
        -:  680:
        -:  681:    case mine:
    #####:  682:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  683:
    #####:  684:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  685:	{
    #####:  686:	  return -1;
        -:  687:	}
        -:  688:
    #####:  689:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  695:	{
    #####:  696:	  return -1;
        -:  697:	}
        -:  698:
    #####:  699:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  700:
        -:  701:      //discard card from hand
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  703:
        -:  704:      //discard trashed card
    #####:  705:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  710:	      break;
        -:  711:	    }
        -:  712:	}
        -:  713:
    #####:  714:      return 0;
        -:  715:
        -:  716:    case remodel:
    #####:  717:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  720:	{
    #####:  721:	  return -1;
        -:  722:	}
        -:  723:
    #####:  724:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  725:
        -:  726:      //discard card from hand
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  735:	      break;
        -:  736:	    }
        -:  737:	}
        -:  738:
        -:  739:
    #####:  740:      return 0;
        -:  741:
        -:  742:    case smithy:
        2:  743:      playSmithy(state, handPos);
call    0 returned 100%
        -:  744:
        -:  745:    case village:
        4:  746:      playVillage(state, handPos);
call    0 returned 100%
        -:  747:
        -:  748:    case baron:
        4:  749:      state->numBuys++;//Increase buys by 1!
        4:  750:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  751:	int p = 0;//Iterator for hand!
    #####:  752:	int card_not_discarded = 1;//Flag for discard set!
    #####:  753:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  754:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  755:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  756:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  757:	    state->discardCount[currentPlayer]++;
    #####:  758:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  759:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  760:	    }
    #####:  761:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  762:	    state->handCount[currentPlayer]--;
    #####:  763:	    card_not_discarded = 0;//Exit the loop
        -:  764:	  }
    #####:  765:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  766:	    if(DEBUG) {
        -:  767:	      printf("No estate cards in your hand, invalid choice\n");
        -:  768:	      printf("Must gain an estate if there are any\n");
        -:  769:	    }
    #####:  770:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  771:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  772:	      state->supplyCount[estate]--;//Decrement estates
    #####:  773:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:		isGameOver(state);
call    0 never executed
        -:  775:	      }
        -:  776:	    }
    #####:  777:	    card_not_discarded = 0;//Exit the loop
        -:  778:	  }
        -:  779:
        -:  780:	  else{
    #####:  781:	    p++;//Next card
        -:  782:	  }
        -:  783:	}
        -:  784:      }
        -:  785:
        -:  786:      else{
        4:  787:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  788:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        4:  789:	  state->supplyCount[estate]--;//Decrement Estates
        4:  790:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  791:	    isGameOver(state);
call    0 never executed
        -:  792:	  }
        -:  793:	}
        -:  794:      }
        -:  795:
        -:  796:
        4:  797:      return 0;
        -:  798:
        -:  799:    case great_hall:
        -:  800:      //+1 Card
        2:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:
        -:  803:      //+1 Actions
        2:  804:      state->numActions++;
        -:  805:
        -:  806:      //discard card from hand
        2:  807:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  808:      return 0;
        -:  809:
        -:  810:    case minion:
        -:  811:      //+1 action
    #####:  812:      state->numActions++;
        -:  813:
        -:  814:      //discard card from hand
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  816:
    #####:  817:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  state->coins = state->coins + 2;
        -:  820:	}
        -:  821:
    #####:  822:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  823:	{
        -:  824:	  //discard hand
    #####:  825:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  826:	    {
    #####:  827:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  828:	    }
        -:  829:
        -:  830:	  //draw 4
    #####:  831:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  832:	    {
    #####:  833:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:	    }
        -:  835:
        -:  836:	  //other players discard hand and redraw if hand size > 4
    #####:  837:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  840:		{
    #####:  841:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  842:		    {
        -:  843:		      //discard hand
    #####:  844:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  845:			{
    #####:  846:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  847:			}
        -:  848:
        -:  849:		      //draw 4
    #####:  850:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  drawCard(i, state);
call    0 never executed
        -:  853:			}
        -:  854:		    }
        -:  855:		}
        -:  856:	    }
        -:  857:
        -:  858:	}
    #####:  859:      return 0;
        -:  860:
        -:  861:    case steward:
    #####:  862:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  863:	{
        -:  864:	  //+2 cards
    #####:  865:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  866:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  867:	}
    #####:  868:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 coins
    #####:  871:	  state->coins = state->coins + 2;
        -:  872:	}
        -:  873:      else
        -:  874:	{
        -:  875:	  //trash 2 cards in hand
    #####:  876:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  877:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  878:	}
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:
        -:  884:    case tribute:
    #####:  885:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  886:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  887:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  888:	  state->deckCount[nextPlayer]--;
        -:  889:	}
    #####:  890:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  891:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  892:	  state->discardCount[nextPlayer]--;
        -:  893:	}
        -:  894:	else{
        -:  895:	  //No Card to Reveal
        -:  896:	  if (DEBUG){
        -:  897:	    printf("No cards to reveal\n");
        -:  898:	  }
        -:  899:	}
        -:  900:      }
        -:  901:
        -:  902:      else{
    #####:  903:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  904:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  905:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  906:	    state->deckCount[nextPlayer]++;
    #####:  907:	    state->discard[nextPlayer][i] = -1;
    #####:  908:	    state->discardCount[nextPlayer]--;
        -:  909:	  }
        -:  910:
    #####:  911:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  912:	}
    #####:  913:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
    #####:  916:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
        -:  919:      }
        -:  920:
    #####:  921:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  922:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  923:	state->playedCardCount++;
    #####:  924:	tributeRevealedCards[1] = -1;
        -:  925:      }
        -:  926:
    #####:  927:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  928:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  929:	  state->coins += 2;
        -:  930:	}
        -:  931:
    #####:  932:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  934:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  935:	}
        -:  936:	else{//Action Card
    #####:  937:	  state->numActions = state->numActions + 2;
        -:  938:	}
        -:  939:      }
        -:  940:
    #####:  941:      return 0;
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;		//used to check if player has enough cards to discard
        -:  945:
    #####:  946:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  947:	{
    #####:  948:	  return -1;
        -:  949:	}
        -:  950:
    #####:  951:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  return -1;
        -:  954:	}
        -:  955:
    #####:  956:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  959:	    {
    #####:  960:	      j++;
        -:  961:	    }
        -:  962:	}
    #####:  963:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:
        -:  968:      if (DEBUG)
        -:  969:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  970:
        -:  971:      //increase supply count for choosen card by amount being discarded
    #####:  972:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  973:
        -:  974:      //each other player gains a copy of revealed card
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  980:	    }
        -:  981:	}
        -:  982:
        -:  983:      //discard played card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  985:
        -:  986:      //trash copies of cards returned to supply
    #####:  987:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	    {
    #####:  991:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  994:		  break;
        -:  995:		}
        -:  996:	    }
        -:  997:	}
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001:    case cutpurse:
        -: 1002:
    #####: 1003:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:	    {
    #####: 1008:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1009:		{
    #####: 1010:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
    #####: 1012:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1013:		      break;
        -: 1014:		    }
    #####: 1015:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
    #####: 1017:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
        -: 1019:			  if (DEBUG)
        -: 1020:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1021:			}
    #####: 1022:		      break;
        -: 1023:		    }
        -: 1024:		}
        -: 1025:
        -: 1026:	    }
        -: 1027:
        -: 1028:	}
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:
        -: 1035:
        -: 1036:    case embargo:
        -: 1037:      //+2 Coins
    #####: 1038:      state->coins = state->coins + 2;
        -: 1039:
        -: 1040:      //see if selected pile is in play
    #####: 1041:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
        -: 1046:      //add embargo token to selected supply pile
    #####: 1047:      state->embargoTokens[choice1]++;
        -: 1048:
        -: 1049:      //trash card
    #####: 1050:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:    case outpost:
        -: 1054:      //set outpost flag
    #####: 1055:      state->outpostPlayed++;
        -: 1056:
        -: 1057:      //discard card
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:    case salvager:
        -: 1062:      //+1 buy
    #####: 1063:      state->numBuys++;
        -: 1064:
    #####: 1065:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
        -: 1067:	  //gain coins equal to trashed card
    #####: 1068:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1069:	  //trash card
    #####: 1070:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case sea_hag:
    #####: 1078:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1079:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1080:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1081:	  state->discardCount[i]++;
    #####: 1082:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1083:	}
        -: 1084:      }
    #####: 1085:      return 0;
        -: 1086:
        -: 1087:    case treasure_map:
        -: 1088:      //search hand for another treasure_map
    #####: 1089:      index = -1;
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1093:	    {
    #####: 1094:	      index = i;
    #####: 1095:	      break;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //trash both treasure cards
    #####: 1101:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1102:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1103:
        -: 1104:	  //gain 4 Gold cards
    #####: 1105:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	    {
    #####: 1107:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1108:	    }
        -: 1109:
        -: 1110:	  //return success
    #####: 1111:	  return 1;
        -: 1112:	}
        -: 1113:
        -: 1114:      //no second treasure_map found in hand
    #####: 1115:      return -1;
        -: 1116:    }
        -: 1117:
    #####: 1118:  return -1;
        -: 1119:}
        -: 1120:
function discardCard called 14 returned 100% blocks executed 89%
       14: 1121:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1122:{
        -: 1123:
        -: 1124:  //if card is not trashed, added to Played pile
       14: 1125:  if (trashFlag < 1)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -: 1126:    {
        -: 1127:      //add card to played pile
       12: 1128:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1129:      state->playedCardCount++;
        -: 1130:    }
        -: 1131:
        -: 1132:  //set played card to -1
       14: 1133:  state->hand[currentPlayer][handPos] = -1;
        -: 1134:
        -: 1135:  //remove card from player's hand
       14: 1136:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1137:    {
        -: 1138:      //reduce number of cards in hand
        2: 1139:      state->handCount[currentPlayer]--;
        -: 1140:    }
       12: 1141:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
    #####: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
        -: 1146:  else
        -: 1147:    {
        -: 1148:      //replace discarded card with last card in hand
       12: 1149:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1150:      //set last card to -1
       12: 1151:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1152:      //reduce number of cards in hand
       12: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:
       14: 1156:  return 0;
        -: 1157:}
        -: 1158:
function gainCard called 11 returned 100% blocks executed 70%
       11: 1159:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1160:{
        -: 1161:  //Note: supplyPos is enum of choosen card
        -: 1162:
        -: 1163:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1164:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1165:    {
    #####: 1166:      return -1;
        -: 1167:    }
        -: 1168:
        -: 1169:  //added card for [whoseTurn] current player:
        -: 1170:  // toFlag = 0 : add to discard
        -: 1171:  // toFlag = 1 : add to deck
        -: 1172:  // toFlag = 2 : add to hand
        -: 1173:
       11: 1174:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1175:    {
    #####: 1176:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1177:      state->deckCount[player]++;
        -: 1178:    }
       11: 1179:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1180:    {
    #####: 1181:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1182:      state->handCount[player]++;
        -: 1183:    }
        -: 1184:  else
        -: 1185:    {
       11: 1186:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1187:      state->discardCount[player]++;
        -: 1188:    }
        -: 1189:
        -: 1190:  //decrease number in supply pile
       11: 1191:  state->supplyCount[supplyPos]--;
        -: 1192:
       11: 1193:  return 0;
        -: 1194:}
        -: 1195:
function updateCoins called 21 returned 100% blocks executed 82%
       21: 1196:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1197:{
        -: 1198:  int i;
        -: 1199:
        -: 1200:  //reset coin count
       21: 1201:  state->coins = 0;
        -: 1202:
        -: 1203:  //add coins for each Treasure card in player's hand
       95: 1204:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1205:    {
       74: 1206:      if (state->hand[player][i] == copper)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1207:	{
       32: 1208:	  state->coins += 1;
        -: 1209:	}
       42: 1210:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1211:	{
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
       42: 1214:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1215:	{
    #####: 1216:	  state->coins += 3;
        -: 1217:	}
        -: 1218:    }
        -: 1219:
        -: 1220:  //add bonus
       21: 1221:  state->coins += bonus;
        -: 1222:
       21: 1223:  return 0;
        -: 1224:}
        -: 1225:
function playAdventurer called 6 returned 100% blocks executed 100%
        6: 1226:int playAdventurer(struct gameState *state) {
        6: 1227:  int drawntreasure = 0;
        6: 1228:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6: 1229:  int z = 1;
        -: 1230:  int cardDrawn;
        -: 1231:  int temphand[MAX_HAND];
        -: 1232:
       87: 1233:  while(drawntreasure<2){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
       75: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       60: 1235:      shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1236:    }
        -: 1237:
       75: 1238:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1239:
       75: 1240:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1241:
       75: 1242:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12: 1243:      drawntreasure++;
        -: 1244:    else  {
       63: 1245:      temphand[z]=cardDrawn;
       63: 1246:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       63: 1247:      z++;
        -: 1248:    }
        -: 1249:  }
        -: 1250:
       81: 1251:  while(z-1>=0){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       69: 1252:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       69: 1253:    z=z-1;
        -: 1254:  }
        -: 1255:
        6: 1256:  return 0;
        -: 1257:}
        -: 1258:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1259:int playSmithy(struct gameState *state, int handPos) {
        -: 1260:  int i;
        2: 1261:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1262:  //+3 Cards
        6: 1263:  for (i = 1; i < 3; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1264:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1265:  }
        -: 1266:
        -: 1267:  //discard card from hand
        2: 1268:  discardCard(handPos, currentPlayer, state, 3);
call    0 returned 100%
        2: 1269:  return 0;
        -: 1270:}
        -: 1271:
function playVillage called 4 returned 100% blocks executed 100%
        4: 1272:int playVillage(struct gameState *state, int handPos) {
        4: 1273:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1274:
        -: 1275:  //+1 Card
        4: 1276:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1277:
        -: 1278:  //+2 Actions
        4: 1279:  state->numActions = state->numActions + 2;
        -: 1280:
        -: 1281:  //discard played card from hand
        4: 1282:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4: 1283:  return 0;
        -: 1284:}
        -: 1285:
function playFeast called 6 returned 100% blocks executed 95%
        6: 1286:int playFeast(struct gameState *state, int choice1) {
        -: 1287:  int i;
        6: 1288:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1289:  int temphand[MAX_HAND];
        -: 1290:  //gain card with cost up to 5
        -: 1291:  //Backup hand
       33: 1292:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1293:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       27: 1294:    state->hand[currentPlayer][i] = -2;//Set to nothing
        -: 1295:  }
        -: 1296:  //Backup hand
        -: 1297:
        -: 1298:  //Update Coins for Buy
        6: 1299:  updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        6: 1300:  int x = 1;//Condition to loop on
        -: 1301:
       18: 1302:  while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        6: 1303:    if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1304:      if (DEBUG)
        -: 1305:        printf("None of that card left, sorry!\n");
        -: 1306:
        -: 1307:      if (DEBUG){
        -: 1308:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1309:      }
        -: 1310:    }
        6: 1311:    else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1312:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1313:
        -: 1314:      if (DEBUG){
        -: 1315:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1316:      }
        -: 1317:    }
        -: 1318:    else  {
        -: 1319:      if (DEBUG){
        -: 1320:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1321:      }
        -: 1322:
        6: 1323:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        6: 1324:      x = 0;//No more buying cards
        -: 1325:
        -: 1326:      if (DEBUG){
        -: 1327:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1328:      }
        -: 1329:
        -: 1330:    }
        -: 1331:  }
        -: 1332:
        -: 1333:  //Reset Hand
       33: 1334:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1335:    state->hand[currentPlayer][i] = temphand[i];
       27: 1336:    temphand[i] = -1;
        -: 1337:  }
        -: 1338:  //Reset Hand
        -: 1339:
        6: 1340:  return 0;
        -: 1341:}
        -: 1342:
function playCouncil_Room called 6 returned 100% blocks executed 100%
        6: 1343:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1344:  int i;
        6: 1345:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1346:  //+4 Cards
       30: 1347:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24: 1348:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1349:  }
        -: 1350:
        -: 1351:  //+1 Buy
        6: 1352:  state->numBuys++;
        -: 1353:
        -: 1354:  //Each other player draws a card
       22: 1355:  for (i = 0; i < state->numBuys; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       16: 1356:    if ( i != currentPlayer ) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       11: 1357:      drawCard(i, state);
call    0 returned 100%
        -: 1358:    }
        -: 1359:  }
        -: 1360:
        -: 1361:  //put played card in played card pile
        6: 1362:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1363:
        6: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
Test shuffle() 
Test success.
Test success.
Test success.
Test isGameOver() 
Test success.
Test success.
Test failure.
Test success.
Test buyCard() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test whoseTurn() 
Test success.
Test success.
Test success.
Test success.
Test success.
Test Adventurer card
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test Smithy card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test Great Hall card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test failure.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test Village card
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test success.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test failure.
Test success.
Test success.
File 'dominion.c'
Lines executed:43.89% of 565
Branches executed:46.28% of 417
Taken at least once:29.26% of 417
Calls executed:46.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 479 returned 100% blocks executed 100%
      479:    8:int compare(const void* a, const void* b) {
      479:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       77:   10:    return 1;
      402:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       91:   12:    return -1;
      311:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 157 returned 100% blocks executed 100%
      157:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      157:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      157:  209:  if (state->deckCount[player] < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      131:  210:    return -1;
       26:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      306:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  215:    card = (int)(Random() * state->deckCount[player]);
call    0 returned 100%
      254:  216:    newDeck[newDeckPos] = state->deck[player][card];
      254:  217:    newDeckPos++;
     1387:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
     1133:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      254:  221:    state->deckCount[player]--;
        -:  222:  }
      280:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      254:  224:    state->deck[player][i] = newDeck[i];
      254:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       26:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 12 returned 100% blocks executed 80%
       12:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       12:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       12:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       12:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
       12:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
       12:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
       12:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  259:    {
        6:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        6:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 93%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 12 returned 100% blocks executed 100%
       12:  315:int handCard(int handPos, struct gameState *state) {
       12:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 28 returned 100% blocks executed 100%
       28:  320:int supplyCount(int card, struct gameState *state) {
       28:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 53 returned 100% blocks executed 100%
       53:  346:int whoseTurn(struct gameState *state) {
       53:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 4 returned 100% blocks executed 82%
        4:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        4:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 165 returned 100% blocks executed 100%
      165:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      165:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      154:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 51%
branch  1 taken 49% (fallthrough)
       78:  534:      state->deck[player][i] = state->discard[player][i];
       78:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       76:  538:    state->deckCount[player] = state->discardCount[player];
       76:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       76:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       76:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       76:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       76:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       76:  559:    if (deckCounter == 0)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       68:  560:      return -1;
        -:  561:
        8:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  563:    state->deckCount[player]--;
        8:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       89:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       89:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       89:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       89:  576:    state->deckCount[player]--;
       89:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       97:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 8 returned 100% blocks executed 13%
        8:  583:int getCost(int cardNumber)
        -:  584:{
        8:  585:  switch( cardNumber )
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 12 returned 100% blocks executed 10%
       12:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       12:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       12:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       12:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       12:  660:  int z = 0;// this is the counter for the temp hand
       12:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       12:  667:  switch( card )
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 17%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        6:  670:      playAdventurer(state);
call    0 returned 100%
        -:  671:
        -:  672:    case council_room:
        6:  673:      playCouncil_Room(state, handPos);
call    0 returned 100%
        -:  674:
        -:  675:    case feast:
        6:  676:      playFeast(state, choice1);
call    0 returned 100%
        -:  677:
        -:  678:    case gardens:
        6:  679:      return -1;
        -:  680:
        -:  681:    case mine:
    #####:  682:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  683:
    #####:  684:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  685:	{
    #####:  686:	  return -1;
        -:  687:	}
        -:  688:
    #####:  689:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  690:	{
    #####:  691:	  return -1;
        -:  692:	}
        -:  693:
    #####:  694:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  695:	{
    #####:  696:	  return -1;
        -:  697:	}
        -:  698:
    #####:  699:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  700:
        -:  701:      //discard card from hand
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  703:
        -:  704:      //discard trashed card
    #####:  705:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  710:	      break;
        -:  711:	    }
        -:  712:	}
        -:  713:
    #####:  714:      return 0;
        -:  715:
        -:  716:    case remodel:
    #####:  717:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  720:	{
    #####:  721:	  return -1;
        -:  722:	}
        -:  723:
    #####:  724:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  725:
        -:  726:      //discard card from hand
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  735:	      break;
        -:  736:	    }
        -:  737:	}
        -:  738:
        -:  739:
    #####:  740:      return 0;
        -:  741:
        -:  742:    case smithy:
        2:  743:      playSmithy(state, handPos);
call    0 returned 100%
        -:  744:
        -:  745:    case village:
        4:  746:      playVillage(state, handPos);
call    0 returned 100%
        -:  747:
        -:  748:    case baron:
        4:  749:      state->numBuys++;//Increase buys by 1!
        4:  750:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  751:	int p = 0;//Iterator for hand!
    #####:  752:	int card_not_discarded = 1;//Flag for discard set!
    #####:  753:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  754:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  755:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  756:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  757:	    state->discardCount[currentPlayer]++;
    #####:  758:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  759:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  760:	    }
    #####:  761:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  762:	    state->handCount[currentPlayer]--;
    #####:  763:	    card_not_discarded = 0;//Exit the loop
        -:  764:	  }
    #####:  765:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  766:	    if(DEBUG) {
        -:  767:	      printf("No estate cards in your hand, invalid choice\n");
        -:  768:	      printf("Must gain an estate if there are any\n");
        -:  769:	    }
    #####:  770:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  771:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  772:	      state->supplyCount[estate]--;//Decrement estates
    #####:  773:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:		isGameOver(state);
call    0 never executed
        -:  775:	      }
        -:  776:	    }
    #####:  777:	    card_not_discarded = 0;//Exit the loop
        -:  778:	  }
        -:  779:
        -:  780:	  else{
    #####:  781:	    p++;//Next card
        -:  782:	  }
        -:  783:	}
        -:  784:      }
        -:  785:
        -:  786:      else{
        4:  787:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  788:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        4:  789:	  state->supplyCount[estate]--;//Decrement Estates
        4:  790:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  791:	    isGameOver(state);
call    0 never executed
        -:  792:	  }
        -:  793:	}
        -:  794:      }
        -:  795:
        -:  796:
        4:  797:      return 0;
        -:  798:
        -:  799:    case great_hall:
        -:  800:      //+1 Card
        2:  801:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  802:
        -:  803:      //+1 Actions
        2:  804:      state->numActions++;
        -:  805:
        -:  806:      //discard card from hand
        2:  807:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  808:      return 0;
        -:  809:
        -:  810:    case minion:
        -:  811:      //+1 action
    #####:  812:      state->numActions++;
        -:  813:
        -:  814:      //discard card from hand
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  816:
    #####:  817:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  state->coins = state->coins + 2;
        -:  820:	}
        -:  821:
    #####:  822:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  823:	{
        -:  824:	  //discard hand
    #####:  825:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  826:	    {
    #####:  827:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  828:	    }
        -:  829:
        -:  830:	  //draw 4
    #####:  831:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  832:	    {
    #####:  833:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  834:	    }
        -:  835:
        -:  836:	  //other players discard hand and redraw if hand size > 4
    #####:  837:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  840:		{
    #####:  841:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  842:		    {
        -:  843:		      //discard hand
    #####:  844:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  845:			{
    #####:  846:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  847:			}
        -:  848:
        -:  849:		      //draw 4
    #####:  850:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  drawCard(i, state);
call    0 never executed
        -:  853:			}
        -:  854:		    }
        -:  855:		}
        -:  856:	    }
        -:  857:
        -:  858:	}
    #####:  859:      return 0;
        -:  860:
        -:  861:    case steward:
    #####:  862:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  863:	{
        -:  864:	  //+2 cards
    #####:  865:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  866:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  867:	}
    #####:  868:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 coins
    #####:  871:	  state->coins = state->coins + 2;
        -:  872:	}
        -:  873:      else
        -:  874:	{
        -:  875:	  //trash 2 cards in hand
    #####:  876:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  877:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  878:	}
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  882:      return 0;
        -:  883:
        -:  884:    case tribute:
    #####:  885:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  886:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  887:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  888:	  state->deckCount[nextPlayer]--;
        -:  889:	}
    #####:  890:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  891:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  892:	  state->discardCount[nextPlayer]--;
        -:  893:	}
        -:  894:	else{
        -:  895:	  //No Card to Reveal
        -:  896:	  if (DEBUG){
        -:  897:	    printf("No cards to reveal\n");
        -:  898:	  }
        -:  899:	}
        -:  900:      }
        -:  901:
        -:  902:      else{
    #####:  903:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  904:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  905:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  906:	    state->deckCount[nextPlayer]++;
    #####:  907:	    state->discard[nextPlayer][i] = -1;
    #####:  908:	    state->discardCount[nextPlayer]--;
        -:  909:	  }
        -:  910:
    #####:  911:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  912:	}
    #####:  913:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
    #####:  916:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  917:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  918:	state->deckCount[nextPlayer]--;
        -:  919:      }
        -:  920:
    #####:  921:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  922:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  923:	state->playedCardCount++;
    #####:  924:	tributeRevealedCards[1] = -1;
        -:  925:      }
        -:  926:
    #####:  927:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  928:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  929:	  state->coins += 2;
        -:  930:	}
        -:  931:
    #####:  932:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  934:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  935:	}
        -:  936:	else{//Action Card
    #####:  937:	  state->numActions = state->numActions + 2;
        -:  938:	}
        -:  939:      }
        -:  940:
    #####:  941:      return 0;
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;		//used to check if player has enough cards to discard
        -:  945:
    #####:  946:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  947:	{
    #####:  948:	  return -1;
        -:  949:	}
        -:  950:
    #####:  951:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  return -1;
        -:  954:	}
        -:  955:
    #####:  956:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  959:	    {
    #####:  960:	      j++;
        -:  961:	    }
        -:  962:	}
    #####:  963:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:
        -:  968:      if (DEBUG)
        -:  969:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  970:
        -:  971:      //increase supply count for choosen card by amount being discarded
    #####:  972:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  973:
        -:  974:      //each other player gains a copy of revealed card
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  980:	    }
        -:  981:	}
        -:  982:
        -:  983:      //discard played card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  985:
        -:  986:      //trash copies of cards returned to supply
    #####:  987:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	    {
    #####:  991:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  994:		  break;
        -:  995:		}
        -:  996:	    }
        -:  997:	}
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001:    case cutpurse:
        -: 1002:
    #####: 1003:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:	    {
    #####: 1008:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1009:		{
    #####: 1010:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
    #####: 1012:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1013:		      break;
        -: 1014:		    }
    #####: 1015:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
    #####: 1017:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
        -: 1019:			  if (DEBUG)
        -: 1020:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1021:			}
    #####: 1022:		      break;
        -: 1023:		    }
        -: 1024:		}
        -: 1025:
        -: 1026:	    }
        -: 1027:
        -: 1028:	}
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:
        -: 1035:
        -: 1036:    case embargo:
        -: 1037:      //+2 Coins
    #####: 1038:      state->coins = state->coins + 2;
        -: 1039:
        -: 1040:      //see if selected pile is in play
    #####: 1041:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  return -1;
        -: 1044:	}
        -: 1045:
        -: 1046:      //add embargo token to selected supply pile
    #####: 1047:      state->embargoTokens[choice1]++;
        -: 1048:
        -: 1049:      //trash card
    #####: 1050:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:    case outpost:
        -: 1054:      //set outpost flag
    #####: 1055:      state->outpostPlayed++;
        -: 1056:
        -: 1057:      //discard card
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:    case salvager:
        -: 1062:      //+1 buy
    #####: 1063:      state->numBuys++;
        -: 1064:
    #####: 1065:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
        -: 1067:	  //gain coins equal to trashed card
    #####: 1068:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1069:	  //trash card
    #####: 1070:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1071:	}
        -: 1072:
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case sea_hag:
    #####: 1078:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1079:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1080:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1081:	  state->discardCount[i]++;
    #####: 1082:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1083:	}
        -: 1084:      }
    #####: 1085:      return 0;
        -: 1086:
        -: 1087:    case treasure_map:
        -: 1088:      //search hand for another treasure_map
    #####: 1089:      index = -1;
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1093:	    {
    #####: 1094:	      index = i;
    #####: 1095:	      break;
        -: 1096:	    }
        -: 1097:	}
    #####: 1098:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //trash both treasure cards
    #####: 1101:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1102:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1103:
        -: 1104:	  //gain 4 Gold cards
    #####: 1105:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	    {
    #####: 1107:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1108:	    }
        -: 1109:
        -: 1110:	  //return success
    #####: 1111:	  return 1;
        -: 1112:	}
        -: 1113:
        -: 1114:      //no second treasure_map found in hand
    #####: 1115:      return -1;
        -: 1116:    }
        -: 1117:
    #####: 1118:  return -1;
        -: 1119:}
        -: 1120:
function discardCard called 14 returned 100% blocks executed 89%
       14: 1121:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1122:{
        -: 1123:
        -: 1124:  //if card is not trashed, added to Played pile
       14: 1125:  if (trashFlag < 1)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -: 1126:    {
        -: 1127:      //add card to played pile
       12: 1128:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1129:      state->playedCardCount++;
        -: 1130:    }
        -: 1131:
        -: 1132:  //set played card to -1
       14: 1133:  state->hand[currentPlayer][handPos] = -1;
        -: 1134:
        -: 1135:  //remove card from player's hand
       14: 1136:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1137:    {
        -: 1138:      //reduce number of cards in hand
        2: 1139:      state->handCount[currentPlayer]--;
        -: 1140:    }
       12: 1141:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
    #####: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
        -: 1146:  else
        -: 1147:    {
        -: 1148:      //replace discarded card with last card in hand
       12: 1149:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1150:      //set last card to -1
       12: 1151:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1152:      //reduce number of cards in hand
       12: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:
       14: 1156:  return 0;
        -: 1157:}
        -: 1158:
function gainCard called 11 returned 100% blocks executed 70%
       11: 1159:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1160:{
        -: 1161:  //Note: supplyPos is enum of choosen card
        -: 1162:
        -: 1163:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1164:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1165:    {
    #####: 1166:      return -1;
        -: 1167:    }
        -: 1168:
        -: 1169:  //added card for [whoseTurn] current player:
        -: 1170:  // toFlag = 0 : add to discard
        -: 1171:  // toFlag = 1 : add to deck
        -: 1172:  // toFlag = 2 : add to hand
        -: 1173:
       11: 1174:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1175:    {
    #####: 1176:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1177:      state->deckCount[player]++;
        -: 1178:    }
       11: 1179:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1180:    {
    #####: 1181:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1182:      state->handCount[player]++;
        -: 1183:    }
        -: 1184:  else
        -: 1185:    {
       11: 1186:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1187:      state->discardCount[player]++;
        -: 1188:    }
        -: 1189:
        -: 1190:  //decrease number in supply pile
       11: 1191:  state->supplyCount[supplyPos]--;
        -: 1192:
       11: 1193:  return 0;
        -: 1194:}
        -: 1195:
function updateCoins called 21 returned 100% blocks executed 82%
       21: 1196:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1197:{
        -: 1198:  int i;
        -: 1199:
        -: 1200:  //reset coin count
       21: 1201:  state->coins = 0;
        -: 1202:
        -: 1203:  //add coins for each Treasure card in player's hand
       95: 1204:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1205:    {
       74: 1206:      if (state->hand[player][i] == copper)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -: 1207:	{
       32: 1208:	  state->coins += 1;
        -: 1209:	}
       42: 1210:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1211:	{
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
       42: 1214:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1215:	{
    #####: 1216:	  state->coins += 3;
        -: 1217:	}
        -: 1218:    }
        -: 1219:
        -: 1220:  //add bonus
       21: 1221:  state->coins += bonus;
        -: 1222:
       21: 1223:  return 0;
        -: 1224:}
        -: 1225:
function playAdventurer called 6 returned 100% blocks executed 100%
        6: 1226:int playAdventurer(struct gameState *state) {
        6: 1227:  int drawntreasure = 0;
        6: 1228:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6: 1229:  int z = 1;
        -: 1230:  int cardDrawn;
        -: 1231:  int temphand[MAX_HAND];
        -: 1232:
       87: 1233:  while(drawntreasure<2){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
       75: 1234:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       60: 1235:      shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1236:    }
        -: 1237:
       75: 1238:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1239:
       75: 1240:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1241:
       75: 1242:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12: 1243:      drawntreasure++;
        -: 1244:    else  {
       63: 1245:      temphand[z]=cardDrawn;
       63: 1246:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       63: 1247:      z++;
        -: 1248:    }
        -: 1249:  }
        -: 1250:
       81: 1251:  while(z-1>=0){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       69: 1252:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       69: 1253:    z=z-1;
        -: 1254:  }
        -: 1255:
        6: 1256:  return 0;
        -: 1257:}
        -: 1258:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1259:int playSmithy(struct gameState *state, int handPos) {
        -: 1260:  int i;
        2: 1261:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1262:  //+3 Cards
        6: 1263:  for (i = 1; i < 3; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1264:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1265:  }
        -: 1266:
        -: 1267:  //discard card from hand
        2: 1268:  discardCard(handPos, currentPlayer, state, 3);
call    0 returned 100%
        2: 1269:  return 0;
        -: 1270:}
        -: 1271:
function playVillage called 4 returned 100% blocks executed 100%
        4: 1272:int playVillage(struct gameState *state, int handPos) {
        4: 1273:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1274:
        -: 1275:  //+1 Card
        4: 1276:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1277:
        -: 1278:  //+2 Actions
        4: 1279:  state->numActions = state->numActions + 2;
        -: 1280:
        -: 1281:  //discard played card from hand
        4: 1282:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4: 1283:  return 0;
        -: 1284:}
        -: 1285:
function playFeast called 6 returned 100% blocks executed 95%
        6: 1286:int playFeast(struct gameState *state, int choice1) {
        -: 1287:  int i;
        6: 1288:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1289:  int temphand[MAX_HAND];
        -: 1290:  //gain card with cost up to 5
        -: 1291:  //Backup hand
       33: 1292:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1293:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       27: 1294:    state->hand[currentPlayer][i] = -2;//Set to nothing
        -: 1295:  }
        -: 1296:  //Backup hand
        -: 1297:
        -: 1298:  //Update Coins for Buy
        6: 1299:  updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        6: 1300:  int x = 1;//Condition to loop on
        -: 1301:
       18: 1302:  while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        6: 1303:    if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1304:      if (DEBUG)
        -: 1305:        printf("None of that card left, sorry!\n");
        -: 1306:
        -: 1307:      if (DEBUG){
        -: 1308:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1309:      }
        -: 1310:    }
        6: 1311:    else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1312:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1313:
        -: 1314:      if (DEBUG){
        -: 1315:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1316:      }
        -: 1317:    }
        -: 1318:    else  {
        -: 1319:      if (DEBUG){
        -: 1320:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1321:      }
        -: 1322:
        6: 1323:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        6: 1324:      x = 0;//No more buying cards
        -: 1325:
        -: 1326:      if (DEBUG){
        -: 1327:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1328:      }
        -: 1329:
        -: 1330:    }
        -: 1331:  }
        -: 1332:
        -: 1333:  //Reset Hand
       33: 1334:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
       27: 1335:    state->hand[currentPlayer][i] = temphand[i];
       27: 1336:    temphand[i] = -1;
        -: 1337:  }
        -: 1338:  //Reset Hand
        -: 1339:
        6: 1340:  return 0;
        -: 1341:}
        -: 1342:
function playCouncil_Room called 6 returned 100% blocks executed 100%
        6: 1343:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1344:  int i;
        6: 1345:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1346:  //+4 Cards
       30: 1347:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24: 1348:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1349:  }
        -: 1350:
        -: 1351:  //+1 Buy
        6: 1352:  state->numBuys++;
        -: 1353:
        -: 1354:  //Each other player draws a card
       22: 1355:  for (i = 0; i < state->numBuys; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       16: 1356:    if ( i != currentPlayer ) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       11: 1357:      drawCard(i, state);
call    0 returned 100%
        -: 1358:    }
        -: 1359:  }
        -: 1360:
        -: 1361:  //put played card in played card pile
        6: 1362:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1363:
        6: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367://end of dominion.c
