Bugs in Teammate Code
Chris Brackett
bracketc@oregonstate.edu
CS362
3/1/17SMITHY
After running the random test for Smithy, I can see that tests 6 and 7 fail 100% of the time. Test 6 tests whether the playedCardCount is correctly incremented, and test 7 tests whether Smithy is on top of the played cards pile after playing it. To investigate why these tests are failing, I used gdb to debug the code, as shown below.Test 6 – playedCardCount should be incremented
To debug, I began by placing a breakpoint at line 81 in randomtestcard1.c, which is the line where I am comparoing the playedCardCount of the pre-test game state and the post-test game state. With the program halted at this point, I then examined the values that I am comparing by typing “print pretest.playedCardCount” and “print testState->playedCardCount”. After doing this, I can see that both values are 0, when the testState should have a value of 1. Using this information, I now know that playedCardCount is not getting incremented when playing the Smithy card.Next, I added a breakpoint at the playSmithy function in dominion.c. While stepping through the code, everything seemed fine until the call to discardCard. Within discardCard, we can see that playedCardCount is only incremented when trashFlag is less than 1. The call to discardCard from playSmithy has a trashFlag with a value of 1 which is causing playedCardCount to not increment correctly.To fix this bug, one could simply change the call to discardCard within the playSmithy function to have a trashFlag parameter of 0 instead of 1.Test 7 – Smithy should be on top of the played cards pile
After temporarily fixing the bug for test 6 as described above, I noticed that test 7 now only fails 64% of the time instead of 100% of the time. This leads me to believe that the bugs are related, and possibly both in the discardCard function.I set a breakpoint at the discardCard function in dominion.c, and began examining the values of different variables. During this particular test, I was running the playSmithy function on player 2. I noticed that the handCount of player 1 was 5, but player 2 was only 3 (from the 3 drawn cards in the playSmithy function before the call to discardCard). Players 3 and 4 both had 0 cards in their hand, which obviously is not what it should be. This led me to believe that the bug was not in discardCard like I initially thought, but in initializeGame where the players draw their initial cards.The cards are drawn at line 192 of dominon.c. We can see that 5 cards are drawn, but only for the player whose value is stored in state->whoseTurn. During this initialization phase, whoseTurn always equals 0 (for player 1). This explains why player 1 has 5 cards and the other players have none (until player 2 plays the smithy card which was placed into their hand by the test). To fix this, one could get rid of the state->whoseTurn statement and simply loop through all players instead. In fact, it appears this was done in the for loop starting at line 163, but was commented out and replaced with the buggy code.After attempting the fix described above, it now turns out that player 1 has 0 cards while the others have the correct number (5). While debugging again, I placed breakpoints before and after the for loop that draws every player’s cards (breakpoints at lines 163 and 174 of dominion.c). I saw that every player started with 0 cards and finished with 5, as it should be. Stepping through the code after that, we reach line 188 where state->handCount[state->whoseTurn] = 0. This line is setting the handCount of only player 1 to be 0 every time a game is initialized. This line can be safely commented out, as the for loop in lines 163-174 initializes every player’s handCount to 0 before drawing cards.After commenting this line out (combined with the previously mentioned fix), the program passes test 7 100% of the time.COUNCIL ROOM
While attempting to run the tests for Council Room, the test hangs. While using gdb, I sent the program a SIGINT to stop execution. The debugger indicated that the program was stopped while at line 721 of dominion.c. This is the start of a for loop. Within this for loop, we can see that we are supposed to be testing if i is equal to currentPlayer. However, what is happening is that i is getting assigned to the value of currentPlayer, rather than checking against it. This is because the line is written as if (i = currentPlayer) and not if (i == currentPlayer). If we fix this line, the tests will run just fine.ADVENTURER
While running the tests for the Adventurer card, all tests passed. Based on the coverage of these tests as described in previous assignments, this leads me to believe there are no major bugs in the Adventurer code.OTHER
Besides the 3 bugs described above, there were several other bugs in the code. The Council Room card fails tests 1 and 2 (hand size should be decreased by 3 and deck size should be decreased by 4, respectively). The Village card also fails tests 2 and 4 (numActions should increase by 2 and the top of the played cards pile should be Village). These bugs weren’t investigated further for the purposes of this report.
