---------------------- Testing card: smithy ----------------------
-----------Test 1: Test current player receives 3 cards-----------
hand count = 7, expected = 7
deck count = 2, expected = 2
discard count = 0, expected = 1
!!!! FAILED TEST !!!!
-----------Check that other player's hands are not effected-------
other player's hand count = 0, expected 0
other player's deck count = 10, expected = 10
-----------Check there is no change to the supply card piles-------
supply card count = 10, expected = 10
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 46, expected = 46
supply card count = 40, expected = 40
supply card count = 30, expected = 30
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
------------ Testing complete for: smithy -----------------------
---------------------- Testing card: sea_hag ----------------------
-----------Test 1: Test that current player's hand is unchanged other than discarding played card ----------
hand count = 5, expected = 4
**** FAILED TEST ****
-----------Test 2: Test that the other players' discarded a card----------
card = 1, expected = 1
-----------Test 3: Test that the other player's hand has a curse card on top of their deck ----------
card = 1, expected = 0
**** FAILED TEST ****
-----------Test 4: Test that the other player's deck count remains unchanged----------
deck count = 5, expected = 10
**** FAILED TEST ****
-----------Test 5: Test that the other player's HAND has same number of cards as initially----------
hand count = 0, expected = 0
-----------Test 6: Check there there are fewer curse cards in supply -------
curse card count = 10, expected = 9
**** FAILED TEST ****
-----------Test 7: there is no change to the other supply card piles-------
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 46, expected = 46
supply card count = 40, expected = 40
supply card count = 30, expected = 30
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
---------------------- Testing card: village ----------------------
--Test 1: After player draws card and plays discarded card, hand count should remain unchanged--
hand count = 5, expected = 5
deck count = 4, expected = 4
discard count = 0, expected = 1
**** FAILED TEST ****
--Test 1: After player draws card and plays discarded card, hand count should remain unchanged--
num actions = 2, expected = 3
**** FAILED TEST ****
-----------Check that other player's hands are not effected-------
other player's hand count = 0, expected 0
other player's deck count = 10, expected = 10
-----------Check there is no change to the supply card piles-------
supply card count = 10, expected = 10
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 46, expected = 46
supply card count = 40, expected = 40
supply card count = 30, expected = 30
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
---------------------- Testing card: adventurer ----------------------
-----------Test 1: ----------
hand count = 7, expected = 6
**** FAILED TEST ****
deck count = 3, expected = 3
discard count = 0, expected = 1
**** FAILED TEST ****
-----------Check the drawn cards are treasure cards-------
a player with no treasure cards should be stuck in a while loop (infeasible in real game, but proof of found bug)**** FAILED TEST ****
-----------Check that other player's hands are not effected-------
other player's hand count = 0, expected 0
other player's deck count = 10, expected = 10
-----------Check there is no change to the supply card piles-------
supply card count = 10, expected = 10
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 8, expected = 8
supply card count = 46, expected = 46
supply card count = 40, expected = 40
supply card count = 30, expected = 30
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = 10, expected = 10
supply card count = -1, expected = -1
supply card count = -1, expected = -1
supply card count = 10, expected = 10
supply card count = -1, expected = -1
---------------------- Testing card: discardCard() ----------------------
--Test 1: Test that current player's hand count decreases by 1 with no trash flag --
hand count = 4, expected = 4
played card count = 1, expected 1
discard count = 0, expected = 1
!!!! FAILED TEST !!!!
--Test 2: Test that current player's hand count decreases by 1 with trash flag --
hand count = 3, expected = 3
played card count = 1, expected 1
-----Test 3: Test discarded card is replaced by last card in hand-----
card at handpos = 4, expected 4
card in discarded position = -1, expected -1
------------ Testing complete for: discardCard() -----------------------
---------------------- Testing card: gainCard() ----------------------
----Test 1: Try to gain a card not in play ----
game state expected to be unchanged after an unsuccessful attempt to gain a card
----Test 2: Gain a card with flag=1 ----
current player card deck count = 6, expected 6
last card of deck = 7, expected adventurer (7)
current supply count = 9, expected 9
----Test 2: Gain a card with flag=2 ----
current player card hand count = 6, expected 6
last card of hand = 11, expected mine (11)
current supply count = 9, expected 9
----Test 3: Gain a card with flag=0 ----
current player card discard count = 1, expected 1
last card of hand = 17, expected minion (17)
current supply count = 9, expected 9
----Test 4: No change to other player's decks should have occurred with current player's gain----
other player card deck count = 10, expected 10
other player card hand count = 0, expected 0
other player card discard count = 0, expected 0
------------ Testing complete for: gainCard() -----------------------
---------------------- Testing card: playCard() ----------------------
----Test 1: Try to play card after action phase is over ----
game state expected to be unchanged after an unsuccessful attempt to buy a card after action phase is over
----Test 2: Try to play card when player does not have actions available ----
game state expected to be unchanged after an unsuccessful attempt to buy a card when no actions are available
----Test 3: Try to play card that is not an action card ----
game state expected to be unchanged after trying to play a card that is not an action card
----Test 4: Try to play card that is not in the game ----
game state expected to be unchanged after trying to play a card that is not in the current game
!!!! FAILED TEST !!!!
current numActions = 0, expected 0
----Test 5: Try to play card that is in the current game with no coin bonus----
current coins = 3, expected 3
current numActions = 0, expected 0
current coins = 2, expected 3
!!!! FAILED TEST !!!!
----Test 6: Try to play card that is in the current game with a coin bonus----
current coins = 2, expected 2
current numActions = 0, expected 0
current coins = 2, expected 2
----Test 7: Try to play card that is in the current game which increases numActions----
current numActions = 1, expected 1
------------ Testing complete for: playCard() -----------------------
---------------------- Testing card: scoreFor() ----------------------
--Test 1: If player has no cards, score for should be 0 --
current score = 0, expected 0
--Test 2: Test results from cards in hand / test negative score will not break function--
current score = -5, expected -5
--Test 3: Test results from cards in hand - mixed card types--
current score = 6, expected 6
--Test 4: Test results from cards in deck - mixed card types--
current score = 0, expected 5
!!!! FAILED TEST !!!!
--Test 5: Test results from cards in discard - mixed card types--
current score = 7, expected 7
------------ Testing complete for: scoreFor() -----------------------
File 'dominion.c'
Lines executed:39.29% of 644
Branches executed:42.86% of 413
Taken at least once:32.45% of 413
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 13568 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
    13568:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 42%
branch  1 taken 58%
     5764:   10:    return 1;
     7804:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 59%
branch  1 taken 41%
     4582:   12:    return -1;
     3222:   13:  return 0;
    13568:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1520:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      800:   65:        }
       80:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        8:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        8:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     2640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      159:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        1:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        1:  119:		}
        -:  120:	      else
        -:  121:		{
       79:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1160:  130:	}
        -:  131:
      160:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
       48:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
      112:  150:	}
       16:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       16:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       16:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
      216:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       40:  193:    drawCard(state->whoseTurn, state);
       40:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        8:  199:}
        -:  200:
function shuffle called 40 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       40:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       40:  209:  if (state->deckCount[player] < 1)
branch  0 taken 30%
branch  1 taken 70%
       12:  210:    return -1;
       28:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6300:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
     3122:  215:    card = floor(Random() * state->deckCount[player]);
     3122:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3122:  217:    newDeckPos++;
   503758:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
   248757:  219:      state->deck[player][i] = state->deck[player][i+1];
   248757:  220:    }
     3122:  221:    state->deckCount[player]--;
        -:  222:  }
     6300:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
     3122:  224:    state->deck[player][i] = newDeck[i];
     3122:  225:    state->deckCount[player]++;
     3122:  226:  }
        -:  227:
       28:  228:  return 0;
       40:  229:}
        -:  230:
function playCard called 9 returned 100% blocks executed 91%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        9:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        9:  237:  if (state->phase != 0)
branch  0 taken 22%
branch  1 taken 78%
        -:  238:    {
        2:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        7:  243:  if ( state->numActions < 1 )
branch  0 taken 14%
branch  1 taken 86%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       10:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        4:  269:  return 0;
        9:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 6 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2014 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     2014:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 10 returned 100% blocks executed 74%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       10:  420:  int score = 0;
        -:  421:  //score from hand
       60:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  423:    {
       32:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 60%
branch  1 taken 40%
       22:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 10%
branch  1 taken 90%
       20:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
       22:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 10%
branch  1 taken 90%
       20:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       20:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       20:  430:    }
        -:  431:
        -:  432:  //score from discard
       32:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 38%
branch  1 taken 63%
        -:  434:    {
        6:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        8:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 33%
branch  1 taken 67%
        6:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        8:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 33%
branch  1 taken 67%
        6:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        6:  441:    }
        -:  442:
        -:  443:  //score from deck
       32:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 38%
branch  1 taken 63%
        -:  445:    {
        6:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        6:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
        6:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        6:  452:    }
        -:  453:
       10:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5128 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     5128:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5952:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
     2962:  534:      state->deck[player][i] = state->discard[player][i];
     2962:  535:      state->discard[player][i] = -1;
     2962:  536:    }
        -:  537:
       14:  538:    state->deckCount[player] = state->discardCount[player];
       14:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       14:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       14:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       14:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       14:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       14:  559:    if (deckCounter == 0)
branch  0 taken 14%
branch  1 taken 86%
        2:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
       12:  565:  }
        -:  566:
        -:  567:  else{
     5114:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5114:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5114:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5114:  576:    state->deckCount[player]--;
     5114:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5126:  580:  return 0;
     5128:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 2008 returned 100% blocks executed 8%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     2008:  653:  int currentPlayer = whoseTurn(state);
     2008:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     2008:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     2008:  658:  int drawntreasure=0;
     2008:  659:  int cardDrawn = -1;
     2008:  660:  int z = 0;// this is the counter for the temp hand
     2008:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37%
branch  1 taken 63%
      736:  662:    nextPlayer = 0;
      736:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     2008:  667:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 1%
branch 16 taken 1%
branch 17 taken 0%
branch 18 taken 50%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
     1002:  670:      return playAdventurer(drawntreasure, temphand, z, cardDrawn, currentPlayer, state);
        -:  671:			
        -:  672:    case council_room:
    #####:  673:      return playCouncil_Room(handPos, currentPlayer, state);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  688:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      return playMine(handPos, currentPlayer, choice1, choice2, state);
        -:  733:			
        -:  734:    case remodel:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      gainCard(choice2, state, 0, currentPlayer);
        -:  743:
        -:  744:      //discard card from hand
    #####:  745:      discardCard(handPos, currentPlayer, state, 0);
        -:  746:
        -:  747:      //discard trashed card
    #####:  748:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  749:	{
    #####:  750:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  751:	    {
    #####:  752:	      discardCard(i, currentPlayer, state, 0);			
    #####:  753:	      break;
        -:  754:	    }
    #####:  755:	}
        -:  756:
        -:  757:
    #####:  758:      return 0;
        -:  759:		
        -:  760:    case smithy:
    #####:  761:      return playSmithy(handPos, currentPlayer, state);
        -:  762:		
        -:  763:    case village:
        1:  764:      return playVillage(handPos, currentPlayer, state);
        -:  765:		
        -:  766:    case baron:
    #####:  767:      state->numBuys++;//Increase buys by 1!
    #####:  768:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  769:	int p = 0;//Iterator for hand!
    #####:  770:	int card_not_discarded = 1;//Flag for discard set!
    #####:  771:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  772:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  773:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  774:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  775:	    state->discardCount[currentPlayer]++;
    #####:  776:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  777:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  778:	    }
    #####:  779:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  780:	    state->handCount[currentPlayer]--;
    #####:  781:	    card_not_discarded = 0;//Exit the loop
    #####:  782:	  }
    #####:  783:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  784:	    if(DEBUG) {
        -:  785:	      printf("No estate cards in your hand, invalid choice\n");
        -:  786:	      printf("Must gain an estate if there are any\n");
        -:  787:	    }
    #####:  788:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  789:	      gainCard(estate, state, 0, currentPlayer);
    #####:  790:	      state->supplyCount[estate]--;//Decrement estates
    #####:  791:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  792:		isGameOver(state);
    #####:  793:	      }
    #####:  794:	    }
    #####:  795:	    card_not_discarded = 0;//Exit the loop
    #####:  796:	  }
        -:  797:			    
        -:  798:	  else{
    #####:  799:	    p++;//Next card
        -:  800:	  }
        -:  801:	}
    #####:  802:      }
        -:  803:			    
        -:  804:      else{
    #####:  805:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  806:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  807:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  808:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  809:	    isGameOver(state);
    #####:  810:	  }
    #####:  811:	}
        -:  812:      }
        -:  813:	    
        -:  814:      
    #####:  815:      return 0;
        -:  816:		
        -:  817:    case great_hall:
        -:  818:      //+1 Card
        1:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+1 Actions
        1:  822:      state->numActions++;
        -:  823:			
        -:  824:      //discard card from hand
        1:  825:      discardCard(handPos, currentPlayer, state, 0);
        1:  826:      return 0;
        -:  827:		
        -:  828:    case minion:
        -:  829:      //+1 action
    #####:  830:      state->numActions++;
        -:  831:			
        -:  832:      //discard card from hand
    #####:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
    #####:  835:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:	{
    #####:  837:	  state->coins = state->coins + 2;
    #####:  838:	}
        -:  839:			
    #####:  840:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:	{
        -:  842:	  //discard hand
    #####:  843:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(handPos, currentPlayer, state, 0);
        -:  846:	    }
        -:  847:				
        -:  848:	  //draw 4
    #####:  849:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:	    {
    #####:  851:	      drawCard(currentPlayer, state);
    #####:  852:	    }
        -:  853:				
        -:  854:	  //other players discard hand and redraw if hand size > 4
    #####:  855:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:		{
    #####:  859:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:		    {
        -:  861:		      //discard hand
    #####:  862:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:			{
    #####:  864:			  discardCard(handPos, i, state, 0);
        -:  865:			}
        -:  866:							
        -:  867:		      //draw 4
    #####:  868:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  drawCard(i, state);
    #####:  871:			}
    #####:  872:		    }
    #####:  873:		}
    #####:  874:	    }
        -:  875:				
    #####:  876:	}
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case steward:
    #####:  880:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:	{
        -:  882:	  //+2 cards
    #####:  883:	  drawCard(currentPlayer, state);
    #####:  884:	  drawCard(currentPlayer, state);
    #####:  885:	}
    #####:  886:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 coins
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:      else
        -:  892:	{
        -:  893:	  //trash 2 cards in hand
    #####:  894:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  895:	  discardCard(choice3, currentPlayer, state, 1);
        -:  896:	}
        -:  897:			
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case tribute:
    #####:  903:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:	  state->deckCount[nextPlayer]--;
    #####:  907:	}
    #####:  908:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:	  state->discardCount[nextPlayer]--;
    #####:  911:	}
        -:  912:	else{
        -:  913:	  //No Card to Reveal
        -:  914:	  if (DEBUG){
        -:  915:	    printf("No cards to reveal\n");
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:	    
        -:  920:      else{
    #####:  921:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:	    state->deckCount[nextPlayer]++;
    #####:  925:	    state->discard[nextPlayer][i] = -1;
    #####:  926:	    state->discardCount[nextPlayer]--;
    #####:  927:	  }
        -:  928:			    
    #####:  929:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:	} 
    #####:  931:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:	state->deckCount[nextPlayer]--;
    #####:  934:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:	state->deckCount[nextPlayer]--;
        -:  937:      }    
        -:  938:		       
    #####:  939:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:	state->playedCardCount++;
    #####:  942:	tributeRevealedCards[1] = -1;
    #####:  943:      }
        -:  944:
    #####:  945:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:	  state->coins += 2;
    #####:  948:	}
        -:  949:		    
    #####:  950:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:	  drawCard(currentPlayer, state);
    #####:  952:	  drawCard(currentPlayer, state);
    #####:  953:	}
        -:  954:	else{//Action Card
    #####:  955:	  state->numActions = state->numActions + 2;
        -:  956:	}
    #####:  957:      }
        -:  958:	    
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case ambassador:
    #####:  962:      j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;
        -:  972:	}
        -:  973:
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:	    {
    #####:  978:	      j++;
    #####:  979:	    }
    #####:  980:	}
    #####:  981:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  return -1;				
        -:  984:	}
        -:  985:
        -:  986:      if (DEBUG) 
        -:  987:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:      //increase supply count for choosen card by amount being discarded
    #####:  990:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:			
        -:  992:      //each other player gains a copy of revealed card
    #####:  993:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:	    }
    #####:  999:	}
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:      //trash copies of cards returned to supply
    #####: 1005:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	    {
    #####: 1009:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:		{
    #####: 1011:		  discardCard(i, currentPlayer, state, 1);
    #####: 1012:		  break;
        -: 1013:		}
    #####: 1014:	    }
    #####: 1015:	}			
        -: 1016:
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case cutpurse:
        -: 1020:
    #####: 1021:      updateCoins(currentPlayer, state, 2);
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:		{
    #####: 1028:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      discardCard(j, i, state, 0);
    #####: 1031:		      break;
        -: 1032:		    }
    #####: 1033:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:		    {
    #####: 1035:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:			{
        -: 1037:			  if (DEBUG)
        -: 1038:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:			}	
    #####: 1040:		      break;
        -: 1041:		    }		
    #####: 1042:		}
        -: 1043:					
    #####: 1044:	    }
        -: 1045:				
    #####: 1046:	}				
        -: 1047:
        -: 1048:      //discard played card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:      return 0;
        -: 1052:
        -: 1053:		
        -: 1054:    case embargo: 
        -: 1055:      //+2 Coins
        1: 1056:      state->coins = state->coins + 2;
        -: 1057:			
        -: 1058:      //see if selected pile is in play
        1: 1059:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:			
        -: 1064:      //add embargo token to selected supply pile
        1: 1065:      state->embargoTokens[choice1]++;
        -: 1066:			
        -: 1067:      //trash card
        1: 1068:      discardCard(handPos, currentPlayer, state, 1);		
        1: 1069:      return 0;
        -: 1070:		
        -: 1071:    case outpost:
        -: 1072:      //set outpost flag
        1: 1073:      state->outpostPlayed++;
        -: 1074:			
        -: 1075:      //discard card
        1: 1076:      discardCard(handPos, currentPlayer, state, 0);
        1: 1077:      return 0;
        -: 1078:		
        -: 1079:    case salvager:
        -: 1080:      //+1 buy
    #####: 1081:      state->numBuys++;
        -: 1082:			
    #####: 1083:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
        -: 1085:	  //gain coins equal to trashed card
    #####: 1086:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1087:	  //trash card
    #####: 1088:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1089:	}
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case sea_hag:
     8044: 1096:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25%
     3020: 1097:	if (i != currentPlayer){
branch  0 taken 67%
branch  1 taken 33%
     2018: 1098:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
     2018: 1099:    state->deckCount[i]--;
     2018: 1100:	  state->discardCount[i]++;
     2018: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
     2018: 1102:	}
     3020: 1103:      }
        -: 1104:
     1002: 1105:      return 0;
        -: 1106:		
        -: 1107:    case treasure_map:
        -: 1108:      //search hand for another treasure_map
    #####: 1109:      index = -1;
    #####: 1110:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1111:	     if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1112:	      index = i;
    #####: 1113:	      break;
        -: 1114:	    }
    #####: 1115:	   }
    #####: 1116:    if (index > -1){
branch  0 never executed
branch  1 never executed
        -: 1117:  	  //trash both treasure cards
    #####: 1118:  	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1119:  	  discardCard(index, currentPlayer, state, 1);
        -: 1120:
        -: 1121:  	  //gain 4 Gold cards
    #####: 1122:  	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:  	    {
    #####: 1124:  	      gainCard(gold, state, 1, currentPlayer);
    #####: 1125:  	    }
        -: 1126:  				
        -: 1127:  	  //return success
    #####: 1128:  	  return 1;
        -: 1129:  	}	
        -: 1130:      //no second treasure_map found in hand
    #####: 1131:      return -1;
        -: 1132:    }
        -: 1133:    
    #####: 1134:  return -1;
     2008: 1135:}
        -: 1136:
        -: 1137: 
function discardCard called 1007 returned 100% blocks executed 80%
        -: 1138:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1139:{
        -: 1140:	
        -: 1141:  //if card is not trashed, added to Played pile 
     1007: 1142:  if (trashFlag < 1)
branch  0 taken 99%
branch  1 taken 1%
        -: 1143:    {
        -: 1144:      //add card to played pile
     1005: 1145:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1005: 1146:      state->playedCardCount++;
     1005: 1147:    }
        -: 1148:	
        -: 1149:  //set played card to -1
     1007: 1150:  state->hand[currentPlayer][handPos] = -1;
        -: 1151:	
        -: 1152:  //remove card from player's hand
     1007: 1153:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1154:    {
        -: 1155:      //reduce number of cards in hand
    #####: 1156:      state->handCount[currentPlayer]--;
    #####: 1157:    }
     1007: 1158:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1159:    {
        -: 1160:      //reduce number of cards in hand
    #####: 1161:      state->handCount[currentPlayer]--;
    #####: 1162:    }
        -: 1163:  else 	
        -: 1164:    {
        -: 1165:      //replace discarded card with last card in hand
     1007: 1166:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1167:      //set last card to -1
     1007: 1168:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1169:      //reduce number of cards in hand
     1007: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        -: 1172:	
     1007: 1173:  return 0;
        -: 1174:}
        -: 1175:
function gainCard called 4 returned 100% blocks executed 100%
        -: 1176:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1177:{
        -: 1178:  //Note: supplyPos is enum of choosen card
        -: 1179:	
        -: 1180:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1181:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 25%
branch  1 taken 75%
        -: 1182:    {
        1: 1183:      return -1;
        -: 1184:    }
        -: 1185:	
        -: 1186:  //added card for [whoseTurn] current player:
        -: 1187:  // toFlag = 0 : add to discard
        -: 1188:  // toFlag = 1 : add to deck
        -: 1189:  // toFlag = 2 : add to hand
        -: 1190:
        3: 1191:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1192:    {
        1: 1193:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1194:      state->deckCount[player]++;
        1: 1195:    }
        2: 1196:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1197:    {
        1: 1198:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1199:      state->handCount[player]++;
        1: 1200:    }
        -: 1201:  else
        -: 1202:    {
        1: 1203:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1204:      state->discardCount[player]++;
        -: 1205:    }
        -: 1206:	
        -: 1207:  //decrease number in supply pile
        3: 1208:  state->supplyCount[supplyPos]--;
        -: 1209:	 
        3: 1210:  return 0;
        4: 1211:}
        -: 1212:
        -: 1213:
function updateCoins called 12 returned 100% blocks executed 85%
        -: 1214:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1215:{
        -: 1216:  int i;
        -: 1217:	
        -: 1218:  //reset coin count
       12: 1219:  state->coins = 0;
        -: 1220:
        -: 1221:  //add coins for each Treasure card in player's hand
      132: 1222:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18%
        -: 1223:    {
       54: 1224:      if (state->hand[player][i] == copper)
branch  0 taken 76%
branch  1 taken 24%
        -: 1225:	{
       41: 1226:	  state->coins += 1;
       41: 1227:	}
       13: 1228:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1229:	{
    #####: 1230:	  state->coins += 2;
    #####: 1231:	}
       13: 1232:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1233:	{
    #####: 1234:	  state->coins += 3;
    #####: 1235:	}	
       54: 1236:    }	
        -: 1237:
        -: 1238:  //add bonus
       12: 1239:  state->coins += bonus;
        -: 1240:
       12: 1241:  return 0;
        -: 1242:}
        -: 1243:
        -: 1244:
        -: 1245:/**********************************
        -: 1246:*
        -: 1247:*
        -: 1248:*      Refactored cardEffects as individual functions
        -: 1249:*
        -: 1250:************************************/
        -: 1251:
function playAdventurer called 1002 returned 100% blocks executed 100%
        -: 1252:int playAdventurer(int drawntreasure, int *temphand, int z, int cardDrawn, int currentPlayer, struct gameState *state) {
        -: 1253:  int treasureCount;
     6170: 1254:  while(drawntreasure<2){
branch  0 taken 68%
branch  1 taken 32%
     2083: 1255:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       10: 1256:      shuffle(currentPlayer, state);
       10: 1257:    }
        -: 1258:    
     2083: 1259:    drawCard(currentPlayer, state);
     2083: 1260:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1261:    
     6013: 1262:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold) {
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 96%
branch  3 taken 4%
branch  4 taken 96%
branch  5 taken 4%
     2004: 1263:      drawntreasure++;
     2004: 1264:    }
        -: 1265:    else{
       79: 1266:      temphand[z]=cardDrawn;
       79: 1267:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       79: 1268:      z++;
        -: 1269:    }
        -: 1270:  }
        -: 1271:  
     2162: 1272:  while(z-1>=0){
branch  0 taken 7%
branch  1 taken 93%
       79: 1273:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       79: 1274:    z=z-1;
        -: 1275:  }
        -: 1276:
     1002: 1277:  return 0;
        -: 1278:}
        -: 1279:
        -: 1280:
function playCouncil_Room called 0 returned 0% blocks executed 0%
        -: 1281:int playCouncil_Room(int handPos, int currentPlayer, struct gameState *state) {
        -: 1282:  int i;
        -: 1283:  //+4 Cards
    #####: 1284:  for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1285:    drawCard(currentPlayer, state);
    #####: 1286:  }
        -: 1287:      
        -: 1288:  //+1 Buy
    #####: 1289:  state->numBuys++;
        -: 1290:      
        -: 1291:  //Each other player draws a card
    #####: 1292:  for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1293:    drawCard(i, state);
    #####: 1294:  }
        -: 1295:      
        -: 1296:  //put played card in played card pile
    #####: 1297:  discardCard(handPos, currentPlayer, state, 1);
        -: 1298:      
    #####: 1299:  return 0;
        -: 1300:}
        -: 1301:
function playMine called 0 returned 0% blocks executed 0%
        -: 1302:int playMine(int handPos, int currentPlayer, int choice1, int choice2, struct gameState *state) {
        -: 1303:  int i;
    #####: 1304:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1305:
    #####: 1306:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1307:    return -1;
        -: 1308:  }
        -: 1309:    
    #####: 1310:  if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1311:    return -1;
        -: 1312:  }
        -: 1313:
    #####: 1314: gainCard(choice2, state, 2, currentPlayer);
        -: 1315:
        -: 1316:  //discard card from hand
    #####: 1317:  discardCard(handPos, currentPlayer, state, 0);
        -: 1318:
        -: 1319:  //discard trashed card
    #####: 1320:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1321:    if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
        -: 1322:      // Shouldn't this be getting trashed i.e. trashFlag = 1??
    #####: 1323:      discardCard(i, currentPlayer, state, 0);      
    #####: 1324:      break;
        -: 1325:    }
    #####: 1326:  }
    #####: 1327:  return 0;
    #####: 1328:}
        -: 1329:
        -: 1330:
        -: 1331://Adds 3 cards to player's hand
function playSmithy called 1001 returned 100% blocks executed 100%
        -: 1332:int playSmithy(int handPos, int currentPlayer, struct gameState *state) {
        -: 1333:  int i;
     8008: 1334:  for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25%
     3003: 1335:    drawCard(currentPlayer, state);
     3003: 1336:  }
        -: 1337:           
     1001: 1338:  discardCard(handPos, currentPlayer, state, 0);
     1001: 1339:  return 0;
        -: 1340:}
        -: 1341:
        -: 1342:
function playVillage called 1 returned 100% blocks executed 100%
        -: 1343:int playVillage(int handPos, int currentPlayer, struct gameState *state) {
        -: 1344:  //+1 Card
        1: 1345:  drawCard(currentPlayer, state);
        -: 1346:  
        1: 1347:  state->numActions++;
        -: 1348:  
        -: 1349:  //discard played card from hand
        1: 1350:  discardCard(handPos, currentPlayer, state, 0);
        1: 1351:  return 0;
        -: 1352:}
        -: 1353:
        -: 1354:
        -: 1355://end of dominion.c
        -: 1356:
