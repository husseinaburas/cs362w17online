Card Adventurer failed test count = 8
Consider running this test with SHOW_PASSFAIL set to 1
File 'dominion.c'
Lines executed:21.14% of 577
Branches executed:20.05% of 419
Taken at least once:16.71% of 419
Calls executed:10.31% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h" 
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
function compare called 60 returned 100% blocks executed 83%
       60:    9:int compare(const void* a, const void* b) {
       60:   10:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:   11:		return 1;
       60:   12:	if (*(int*)a < *(int*)b)
branch  0 taken 16 (fallthrough)
branch  1 taken 44
       16:   13:		return -1;
       44:   14:	return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:	return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 89%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:	int i;
        -:   39:	int j;
        -:   40:	int it;			
        -:   41:	// Set up random number generator.
        1:   42:	SelectStream(1);
call    0 returned 1
        1:   43:	PutSeed((long)randomSeed);
call    0 returned 1
        -:   44:  
        -:   45:	// Check number of players.
        1:   46:	if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:   47:		return -1;
        -:   48:	}
        -:   49:
        -:   50:	// Set number of players.
        1:   51:	state->numPlayers = numPlayers;
        -:   52:
        -:   53:	// Check selected kingdom cards are different.
       11:   54:	for (i = 0; i < 10; i++) {
branch  0 taken 10
branch  1 taken 1 (fallthrough)
      110:   55:		for (j = 0; j < 10; j++) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:   56:			if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
    #####:   57:				return -1;
        -:   58:			}
        -:   59:		}
        -:   60:	}
        -:   61:
        -:   62:	// Initialize supply. ///////////////////////////////
        -:   63:
        -:   64:	// Set number of Curse cards.
        1:   65:	if (numPlayers == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   66:		state->supplyCount[curse] = 10;
        -:   67:	}
        1:   68:	else if (numPlayers == 3) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   69:		state->supplyCount[curse] = 20;
        -:   70:	}
        -:   71:	else {
        1:   72:		state->supplyCount[curse] = 30;
        -:   73:	}
        -:   74:
        -:   75:	// Set number of Victory cards.
        1:   76:	if (numPlayers == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   77:		state->supplyCount[estate] = 8;
    #####:   78:		state->supplyCount[duchy] = 8;
    #####:   79:		state->supplyCount[province] = 8;
        -:   80:	}
        -:   81:	else {
        1:   82:		state->supplyCount[estate] = 12;
        1:   83:		state->supplyCount[duchy] = 12;
        1:   84:		state->supplyCount[province] = 12;
        -:   85:	}
        -:   86:
        -:   87:	// Set number of Treasure cards.
        1:   88:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:   89:	state->supplyCount[silver] = 40;
        1:   90:	state->supplyCount[gold] = 30;
        -:   91:
        -:   92:	// Set number of Kingdom cards.
       21:   93:	for (i = adventurer; i <= treasure_map; i++) {	// Loop all cards.
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      165:   94:		for (j = 0; j < 10; j++) {				// Loop chosen cards.
branch  0 taken 155
branch  1 taken 10 (fallthrough)
      155:   95:			if (kingdomCards[j] == i) {
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:   96:				// Check if card is a 'Victory' Kingdom card.
       10:   97:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        2:   98:					if (numPlayers == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   99:						state->supplyCount[i] = 8; 
        -:  100:					}
        -:  101:					else {
        1:  102:						state->supplyCount[i] = 12;
        -:  103:					}
        -:  104:				}
        -:  105:			     else {
        9:  106:					state->supplyCount[i] = 10;
        -:  107:				}
       10:  108:				break;
        -:  109:			}
        -:  110:			else {// Card is not in the set choosen for the game.
      145:  111:				state->supplyCount[i] = -1;
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	// Supply intilization complete.	////////////////////////
        -:  116:
        -:  117:	// Set player decks.
        5:  118:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  119:		state->deckCount[i] = 0;
       16:  120:		for (j = 0; j < 3; j++) {
branch  0 taken 12
branch  1 taken 4 (fallthrough)
       12:  121:			state->deck[i][j] = estate;
       12:  122:			state->deckCount[i]++;
        -:  123:		}
       32:  124:		for (j = 3; j < 10; j++) {
branch  0 taken 28
branch  1 taken 4 (fallthrough)
       28:  125:			state->deck[i][j] = copper;
       28:  126:			state->deckCount[i]++;		
        -:  127:		}
        -:  128:	}
        -:  129:
        -:  130:	// Shuffle player decks.
        5:  131:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:  132:		if ( shuffle(i, state) < 0 ) {
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  133:			return -1;
        -:  134:		}
        -:  135:	}
        -:  136:
        -:  137:	// Draw player hands.
        5:  138:	for (i = 0; i < numPlayers; i++) {
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  139:		// Initialize hand size to zero.
        4:  140:		state->handCount[i] = 0;
        4:  141:		state->discardCount[i] = 0;
        -:  142:		// Draw 5 cards.
        -:  143://		for (j = 0; j < 5; j++) {
        -:  144://			drawCard(i, state);
        -:  145://		}
        -:  146:    }
        -:  147:  
        -:  148:	// Set embargo tokens to 0 for all supply piles.
       28:  149:	for (i = 0; i <= treasure_map; i++) {
branch  0 taken 27
branch  1 taken 1 (fallthrough)
       27:  150:		state->embargoTokens[i] = 0;
        -:  151:	}
        -:  152:
        -:  153:	// Iinitialize first player's turn.
        1:  154:	state->outpostPlayed = 0;
        1:  155:	state->phase = 0;
        1:  156:	state->numActions = 1;
        1:  157:	state->numBuys = 1;
        1:  158:	state->playedCardCount = 0;
        1:  159:	state->whoseTurn = 0;
        1:  160:	state->handCount[state->whoseTurn] = 0;
        -:  161:
        -:  162:	// Moved draw cards to here, only drawing at the start of a turn.
        6:  163:	for (it = 0; it < 5; it++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  164:		drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  165:	}
        -:  166:
        1:  167:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  168:
        1:  169:	return 0;
        -:  170:}
        -:  171:
function shuffle called 10 returned 100% blocks executed 100%
       10:  172:int shuffle(int player, struct gameState *state) {
        -:  173:	int newDeck[MAX_DECK];
       10:  174:	int newDeckPos = 0;
        -:  175:	int card;
        -:  176:	int i;
        -:  177:
       10:  178:	if (state->deckCount[player] < 1)
branch  0 taken 5 (fallthrough)
branch  1 taken 5
        5:  179:		return -1;
        -:  180:
        5:  181:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 5
        -:  182:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  183:
       51:  184:	while (state->deckCount[player] > 0) {
branch  0 taken 41
branch  1 taken 5 (fallthrough)
       41:  185:		card = (int)floor(Random() * state->deckCount[player]);
call    0 returned 41
       41:  186:		newDeck[newDeckPos] = state->deck[player][card];
       41:  187:		newDeckPos++;
      133:  188:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92
branch  1 taken 41 (fallthrough)
       92:  189:			state->deck[player][i] = state->deck[player][i+1];
        -:  190:		}
       41:  191:		state->deckCount[player]--;
        -:  192:	}
        -:  193:
       46:  194:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 41
branch  1 taken 5 (fallthrough)
       41:  195:		state->deck[player][i] = newDeck[i];
       41:  196:		state->deckCount[player]++;
        -:  197:	}
        5:  198:	return 0;
        -:  199:}
        -:  200:
function playCard called 0 returned 0% blocks executed 0%
    #####:  201:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  202:	int card;
    #####:  203:	int coin_bonus = 0;	// Tracks coins gained from actions.
        -:  204:
        -:  205:	// Check if it is the right phase.
    #####:  206:	if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:		return -1;
        -:  208:	}
        -:  209:	
        -:  210:	// Check if player has enough actions.
    #####:  211:	if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  212:		return -1;
        -:  213:	}
        -:  214:	
        -:  215:	// Get card played.
    #####:  216:	card = handCard(handPos, state);
call    0 never executed
        -:  217:	
        -:  218:	// Check if selected card is an action.
    #####:  219:	if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  220:		return -1;
        -:  221:	}
        -:  222:	
        -:  223:	// Play card.
    #####:  224:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:		return -1;
        -:  226:	}
        -:  227:	
        -:  228:	// Reduce number of actions.
    #####:  229:	state->numActions--;
        -:  230:
        -:  231:	// Update coins (Treasure cards may be added with card draws).
    #####:  232:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  233:	
    #####:  234:	return 0;
        -:  235:}
        -:  236:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  237:int buyCard(int supplyPos, struct gameState *state) {
        -:  238:	int who;
        -:  239:	if (DEBUG) {
        -:  240:		printf("Entering buyCard...\n");
        -:  241:	}
        -:  242:
        -:  243:	// I don't know what to do about the phase thing...
    #####:  244:	who = state->whoseTurn;
        -:  245:
    #####:  246:	if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  247:		if (DEBUG)
        -:  248:			printf("You do not have any buys left\n");
    #####:  249:		return -1;
        -:  250:	}
    #####:  251:	else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  252:		if (DEBUG)
        -:  253:			printf("There are not any of that type of card left\n");
    #####:  254:		return -1;
        -:  255:	}
    #####:  256:	else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  257:		if (DEBUG)
        -:  258:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  259:		return -1;
        -:  260:	} else {
    #####:  261:		state->phase = 1;
        -:  262://		state->supplyCount[supplyPos]--;
    #####:  263:		gainCard(supplyPos, state, 0, who); // Card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
    #####:  264:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  265:		state->numBuys--;
        -:  266:		if (DEBUG)
        -:  267:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  268:	}
        -:  269:
        -:  270://	state->discard[who][state->discardCount[who]] = supplyPos;
        -:  271://	state->discardCount[who]++;
        -:  272:
    #####:  273:	return 0;
        -:  274:}
        -:  275:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  276:int numHandCards(struct gameState *state) {
    #####:  277:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  278:}
        -:  279:
function handCard called 0 returned 0% blocks executed 0%
    #####:  280:int handCard(int handPos, struct gameState *state) {
    #####:  281:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  282:	return state->hand[currentPlayer][handPos];
        -:  283:}
        -:  284:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  285:int supplyCount(int card, struct gameState *state) {
    #####:  286:	return state->supplyCount[card];
        -:  287:}
        -:  288:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  289:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  290:	int i;
    #####:  291:	int count = 0;
        -:  292:
    #####:  293:	for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  294:		if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  295:			count++;
        -:  296:	}
    #####:  297:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  298:		if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  299:			count++;
        -:  300:	}
    #####:  301:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  302:		if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  303:			count++;
        -:  304:	}
        -:  305:
    #####:  306:	return count;
        -:  307:}
        -:  308:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  309:int whoseTurn(struct gameState *state) {
    #####:  310:	return state->whoseTurn;
        -:  311:}
        -:  312:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  313:int endTurn(struct gameState *state) {
        -:  314:	int k;
        -:  315:	int i;
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  317:  
        -:  318:	// Discard hand.
    #####:  319:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  320:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  321:		state->hand[currentPlayer][i] = -1;	// Set card to -1
        -:  322:	}
    #####:  323:	state->handCount[currentPlayer] = 0;		// Reset hand count.
        -:  324:    
        -:  325:	// Code for determining the player.
    #####:  326:	if (currentPlayer < (state->numPlayers - 1)) { 
branch  0 never executed
branch  1 never executed
    #####:  327:		state->whoseTurn = currentPlayer + 1;	// Still safe to increment.
        -:  328:	} else {
    #####:  329:		state->whoseTurn = 0;				// Max player has been reached, loop back around to player 1
        -:  330:	}
        -:  331:
    #####:  332:	state->outpostPlayed = 0;
    #####:  333:	state->phase = 0;
    #####:  334:	state->numActions = 1;
    #####:  335:	state->coins = 0;
    #####:  336:	state->numBuys = 1;
    #####:  337:	state->playedCardCount = 0;
    #####:  338:	state->handCount[state->whoseTurn] = 0;
        -:  339:
        -:  340:	// Next player draws hand.
    #####:  341:	for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  342:		drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  343:	}
        -:  344:
        -:  345:	// Update money.
    #####:  346:	updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  347:
    #####:  348:	return 0;
        -:  349:}
        -:  350:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  351:int isGameOver(struct gameState *state) {
        -:  352:	int i;
        -:  353:	int j;
        -:  354:	
        -:  355:	// If stack of Province cards is empty, the game ends.
    #####:  356:	if (state->supplyCount[province] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  357:		return 1;
        -:  358:	}
        -:  359:
        -:  360:	// If three supply piles are at 0, the game ends.
    #####:  361:	j = 0;
    #####:  362:	for (i = 0; i < 25; i++) {
branch  0 never executed
branch  1 never executed
    #####:  363:		if (state->supplyCount[i] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  364:			j++;
        -:  365:		}
        -:  366:	}
        -:  367:
    #####:  368:	if ( j >= 3 ) {
branch  0 never executed
branch  1 never executed
    #####:  369:		return 1;
        -:  370:    }
        -:  371:
    #####:  372:	return 0;
        -:  373:}
        -:  374:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  375:int scoreFor(int player, struct gameState *state) {
        -:  376:	int i;
    #####:  377:	int score = 0;
        -:  378:
        -:  379:	// Score from hand.
    #####:  380:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  381:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  382:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  383:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  384:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  385:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  386:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  387:	}
        -:  388:
        -:  389:	// Score from discard.
    #####:  390:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  391:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  392:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  393:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  394:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  395:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  397:	}
        -:  398:
        -:  399:	// Score from deck.
    #####:  400:	for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  401:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  402:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  403:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  404:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  405:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  407:	}
        -:  408:
    #####:  409:	return score;
        -:  410:}
        -:  411:
        -:  412:#define TEST4 1
        -:  413:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  414:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  415:	int i;	
        -:  416:	int j;
        -:  417:	int highScore;
        -:  418:	int currentPlayer;
        -:  419:
        -:  420:	// Get score for each player.
    #####:  421:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  422:		// Set unused player scores to -9999
    #####:  423:		if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  424:			players[i] = -9999;
        -:  425:		}
        -:  426:		else {
    #####:  427:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  428:		}
        -:  429:	}
        -:  430:
        -:  431:	// Find highest score.
    #####:  432:	j = 0;
    #####:  433:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  434:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  435:			j = i;
        -:  436:		}
        -:  437:	}
    #####:  438:	highScore = players[j];
        -:  439:
        -:  440:	// Add 1 to players who had less turns.
    #####:  441:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  442:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  443:		if ( players[i] == highScore && i > currentPlayer ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  444:			players[i]++;
        -:  445:		}
        -:  446:	}
        -:  447:
        -:  448:	// Find new highest score.
    #####:  449:	j = 0;
    #####:  450:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  451:		if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  452:			j = i;
        -:  453:		}
        -:  454:	}
    #####:  455:	highScore = players[j];
        -:  456:
        -:  457:	// Set winners in array to 1 and rest to 0.
    #####:  458:	for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  459:		if ( players[i] == highScore ) {
branch  0 never executed
branch  1 never executed
    #####:  460:			players[i] = 1;
        -:  461:		}
        -:  462:		else {
    #####:  463:			players[i] = 0;
        -:  464:		}
        -:  465:	}
        -:  466:
    #####:  467:	return 0;
        -:  468:}
        -:  469:
function drawCard called 921 returned 100% blocks executed 100%
      921:  470:int drawCard(int player, struct gameState *state) {
        -:  471:	int count;
        -:  472:	int deckCounter;
      921:  473:	if (state->deckCount[player] <= 0) { // Deck is empty.
branch  0 taken 3 (fallthrough)
branch  1 taken 918
        -:  474:		// Step 1: Shuffle the discard pile back into a deck.
        -:  475:		int i;
        -:  476:		// Move discard to deck.
        4:  477:		for (i = 0; i < state->discardCount[player];i++) {
branch  0 taken 1
branch  1 taken 3 (fallthrough)
        1:  478:			state->deck[player][i] = state->discard[player][i];
        1:  479:			state->discard[player][i] = -1;
        -:  480:		}
        -:  481:
        3:  482:		state->deckCount[player] = state->discardCount[player];
        3:  483:		state->discardCount[player] = 0; // Reset discard.
        -:  484:
        -:  485:		// Shufffle the deck.
        3:  486:		shuffle(player, state);
call    0 returned 3
        -:  487:   
        -:  488:	    if (DEBUG){
        -:  489:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  490:		}
        -:  491:
        3:  492:		state->discardCount[player] = 0;
        -:  493:
        -:  494:		// Step 2 Draw Card.
        3:  495:		count = state->handCount[player]; // Get current player's hand count.
        -:  496:    
        -:  497:		if (DEBUG) {
        -:  498:			printf("Current hand count: %d\n", count);
        -:  499:		}
        -:  500:    
        3:  501:		deckCounter = state->deckCount[player];	// Create a holder for the deck count.
        -:  502:
        3:  503:		if (deckCounter == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  504:			return -1;
        -:  505:
        1:  506:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  507:		state->deckCount[player]--;
        1:  508:		state->handCount[player]++;//Increment hand count
        -:  509:	}
        -:  510:	else {
      918:  511:		int count = state->handCount[player];//Get current hand count for player
        -:  512:		int deckCounter;
        -:  513:		if (DEBUG){//Debug statements
        -:  514:			printf("Current hand count: %d\n", count);
        -:  515:	}
      918:  516:	deckCounter = state->deckCount[player];//Create holder for the deck count
      918:  517:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      918:  518:	state->deckCount[player]--;
      918:  519:	state->handCount[player]++;//Increment hand count
        -:  520:	}
      919:  521:	return 0;
        -:  522:}
        -:  523:
function getCost called 0 returned 0% blocks executed 0%
    #####:  524:int getCost(int cardNumber) {
    #####:  525:	switch( cardNumber ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
    #####:  526:		case curse:		return 0;
    #####:  527:		case estate:		return 2;
    #####:  528:		case duchy:		return 5;
    #####:  529:		case province:		return 8;
    #####:  530:		case copper:		return 0;
    #####:  531:		case silver:		return 3;
    #####:  532:		case gold:		return 6;
    #####:  533:		case adventurer:	return 6;
    #####:  534:		case council_room:	return 5;
    #####:  535:		case feast:		return 4;
    #####:  536:		case gardens:		return 4;
    #####:  537:		case mine:		return 5;
    #####:  538:		case remodel:		return 4;
    #####:  539:		case smithy:		return 4;
    #####:  540:		case village:		return 3;
    #####:  541:		case baron:		return 4;
    #####:  542:		case great_hall:	return 3;
    #####:  543:		case minion:		return 5;
    #####:  544:		case steward:		return 3;
    #####:  545:		case tribute:		return 5;
    #####:  546:		case ambassador:	return 3;
    #####:  547:		case cutpurse:		return 4;
    #####:  548:		case embargo:		return 2;
    #####:  549:		case outpost:		return 5;
    #####:  550:		case salvager:		return 4;
    #####:  551:		case sea_hag:		return 4;
    #####:  552:		case treasure_map:	return 4;
    #####:  553:		case 27:			return 99;
    #####:  554:		case 28:			return -1;
        -:  555:	}
    #####:  556:	return -1;
        -:  557:}
        -:  558:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  559:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  560:	int i, j, k, x, index;
    #####:  561:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  562:	int nextPlayer = currentPlayer + 1;
        -:  563://	int tributeRevealedCards[2] = {-1, -1};
        -:  564:	int temphand[MAX_HAND];
        -:  565://	int drawntreasure = 0;
        -:  566://	int cardDrawn;
        -:  567://	int z = 0; // This is the counter for the temp hand.
    #####:  568:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  569:		nextPlayer = 0;
        -:  570:	}
        -:  571:	
        -:  572:	// Uses switch to select card and perform actions
    #####:  573:	switch( card ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  574:		case adventurer:
    #####:  575:			runAdventurer(state, currentPlayer, temphand);
call    0 never executed
    #####:  576:			return 0;
        -:  577:
        -:  578:		case council_room:
    #####:  579:			runCouncil_room(state, currentPlayer, handPos);
call    0 never executed
    #####:  580:			return 0;
        -:  581:			
        -:  582:		case feast:
        -:  583:			// Gain card with cost up to 5.
        -:  584:			// Backup hand.
    #####:  585:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  586:				temphand[i] = state->hand[currentPlayer][i];	// Backup card.
    #####:  587:				state->hand[currentPlayer][i] = -1;		// Set to nothing.
        -:  588:			}
        -:  589:			// Backup hand.
        -:  590:			// Update Coins for Buy.
    #####:  591:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  592:			x = 1; // Condition to loop on.
    #####:  593:			while( x == 1) { // Buy one card.
branch  0 never executed
branch  1 never executed
    #####:  594:				if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  595:					if (DEBUG)
        -:  596:						printf("None of that card left, sorry!\n");
        -:  597:					if (DEBUG){
        -:  598:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  599:					}
        -:  600:				}
    #####:  601:				else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  602:					printf("That card is too expensive!\n");
call    0 never executed
        -:  603:					if (DEBUG) {
        -:  604:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  605:					}
        -:  606:				}
        -:  607:				else {
        -:  608:					if (DEBUG) {
        -:  609:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  610:					}
    #####:  611:					gainCard(choice1, state, 0, currentPlayer);	// Gain the card.
call    0 never executed
    #####:  612:					x = 0; // No more buying cards.
        -:  613:					if (DEBUG) {
        -:  614:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  615:					}
        -:  616:				}
        -:  617:			}
        -:  618:			// Reset Hand.
    #####:  619:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  620:				state->hand[currentPlayer][i] = temphand[i];
    #####:  621:				temphand[i] = -1;
        -:  622:			}
        -:  623:			// End reset Hand.
    #####:  624:			return 0;
        -:  625:
        -:  626:		case gardens:
    #####:  627:			return -1;
        -:  628:			
        -:  629:		case mine:
    #####:  630:			return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  631:			
        -:  632:		case remodel:
    #####:  633:			j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  634:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  635:				return -1;
        -:  636:			}
    #####:  637:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  638:			// Discard card from hand.
    #####:  639:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  640:			// Discard trashed card.
    #####:  641:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  642:				if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  643:					discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  644:					break;
        -:  645:				}
        -:  646:			}
    #####:  647:			return 0;
        -:  648:		
        -:  649:		case smithy:
    #####:  650:			runSmithy(state, currentPlayer, handPos);
call    0 never executed
    #####:  651:			return 0;
        -:  652:
        -:  653:		case village:
        -:  654:			// +1 Card.
    #####:  655:			drawCard(currentPlayer, state);
call    0 never executed
        -:  656:			// +2 Actions.
    #####:  657:			state->numActions = state->numActions + 2;
        -:  658:			// Discard played card from hand.
    #####:  659:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  660:			return 0;
        -:  661:
        -:  662:		case baron:
    #####:  663:			state->numBuys++;										// Increase buys by 1!
    #####:  664:			if (choice1 > 0){										// Boolean true or going to discard an estate.
branch  0 never executed
branch  1 never executed
    #####:  665:				int p = 0;										// Iterator for hand!
    #####:  666:				int card_not_discarded = 1;							// Flag for discard set!
    #####:  667:				while(card_not_discarded) {	
branch  0 never executed
branch  1 never executed
    #####:  668:					if (state->hand[currentPlayer][p] == estate) {		// Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  669:						state->coins += 4;							// Add 4 coins to the amount of coins.
    #####:  670:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  671:						state->discardCount[currentPlayer]++;
    #####:  672:						for ( ; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  673:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  674:						}
    #####:  675:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  676:						state->handCount[currentPlayer]--;
    #####:  677:						card_not_discarded = 0;						// Exit the loop.
        -:  678:					}
    #####:  679:					else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  680:						if(DEBUG) {
        -:  681:							printf("No estate cards in your hand, invalid choice\n");
        -:  682:							printf("Must gain an estate if there are any\n");
        -:  683:						}
    #####:  684:						if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  685:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  686:							state->supplyCount[estate]--;				// Decrement estates.
    #####:  687:							if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  688:								isGameOver(state);
call    0 never executed
        -:  689:							}
        -:  690:						}
    #####:  691:						card_not_discarded = 0;						// Exit the loop.
        -:  692:					}
        -:  693:					else {
    #####:  694:						p++;										// Next card.
        -:  695:					}
        -:  696:				}
        -:  697:			}
        -:  698:			else {
    #####:  699:				if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:					gainCard(estate, state, 0, currentPlayer);			// Gain an estate.
call    0 never executed
    #####:  701:					state->supplyCount[estate]--;						// Decrement Estates.
    #####:  702:					if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  703:						isGameOver(state);
call    0 never executed
        -:  704:					}
        -:  705:				}
        -:  706:			}
    #####:  707:			return 0;
        -:  708:
        -:  709:		case great_hall:
        -:  710:			// +1 Card.
    #####:  711:			drawCard(currentPlayer, state);
call    0 never executed
        -:  712:			// +1 Actions.
    #####:  713:			state->numActions++;
        -:  714:			// Discard card from hand.
    #####:  715:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  716:			return 0;
        -:  717:	
        -:  718:		case minion:
    #####:  719:			runMinion(state, choice1, choice2, currentPlayer, handPos);
call    0 never executed
    #####:  720:			return 0;
        -:  721:
        -:  722:		case steward:
    #####:  723:			if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  724:				// +2 cards.
    #####:  725:				drawCard(currentPlayer, state);
call    0 never executed
    #####:  726:				drawCard(currentPlayer, state);
call    0 never executed
        -:  727:			}
    #####:  728:			else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  729:				// +2 coins.
    #####:  730:				state->coins = state->coins + 2;
        -:  731:			}
        -:  732:			else {
        -:  733:				// Trash 2 cards in hand.
    #####:  734:				discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  735:				discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  736:			}
        -:  737:			// Discard card from hand.
    #####:  738:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  739:			return 0;
        -:  740:
        -:  741:		case tribute:
    #####:  742:			runTribute(state, nextPlayer, currentPlayer);
call    0 never executed
    #####:  743:			return 0;
        -:  744:
        -:  745:		case ambassador:
    #####:  746:			j = 0; //used to check if player has enough cards to discard
    #####:  747:			if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  748:				return -1;
        -:  749:			}
    #####:  750:			if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  751:				return -1;
        -:  752:			}
    #####:  753:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  754:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  755:					j++;
        -:  756:				}
        -:  757:			}
    #####:  758:			if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  759:				return -1;
        -:  760:			}
        -:  761:			if (DEBUG)
        -:  762:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  763:
        -:  764:			// Increase supply count for choosen card by amount being discarded.
    #####:  765:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  766:
        -:  767:			// Each other player gains a copy of revealed card.
    #####:  768:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  769:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  770:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  771:				}
        -:  772:			}
        -:  773:
        -:  774:			// Discard played card from hand.
    #####:  775:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  776:
        -:  777:			// Trash copies of cards returned to supply.
    #####:  778:			for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  779:				for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  780:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  781:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  782:						break;
        -:  783:					}
        -:  784:				}
        -:  785:			}
    #####:  786:			return 0;
        -:  787:		
        -:  788:		case cutpurse:
    #####:  789:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  790:			for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  791:				if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  792:					for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  793:						if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  794:							discardCard(j, i, state, 0);
call    0 never executed
    #####:  795:							break;
        -:  796:						}
    #####:  797:						if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  798:							for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  799:								if (DEBUG)
        -:  800:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  801:							}
    #####:  802:							break;
        -:  803:						}
        -:  804:					}
        -:  805:				}
        -:  806:			}
        -:  807:			// Discard played card from hand.
    #####:  808:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  809:			return 0;
        -:  810:
        -:  811:		case embargo:
        -:  812:			// +2 Coins.
    #####:  813:			state->coins = state->coins + 2;
        -:  814:			// See if selected pile is in play.
    #####:  815:			if ( state->supplyCount[choice1] == -1 ) {
branch  0 never executed
branch  1 never executed
    #####:  816:				return -1;
        -:  817:			}
        -:  818:			// Add embargo token to selected supply pile.
    #####:  819:			state->embargoTokens[choice1]++;
        -:  820:			// Trash card.
    #####:  821:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  822:			return 0;
        -:  823:
        -:  824:		case outpost:
        -:  825:			// Set outpost flag.
    #####:  826:			state->outpostPlayed++;
        -:  827:			// Discard card.
    #####:  828:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  829:			return 0;
        -:  830:
        -:  831:		case salvager:
        -:  832:			// +1 buy.
    #####:  833:			state->numBuys++;
    #####:  834:			if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  835:				// Gain coins equal to trashed card.
    #####:  836:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  837:				// Trash card.
    #####:  838:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -:  839:			}
        -:  840:			// Discard card.
    #####:  841:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  842:			return 0;
        -:  843:
        -:  844:		case sea_hag:
    #####:  845:			runSea_hag(state, currentPlayer);
call    0 never executed
    #####:  846:			return 0;
        -:  847:
        -:  848:		case treasure_map:
        -:  849:			// Search hand for another treasure_map.
    #####:  850:			index = -1;
    #####:  851:			for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  852:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  853:					index = i;
    #####:  854:					break;
        -:  855:				}
        -:  856:			}
    #####:  857:			if (index > -1) {
branch  0 never executed
branch  1 never executed
        -:  858:				// Trash both treasure cards.
    #####:  859:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  860:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  861:				// Gain 4 Gold cards.
    #####:  862:				for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  863:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  864:				}
        -:  865:				// Return success.
    #####:  866:				return 1;
        -:  867:			}
        -:  868:
        -:  869:		// No second treasure_map found in hand.
    #####:  870:		return -1;
        -:  871:
        -:  872:	} // End switch()
        -:  873:
    #####:  874:	return -1;
        -:  875:} // End cardEffect()
        -:  876:
        -:  877:
function runMine called 0 returned 0% blocks executed 0%
    #####:  878:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####:  879:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####:  880:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  881:		return -1;
        -:  882:	}
    #####:  883:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  884:		return -1;
        -:  885:	}
    #####:  886:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  887:		return -1;
        -:  888:	}
    #####:  889:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  890:
        -:  891:	// Discard card from hand.
    #####:  892:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  893:	// Discard trashed card.
        -:  894:	int i;
    #####:  895:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  896:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  897:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  898:			break;
        -:  899:		}
        -:  900:	}
    #####:  901:	return 0;
        -:  902:}
        -:  903:
        -:  904:
function runCouncil_room called 0 returned 0% blocks executed 0%
    #####:  905:void runCouncil_room(struct gameState *state, int currentPlayer, int handPos) {
        -:  906:	int i;
        -:  907:	// +4 Cards.
    #####:  908:	for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  909:		drawCard(currentPlayer, state);
call    0 never executed
        -:  910:	}
        -:  911:	// +1 Buy.
    #####:  912:	state->numBuys++;
        -:  913:	// Each other player draws a card.
    #####:  914:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  915:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  916:			drawCard(i, state);
call    0 never executed
        -:  917:		}
        -:  918:	}
        -:  919:	// Put played card in played card pile.
    #####:  920:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  921:}
        -:  922:
function runAdventurer called 7 returned 100% blocks executed 100%
        7:  923:void runAdventurer(struct gameState *state, int currentPlayer, int *temphand) {
        7:  924:	int drawntreasure = 0;
        7:  925:	int z = 0;
        -:  926:	int cardDrawn;
        -:  927:
      930:  928:	while (drawntreasure < 2) {
branch  0 taken 916
branch  1 taken 7 (fallthrough)
      916:  929:		if (state->deckCount[currentPlayer] < 1) { // If the deck is empty we need to shuffle discard and add to deck.
branch  0 taken 3 (fallthrough)
branch  1 taken 913
        3:  930:			shuffle(currentPlayer, state);
call    0 returned 3
        -:  931:		}
      916:  932:		drawCard(currentPlayer, state);
call    0 returned 916
      916:  933:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; // Top card of hand is most recently drawn card.
      916:  934:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 902 (fallthrough)
branch  1 taken 14
branch  2 taken 902 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 902
       14:  935:			drawntreasure++;
        -:  936:		else {
      902:  937:			temphand[z] = cardDrawn;
      902:  938:			state->handCount[currentPlayer]--; // This should just remove the top card (the most recently drawn one).
      902:  939:			z++;
        -:  940:		}
        -:  941:	}
      916:  942:	while (z - 1 >= 0) {
branch  0 taken 902
branch  1 taken 7 (fallthrough)
      902:  943:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // Discard all cards in play that have been drawn.
      902:  944:		z = z - 1;
        -:  945:	}
        7:  946:}
        -:  947:
        -:  948:
function runSmithy called 0 returned 0% blocks executed 0%
    #####:  949:void runSmithy(struct gameState* state, int currentPlayer, int handPos) {
        -:  950:	int i;
        -:  951:	// +3 Cards.
    #####:  952:	for (i = 3; i > 0; i--) {
branch  0 never executed
branch  1 never executed
    #####:  953:		drawCard(currentPlayer, state);
call    0 never executed
        -:  954:	}
        -:  955:	// Discard card from hand.
    #####:  956:	discardCard(handPos--, currentPlayer, state, 0);
call    0 never executed
    #####:  957:}
        -:  958:
        -:  959:
function runTribute called 0 returned 0% blocks executed 0%
    #####:  960:void runTribute(struct gameState* state, int nextPlayer, int currentPlayer) {
        -:  961:	int i;
    #####:  962:	int tributeRevealedCards[2] = { -1, -1 };
        -:  963:
    #####:  964:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  965:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  966:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  967:			state->deckCount[nextPlayer]--;
        -:  968:		}
    #####:  969:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  970:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  971:			state->discardCount[nextPlayer]--;
        -:  972:		}
        -:  973:		else {
        -:  974:			// No Card to Reveal.
        -:  975:			if (DEBUG) {
        -:  976:				printf("No cards to reveal\n");
        -:  977:			}
        -:  978:		}
        -:  979:	}
        -:  980:	else {
    #####:  981:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  982:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  983:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];		// Move to deck.
    #####:  984:				state->deckCount[nextPlayer]++;
    #####:  985:				state->discard[nextPlayer][i] = -1;
    #####:  986:				state->discardCount[nextPlayer]--;
        -:  987:			}
    #####:  988:			shuffle(nextPlayer, state);									// Shuffle the deck.
call    0 never executed
        -:  989:		}
    #####:  990:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  991:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  992:		state->deckCount[nextPlayer]--;
    #####:  993:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  994:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  995:		state->deckCount[nextPlayer]--;
        -:  996:	}
        -:  997:
    #####:  998:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {					// If we have a duplicate card, drop one.
branch  0 never executed
branch  1 never executed
    #####:  999:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1000:		state->playedCardCount++;
    #####: 1001:		tributeRevealedCards[1] = -1;
        -: 1002:	}
    #####: 1003:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1004:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1005:			tributeRevealedCards[i] == gold) {	// Treasure cards.
    #####: 1006:			state->coins += 2;
        -: 1007:		}
    #####: 1008:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1009:			tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1010:			tributeRevealedCards[i] == great_hall) {  // Victory Card Found.
    #####: 1011:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1012:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:		}
        -: 1014:		else {  // Action Card.
    #####: 1015:			state->numActions = state->numActions + 2;
        -: 1016:		}
        -: 1017:	}
    #####: 1018:}
        -: 1019:
        -: 1020:
function runMinion called 0 returned 0% blocks executed 0%
    #####: 1021:void runMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos) {
        -: 1022:	int i, j;
        -: 1023:	// +1 action.
    #####: 1024:	state->numActions++;
        -: 1025:	// Discard card from hand.
    #####: 1026:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:	if (choice1) {											// +2 coins.
branch  0 never executed
branch  1 never executed
    #####: 1028:		state->coins = state->coins + 2;
        -: 1029:	}
    #####: 1030:	else if (choice2) {		// Discard hand, redraw 4, other players with 5+ cards discard hand and draw 4.
branch  0 never executed
branch  1 never executed
        -: 1031:						// Discard hand.
    #####: 1032:		while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1033:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1034:		}
        -: 1035:		// Draw 4.
    #####: 1036:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1037:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:		}
        -: 1039:		// Other players discard hand and redraw if hand size > 4.
    #####: 1040:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1041:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1042:				if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -: 1043:					// Discard hand.
    #####: 1044:					while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1045:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1046:					}
        -: 1047:					// Draw 4.
    #####: 1048:					for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1049:						drawCard(i, state);
call    0 never executed
        -: 1050:					}
        -: 1051:				}
        -: 1052:			}
        -: 1053:		}
        -: 1054:	}
    #####: 1055:}
        -: 1056:
        -: 1057:
function runSea_hag called 0 returned 0% blocks executed 0%
    #####: 1058:void runSea_hag(struct gameState *state, int currentPlayer) {
        -: 1059:	int i;
    #####: 1060:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1061:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1062:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1063:			state->deckCount[i]--;
    #####: 1064:			state->discardCount[i]++;
    #####: 1065:			state->deck[i][state->deckCount[i]--] = curse; // Top card now a curse.
        -: 1066:		}
        -: 1067:	}
    #####: 1068:}
        -: 1069:
        -: 1070:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1071:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1072:	// If card is not trashed, added to Played pile.
    #####: 1073:	if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1074:		// Add card to played pile.
    #####: 1075:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1076:		state->playedCardCount++;
        -: 1077:	}
        -: 1078:	// Set played card to -1.
    #####: 1079:	state->hand[currentPlayer][handPos] = -1;
        -: 1080:	// Remove card from player's hand.
    #####: 1081:	if ( handPos == (state->handCount[currentPlayer] - 1) ) { // Last card in hand array is played.
branch  0 never executed
branch  1 never executed
        -: 1082:		// Reduce number of cards in hand.
    #####: 1083:		state->handCount[currentPlayer]--;
        -: 1084:	}
    #####: 1085:	else if ( state->handCount[currentPlayer] == 1 ) { // Only one card in hand.
branch  0 never executed
branch  1 never executed
        -: 1086:      //reduce number of cards in hand
    #####: 1087:      state->handCount[currentPlayer]--;
        -: 1088:	}
        -: 1089:	else {
        -: 1090:		// Replace discarded card with last card in hand.
    #####: 1091:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1092:		// Set last card to -1.
    #####: 1093:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1094:		// Reduce number of cards in hand.
    #####: 1095:		state->handCount[currentPlayer]--;
        -: 1096:	}
    #####: 1097:	return 0;
        -: 1098:}
        -: 1099:
        -: 1100:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1101:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1102:	// Note: supplyPos is enum of choosen card.
        -: 1103:	// Check if supply pile is empty (0) or card is not used in game (-1).
    #####: 1104:	if ( supplyCount(supplyPos, state) < 1 ) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1105:		return -1;
        -: 1106:	}
        -: 1107:
        -: 1108:	// Added card for [whoseTurn] current player:
        -: 1109:	// toFlag = 0 : add to discard
        -: 1110:	// toFlag = 1 : add to deck
        -: 1111:	// toFlag = 2 : add to hand
        -: 1112:
    #####: 1113:	if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1114:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1115:		state->deckCount[player]++;
        -: 1116:	}
    #####: 1117:	else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1118:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1119:		state->handCount[player]++;
        -: 1120:	}
        -: 1121:	else {
    #####: 1122:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1123:		state->discardCount[player]++;
        -: 1124:	}
        -: 1125:	// Decrease number in supply pile.
    #####: 1126:	state->supplyCount[supplyPos]--;
        -: 1127:
    #####: 1128:	return 0;
        -: 1129:}
        -: 1130:
        -: 1131:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1132:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1133:	int i;
        -: 1134:	// Reset coin count.
        1: 1135:	state->coins = 0;
        -: 1136:	// Add coins for each Treasure card in player's hand.
        6: 1137:	for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5: 1138:		if (state->hand[player][i] == copper) {
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        3: 1139:			state->coins += 1;
        -: 1140:		}
        2: 1141:		 else if (state->hand[player][i] == silver) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1142:			state->coins += 2;
        -: 1143:		}
        2: 1144:		else if (state->hand[player][i] == gold) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 1145:			state->coins += 3;
        -: 1146:		}
        -: 1147:	}
        -: 1148:	// Add bonus.
        1: 1149:	state->coins += bonus;
        -: 1150:
        1: 1151:	return 0;
        -: 1152:}
        -: 1153:
        -: 1154:// End of dominion.c
