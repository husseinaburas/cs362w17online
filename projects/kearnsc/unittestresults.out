Function isGameOver() - TEST 1 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 2 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 3 SUCCESFULLY COMPLETED
Function isGameOver() - TEST 4 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:17.58% of 563
Branches executed:17.75% of 417
Taken at least once:14.63% of 417
Calls executed:7.22% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 30 returned 100% blocks executed 83%
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
call    0 returned 1
        1:   47:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       10:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 9
        -:  116:		{
        2:  117:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
        9:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        -:  147:	}
       16:  148:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  195:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 2 returned 100% blocks executed 94%
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       56:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 36
branch  1 taken 20 (fallthrough)
       36:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 5 returned 100% blocks executed 38%
        5:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
    #####: 1206:  while(drawntreasure<3){
branch  0 never executed
branch  1 never executed
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
    #####: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 never executed
branch  1 never executed
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
    #####: 1212:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
    #####: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
    #####: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
    #####: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
    #####: 1223:      state->handCount[currentPlayer]--; 
    #####: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
    #####: 1228:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
        -: 1229:    // discard all cards in play that have been drawn
    #####: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:  
    #####: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
    #####: 1270:  for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1271:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
    #####: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
    #####: 1295:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1296:    {
        -: 1297:      //add card to played pile
    #####: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
    #####: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
    #####: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
    #####: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
    #####: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
    #####: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
    #####: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
    #####: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
    #####: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1337:    {
    #####: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
    #####: 1346:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1347:    {
    #####: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1349:      state->deckCount[player]++;
        -: 1350:    }
    #####: 1351:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
    #####: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
    #####: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
    #####: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        1: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
        6: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1377:    {
        5: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1379:	{
        3: 1380:	  state->coins += 1;
        -: 1381:	}
        2: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        2: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        1: 1393:  state->coins += bonus;
        -: 1394:
        1: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Function getWinners() - TEST 1 SUCCESFULLY COMPLETED
Function getWinners() - TEST 2 SUCCESFULLY COMPLETED
Function getWinners() - TEST 3 SUCCESFULLY COMPLETED
Function getWinners() - TEST 4 FAILED - Potential bug!
File 'dominion.c'
Lines executed:23.80% of 563
Branches executed:27.34% of 417
Taken at least once:21.82% of 417
Calls executed:9.28% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 60 returned 100% blocks executed 83%
       60:   10:int compare(const void* a, const void* b) {
       60:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:   12:    return 1;
       60:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 16 (fallthrough)
branch  1 taken 44
       16:   14:    return -1;
       44:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        2:   46:  SelectStream(1);
call    0 returned 2
        2:   47:  PutSeed((long)randomSeed);
call    0 returned 2
        -:   48:  
        -:   49:  //check number of players
        2:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        2:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       22:   59:  for (i = 0; i < 10; i++)
branch  0 taken 20
branch  1 taken 2 (fallthrough)
        -:   60:    {
      220:   61:      for (j = 0; j < 10; j++)
branch  0 taken 200
branch  1 taken 20 (fallthrough)
        -:   62:        {
      200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 180 (fallthrough)
branch  1 taken 20
branch  2 taken 0 (fallthrough)
branch  3 taken 180
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        2:   75:  if (numPlayers == 2)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:   76:    {
        2:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        2:   89:  if (numPlayers == 2)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:   90:    {
        2:   91:      state->supplyCount[estate] = 8;
        2:   92:      state->supplyCount[duchy] = 8;
        2:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        2:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  104:  state->supplyCount[silver] = 40;
        2:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       42:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 40
branch  1 taken 2 (fallthrough)
        -:  109:    {
      330:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 310
branch  1 taken 20 (fallthrough)
        -:  111:	{
      310:  112:	  if (kingdomCards[j] == i)
branch  0 taken 20 (fallthrough)
branch  1 taken 290
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       20:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 20 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 18
        -:  116:		{
        4:  117:		  if (numPlayers == 2){ 
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       18:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       20:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      290:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        6:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  141:    {
        4:  142:      state->deckCount[i] = 0;
       16:  143:      for (j = 0; j < 3; j++)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -:  144:	{
       12:  145:	  state->deck[i][j] = estate;
       12:  146:	  state->deckCount[i]++;
        -:  147:	}
       32:  148:      for (j = 3; j < 10; j++)
branch  0 taken 28
branch  1 taken 4 (fallthrough)
        -:  149:	{
       28:  150:	  state->deck[i][j] = copper;
       28:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        6:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  157:    {
        4:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        6:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        4:  168:      state->handCount[i] = 0;
        4:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 54
branch  1 taken 2 (fallthrough)
        -:  179:    {
       54:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        2:  184:  state->outpostPlayed = 0;
        2:  185:  state->phase = 0;
        2:  186:  state->numActions = 1;
        2:  187:  state->numBuys = 1;
        2:  188:  state->playedCardCount = 0;
        2:  189:  state->whoseTurn = 0;
        2:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  195:    drawCard(state->whoseTurn, state);
call    0 returned 10
        -:  196:  }
        -:  197:
        2:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 2
        -:  199:
        2:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 4 returned 100% blocks executed 94%
        4:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        4:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        4:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  212:    return -1;
        4:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 4
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       48:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 40
branch  1 taken 4 (fallthrough)
       40:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 40
       40:  218:    newDeck[newDeckPos] = state->deck[player][card];
       40:  219:    newDeckPos++;
      122:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82
branch  1 taken 40 (fallthrough)
       82:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       40:  223:    state->deckCount[player]--;
        -:  224:  }
       44:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 40
branch  1 taken 4 (fallthrough)
       40:  226:    state->deck[player][i] = newDeck[i];
       40:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        4:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 10 returned 100% blocks executed 38%
       10:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       10:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       10:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       10:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  578:    state->deckCount[player]--;
       10:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       10:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
    #####: 1206:  while(drawntreasure<3){
branch  0 never executed
branch  1 never executed
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
    #####: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 never executed
branch  1 never executed
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
    #####: 1212:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
    #####: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
    #####: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
    #####: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
    #####: 1223:      state->handCount[currentPlayer]--; 
    #####: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
    #####: 1228:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
        -: 1229:    // discard all cards in play that have been drawn
    #####: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:  
    #####: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
    #####: 1270:  for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1271:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
    #####: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
    #####: 1295:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1296:    {
        -: 1297:      //add card to played pile
    #####: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
    #####: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
    #####: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
    #####: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
    #####: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
    #####: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
    #####: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
    #####: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
    #####: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1337:    {
    #####: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
    #####: 1346:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1347:    {
    #####: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1349:      state->deckCount[player]++;
        -: 1350:    }
    #####: 1351:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
    #####: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
    #####: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
    #####: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        2: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       12: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 10
branch  1 taken 2 (fallthrough)
        -: 1377:    {
       10: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 7 (fallthrough)
branch  1 taken 3
        -: 1379:	{
        7: 1380:	  state->coins += 1;
        -: 1381:	}
        3: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        3: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        2: 1393:  state->coins += bonus;
        -: 1394:
        2: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Function discardCard() - TEST 1 SUCCESFULLY COMPLETED
Function discardCard() - TEST 2 FAILED - Potential bug!
Function discardCard() - TEST 3 SUCCESFULLY COMPLETED
Function discardCard() - TEST 4 SUCCESFULLY COMPLETED
Function discardCard() - TEST 5 SUCCESFULLY COMPLETED
Function discardCard() - TEST 6 SUCCESFULLY COMPLETED
Function discardCard() - TEST 7 SUCCESFULLY COMPLETED
Function discardCard() - TEST 8 SUCCESFULLY COMPLETED
Function discardCard() - TEST 9 FAILED - Potential bug!
File 'dominion.c'
Lines executed:26.11% of 563
Branches executed:28.78% of 417
Taken at least once:23.02% of 417
Calls executed:9.28% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 90 returned 100% blocks executed 83%
       90:   10:int compare(const void* a, const void* b) {
       90:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 90
    #####:   12:    return 1;
       90:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 24 (fallthrough)
branch  1 taken 66
       24:   14:    return -1;
       66:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        3:   46:  SelectStream(1);
call    0 returned 3
        3:   47:  PutSeed((long)randomSeed);
call    0 returned 3
        -:   48:  
        -:   49:  //check number of players
        3:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        3:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       33:   59:  for (i = 0; i < 10; i++)
branch  0 taken 30
branch  1 taken 3 (fallthrough)
        -:   60:    {
      330:   61:      for (j = 0; j < 10; j++)
branch  0 taken 300
branch  1 taken 30 (fallthrough)
        -:   62:        {
      300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 270 (fallthrough)
branch  1 taken 30
branch  2 taken 0 (fallthrough)
branch  3 taken 270
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        3:   75:  if (numPlayers == 2)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:   76:    {
        3:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        3:   89:  if (numPlayers == 2)
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:   90:    {
        3:   91:      state->supplyCount[estate] = 8;
        3:   92:      state->supplyCount[duchy] = 8;
        3:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        3:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  104:  state->supplyCount[silver] = 40;
        3:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       63:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 60
branch  1 taken 3 (fallthrough)
        -:  109:    {
      495:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 465
branch  1 taken 30 (fallthrough)
        -:  111:	{
      465:  112:	  if (kingdomCards[j] == i)
branch  0 taken 30 (fallthrough)
branch  1 taken 435
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       30:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 30 (fallthrough)
branch  1 taken 0
branch  2 taken 3 (fallthrough)
branch  3 taken 27
        -:  116:		{
        6:  117:		  if (numPlayers == 2){ 
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       27:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       30:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      435:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        9:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        -:  141:    {
        6:  142:      state->deckCount[i] = 0;
       24:  143:      for (j = 0; j < 3; j++)
branch  0 taken 18
branch  1 taken 6 (fallthrough)
        -:  144:	{
       18:  145:	  state->deck[i][j] = estate;
       18:  146:	  state->deckCount[i]++;
        -:  147:	}
       48:  148:      for (j = 3; j < 10; j++)
branch  0 taken 42
branch  1 taken 6 (fallthrough)
        -:  149:	{
       42:  150:	  state->deck[i][j] = copper;
       42:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        9:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        -:  157:    {
        6:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        9:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 6
branch  1 taken 3 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        6:  168:      state->handCount[i] = 0;
        6:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       84:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 81
branch  1 taken 3 (fallthrough)
        -:  179:    {
       81:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        3:  184:  state->outpostPlayed = 0;
        3:  185:  state->phase = 0;
        3:  186:  state->numActions = 1;
        3:  187:  state->numBuys = 1;
        3:  188:  state->playedCardCount = 0;
        3:  189:  state->whoseTurn = 0;
        3:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       18:  194:  for (it = 0; it < 5; it++){
branch  0 taken 15
branch  1 taken 3 (fallthrough)
       15:  195:    drawCard(state->whoseTurn, state);
call    0 returned 15
        -:  196:  }
        -:  197:
        3:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 3
        -:  199:
        3:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 6 returned 100% blocks executed 94%
        6:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        6:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        6:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  212:    return -1;
        6:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 6
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       72:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 60
branch  1 taken 6 (fallthrough)
       60:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 60
       60:  218:    newDeck[newDeckPos] = state->deck[player][card];
       60:  219:    newDeckPos++;
      175:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 115
branch  1 taken 60 (fallthrough)
      115:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       60:  223:    state->deckCount[player]--;
        -:  224:  }
       66:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 60
branch  1 taken 6 (fallthrough)
       60:  226:    state->deck[player][i] = newDeck[i];
       60:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        6:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 15 returned 100% blocks executed 38%
       15:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       15:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       15:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       15:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  578:    state->deckCount[player]--;
       15:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       15:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
    #####: 1206:  while(drawntreasure<3){
branch  0 never executed
branch  1 never executed
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
    #####: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 never executed
branch  1 never executed
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
    #####: 1212:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
    #####: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
    #####: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
    #####: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
    #####: 1223:      state->handCount[currentPlayer]--; 
    #####: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
    #####: 1228:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
        -: 1229:    // discard all cards in play that have been drawn
    #####: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:  
    #####: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
    #####: 1270:  for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1271:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
    #####: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
        3: 1295:  if (trashFlag < 1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
        2: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
        3: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
        3: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        2: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
        2: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
        2: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
        2: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
        3: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
        3: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1337:    {
    #####: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
    #####: 1346:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1347:    {
    #####: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1349:      state->deckCount[player]++;
        -: 1350:    }
    #####: 1351:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
    #####: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
    #####: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
    #####: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        3: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       18: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 3 (fallthrough)
        -: 1377:    {
       15: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 10 (fallthrough)
branch  1 taken 5
        -: 1379:	{
       10: 1380:	  state->coins += 1;
        -: 1381:	}
        5: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        5: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        3: 1393:  state->coins += bonus;
        -: 1394:
        3: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Function gainCard() - TEST 1 SUCCESFULLY COMPLETED
Function gainCard() - TEST 2 SUCCESFULLY COMPLETED
Function gainCard() - TEST 3 SUCCESFULLY COMPLETED
Function gainCard() - TEST 4 FAILED - Potential bug!
Function gainCard() - TEST 5 SUCCESFULLY COMPLETED
Function gainCard() - TEST 6 FAILED - Potential bug!
Function gainCard() - TEST 7 SUCCESFULLY COMPLETED
Function gainCard() - TEST 8 FAILED - Potential bug!
Function gainCard() - TEST 9 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:28.77% of 563
Branches executed:30.22% of 417
Taken at least once:24.46% of 417
Calls executed:10.31% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 120 returned 100% blocks executed 83%
      120:   10:int compare(const void* a, const void* b) {
      120:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 120
    #####:   12:    return 1;
      120:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 32 (fallthrough)
branch  1 taken 88
       32:   14:    return -1;
       88:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        4:   46:  SelectStream(1);
call    0 returned 4
        4:   47:  PutSeed((long)randomSeed);
call    0 returned 4
        -:   48:  
        -:   49:  //check number of players
        4:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        4:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       44:   59:  for (i = 0; i < 10; i++)
branch  0 taken 40
branch  1 taken 4 (fallthrough)
        -:   60:    {
      440:   61:      for (j = 0; j < 10; j++)
branch  0 taken 400
branch  1 taken 40 (fallthrough)
        -:   62:        {
      400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 360 (fallthrough)
branch  1 taken 40
branch  2 taken 0 (fallthrough)
branch  3 taken 360
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        4:   75:  if (numPlayers == 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:   76:    {
        4:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        4:   89:  if (numPlayers == 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:   90:    {
        4:   91:      state->supplyCount[estate] = 8;
        4:   92:      state->supplyCount[duchy] = 8;
        4:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        4:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  104:  state->supplyCount[silver] = 40;
        4:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       84:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 80
branch  1 taken 4 (fallthrough)
        -:  109:    {
      660:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 620
branch  1 taken 40 (fallthrough)
        -:  111:	{
      620:  112:	  if (kingdomCards[j] == i)
branch  0 taken 40 (fallthrough)
branch  1 taken 580
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       40:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 40 (fallthrough)
branch  1 taken 0
branch  2 taken 4 (fallthrough)
branch  3 taken 36
        -:  116:		{
        8:  117:		  if (numPlayers == 2){ 
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       36:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       40:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      580:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       12:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  141:    {
        8:  142:      state->deckCount[i] = 0;
       32:  143:      for (j = 0; j < 3; j++)
branch  0 taken 24
branch  1 taken 8 (fallthrough)
        -:  144:	{
       24:  145:	  state->deck[i][j] = estate;
       24:  146:	  state->deckCount[i]++;
        -:  147:	}
       64:  148:      for (j = 3; j < 10; j++)
branch  0 taken 56
branch  1 taken 8 (fallthrough)
        -:  149:	{
       56:  150:	  state->deck[i][j] = copper;
       56:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       12:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  157:    {
        8:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       12:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        8:  168:      state->handCount[i] = 0;
        8:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      112:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 108
branch  1 taken 4 (fallthrough)
        -:  179:    {
      108:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        4:  184:  state->outpostPlayed = 0;
        4:  185:  state->phase = 0;
        4:  186:  state->numActions = 1;
        4:  187:  state->numBuys = 1;
        4:  188:  state->playedCardCount = 0;
        4:  189:  state->whoseTurn = 0;
        4:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       24:  194:  for (it = 0; it < 5; it++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  195:    drawCard(state->whoseTurn, state);
call    0 returned 20
        -:  196:  }
        -:  197:
        4:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 4
        -:  199:
        4:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 8 returned 100% blocks executed 94%
        8:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        8:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        8:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:  212:    return -1;
        8:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 8
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       96:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 80
       80:  218:    newDeck[newDeckPos] = state->deck[player][card];
       80:  219:    newDeckPos++;
      238:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 158
branch  1 taken 80 (fallthrough)
      158:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       80:  223:    state->deckCount[player]--;
        -:  224:  }
       88:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  226:    state->deck[player][i] = newDeck[i];
       80:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        8:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  322:int supplyCount(int card, struct gameState *state) {
        6:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 20 returned 100% blocks executed 38%
       20:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       20:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       20:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       20:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  578:    state->deckCount[player]--;
       20:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       20:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
    #####: 1206:  while(drawntreasure<3){
branch  0 never executed
branch  1 never executed
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
    #####: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 never executed
branch  1 never executed
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
    #####: 1212:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
    #####: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
    #####: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
    #####: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
    #####: 1223:      state->handCount[currentPlayer]--; 
    #####: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
    #####: 1228:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
        -: 1229:    // discard all cards in play that have been drawn
    #####: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:  
    #####: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 0 returned 0% blocks executed 0%
    #####: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
    #####: 1270:  for (i = 0; i <= 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1271:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
    #####: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
        3: 1295:  if (trashFlag < 1)
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
        2: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
        3: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
        3: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        2: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
        2: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
        2: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
        2: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
        3: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
        3: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        -: 1337:    {
        2: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
        4: 1346:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1347:    {
        1: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1349:      state->deckCount[player]++;
        -: 1350:    }
        3: 1351:  else if (toFlag == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1352:    {
        1: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
        2: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
        4: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
        4: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        4: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       24: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20
branch  1 taken 4 (fallthrough)
        -: 1377:    {
       20: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 14 (fallthrough)
branch  1 taken 6
        -: 1379:	{
       14: 1380:	  state->coins += 1;
        -: 1381:	}
        6: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        6: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        4: 1393:  state->coins += bonus;
        -: 1394:
        4: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Card Smithy - TEST 1 FAILED - Potential bug!
Card Smithy - TEST 2 FAILED - Potential bug!
Card Smithy - TEST 3 FAILED - Potential bug!
Card Smithy - TEST 4 SUCCESFULLY COMPLETED
Card Smithy - TEST 5 SUCCESFULLY COMPLETED
Card Smithy - TEST 6 SUCCESFULLY COMPLETED
Card Smithy - TEST 7 SUCCESFULLY COMPLETED
Card Smithy - TEST 8 SUCCESFULLY COMPLETED
Card Smithy - TEST 9 SUCCESFULLY COMPLETED
Card Smithy - TEST 10 SUCCESFULLY COMPLETED
Card Smithy - TEST 11 SUCCESFULLY COMPLETED
Card Smithy - TEST 12 SUCCESFULLY COMPLETED
Card Smithy - TEST 13 SUCCESFULLY COMPLETED
Card Smithy - TEST 14 SUCCESFULLY COMPLETED
Card Smithy - TEST 15 SUCCESFULLY COMPLETED
Card Smithy - TEST 16 SUCCESFULLY COMPLETED
Card Smithy - TEST 17 SUCCESFULLY COMPLETED
Card Smithy - TEST 18 SUCCESFULLY COMPLETED
Card Smithy - TEST 19 SUCCESFULLY COMPLETED
Card Smithy - TEST 20 SUCCESFULLY COMPLETED
Card Smithy - TEST 21 SUCCESFULLY COMPLETED
Card Smithy - TEST 22 SUCCESFULLY COMPLETED
Card Smithy - TEST 23 SUCCESFULLY COMPLETED
Card Smithy - TEST 24 SUCCESFULLY COMPLETED
Card Smithy - TEST 25 SUCCESFULLY COMPLETED
Card Smithy - TEST 26 SUCCESFULLY COMPLETED
Card Smithy - TEST 27 SUCCESFULLY COMPLETED
Card Smithy - TEST 28 SUCCESFULLY COMPLETED
Card Smithy - TEST 29 SUCCESFULLY COMPLETED
Card Smithy - TEST 30 SUCCESFULLY COMPLETED
Card Smithy - TEST 31 SUCCESFULLY COMPLETED
Card Smithy - TEST 32 SUCCESFULLY COMPLETED
Card Smithy - TEST 33 SUCCESFULLY COMPLETED
Card Smithy - TEST 34 SUCCESFULLY COMPLETED
Card Smithy - TEST 35 SUCCESFULLY COMPLETED
Card Smithy - TEST 36 SUCCESFULLY COMPLETED
Card Smithy - TEST 37 SUCCESFULLY COMPLETED
Card Smithy - TEST 38 SUCCESFULLY COMPLETED
Card Smithy - TEST 39 SUCCESFULLY COMPLETED
Card Smithy - TEST 40 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:29.66% of 563
Branches executed:30.70% of 417
Taken at least once:24.94% of 417
Calls executed:12.37% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 150 returned 100% blocks executed 83%
      150:   10:int compare(const void* a, const void* b) {
      150:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 150
    #####:   12:    return 1;
      150:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 40 (fallthrough)
branch  1 taken 110
       40:   14:    return -1;
      110:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        5:   46:  SelectStream(1);
call    0 returned 5
        5:   47:  PutSeed((long)randomSeed);
call    0 returned 5
        -:   48:  
        -:   49:  //check number of players
        5:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        5:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       55:   59:  for (i = 0; i < 10; i++)
branch  0 taken 50
branch  1 taken 5 (fallthrough)
        -:   60:    {
      550:   61:      for (j = 0; j < 10; j++)
branch  0 taken 500
branch  1 taken 50 (fallthrough)
        -:   62:        {
      500:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 450 (fallthrough)
branch  1 taken 50
branch  2 taken 0 (fallthrough)
branch  3 taken 450
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        5:   75:  if (numPlayers == 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:   76:    {
        5:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        5:   89:  if (numPlayers == 2)
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -:   90:    {
        5:   91:      state->supplyCount[estate] = 8;
        5:   92:      state->supplyCount[duchy] = 8;
        5:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        5:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  104:  state->supplyCount[silver] = 40;
        5:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      105:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 100
branch  1 taken 5 (fallthrough)
        -:  109:    {
      825:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 775
branch  1 taken 50 (fallthrough)
        -:  111:	{
      775:  112:	  if (kingdomCards[j] == i)
branch  0 taken 50 (fallthrough)
branch  1 taken 725
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       50:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 50 (fallthrough)
branch  1 taken 0
branch  2 taken 5 (fallthrough)
branch  3 taken 45
        -:  116:		{
       10:  117:		  if (numPlayers == 2){ 
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       45:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       50:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      725:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       15:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  141:    {
       10:  142:      state->deckCount[i] = 0;
       40:  143:      for (j = 0; j < 3; j++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  144:	{
       30:  145:	  state->deck[i][j] = estate;
       30:  146:	  state->deckCount[i]++;
        -:  147:	}
       80:  148:      for (j = 3; j < 10; j++)
branch  0 taken 70
branch  1 taken 10 (fallthrough)
        -:  149:	{
       70:  150:	  state->deck[i][j] = copper;
       70:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       15:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  157:    {
       10:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       15:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10
branch  1 taken 5 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       10:  168:      state->handCount[i] = 0;
       10:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      140:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 135
branch  1 taken 5 (fallthrough)
        -:  179:    {
      135:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        5:  184:  state->outpostPlayed = 0;
        5:  185:  state->phase = 0;
        5:  186:  state->numActions = 1;
        5:  187:  state->numBuys = 1;
        5:  188:  state->playedCardCount = 0;
        5:  189:  state->whoseTurn = 0;
        5:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       30:  194:  for (it = 0; it < 5; it++){
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25:  195:    drawCard(state->whoseTurn, state);
call    0 returned 25
        -:  196:  }
        -:  197:
        5:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 5
        -:  199:
        5:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 10 returned 100% blocks executed 94%
       10:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       10:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       10:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  212:    return -1;
       10:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 10
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      120:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100
      100:  218:    newDeck[newDeckPos] = state->deck[player][card];
      100:  219:    newDeckPos++;
      311:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 211
branch  1 taken 100 (fallthrough)
      211:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      100:  223:    state->deckCount[player]--;
        -:  224:  }
      110:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 100
branch  1 taken 10 (fallthrough)
      100:  226:    state->deck[player][i] = newDeck[i];
      100:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       10:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  322:int supplyCount(int card, struct gameState *state) {
        6:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 41 returned 100% blocks executed 38%
       41:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       41:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 41
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       41:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       41:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       41:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       41:  578:    state->deckCount[player]--;
       41:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       41:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 0 returned 0% blocks executed 0%
    #####: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
    #####: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
    #####: 1206:  while(drawntreasure<3){
branch  0 never executed
branch  1 never executed
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
    #####: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 never executed
branch  1 never executed
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
    #####: 1212:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
    #####: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
    #####: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
    #####: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
    #####: 1223:      state->handCount[currentPlayer]--; 
    #####: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
    #####: 1228:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
        -: 1229:    // discard all cards in play that have been drawn
    #####: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
    #####: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1236:  
    #####: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 4 returned 100% blocks executed 100%
        4: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
       20: 1270:  for (i = 0; i <= 3; i++) {
branch  0 taken 16
branch  1 taken 4 (fallthrough)
       16: 1271:    drawCard(currentPlayer, state);
call    0 returned 16
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
        4: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 7 returned 100% blocks executed 89%
        7: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
        7: 1295:  if (trashFlag < 1)
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
        6: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
        7: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
        7: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        6: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
        6: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
        6: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
        6: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
        7: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
        7: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        -: 1337:    {
        2: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
        4: 1346:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1347:    {
        1: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1349:      state->deckCount[player]++;
        -: 1350:    }
        3: 1351:  else if (toFlag == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1352:    {
        1: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
        2: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
        4: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
        4: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        5: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       30: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 25
branch  1 taken 5 (fallthrough)
        -: 1377:    {
       25: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 19 (fallthrough)
branch  1 taken 6
        -: 1379:	{
       19: 1380:	  state->coins += 1;
        -: 1381:	}
        6: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        6: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        5: 1393:  state->coins += bonus;
        -: 1394:
        5: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Card Adventurer - TEST 1 SUCCESFULLY COMPLETED
Card Adventurer - TEST 2 FAILED - Potential bug!
Card Adventurer - TEST 3 SUCCESFULLY COMPLETED
Card Adventurer - TEST 4 SUCCESFULLY COMPLETED
Card Adventurer - TEST 5 SUCCESFULLY COMPLETED
Card Adventurer - TEST 6 SUCCESFULLY COMPLETED
Card Adventurer - TEST 7 SUCCESFULLY COMPLETED
Card Adventurer - TEST 8 FAILED - Potential bug!
File 'dominion.c'
Lines executed:32.50% of 563
Branches executed:33.57% of 417
Taken at least once:27.10% of 417
Calls executed:14.43% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 180 returned 100% blocks executed 83%
      180:   10:int compare(const void* a, const void* b) {
      180:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 180
    #####:   12:    return 1;
      180:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 48 (fallthrough)
branch  1 taken 132
       48:   14:    return -1;
      132:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        6:   46:  SelectStream(1);
call    0 returned 6
        6:   47:  PutSeed((long)randomSeed);
call    0 returned 6
        -:   48:  
        -:   49:  //check number of players
        6:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        6:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       66:   59:  for (i = 0; i < 10; i++)
branch  0 taken 60
branch  1 taken 6 (fallthrough)
        -:   60:    {
      660:   61:      for (j = 0; j < 10; j++)
branch  0 taken 600
branch  1 taken 60 (fallthrough)
        -:   62:        {
      600:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 540 (fallthrough)
branch  1 taken 60
branch  2 taken 0 (fallthrough)
branch  3 taken 540
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        6:   75:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   76:    {
        6:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        6:   89:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   90:    {
        6:   91:      state->supplyCount[estate] = 8;
        6:   92:      state->supplyCount[duchy] = 8;
        6:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        6:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  104:  state->supplyCount[silver] = 40;
        6:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      126:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 120
branch  1 taken 6 (fallthrough)
        -:  109:    {
      990:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 930
branch  1 taken 60 (fallthrough)
        -:  111:	{
      930:  112:	  if (kingdomCards[j] == i)
branch  0 taken 60 (fallthrough)
branch  1 taken 870
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       60:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 60 (fallthrough)
branch  1 taken 0
branch  2 taken 6 (fallthrough)
branch  3 taken 54
        -:  116:		{
       12:  117:		  if (numPlayers == 2){ 
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       54:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       60:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      870:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       18:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  141:    {
       12:  142:      state->deckCount[i] = 0;
       48:  143:      for (j = 0; j < 3; j++)
branch  0 taken 36
branch  1 taken 12 (fallthrough)
        -:  144:	{
       36:  145:	  state->deck[i][j] = estate;
       36:  146:	  state->deckCount[i]++;
        -:  147:	}
       96:  148:      for (j = 3; j < 10; j++)
branch  0 taken 84
branch  1 taken 12 (fallthrough)
        -:  149:	{
       84:  150:	  state->deck[i][j] = copper;
       84:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       18:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  157:    {
       12:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       18:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       12:  168:      state->handCount[i] = 0;
       12:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      168:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 162
branch  1 taken 6 (fallthrough)
        -:  179:    {
      162:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        6:  184:  state->outpostPlayed = 0;
        6:  185:  state->phase = 0;
        6:  186:  state->numActions = 1;
        6:  187:  state->numBuys = 1;
        6:  188:  state->playedCardCount = 0;
        6:  189:  state->whoseTurn = 0;
        6:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       36:  194:  for (it = 0; it < 5; it++){
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30:  195:    drawCard(state->whoseTurn, state);
call    0 returned 30
        -:  196:  }
        -:  197:
        6:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 6
        -:  199:
        6:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 12 returned 100% blocks executed 94%
       12:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       12:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       12:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:  212:    return -1;
       12:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 12
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      144:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 120
      120:  218:    newDeck[newDeckPos] = state->deck[player][card];
      120:  219:    newDeckPos++;
      364:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 244
branch  1 taken 120 (fallthrough)
      244:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      120:  223:    state->deckCount[player]--;
        -:  224:  }
      132:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  226:    state->deck[player][i] = newDeck[i];
      120:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       12:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  322:int supplyCount(int card, struct gameState *state) {
        6:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  348:int whoseTurn(struct gameState *state) {
        3:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 54 returned 100% blocks executed 38%
       54:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       54:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 54
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       54:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       54:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       54:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       54:  578:    state->deckCount[player]--;
       54:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       54:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
    #####:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 2 returned 100% blocks executed 94%
        2: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
        2: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
       12: 1206:  while(drawntreasure<3){
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
        8: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
        8: 1212:    drawCard(currentPlayer, state);
call    0 returned 8
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
        8: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
        8: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        6: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
        2: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
        2: 1223:      state->handCount[currentPlayer]--; 
        2: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
        6: 1228:  while(z-1>=0){
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        -: 1229:    // discard all cards in play that have been drawn
        2: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        2: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
        2: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -: 1236:  
        2: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 0 returned 0% blocks executed 0%
    #####: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
    #####: 1243:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
    #####: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
    #####: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1252:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1253:            drawCard(i, state);
call    0 never executed
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
    #####: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1259:
    #####: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 4 returned 100% blocks executed 100%
        4: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
       20: 1270:  for (i = 0; i <= 3; i++) {
branch  0 taken 16
branch  1 taken 4 (fallthrough)
       16: 1271:    drawCard(currentPlayer, state);
call    0 returned 16
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
        4: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 9 returned 100% blocks executed 89%
        9: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
        9: 1295:  if (trashFlag < 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
        8: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
        9: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
        9: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 8
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        8: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
        8: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
        8: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
        8: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
        9: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
        9: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        -: 1337:    {
        2: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
        4: 1346:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1347:    {
        1: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1349:      state->deckCount[player]++;
        -: 1350:    }
        3: 1351:  else if (toFlag == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1352:    {
        1: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
        2: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
        4: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
        4: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        6: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       36: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 30
branch  1 taken 6 (fallthrough)
        -: 1377:    {
       30: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 22 (fallthrough)
branch  1 taken 8
        -: 1379:	{
       22: 1380:	  state->coins += 1;
        -: 1381:	}
        8: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
        8: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        6: 1393:  state->coins += bonus;
        -: 1394:
        6: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Card Council_room - TEST 0 SUCCESFULLY COMPLETED
Card Council_room - TEST 1 SUCCESFULLY COMPLETED
Card Council_room - TEST 2 SUCCESFULLY COMPLETED
Card Council_room - TEST 3 SUCCESFULLY COMPLETED
Card Council_room - TEST 4 SUCCESFULLY COMPLETED
Card Council_room - TEST 5 SUCCESFULLY COMPLETED
Card Council_room - TEST 6 SUCCESFULLY COMPLETED
Card Council_room - TEST 7 SUCCESFULLY COMPLETED
Card Council_room - TEST 8 SUCCESFULLY COMPLETED
Card Council_room - TEST 9 SUCCESFULLY COMPLETED
Card Council_room - TEST 10 SUCCESFULLY COMPLETED
Card Council_room - TEST 11 SUCCESFULLY COMPLETED
Card Council_room - TEST 12 SUCCESFULLY COMPLETED
Card Council_room - TEST 13 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:35.70% of 563
Branches executed:40.53% of 417
Taken at least once:29.02% of 417
Calls executed:19.59% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 210 returned 100% blocks executed 83%
      210:   10:int compare(const void* a, const void* b) {
      210:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 210
    #####:   12:    return 1;
      210:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 56 (fallthrough)
branch  1 taken 154
       56:   14:    return -1;
      154:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        7:   46:  SelectStream(1);
call    0 returned 7
        7:   47:  PutSeed((long)randomSeed);
call    0 returned 7
        -:   48:  
        -:   49:  //check number of players
        7:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        7:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       77:   59:  for (i = 0; i < 10; i++)
branch  0 taken 70
branch  1 taken 7 (fallthrough)
        -:   60:    {
      770:   61:      for (j = 0; j < 10; j++)
branch  0 taken 700
branch  1 taken 70 (fallthrough)
        -:   62:        {
      700:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 630 (fallthrough)
branch  1 taken 70
branch  2 taken 0 (fallthrough)
branch  3 taken 630
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        7:   75:  if (numPlayers == 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -:   76:    {
        7:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        7:   89:  if (numPlayers == 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -:   90:    {
        7:   91:      state->supplyCount[estate] = 8;
        7:   92:      state->supplyCount[duchy] = 8;
        7:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        7:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  104:  state->supplyCount[silver] = 40;
        7:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      147:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 140
branch  1 taken 7 (fallthrough)
        -:  109:    {
     1155:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1085
branch  1 taken 70 (fallthrough)
        -:  111:	{
     1085:  112:	  if (kingdomCards[j] == i)
branch  0 taken 70 (fallthrough)
branch  1 taken 1015
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       70:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 70 (fallthrough)
branch  1 taken 0
branch  2 taken 7 (fallthrough)
branch  3 taken 63
        -:  116:		{
       14:  117:		  if (numPlayers == 2){ 
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       63:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       70:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1015:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       21:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 14
branch  1 taken 7 (fallthrough)
        -:  141:    {
       14:  142:      state->deckCount[i] = 0;
       56:  143:      for (j = 0; j < 3; j++)
branch  0 taken 42
branch  1 taken 14 (fallthrough)
        -:  144:	{
       42:  145:	  state->deck[i][j] = estate;
       42:  146:	  state->deckCount[i]++;
        -:  147:	}
      112:  148:      for (j = 3; j < 10; j++)
branch  0 taken 98
branch  1 taken 14 (fallthrough)
        -:  149:	{
       98:  150:	  state->deck[i][j] = copper;
       98:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       21:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 14
branch  1 taken 7 (fallthrough)
        -:  157:    {
       14:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       21:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 14
branch  1 taken 7 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       14:  168:      state->handCount[i] = 0;
       14:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      196:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 189
branch  1 taken 7 (fallthrough)
        -:  179:    {
      189:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        7:  184:  state->outpostPlayed = 0;
        7:  185:  state->phase = 0;
        7:  186:  state->numActions = 1;
        7:  187:  state->numBuys = 1;
        7:  188:  state->playedCardCount = 0;
        7:  189:  state->whoseTurn = 0;
        7:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       42:  194:  for (it = 0; it < 5; it++){
branch  0 taken 35
branch  1 taken 7 (fallthrough)
       35:  195:    drawCard(state->whoseTurn, state);
call    0 returned 35
        -:  196:  }
        -:  197:
        7:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 7
        -:  199:
        7:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 14 returned 100% blocks executed 94%
       14:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       14:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       14:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:  212:    return -1;
       14:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 14
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      168:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 140
branch  1 taken 14 (fallthrough)
      140:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 140
      140:  218:    newDeck[newDeckPos] = state->deck[player][card];
      140:  219:    newDeckPos++;
      429:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 289
branch  1 taken 140 (fallthrough)
      289:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      140:  223:    state->deckCount[player]--;
        -:  224:  }
      154:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 140
branch  1 taken 14 (fallthrough)
      140:  226:    state->deck[player][i] = newDeck[i];
      140:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       14:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  322:int supplyCount(int card, struct gameState *state) {
        6:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 7 returned 100% blocks executed 100%
        7:  348:int whoseTurn(struct gameState *state) {
        7:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 69 returned 100% blocks executed 38%
       69:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       69:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 69
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       69:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       69:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       69:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       69:  578:    state->deckCount[player]--;
       69:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       69:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 2 returned 100% blocks executed 3%
        2:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        2:  655:  int currentPlayer = whoseTurn(state);
call    0 returned 2
        2:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        2:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        2:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        2:  662:  int z = 0;// this is the counter for the temp hand
        2:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        2:  669:  switch( card ) 
branch  0 taken 0
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
        2:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 returned 2
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
    #####:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 0 returned 0% blocks executed 0%
    #####: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
    #####: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
    #####: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:		return -1;
        -: 1179:	}
    #####: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1181:		return -1;
        -: 1182:	}
    #####: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:		return -1;
        -: 1185:	}
    #####: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1187:
        -: 1188:	// Discard card from hand.
    #####: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
    #####: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:			break;
        -: 1196:		}
        -: 1197:	}
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 2 returned 100% blocks executed 94%
        2: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
        2: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
       12: 1206:  while(drawntreasure<3){
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
        8: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
        8: 1212:    drawCard(currentPlayer, state);
call    0 returned 8
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
        8: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
        8: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        6: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
        2: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
        2: 1223:      state->handCount[currentPlayer]--; 
        2: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
        6: 1228:  while(z-1>=0){
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        -: 1229:    // discard all cards in play that have been drawn
        2: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        2: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
        2: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -: 1236:  
        2: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 2 returned 100% blocks executed 100%
        2: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
       10: 1243:    for (i = 0; i < 4; i++) {
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        8: 1244:        drawCard(currentPlayer, state);
call    0 returned 8
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
        2: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
        6: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4: 1252:        if ( i != currentPlayer ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 1253:            drawCard(i, state);
call    0 returned 2
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
        2: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -: 1259:
        2: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 4 returned 100% blocks executed 100%
        4: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
       20: 1270:  for (i = 0; i <= 3; i++) {
branch  0 taken 16
branch  1 taken 4 (fallthrough)
       16: 1271:    drawCard(currentPlayer, state);
call    0 returned 16
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
        4: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 11 returned 100% blocks executed 89%
       11: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
       11: 1295:  if (trashFlag < 1)
branch  0 taken 10 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
       10: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
       11: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
       11: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
       10: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
       10: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
       10: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
       10: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
       11: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
       11: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        -: 1337:    {
        2: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
        4: 1346:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1347:    {
        1: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1349:      state->deckCount[player]++;
        -: 1350:    }
        3: 1351:  else if (toFlag == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1352:    {
        1: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
        2: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
        4: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
        4: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        7: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       42: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 35
branch  1 taken 7 (fallthrough)
        -: 1377:    {
       35: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 25 (fallthrough)
branch  1 taken 10
        -: 1379:	{
       25: 1380:	  state->coins += 1;
        -: 1381:	}
       10: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
       10: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        7: 1393:  state->coins += bonus;
        -: 1394:
        7: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
Card Mine - TEST 1 SUCCESFULLY COMPLETED
Card Mine - TEST 2 FAILED - Potential bug!
Card Mine - TEST 3 SUCCESFULLY COMPLETED
Card Mine - TEST 4 SUCCESFULLY COMPLETED
File 'dominion.c'
Lines executed:38.72% of 563
Branches executed:50.60% of 417
Taken at least once:31.65% of 417
Calls executed:25.77% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 240 returned 100% blocks executed 83%
      240:   10:int compare(const void* a, const void* b) {
      240:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 240
    #####:   12:    return 1;
      240:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 64 (fallthrough)
branch  1 taken 176
       64:   14:    return -1;
      176:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        8:   46:  SelectStream(1);
call    0 returned 8
        8:   47:  PutSeed((long)randomSeed);
call    0 returned 8
        -:   48:  
        -:   49:  //check number of players
        8:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        8:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       88:   59:  for (i = 0; i < 10; i++)
branch  0 taken 80
branch  1 taken 8 (fallthrough)
        -:   60:    {
      880:   61:      for (j = 0; j < 10; j++)
branch  0 taken 800
branch  1 taken 80 (fallthrough)
        -:   62:        {
      800:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 720 (fallthrough)
branch  1 taken 80
branch  2 taken 0 (fallthrough)
branch  3 taken 720
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        8:   75:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:   76:    {
        8:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        8:   89:  if (numPlayers == 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        -:   90:    {
        8:   91:      state->supplyCount[estate] = 8;
        8:   92:      state->supplyCount[duchy] = 8;
        8:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        8:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  104:  state->supplyCount[silver] = 40;
        8:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      168:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 160
branch  1 taken 8 (fallthrough)
        -:  109:    {
     1320:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1240
branch  1 taken 80 (fallthrough)
        -:  111:	{
     1240:  112:	  if (kingdomCards[j] == i)
branch  0 taken 80 (fallthrough)
branch  1 taken 1160
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       80:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 80 (fallthrough)
branch  1 taken 0
branch  2 taken 8 (fallthrough)
branch  3 taken 72
        -:  116:		{
       16:  117:		  if (numPlayers == 2){ 
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       72:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       80:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1160:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       24:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  141:    {
       16:  142:      state->deckCount[i] = 0;
       64:  143:      for (j = 0; j < 3; j++)
branch  0 taken 48
branch  1 taken 16 (fallthrough)
        -:  144:	{
       48:  145:	  state->deck[i][j] = estate;
       48:  146:	  state->deckCount[i]++;
        -:  147:	}
      128:  148:      for (j = 3; j < 10; j++)
branch  0 taken 112
branch  1 taken 16 (fallthrough)
        -:  149:	{
      112:  150:	  state->deck[i][j] = copper;
      112:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       24:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  157:    {
       16:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 16
branch  1 taken 0 (fallthrough)
branch  2 taken 16
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       24:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 16
branch  1 taken 8 (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       16:  168:      state->handCount[i] = 0;
       16:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      224:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 216
branch  1 taken 8 (fallthrough)
        -:  179:    {
      216:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        8:  184:  state->outpostPlayed = 0;
        8:  185:  state->phase = 0;
        8:  186:  state->numActions = 1;
        8:  187:  state->numBuys = 1;
        8:  188:  state->playedCardCount = 0;
        8:  189:  state->whoseTurn = 0;
        8:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       48:  194:  for (it = 0; it < 5; it++){
branch  0 taken 40
branch  1 taken 8 (fallthrough)
       40:  195:    drawCard(state->whoseTurn, state);
call    0 returned 40
        -:  196:  }
        -:  197:
        8:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 8
        -:  199:
        8:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 16 returned 100% blocks executed 94%
       16:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       16:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       16:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####:  212:    return -1;
       16:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 16
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      192:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 160
branch  1 taken 16 (fallthrough)
      160:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 160
      160:  218:    newDeck[newDeckPos] = state->deck[player][card];
      160:  219:    newDeckPos++;
      506:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 346
branch  1 taken 160 (fallthrough)
      346:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      160:  223:    state->deckCount[player]--;
        -:  224:  }
      176:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 160
branch  1 taken 16 (fallthrough)
      160:  226:    state->deck[player][i] = newDeck[i];
      160:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       16:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 7 returned 100% blocks executed 100%
        7:  322:int supplyCount(int card, struct gameState *state) {
        7:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  348:int whoseTurn(struct gameState *state) {
        8:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
       78:  404:  for (i = 0; i < 25; i++)
branch  0 taken 75
branch  1 taken 3 (fallthrough)
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 5 (fallthrough)
branch  1 taken 70
        -:  407:	{
        5:  408:	  j++;
        -:  409:	}
        -:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
        2:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 5 returned 100% blocks executed 32%
        5:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        5:  422:  int score = 0;
        -:  423:  //score from hand
       20:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15
branch  1 taken 5 (fallthrough)
        -:  425:    {
       15:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3 (fallthrough)
branch  1 taken 12
       15:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
       15:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 15
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
        5:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
        5:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0
branch  1 taken 5 (fallthrough)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
        5:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 3 returned 100% blocks executed 91%
        3:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
       15:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
       12:  469:      if (i >= state->numPlayers)
branch  0 taken 7 (fallthrough)
branch  1 taken 5
        -:  470:	{
        7:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
        5:  475:	  players[i] = scoreFor (i, state);
call    0 returned 5
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
        3:  480:  j = 0;
       15:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  482:    {
       12:  483:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
        3:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
        3:  491:  currentPlayer = whoseTurn(state);
call    0 returned 3
       15:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  493:    {
       12:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
branch  2 taken 0 (fallthrough)
branch  3 taken 3
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
        3:  501:  j = 0;
       15:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  503:    {
       12:  504:      if ( players[i] > players[j] )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
        3:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
       15:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  513:    {
       12:  514:      if ( players[i] == highScore )
branch  0 taken 3 (fallthrough)
branch  1 taken 9
        -:  515:	{
        3:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
        9:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
        3:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 74 returned 100% blocks executed 38%
       74:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       74:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 74
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       74:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       74:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       74:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       74:  578:    state->deckCount[player]--;
       74:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       74:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 2 returned 100% blocks executed 13%
        2:  585:int getCost(int cardNumber)
        -:  586:{
        2:  587:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 1
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        1:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
        1:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
function cardEffect called 3 returned 100% blocks executed 3%
        3:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        3:  655:  int currentPlayer = whoseTurn(state);
call    0 returned 3
        3:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        3:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        3:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        3:  662:  int z = 0;// this is the counter for the temp hand
        3:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        3:  669:  switch( card ) 
branch  0 taken 0
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 1
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return adventurerCard(state, currentPlayer, handPos);
call    0 never executed
        -:  673:      
        -:  674:			
        -:  675:    case council_room:
        2:  676:      return councilRoomCard(state, currentPlayer, handPos);
call    0 returned 2
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  691:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
    #####:  699:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
    #####:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  724:	state->hand[currentPlayer][i] = temphand[i];
    #####:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
    #####:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return gardensCard();
call    0 never executed
        -:  733:			
        -:  734:    case mine:
        1:  735:	    return runMine(state, currentPlayer, choice1, choice2, handPos);
call    0 returned 1
        -:  736:/*      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        -:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
        -:  740:	  return -1;
        -:  741:	}
        -:  742:		
        -:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
        -:  745:	  return -1;
        -:  746:	}
        -:  747:
        -:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
        -:  750:	  return -1;
        -:  751:	}
        -:  752:
        -:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
        -:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
        -:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
        -:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
        -:  763:	      discardCard(i, currentPlayer, state, 0);			
        -:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
        -:  768:      return 0;
        -:  769:*/			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      return smithyCard(state, currentPlayer, handPos);
call    0 never executed
        -:  798:		
        -:  799:    case village:
    #####:  800:      return villageCard(state, currentPlayer, handPos);
call    0 never executed
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:		isGameOver(state);
call    0 never executed
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	    isGameOver(state);
call    0 never executed
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
        -:  854:      //+1 Card
    #####:  855:      drawCard(currentPlayer, state);
call    0 never executed
        -:  856:			
        -:  857:      //+1 Actions
    #####:  858:      state->numActions++;
        -:  859:			
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case minion:
        -:  865:      //+1 action
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  870:			
    #####:  871:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  state->coins = state->coins + 2;
        -:  874:	}
        -:  875:			
    #####:  876:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //discard hand
    #####:  879:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	    {
    #####:  881:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:	    }
        -:  883:				
        -:  884:	  //draw 4
    #####:  885:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  888:	    }
        -:  889:				
        -:  890:	  //other players discard hand and redraw if hand size > 4
    #####:  891:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	    {
    #####:  893:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  894:		{
    #####:  895:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  896:		    {
        -:  897:		      //discard hand
    #####:  898:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  901:			}
        -:  902:							
        -:  903:		      //draw 4
    #####:  904:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  905:			{
    #####:  906:			  drawCard(i, state);
call    0 never executed
        -:  907:			}
        -:  908:		    }
        -:  909:		}
        -:  910:	    }
        -:  911:				
        -:  912:	}
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case steward:
    #####:  916:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 cards
    #####:  919:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  920:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  921:	}
    #####:  922:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  923:	{
        -:  924:	  //+2 coins
    #####:  925:	  state->coins = state->coins + 2;
        -:  926:	}
        -:  927:      else
        -:  928:	{
        -:  929:	  //trash 2 cards in hand
    #####:  930:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  931:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  932:	}
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case tribute:
    #####:  939:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  940:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	  state->deckCount[nextPlayer]--;
        -:  943:	}
    #####:  944:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  945:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  946:	  state->discardCount[nextPlayer]--;
        -:  947:	}
        -:  948:	else{
        -:  949:	  //No Card to Reveal
        -:  950:	  if (DEBUG){
        -:  951:	    printf("No cards to reveal\n");
        -:  952:	  }
        -:  953:	}
        -:  954:      }
        -:  955:	    
        -:  956:      else{
    #####:  957:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  959:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  960:	    state->deckCount[nextPlayer]++;
    #####:  961:	    state->discard[nextPlayer][i] = -1;
    #####:  962:	    state->discardCount[nextPlayer]--;
        -:  963:	  }
        -:  964:			    
    #####:  965:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  966:	} 
    #####:  967:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
    #####:  970:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
        -:  973:      }    
        -:  974:		       
    #####:  975:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  976:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  977:	state->playedCardCount++;
    #####:  978:	tributeRevealedCards[1] = -1;
        -:  979:      }
        -:  980:
    #####:  981:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  982:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  983:	  state->coins += 2;
        -:  984:	}
        -:  985:		    
    #####:  986:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  987:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  988:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  989:	}
        -:  990:	else{//Action Card
    #####:  991:	  state->numActions = state->numActions + 2;
        -:  992:	}
        -:  993:      }
        -:  994:	    
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case ambassador:
    #####:  998:      j = 0;		//used to check if player has enough cards to discard
        -:  999:
    #####: 1000:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:	{
    #####: 1002:	  return -1;				
        -: 1003:	}
        -: 1004:
    #####: 1005:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;
        -: 1008:	}
        -: 1009:
    #####: 1010:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1013:	    {
    #####: 1014:	      j++;
        -: 1015:	    }
        -: 1016:	}
    #####: 1017:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
        -: 1022:      if (DEBUG) 
        -: 1023:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1024:
        -: 1025:      //increase supply count for choosen card by amount being discarded
    #####: 1026:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1027:			
        -: 1028:      //each other player gains a copy of revealed card
    #####: 1029:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1034:	    }
        -: 1035:	}
        -: 1036:
        -: 1037:      //discard played card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1039:
        -: 1040:      //trash copies of cards returned to supply
    #####: 1041:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
    #####: 1043:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	    {
    #####: 1045:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1046:		{
    #####: 1047:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1048:		  break;
        -: 1049:		}
        -: 1050:	    }
        -: 1051:	}			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case cutpurse:
        -: 1056:
    #####: 1057:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1058:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1065:		    {
    #####: 1066:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1067:		      break;
        -: 1068:		    }
    #####: 1069:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
    #####: 1071:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1072:			{
        -: 1073:			  if (DEBUG)
        -: 1074:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1075:			}	
    #####: 1076:		      break;
        -: 1077:		    }		
        -: 1078:		}
        -: 1079:					
        -: 1080:	    }
        -: 1081:				
        -: 1082:	}				
        -: 1083:
        -: 1084:      //discard played card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:		
        -: 1090:    case embargo: 
        -: 1091:      //+2 Coins
    #####: 1092:      state->coins = state->coins + 2;
        -: 1093:			
        -: 1094:      //see if selected pile is in play
    #####: 1095:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //add embargo token to selected supply pile
    #####: 1101:      state->embargoTokens[choice1]++;
        -: 1102:			
        -: 1103:      //trash card
    #####: 1104:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1105:      return 0;
        -: 1106:		
        -: 1107:    case outpost:
        -: 1108:      //set outpost flag
    #####: 1109:      state->outpostPlayed++;
        -: 1110:			
        -: 1111:      //discard card
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case salvager:
        -: 1116:      //+1 buy
    #####: 1117:      state->numBuys++;
        -: 1118:			
    #####: 1119:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //gain coins equal to trashed card
    #####: 1122:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1123:	  //trash card
    #####: 1124:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1125:	}
        -: 1126:			
        -: 1127:      //discard card
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1129:      return 0;
        -: 1130:		
        -: 1131:    case sea_hag:
    #####: 1132:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1135:	  state->discardCount[i]++;
    #####: 1136:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1137:	}
        -: 1138:      }
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case treasure_map:
        -: 1142:      //search hand for another treasure_map
    #####: 1143:      index = -1;
    #####: 1144:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1147:	    {
    #####: 1148:	      index = i;
    #####: 1149:	      break;
        -: 1150:	    }
        -: 1151:	}
    #####: 1152:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //trash both treasure cards
    #####: 1155:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1156:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1157:
        -: 1158:	  //gain 4 Gold cards
    #####: 1159:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1162:	    }
        -: 1163:				
        -: 1164:	  //return success
    #####: 1165:	  return 1;
        -: 1166:	}
        -: 1167:			
        -: 1168:      //no second treasure_map found in hand
    #####: 1169:      return -1;
        -: 1170:    }
        -: 1171:	
    #####: 1172:  return -1;
        -: 1173:}
        -: 1174:
function runMine called 1 returned 100% blocks executed 85%
        1: 1175:int runMine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        1: 1176:	int j = state->hand[currentPlayer][choice1];  // Store card we will trash.
        1: 1177:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1178:		return -1;
        -: 1179:	}
        1: 1180:	if (choice2 > treasure_map || choice2 < curse) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1181:		return -1;
        -: 1182:	}
        1: 1183:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 1184:		return -1;
        -: 1185:	}
        1: 1186:	gainCard(choice2, state, 2, currentPlayer);
call    0 returned 1
        -: 1187:
        -: 1188:	// Discard card from hand.
        1: 1189:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        -: 1190:	// Discard trashed card.
        -: 1191:	int i;
        2: 1192:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 2
branch  1 taken 0 (fallthrough)
        2: 1193:		if (state->hand[currentPlayer][i] == j) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 1194:			discardCard(i, currentPlayer, state, 0);
call    0 returned 1
        1: 1195:			break;
        -: 1196:		}
        -: 1197:	}
        1: 1198:	return 0;
        -: 1199:}
        -: 1200:
        -: 1201:
function adventurerCard called 2 returned 100% blocks executed 94%
        2: 1202:int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
        2: 1203:  int cardDrawn, z = 0, drawntreasure = 0;
        -: 1204:  int temphand[MAX_HAND];
        -: 1205:
       12: 1206:  while(drawntreasure<3){
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -: 1207:    //if the deck is empty we need to shuffle discard and add to deck
        8: 1208:    if (state->deckCount[currentPlayer] <1){
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####: 1209:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1210:    }
        -: 1211:    
        8: 1212:    drawCard(currentPlayer, state);
call    0 returned 8
        -: 1213:  
        -: 1214:    //top card of hand is most recently drawn card.
        8: 1215:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1216:  
        8: 1217:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
        6: 1218:      drawntreasure++;
        -: 1219:    
        -: 1220:    else{
        2: 1221:      temphand[z]=cardDrawn;
        -: 1222:      //this should just remove the top card (the most recently drawn one).
        2: 1223:      state->handCount[currentPlayer]--; 
        2: 1224:      z++;
        -: 1225:    }
        -: 1226:  }
        -: 1227:  
        6: 1228:  while(z-1>=0){
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        -: 1229:    // discard all cards in play that have been drawn
        2: 1230:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        2: 1231:    z=z-1;
        -: 1232:  }
        -: 1233:  
        -: 1234:  //put played card in played card pile
        2: 1235:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -: 1236:  
        2: 1237:  return 0;
        -: 1238:}
        -: 1239:
function councilRoomCard called 2 returned 100% blocks executed 100%
        2: 1240:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1241:    int i;
        -: 1242:    //+4 Cards
       10: 1243:    for (i = 0; i < 4; i++) {
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        8: 1244:        drawCard(currentPlayer, state);
call    0 returned 8
        -: 1245:    }
        -: 1246:
        -: 1247:    //+1 Buy
        2: 1248:    state->numBuys++;
        -: 1249:
        -: 1250:    //Each other player draws a card
        6: 1251:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4: 1252:        if ( i != currentPlayer ) {
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2: 1253:            drawCard(i, state);
call    0 returned 2
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    //put played card in played card pile
        2: 1258:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -: 1259:
        2: 1260:    return 0;
        -: 1261:}
        -: 1262:
function gardensCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gardensCard() {
    #####: 1264:    return -2;
        -: 1265:}
        -: 1266:
function smithyCard called 4 returned 100% blocks executed 100%
        4: 1267:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1268:  //+3 Cards
        -: 1269:  int i;
       20: 1270:  for (i = 0; i <= 3; i++) {
branch  0 taken 16
branch  1 taken 4 (fallthrough)
       16: 1271:    drawCard(currentPlayer, state);
call    0 returned 16
        -: 1272:  }
        -: 1273:      
        -: 1274:  //discard card from hand
        4: 1275:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4: 1276:  return 0;  
        -: 1277:}
        -: 1278:
function villageCard called 0 returned 0% blocks executed 0%
    #####: 1279:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1280:  //+1 Card
    #####: 1281:  drawCard(currentPlayer, state);
call    0 never executed
        -: 1282:      
        -: 1283:  //+2 Actions
    #####: 1284:  state->numActions = state->numActions + 2;
        -: 1285:      
        -: 1286:  //discard played card from hand
    #####: 1287:  discardCard((handPos-1), currentPlayer, state, 0);
call    0 never executed
    #####: 1288:  return 0;
        -: 1289:}
        -: 1290:
function discardCard called 13 returned 100% blocks executed 89%
       13: 1291:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1292:{
        -: 1293:	
        -: 1294:  //if card is not trashed, added to Played pile 
       13: 1295:  if (trashFlag < 1)
branch  0 taken 12 (fallthrough)
branch  1 taken 1
        -: 1296:    {
        -: 1297:      //add card to played pile
       12: 1298:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1299:      state->playedCardCount++;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //set played card to -1
       13: 1303:  state->hand[currentPlayer][handPos] = -1;
        -: 1304:	
        -: 1305:  //remove card from player's hand
       13: 1306:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
        1: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
       12: 1311:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 1312:    {
        -: 1313:      //reduce number of cards in hand
    #####: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:  else 	
        -: 1317:    {
        -: 1318:      //replace discarded card with last card in hand
       12: 1319:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1320:      //set last card to -1
       12: 1321:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1322:      //reduce number of cards in hand
       12: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
        -: 1325:	
       13: 1326:	state->discardCount[currentPlayer]++;
        -: 1327:	
       13: 1328:  return 0;
        -: 1329:}
        -: 1330:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1331:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1332:{
        -: 1333:  //Note: supplyPos is enum of choosen card
        -: 1334:	
        -: 1335:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1336:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 7
branch  1 taken 2 (fallthrough)
branch  2 taken 5
        -: 1337:    {
        2: 1338:      return -1;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //added card for [whoseTurn] current player:
        -: 1342:  // toFlag = 0 : add to discard
        -: 1343:  // toFlag = 1 : add to deck
        -: 1344:  // toFlag = 2 : add to hand
        -: 1345:
        5: 1346:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -: 1347:    {
        1: 1348:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1349:      state->deckCount[player]++;
        -: 1350:    }
        4: 1351:  else if (toFlag == 2)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 1352:    {
        2: 1353:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1354:      state->handCount[player]++;
        -: 1355:    }
        -: 1356:  else
        -: 1357:    {
        2: 1358:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1359:      state->discardCount[player]++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //decrease number in supply pile
        5: 1363:  state->supplyCount[supplyPos]--;
        -: 1364:	 
        5: 1365:  return 0;
        -: 1366:}
        -: 1367:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1368:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1369:{
        -: 1370:  int i;
        -: 1371:	
        -: 1372:  //reset coin count
        8: 1373:  state->coins = 0;
        -: 1374:
        -: 1375:  //add coins for each Treasure card in player's hand
       48: 1376:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 40
branch  1 taken 8 (fallthrough)
        -: 1377:    {
       40: 1378:      if (state->hand[player][i] == copper)
branch  0 taken 29 (fallthrough)
branch  1 taken 11
        -: 1379:	{
       29: 1380:	  state->coins += 1;
        -: 1381:	}
       11: 1382:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -: 1383:	{
    #####: 1384:	  state->coins += 2;
        -: 1385:	}
       11: 1386:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -: 1387:	{
    #####: 1388:	  state->coins += 3;
        -: 1389:	}	
        -: 1390:    }	
        -: 1391:
        -: 1392:  //add bonus
        8: 1393:  state->coins += bonus;
        -: 1394:
        8: 1395:  return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
        -: 1399://end of dominion.c
        -: 1400:
