Bugs In TeamMate "spokoyny" Code

Bug 1:
int gardensCard() {
    return -2;// ** Should be return -1 **
}
This bug was found by code inspection only.  None of my tests picked it up.

Bug 2:
int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
  //+3 Cards
  int i;
  for (i = 0; i <= 3; i++) {  // ** Should be "for (i = 0; i < 3; i++) {" **
    drawCard(currentPlayer, state);
  }
      
  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);
  return 0;  
}
This bug was first revealed by cardtest1.c, and specifically when tests 1, 2, and 3 failed.  These
tests were checking for appropriate changes to:
	state->handCount[ ]
	state->deckCount[ ]
	state->discardCount[ ]
when function smithyCard() was called.

Bug 3:
int villageCard(struct gameState *state, int currentPlayer, int handPos) {
  //+1 Card
  drawCard(currentPlayer, state);
    
  //+2 Actions
  state->numActions = state->numActions + 2;
     
  //discard played card from hand
  discardCard((handPos-1), currentPlayer, state, 0);
  // ** Should be discardCard((handPos), currentPlayer, state, 0); **
  return 0;
}
This bug was first revealed by unittest3.c when test 9 failed, specifically, state->playedCardCount
did not increment as expected. Since the trashFlag is < 1 in case: village's discardCard() call when
played in cardEffect, in function discardCard(), the playedCardCount should have been incremented.

Bug 4:
int adventurerCard(struct gameState *state, int currentPlayer, int handPos) {
  int cardDrawn, z = 0, drawntreasure = 0;
  int temphand[MAX_HAND];

  while(drawntreasure<3){
/* Should be "while(drawnTreasure < 2)"
   card action is "Reveal cards from your deck until you reveal 2 Treasure cards". */

    //if the deck is empty we need to shuffle discard and add to deck
    if (state->deckCount[currentPlayer] <1){
      shuffle(currentPlayer, state);
    }
    
    drawCard(currentPlayer, state);
  
    //top card of hand is most recently drawn card.
    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
  
    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      drawntreasure++;
   
    else{
      temphand[z]=cardDrawn;
      //this should just remove the top card (the most recently drawn one).
      state->handCount[currentPlayer]--; 
      z++;
    }
  }
  
  while(z-1>=0){
    // discard all cards in play that have been drawn
    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    z=z-1;
  }
  
  discardCard(handPos, currentPlayer, state, 0);
  // See "another interesting bug finding" below.
  
  return 0;
}
Both cardtest2.c and ranomtestadventurer.c picked this bug up.  It was much easier to isolate
with cardtest2.c, however, and within cardtest2.c, test 2 failed the check for an appropriate
change in state->deckCount[ ].

Another interesting bug finding:
In adventurerCard() from my teammates dominion.c file, I also noticed a discrepancy when test 8
failed the check for state->playedCard incrementing as expected. This was due to a faulty test
8 and the root cause of this was not from this dominion.c file but in fact, from my own dominion.c
file used in assignment 3 and 4 that I had used to develop the various tests.  For reasons unknown
(either that was the way it was when I originally downloaded the dominion code base, or I
inadvertently deleted the line "discardCard(handPos, currentPlayer, state, 0);" while refactoring
dominion.c, but the line above in bug 4: was missing!
