        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
    #####:   11:	if (*(int*)a < *(int*)b)
    #####:   12:		return -1;
    #####:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   22:	int* k = malloc(10 * sizeof(int));
    #####:   23:	k[0] = k1;
    #####:   24:	k[1] = k2;
    #####:   25:	k[2] = k3;
    #####:   26:	k[3] = k4;
    #####:   27:	k[4] = k5;
    #####:   28:	k[5] = k6;
    #####:   29:	k[6] = k7;
    #####:   30:	k[7] = k8;
    #####:   31:	k[8] = k9;
    #####:   32:	k[9] = k10;
    #####:   33:	return k;
        -:   34:}
        -:   35:
    #####:   36:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   37:  int i;
        -:   38:  int j;
        -:   39:  int it;
        -:   40:  //set up random number generator
    #####:   41:  SelectStream(1);
    #####:   42:  PutSeed((long)randomSeed);
        -:   43:
        -:   44:  //check number of players
    #####:   45:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   46:    {
    #####:   47:      return -1;
        -:   48:    }
        -:   49:
        -:   50:  //set number of players
    #####:   51:  state->numPlayers = numPlayers;
        -:   52:
        -:   53:  //check selected kingdom cards are different
    #####:   54:  for (i = 0; i < 10; i++)
        -:   55:    {
    #####:   56:      for (j = 0; j < 10; j++)
        -:   57:        {
    #####:   58:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   59:	    {
    #####:   60:	      return -1;
        -:   61:	    }
        -:   62:        }
        -:   63:    }
        -:   64:
        -:   65:
        -:   66:  //initialize supply
        -:   67:  ///////////////////////////////
        -:   68:
        -:   69:  //set number of Curse cards
    #####:   70:  if (numPlayers == 2)
        -:   71:    {
    #####:   72:      state->supplyCount[curse] = 10;
        -:   73:    }
    #####:   74:  else if (numPlayers == 3)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 20;
        -:   77:    }
        -:   78:  else
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 30;
        -:   81:    }
        -:   82:
        -:   83:  //set number of Victory cards
    #####:   84:  if (numPlayers == 2)
        -:   85:    {
    #####:   86:      state->supplyCount[estate] = 8;
    #####:   87:      state->supplyCount[duchy] = 8;
    #####:   88:      state->supplyCount[province] = 8;
        -:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[estate] = 12;
    #####:   93:      state->supplyCount[duchy] = 12;
    #####:   94:      state->supplyCount[province] = 12;
        -:   95:    }
        -:   96:
        -:   97:  //set number of Treasure cards
    #####:   98:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:   99:  state->supplyCount[silver] = 40;
    #####:  100:  state->supplyCount[gold] = 30;
        -:  101:
        -:  102:  //set number of Kingdom cards
    #####:  103:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  104:    {
    #####:  105:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  106:	{
    #####:  107:	  if (kingdomCards[j] == i)
        -:  108:	    {
        -:  109:	      //check if card is a 'Victory' Kingdom card
    #####:  110:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  111:		{
    #####:  112:		  if (numPlayers == 2){
    #####:  113:		    state->supplyCount[i] = 8;
        -:  114:		  }
    #####:  115:		  else{ state->supplyCount[i] = 12; }
        -:  116:		}
        -:  117:	      else
        -:  118:		{
    #####:  119:		  state->supplyCount[i] = 10;
        -:  120:		}
    #####:  121:	      break;
        -:  122:	    }
        -:  123:	  else    //card is not in the set choosen for the game
        -:  124:	    {
    #####:  125:	      state->supplyCount[i] = -1;
        -:  126:	    }
        -:  127:	}
        -:  128:
        -:  129:    }
        -:  130:
        -:  131:  ////////////////////////
        -:  132:  //supply intilization complete
        -:  133:
        -:  134:  //set player decks
    #####:  135:  for (i = 0; i < numPlayers; i++)
        -:  136:    {
    #####:  137:      state->deckCount[i] = 0;
    #####:  138:      for (j = 0; j < 3; j++)
        -:  139:	{
    #####:  140:	  state->deck[i][j] = estate;
    #####:  141:	  state->deckCount[i]++;
        -:  142:	}
    #####:  143:      for (j = 3; j < 10; j++)
        -:  144:	{
    #####:  145:	  state->deck[i][j] = copper;
    #####:  146:	  state->deckCount[i]++;
        -:  147:	}
        -:  148:    }
        -:  149:
        -:  150:  //shuffle player decks
    #####:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
    #####:  153:      if ( shuffle(i, state) < 0 )
        -:  154:	{
    #####:  155:	  return -1;
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //draw player hands
    #####:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
        -:  162:      //initialize hand size to zero
    #####:  163:      state->handCount[i] = 0;
    #####:  164:      state->discardCount[i] = 0;
        -:  165:      //draw 5 cards
        -:  166:      // for (j = 0; j < 5; j++)
        -:  167:      //	{
        -:  168:      //	  drawCard(i, state);
        -:  169:      //	}
        -:  170:    }
        -:  171:
        -:  172:  //set embargo tokens to 0 for all supply piles
    #####:  173:  for (i = 0; i <= treasure_map; i++)
        -:  174:    {
    #####:  175:      state->embargoTokens[i] = 0;
        -:  176:    }
        -:  177:
        -:  178:  //initialize first player's turn
    #####:  179:  state->outpostPlayed = 0;
    #####:  180:  state->phase = 0;
    #####:  181:  state->numActions = 1;
    #####:  182:  state->numBuys = 1;
    #####:  183:  state->playedCardCount = 0;
    #####:  184:  state->whoseTurn = 0;
    #####:  185:  state->handCount[state->whoseTurn] = 0;
        -:  186:  //int it; move to top
        -:  187:
        -:  188:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  189:  for (it = 0; it < 5; it++){
    #####:  190:    drawCard(state->whoseTurn, state);
        -:  191:  }
        -:  192:
    #####:  193:  updateCoins(state->whoseTurn, state, 0);
        -:  194:
    #####:  195:  return 0;
        -:  196:}
        -:  197:
    #####:  198:int shuffle(int player, struct gameState *state) {
        -:  199:  int newDeck[MAX_DECK];
    #####:  200:  int newDeckPos = 0;
        -:  201:  int card;
        -:  202:  int i;
        -:  203:
    #####:  204:  if (state->deckCount[player] < 1)
    #####:  205:    return -1;
    #####:  206:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  207:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  208:
    #####:  209:  while (state->deckCount[player] > 0) {
    #####:  210:    card = floor(Random() * state->deckCount[player]);
    #####:  211:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  212:    newDeckPos++;
    #####:  213:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  214:      state->deck[player][i] = state->deck[player][i+1];
        -:  215:    }
    #####:  216:    state->deckCount[player]--;
        -:  217:  }
    #####:  218:  for (i = 0; i < newDeckPos; i++) {
    #####:  219:    state->deck[player][i] = newDeck[i];
    #####:  220:    state->deckCount[player]++;
        -:  221:  }
        -:  222:
    #####:  223:  return 0;
        -:  224:}
        -:  225:
    #####:  226:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  227:  int card;
    #####:  228:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  229:
        -:  230:  //check if it is the right phase
    #####:  231:  if (state->phase != 0)
        -:  232:    {
    #####:  233:      return -1;
        -:  234:    }
        -:  235:
        -:  236:  //check if player has enough actions
    #####:  237:  if ( state->numActions < 1 )
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //get card played
    #####:  243:  card = handCard(handPos, state);
        -:  244:
        -:  245:  //check if selected card is an action
    #####:  246:  if ( card < adventurer || card > treasure_map )
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:
        -:  251:  //play card
    #####:  252:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //reduce number of actions
    #####:  258:  state->numActions--;
        -:  259:
        -:  260:  //update coins (Treasure cards may be added with card draws)
    #####:  261:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  262:
    #####:  263:  return 0;
        -:  264:}
        -:  265:
    #####:  266:int buyCard(int supplyPos, struct gameState *state) {
        -:  267:  int who;
        -:  268:  if (DEBUG){
        -:  269:    printf("Entering buyCard...\n");
        -:  270:  }
        -:  271:
        -:  272:  // I don't know what to do about the phase thing.
        -:  273:
    #####:  274:  who = state->whoseTurn;
        -:  275:
    #####:  276:  if (state->numBuys < 1){
        -:  277:    if (DEBUG)
        -:  278:      printf("You do not have any buys left\n");
    #####:  279:    return -1;
    #####:  280:  } else if (supplyCount(supplyPos, state) <1){
        -:  281:    if (DEBUG)
        -:  282:      printf("There are not any of that type of card left\n");
    #####:  283:    return -1;
    #####:  284:  } else if (state->coins < getCost(supplyPos)){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  287:    return -1;
        -:  288:  } else {
    #####:  289:    state->phase=1;
        -:  290:    //state->supplyCount[supplyPos]--;
    #####:  291:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  292:
    #####:  293:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  294:    state->numBuys--;
        -:  295:    if (DEBUG)
        -:  296:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  297:  }
        -:  298:
        -:  299:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  300:  //state->discardCount[who]++;
        -:  301:
    #####:  302:  return 0;
        -:  303:}
        -:  304:
    #####:  305:int numHandCards(struct gameState *state) {
    #####:  306:  return state->handCount[ whoseTurn(state) ];
        -:  307:}
        -:  308:
    #####:  309:int handCard(int handPos, struct gameState *state) {
    #####:  310:  int currentPlayer = whoseTurn(state);
    #####:  311:  return state->hand[currentPlayer][handPos];
        -:  312:}
        -:  313:
    #####:  314:int supplyCount(int card, struct gameState *state) {
    #####:  315:  return state->supplyCount[card];
        -:  316:}
        -:  317:
    #####:  318:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  319:  int i;
    #####:  320:  int count = 0;
        -:  321:
    #####:  322:  for (i = 0; i < state->deckCount[player]; i++)
        -:  323:    {
    #####:  324:      if (state->deck[player][i] == card) count++;
        -:  325:    }
        -:  326:
    #####:  327:  for (i = 0; i < state->handCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->hand[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->discardCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->discard[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  return count;
        -:  338:}
        -:  339:
    #####:  340:int whoseTurn(struct gameState *state) {
    #####:  341:  return state->whoseTurn;
        -:  342:}
        -:  343:
    #####:  344:int endTurn(struct gameState *state) {
        -:  345:  int k;
        -:  346:  int i;
    #####:  347:  int currentPlayer = whoseTurn(state);
        -:  348:
        -:  349:  //Discard hand
    #####:  350:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  351:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  352:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  353:  }
    #####:  354:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  355:
        -:  356:  //Code for determining the player
    #####:  357:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  358:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  359:  }
        -:  360:  else{
    #####:  361:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  362:  }
        -:  363:
    #####:  364:  state->outpostPlayed = 0;
    #####:  365:  state->phase = 0;
    #####:  366:  state->numActions = 1;
    #####:  367:  state->coins = 0;
    #####:  368:  state->numBuys = 1;
    #####:  369:  state->playedCardCount = 0;
    #####:  370:  state->handCount[state->whoseTurn] = 0;
        -:  371:
        -:  372:  //int k; move to top
        -:  373:  //Next player draws hand
    #####:  374:  for (k = 0; k < 5; k++){
    #####:  375:    drawCard(state->whoseTurn, state);//Draw a card
        -:  376:  }
        -:  377:
        -:  378:  //Update money
    #####:  379:  updateCoins(state->whoseTurn, state , 0);
        -:  380:
    #####:  381:  return 0;
        -:  382:}
        -:  383:
    #####:  384:int isGameOver(struct gameState *state) {
        -:  385:	int i;
        -:  386:	int j;
        -:  387:
        -:  388:	//if stack of Province cards is empty, the game ends
    #####:  389:	if (state->supplyCount[province] == 0) {
    #####:  390:		return 1;
        -:  391:	}
        -:  392:
        -:  393:	//if three supply pile are at 0, the game ends
    #####:  394:	j = 0;
    #####:  395:	for (i = 0; i < 25; i++) {
    #####:  396:		if (state->supplyCount[i] == 0) {
    #####:  397:			j++;
        -:  398:		}
        -:  399:	}
    #####:  400:	if ( j >= 3 ) {
    #####:  401:		return 1;
        -:  402:	}
        -:  403:
    #####:  404:	return 0;
        -:  405:}
        -:  406:
    #####:  407:int scoreFor (int player, struct gameState *state) {
        -:  408:
        -:  409:  int i;
    #####:  410:  int score = 0;
        -:  411:  //score from hand
    #####:  412:  for (i = 0; i < state->handCount[player]; i++)
        -:  413:    {
    #####:  414:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  415:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  416:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  417:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  418:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  419:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  420:    }
        -:  421:
        -:  422:  //score from discard
    #####:  423:  for (i = 0; i < state->discardCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from deck
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
    #####:  444:  return score;
        -:  445:}
        -:  446:
    #####:  447:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  448:  int i;
        -:  449:  int j;
        -:  450:  int highScore;
        -:  451:  int currentPlayer;
        -:  452:
        -:  453:  //get score for each player
    #####:  454:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  455:    {
        -:  456:      //set unused player scores to -9999
    #####:  457:      if (i >= state->numPlayers)
        -:  458:	{
    #####:  459:	  players[i] = -9999;
        -:  460:	}
        -:  461:      else
        -:  462:	{
    #####:  463:	  players[i] = scoreFor (i, state);
        -:  464:	}
        -:  465:    }
        -:  466:
        -:  467:  //find highest score
    #####:  468:  j = 0;
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
    #####:  471:      if (players[i] > players[j])
        -:  472:	{
    #####:  473:	  j = i;
        -:  474:	}
        -:  475:    }
    #####:  476:  highScore = players[j];
        -:  477:
        -:  478:  //add 1 to players who had less turns
    #####:  479:  currentPlayer = whoseTurn(state);
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if ( players[i] == highScore && i > currentPlayer )
        -:  483:	{
    #####:  484:	  players[i]++;
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find new highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] > players[j] )
        -:  493:	{
    #####:  494:	  j = i;
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //set winners in array to 1 and rest to 0
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] == highScore )
        -:  503:	{
    #####:  504:	  players[i] = 1;
        -:  505:	}
        -:  506:      else
        -:  507:	{
    #####:  508:	  players[i] = 0;
        -:  509:	}
        -:  510:    }
        -:  511:
    #####:  512:  return 0;
        -:  513:}
        -:  514:
    #####:  515:int drawCard(int player, struct gameState *state) {
        -:  516:  int count;
        -:  517:  int deckCounter;
    #####:  518:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  519:
        -:  520:    //Step 1 Shuffle the discard pile back into a deck
        -:  521:    int i;
        -:  522:    //Move discard to deck
    #####:  523:    for (i = 0; i < state->discardCount[player];i++){
    #####:  524:      state->deck[player][i] = state->discard[player][i];
    #####:  525:      state->discard[player][i] = -1;
        -:  526:    }
        -:  527:
    #####:  528:    state->deckCount[player] = state->discardCount[player];
    #####:  529:    state->discardCount[player] = 0;//Reset discard
        -:  530:
        -:  531:    //Shufffle the deck
    #####:  532:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  533:
        -:  534:    if (DEBUG){//Debug statements
        -:  535:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  536:    }
        -:  537:
    #####:  538:    state->discardCount[player] = 0;
        -:  539:
        -:  540:    //Step 2 Draw Card
    #####:  541:    count = state->handCount[player];//Get current player's hand count
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Current hand count: %d\n", count);
        -:  545:    }
        -:  546:
    #####:  547:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  548:
    #####:  549:    if (deckCounter == 0)
    #####:  550:      return -1;
        -:  551:
    #####:  552:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  553:    state->deckCount[player]--;
    #####:  554:    state->handCount[player]++;//Increment hand count
        -:  555:  }
        -:  556:
        -:  557:  else{
    #####:  558:    int count = state->handCount[player];//Get current hand count for player
        -:  559:    int deckCounter;
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:
    #####:  564:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  566:    state->deckCount[player]--;
    #####:  567:    state->handCount[player]++;//Increment hand count
        -:  568:  }
        -:  569:
    #####:  570:  return 0;
        -:  571:}
        -:  572:
    #####:  573:int getCost(int cardNumber) {
    #####:  574:  switch( cardNumber )
        -:  575:    {
        -:  576:    case curse:
    #####:  577:      return 0;
        -:  578:    case estate:
    #####:  579:      return 2;
        -:  580:    case duchy:
    #####:  581:      return 5;
        -:  582:    case province:
    #####:  583:      return 8;
        -:  584:    case copper:
    #####:  585:      return 0;
        -:  586:    case silver:
    #####:  587:      return 3;
        -:  588:    case gold:
    #####:  589:      return 6;
        -:  590:    case adventurer:
    #####:  591:      return 6;
        -:  592:    case council_room:
    #####:  593:      return 5;
        -:  594:    case feast:
    #####:  595:      return 4;
        -:  596:    case gardens:
    #####:  597:      return 4;
        -:  598:    case mine:
    #####:  599:      return 5;
        -:  600:    case remodel:
    #####:  601:      return 4;
        -:  602:    case smithy:
    #####:  603:      return 4;
        -:  604:    case village:
    #####:  605:      return 3;
        -:  606:    case baron:
    #####:  607:      return 4;
        -:  608:    case great_hall:
    #####:  609:      return 3;
        -:  610:    case minion:
    #####:  611:      return 5;
        -:  612:    case steward:
    #####:  613:      return 3;
        -:  614:    case tribute:
    #####:  615:      return 5;
        -:  616:    case ambassador:
    #####:  617:      return 3;
        -:  618:    case cutpurse:
    #####:  619:      return 4;
        -:  620:    case embargo:
    #####:  621:      return 2;
        -:  622:    case outpost:
    #####:  623:      return 5;
        -:  624:    case salvager:
    #####:  625:      return 4;
        -:  626:    case sea_hag:
    #####:  627:      return 4;
        -:  628:    case treasure_map:
    #####:  629:      return 4;
        -:  630:    }
        -:  631:
    #####:  632:  return -1;
        -:  633:}
        -:  634:
    #####:  635:int playVillage(struct gameState *state, int handPos){
    #####:  636:	int currentPlayer = whoseTurn(state);
        -:  637:	//+1 Card
    #####:  638:    drawCard(currentPlayer, state);
        -:  639:		
        -:  640:    //+2 Actions
    #####:  641:    state->numActions = state->numActions + 2;
        -:  642:		
        -:  643:    //discard played card from hand
    #####:  644:    discardCard(handPos, currentPlayer, state, 0);
    #####:  645:    return 0;
        -:  646:}
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  649:	int i;
        -:  650:	int j;
        -:  651:	int k;
        -:  652:	int index;
    #####:  653:	int currentPlayer = whoseTurn(state);
    #####:  654:	int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:	int tributeRevealedCards[2] = {-1, -1};
    #####:  657:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  658:		nextPlayer = 0;
        -:  659:	}
        -:  660:
        -:  661:
        -:  662:  //uses switch to select card and perform actions
    #####:  663:  switch( card )
        -:  664:    {
        -:  665:    case adventurer:
    #####:  666:      playAdventurer(currentPlayer, state);
    #####:  667:      return 0;
        -:  668:
        -:  669:    case council_room:
    #####:  670:      playCouncilRoom(currentPlayer, state, handPos);
    #####:  671:      return 0;
        -:  672:
        -:  673:    case feast:
    #####:  674:	  cardEffectFeast(currentPlayer, state, handPos, choice1);
    #####:  675:	  return 0;
        -:  676:
        -:  677:    case gardens:
    #####:  678:      return -1;
        -:  679:
        -:  680:    case mine:
    #####:  681:	  cardEffectMine(currentPlayer, state, handPos, choice1, choice2);
    #####:  682:	  return 0;
        -:  683:
        -:  684:    case remodel:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:
    #####:  692:      gainCard(choice2, state, 0, currentPlayer);
        -:  693:
        -:  694:      //discard card from hand
    #####:  695:      discardCard(handPos, currentPlayer, state, 0);
        -:  696:
        -:  697:      //discard trashed card
    #####:  698:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  699:	{
    #####:  700:	  if (state->hand[currentPlayer][i] == j)
        -:  701:	    {
    #####:  702:	      discardCard(i, currentPlayer, state, 0);
    #####:  703:	      break;
        -:  704:	    }
        -:  705:	}
        -:  706:
        -:  707:
    #####:  708:      return 0;
        -:  709:
        -:  710:    case smithy:
    #####:  711:      playSmithy( currentPlayer, state, handPos );
    #####:  712:      return 0;
        -:  713:
        -:  714:    case village:
    #####:  715:      return playVillage(state, handPos);
        -:  716:
        -:  717:    case baron:
    #####:  718:      state->numBuys++;//Increase buys by 1!
    #####:  719:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  720:	int p = 0;//Iterator for hand!
    #####:  721:	int card_not_discarded = 1;//Flag for discard set!
    #####:  722:	while(card_not_discarded){
    #####:  723:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  724:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  725:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  726:	    state->discardCount[currentPlayer]++;
    #####:  727:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  728:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  729:	    }
    #####:  730:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  731:	    state->handCount[currentPlayer]--;
    #####:  732:	    card_not_discarded = 0;//Exit the loop
        -:  733:	  }
    #####:  734:	  else if (p > state->handCount[currentPlayer]){
        -:  735:	    if(DEBUG) {
        -:  736:	      printf("No estate cards in your hand, invalid choice\n");
        -:  737:	      printf("Must gain an estate if there are any\n");
        -:  738:	    }
    #####:  739:	    if (supplyCount(estate, state) > 0){
    #####:  740:	      gainCard(estate, state, 0, currentPlayer);
    #####:  741:	      state->supplyCount[estate]--;//Decrement estates
    #####:  742:	      if (supplyCount(estate, state) == 0){
    #####:  743:		isGameOver(state);
        -:  744:	      }
        -:  745:	    }
    #####:  746:	    card_not_discarded = 0;//Exit the loop
        -:  747:	  }
        -:  748:
        -:  749:	  else{
    #####:  750:	    p++;//Next card
        -:  751:	  }
        -:  752:	}
        -:  753:      }
        -:  754:
        -:  755:      else{
    #####:  756:	if (supplyCount(estate, state) > 0){
    #####:  757:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  758:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  759:	  if (supplyCount(estate, state) == 0){
    #####:  760:	    isGameOver(state);
        -:  761:	  }
        -:  762:	}
        -:  763:      }
        -:  764:
        -:  765:
    #####:  766:      return 0;
        -:  767:
        -:  768:    case great_hall:
        -:  769:      //+1 Card
    #####:  770:      drawCard(currentPlayer, state);
        -:  771:
        -:  772:      //+1 Actions
    #####:  773:      state->numActions++;
        -:  774:
        -:  775:      //discard card from hand
    #####:  776:      discardCard(handPos, currentPlayer, state, 0);
    #####:  777:      return 0;
        -:  778:
        -:  779:    case minion:
        -:  780:      //+1 action
    #####:  781:      state->numActions++;
        -:  782:
        -:  783:      //discard card from hand
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
    #####:  786:      if (choice1)		//+2 coins
        -:  787:	{
    #####:  788:	  state->coins = state->coins + 2;
        -:  789:	}
        -:  790:
    #####:  791:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  792:	{
        -:  793:	  //discard hand
    #####:  794:	  while(numHandCards(state) > 0)
        -:  795:	    {
    #####:  796:	      discardCard(handPos, currentPlayer, state, 0);
        -:  797:	    }
        -:  798:
        -:  799:	  //draw 4
    #####:  800:	  for (i = 0; i < 4; i++)
        -:  801:	    {
    #####:  802:	      drawCard(currentPlayer, state);
        -:  803:	    }
        -:  804:
        -:  805:	  //other players discard hand and redraw if hand size > 4
    #####:  806:	  for (i = 0; i < state->numPlayers; i++)
        -:  807:	    {
    #####:  808:	      if (i != currentPlayer)
        -:  809:		{
    #####:  810:		  if ( state->handCount[i] > 4 )
        -:  811:		    {
        -:  812:		      //discard hand
    #####:  813:		      while( state->handCount[i] > 0 )
        -:  814:			{
    #####:  815:			  discardCard(handPos, i, state, 0);
        -:  816:			}
        -:  817:
        -:  818:		      //draw 4
    #####:  819:		      for (j = 0; j < 4; j++)
        -:  820:			{
    #####:  821:			  drawCard(i, state);
        -:  822:			}
        -:  823:		    }
        -:  824:		}
        -:  825:	    }
        -:  826:
        -:  827:	}
    #####:  828:      return 0;
        -:  829:
        -:  830:    case steward:
    #####:  831:      if (choice1 == 1)
        -:  832:	{
        -:  833:	  //+2 cards
    #####:  834:	  drawCard(currentPlayer, state);
    #####:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
    #####:  837:      else if (choice1 == 2)
        -:  838:	{
        -:  839:	  //+2 coins
    #####:  840:	  state->coins = state->coins + 2;
        -:  841:	}
        -:  842:      else
        -:  843:	{
        -:  844:	  //trash 2 cards in hand
    #####:  845:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  846:	  discardCard(choice3, currentPlayer, state, 1);
        -:  847:	}
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
    #####:  851:      return 0;
        -:  852:
        -:  853:    case tribute:
    #####:  854:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  855:	if (state->deckCount[nextPlayer] > 0){
    #####:  856:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  857:	  state->deckCount[nextPlayer]--;
        -:  858:	}
    #####:  859:	else if (state->discardCount[nextPlayer] > 0){
    #####:  860:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  861:	  state->discardCount[nextPlayer]--;
        -:  862:	}
        -:  863:	else{
        -:  864:	  //No Card to Reveal
        -:  865:	  if (DEBUG){
        -:  866:	    printf("No cards to reveal\n");
        -:  867:	  }
        -:  868:	}
        -:  869:      }
        -:  870:
        -:  871:      else{
    #####:  872:	if (state->deckCount[nextPlayer] == 0){
    #####:  873:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  874:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  875:	    state->deckCount[nextPlayer]++;
    #####:  876:	    state->discard[nextPlayer][i] = -1;
    #####:  877:	    state->discardCount[nextPlayer]--;
        -:  878:	  }
        -:  879:
    #####:  880:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  881:	}
    #####:  882:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  883:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  884:	state->deckCount[nextPlayer]--;
    #####:  885:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  886:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  887:	state->deckCount[nextPlayer]--;
        -:  888:      }
        -:  889:
    #####:  890:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  891:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  892:	state->playedCardCount++;
    #####:  893:	tributeRevealedCards[1] = -1;
        -:  894:      }
        -:  895:
    #####:  896:      for (i = 0; i <= 2; i ++){
    #####:  897:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  898:	  state->coins += 2;
        -:  899:	}
        -:  900:
    #####:  901:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  902:	  drawCard(currentPlayer, state);
    #####:  903:	  drawCard(currentPlayer, state);
        -:  904:	}
        -:  905:	else{//Action Card
    #####:  906:	  state->numActions = state->numActions + 2;
        -:  907:	}
        -:  908:      }
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case ambassador:
    #####:  913:      j = 0;		//used to check if player has enough cards to discard
        -:  914:
    #####:  915:      if (choice2 > 2 || choice2 < 0)
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      if (choice1 == handPos)
        -:  921:	{
    #####:  922:	  return -1;
        -:  923:	}
        -:  924:
    #####:  925:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926:	{
    #####:  927:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  928:	    {
    #####:  929:	      j++;
        -:  930:	    }
        -:  931:	}
    #####:  932:      if (j < choice2)
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
        -:  937:      if (DEBUG)
        -:  938:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  939:
        -:  940:      //increase supply count for choosen card by amount being discarded
    #####:  941:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  942:
        -:  943:      //each other player gains a copy of revealed card
    #####:  944:      for (i = 0; i < state->numPlayers; i++)
        -:  945:	{
    #####:  946:	  if (i != currentPlayer)
        -:  947:	    {
    #####:  948:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  949:	    }
        -:  950:	}
        -:  951:
        -:  952:      //discard played card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
        -:  954:
        -:  955:      //trash copies of cards returned to supply
    #####:  956:      for (j = 0; j < choice2; j++)
        -:  957:	{
    #####:  958:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	    {
    #####:  960:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  961:		{
    #####:  962:		  discardCard(i, currentPlayer, state, 1);
    #####:  963:		  break;
        -:  964:		}
        -:  965:	    }
        -:  966:	}
        -:  967:
    #####:  968:      return 0;
        -:  969:
        -:  970:    case cutpurse:
        -:  971:
    #####:  972:      updateCoins(currentPlayer, state, 2);
    #####:  973:      for (i = 0; i < state->numPlayers; i++)
        -:  974:	{
    #####:  975:	  if (i != currentPlayer)
        -:  976:	    {
    #####:  977:	      for (j = 0; j < state->handCount[i]; j++)
        -:  978:		{
    #####:  979:		  if (state->hand[i][j] == copper)
        -:  980:		    {
    #####:  981:		      discardCard(j, i, state, 0);
    #####:  982:		      break;
        -:  983:		    }
    #####:  984:		  if (j == state->handCount[i])
        -:  985:		    {
    #####:  986:		      for (k = 0; k < state->handCount[i]; k++)
        -:  987:			{
        -:  988:			  if (DEBUG)
        -:  989:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  990:			}
    #####:  991:		      break;
        -:  992:		    }
        -:  993:		}
        -:  994:
        -:  995:	    }
        -:  996:
        -:  997:	}
        -:  998:
        -:  999:      //discard played card from hand
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:
        -: 1004:
        -: 1005:    case embargo:
        -: 1006:      //+2 Coins
    #####: 1007:      state->coins = state->coins + 2;
        -: 1008:
        -: 1009:      //see if selected pile is in play
    #####: 1010:      if ( state->supplyCount[choice1] == -1 )
        -: 1011:	{
    #####: 1012:	  return -1;
        -: 1013:	}
        -: 1014:
        -: 1015:      //add embargo token to selected supply pile
    #####: 1016:      state->embargoTokens[choice1]++;
        -: 1017:
        -: 1018:      //trash card
    #####: 1019:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1020:      return 0;
        -: 1021:
        -: 1022:    case outpost:
        -: 1023:      //set outpost flag
    #####: 1024:      state->outpostPlayed++;
        -: 1025:
        -: 1026:      //discard card
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1028:      return 0;
        -: 1029:
        -: 1030:    case salvager:
        -: 1031:      //+1 buy
    #####: 1032:      state->numBuys++;
        -: 1033:
    #####: 1034:      if (choice1)
        -: 1035:	{
        -: 1036:	  //gain coins equal to trashed card
    #####: 1037:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1038:	  //trash card
    #####: 1039:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1040:	}
        -: 1041:
        -: 1042:      //discard card
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:    case sea_hag:
    #####: 1047:      for (i = 0; i < state->numPlayers; i++){
    #####: 1048:	if (i != currentPlayer){
    #####: 1049:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1050:	  state->discardCount[i]++;
    #####: 1051:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1052:	}
        -: 1053:      }
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case treasure_map:
        -: 1057:      //search hand for another treasure_map
    #####: 1058:      index = -1;
    #####: 1059:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1060:	{
    #####: 1061:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1062:	    {
    #####: 1063:	      index = i;
    #####: 1064:	      break;
        -: 1065:	    }
        -: 1066:	}
    #####: 1067:      if (index > -1)
        -: 1068:	{
        -: 1069:	  //trash both treasure cards
    #####: 1070:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1071:	  discardCard(index, currentPlayer, state, 1);
        -: 1072:
        -: 1073:	  //gain 4 Gold cards
    #####: 1074:	  for (i = 0; i < 4; i++)
        -: 1075:	    {
    #####: 1076:	      gainCard(gold, state, 1, currentPlayer);
        -: 1077:	    }
        -: 1078:
        -: 1079:	  //return success
    #####: 1080:	  return 1;
        -: 1081:	}
        -: 1082:
        -: 1083:      //no second treasure_map found in hand
    #####: 1084:      return -1;
        -: 1085:    }
        -: 1086:
    #####: 1087:  return -1;
        -: 1088:}
        -: 1089:
    #####: 1090:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1091:
        -: 1092:  //if card is not trashed, added to Played pile
    #####: 1093:  if (trashFlag < 1)
        -: 1094:    {
        -: 1095:      //add card to played pile
    #####: 1096:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1097:      state->playedCardCount++;
        -: 1098:    }
        -: 1099:
        -: 1100:  //set played card to -1
    #####: 1101:  state->hand[currentPlayer][handPos] = -1;
        -: 1102:
        -: 1103:  //remove card from player's hand
    #####: 1104:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1105:    {
        -: 1106:      //reduce number of cards in hand
    #####: 1107:      state->handCount[currentPlayer]--;
        -: 1108:    }
    #####: 1109:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1110:    {
        -: 1111:      //reduce number of cards in hand
    #####: 1112:      state->handCount[currentPlayer]--;
        -: 1113:    }
        -: 1114:  else
        -: 1115:    {
        -: 1116:      //replace discarded card with last card in hand
    #####: 1117:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1118:      //set last card to -1
    #####: 1119:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1120:      //reduce number of cards in hand
    #####: 1121:      state->handCount[currentPlayer]--;
        -: 1122:    }
        -: 1123:
    #####: 1124:  return 0;
        -: 1125:}
        -: 1126:
    #####: 1127:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1128:  //Note: supplyPos is enum of choosen card
        -: 1129:
        -: 1130:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1131:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1132:    {
    #####: 1133:      return -1;
        -: 1134:    }
        -: 1135:
        -: 1136:  //added card for [whoseTurn] current player:
        -: 1137:  // toFlag = 0 : add to discard
        -: 1138:  // toFlag = 1 : add to deck
        -: 1139:  // toFlag = 2 : add to hand
        -: 1140:
    #####: 1141:  if (toFlag == 1)
        -: 1142:    {
    #####: 1143:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1144:      state->deckCount[player]++;
        -: 1145:    }
    #####: 1146:  else if (toFlag == 2)
        -: 1147:    {
    #####: 1148:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1149:      state->handCount[player]++;
        -: 1150:    }
        -: 1151:  else
        -: 1152:    {
    #####: 1153:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1154:      state->discardCount[player]++;
        -: 1155:    }
        -: 1156:
        -: 1157:  //decrease number in supply pile
    #####: 1158:  state->supplyCount[supplyPos]--;
        -: 1159:
    #####: 1160:  return 0;
        -: 1161:}
        -: 1162:
    #####: 1163:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1164:	int i;
        -: 1165:
        -: 1166:	//reset coin count
    #####: 1167:	state->coins = 0;
        -: 1168:
        -: 1169:	//add coins for each Treasure card in player's hand
    #####: 1170:	for (i = 0; i < state->handCount[player]; i++) {
    #####: 1171:		if (state->hand[player][i] == copper) {
    #####: 1172:			state->coins += 1;
    #####: 1173:		} else if (state->hand[player][i] == silver) {
    #####: 1174:			state->coins += 2;
    #####: 1175:		} else if (state->hand[player][i] == gold) {
    #####: 1176:			state->coins += 3;
        -: 1177:		}
        -: 1178:	}
        -: 1179:
        -: 1180:	//add bonus
    #####: 1181:	state->coins += bonus;
        -: 1182:
    #####: 1183:	return 0;
        -: 1184:}
        -: 1185:
    #####: 1186:int playSmithy( int currentPlayer, struct gameState *state, int handPos ) {
        -: 1187:	//+3 Cards
        -: 1188:	int i;
        -: 1189:	// Making a bug here, it adds 4 cards, oops.
    #####: 1190:	for (i = 0; i < 4; i++) {
    #####: 1191:		drawCard(currentPlayer, state);
        -: 1192:	}
        -: 1193:
        -: 1194:	//discard card from hand
    #####: 1195:	discardCard(handPos, currentPlayer, state, 0);
        -: 1196:
    #####: 1197:	return 0;
        -: 1198:}
        -: 1199:
    #####: 1200:int playAdventurer( int currentPlayer, struct gameState *state ) {
        -: 1201:	int temphand[MAX_HAND];
    #####: 1202:	int z = 0;
        -: 1203:	int cardDrawn;
    #####: 1204:	int drawntreasure = 0;
        -: 1205:
        -: 1206:	// Ooops, you get 3 treaasures!
    #####: 1207:	while(drawntreasure < 3) {
        -: 1208:		//if the deck is empty we need to shuffle discard and add to deck
    #####: 1209:		if (state->deckCount[currentPlayer] < 1){
    #####: 1210:			shuffle(currentPlayer, state);
        -: 1211:		}
        -: 1212:
        -: 1213:		//top card of hand is most recently drawn card.
    #####: 1214:		drawCard(currentPlayer, state);
    #####: 1215:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -: 1216:
    #####: 1217:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1218:			drawntreasure++;
        -: 1219:		} else {
        -: 1220:			//this should just remove the top card (the most recently drawn one).
    #####: 1221:			temphand[z]=cardDrawn;
    #####: 1222:			state->handCount[currentPlayer]--;
    #####: 1223:			z++;
        -: 1224:		}
        -: 1225:	}
        -: 1226:
    #####: 1227:	while(z - 1 >= 0) {
        -: 1228:		// discard all cards in play that have been drawn
    #####: 1229:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
    #####: 1230:		z = z - 1;
        -: 1231:	}
        -: 1232:
    #####: 1233:	return 0;
        -: 1234:}
        -: 1235:
    #####: 1236:int playCouncilRoom( int currentPlayer, struct gameState *state, int handPos ) {
        -: 1237:	//+4 Cards
        -: 1238:	int i;
    #####: 1239:	for (i = 0; i < 4; i++) {
    #####: 1240:		drawCard(currentPlayer, state);
        -: 1241:	}
        -: 1242:
        -: 1243:	//+1 Buy
        -: 1244:	// Oops, you don't get an additional buy!
    #####: 1245:	state->numBuys += 0;
        -: 1246:
        -: 1247:	//Each other player draws a card
    #####: 1248:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1249:		if ( i != currentPlayer ) {
    #####: 1250:			drawCard(i, state);
        -: 1251:		}
        -: 1252:	}
        -: 1253:
        -: 1254:	//put played card in played card pile
    #####: 1255:	discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
    #####: 1257:	return 0;
        -: 1258:}
        -: 1259:
    #####: 1260:int cardEffectFeast( int currentPlayer, struct gameState *state, int handPos, int choice1 ) {
        -: 1261:	int temphand[MAX_HAND];
        -: 1262:	int x;
        -: 1263:
        -: 1264:	//gain card with cost up to 5
        -: 1265:	//Backup hand
        -: 1266:	int i;
    #####: 1267:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1268:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1269:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1270:	}
        -: 1271:	//Backup hand
        -: 1272:
        -: 1273:	//Update Coins for Buy
        -: 1274:	// Not worth the 5 coins like we are supposed to be
    #####: 1275:	updateCoins(currentPlayer, state, 4);
    #####: 1276:	x = 1;//Condition to loop on
    #####: 1277:	while (x == 1) {//Buy one card
    #####: 1278:		if (supplyCount(choice1, state) <= 0) {
        -: 1279:			if (DEBUG) {
        -: 1280:				printf("None of that card left, sorry!\n");
        -: 1281:			}
        -: 1282:
        -: 1283:			if (DEBUG){
        -: 1284:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1285:			}
    #####: 1286:		} else if (state->coins < getCost(choice1)) {
    #####: 1287:			printf("That card is too expensive!\n");
        -: 1288:
        -: 1289:			if (DEBUG){
        -: 1290:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1291:			}
        -: 1292:		} else {
        -: 1293:			if (DEBUG){
        -: 1294:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1295:			}
        -: 1296:
    #####: 1297:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1298:			x = 0;//No more buying cards
        -: 1299:
        -: 1300:			if (DEBUG){
        -: 1301:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1302:			}
        -: 1303:		}
        -: 1304:	}
        -: 1305:
        -: 1306:	//Reset Hand
    #####: 1307:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1308:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1309:		temphand[i] = -1;
        -: 1310:	}
        -: 1311:	//Reset Hand
        -: 1312:
    #####: 1313:	return 0;
        -: 1314:}
        -: 1315:
    #####: 1316:int cardEffectMine( int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2 ) {
    #####: 1317:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1318:
    #####: 1319:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####: 1320:		return -1;
        -: 1321:	}
        -: 1322:
    #####: 1323:	if (choice2 > treasure_map || choice2 < curse) {
    #####: 1324:		return -1;
        -: 1325:	}
        -: 1326:
        -: 1327:	// Found a bug here
    #####: 1328:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####: 1329:		return -1;
        -: 1330:	}
        -: 1331:
    #####: 1332:	gainCard(choice2, state, 2, currentPlayer);
        -: 1333:
        -: 1334:	//discard card from hand
    #####: 1335:	discardCard(handPos, currentPlayer, state, 0);
        -: 1336:
        -: 1337:	//discard trashed card
        -: 1338:	int i;
    #####: 1339:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1340:		if (state->hand[currentPlayer][i] == j) {
    #####: 1341:			discardCard(i, currentPlayer, state, 0);
    #####: 1342:			break;
        -: 1343:		}
        -: 1344:	}
        -: 1345:
    #####: 1346:	return 0;
        -: 1347:}
        -: 1348:
        -: 1349://end of dominion.c
