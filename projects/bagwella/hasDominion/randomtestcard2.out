File 'randomtestcard2.c'
Lines executed:90.54% of 74
Branches executed:100.00% of 28
Taken at least once:89.29% of 28
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12://constants 
        -:   13:#define NUM_KING_CARDS 20
        -:   14:#define TEST_CARD great_hall
        -:   15:#define NUM_TESTS 20000
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 93%
        -:   18:int main() {
        -:   19:
        1:   20:	srand(time(NULL));
        -:   21:	struct gameState G, testG;
        1:   22:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:	int testcase, player, numPlayers, seed, testNum = 0, alreadyChosen, kcard, handPos, cardAcquired, coinsCounted, returnedVal, k_card_counter;
        1:   24:	int error_1_count = 0, error_2_count = 0, error_3_count = 0, error_4_count= 0;
        -:   25:	int kingdom_cards[10], supply[17];
        -:   26:	
    40002:   27:	for(testcase = 0; testcase < NUM_TESTS; testcase++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   28:
    20000:   29:		seed = rand();
    20000:   30:		numPlayers = (rand() % 3) + 2;
        -:   31:
   440000:   32:		for (int i = 0; i < 10; i++) 	//initialize kingdom cards 
branch  0 taken 91%
branch  1 taken 9%
   200000:   33:			kingdom_cards[i] = -1;
        -:   34:		
        -:   35:
        -:   36:		//randomize kingdom cards used in the game
        -:   37:
   585986:   38:		for (k_card_counter = 0; k_card_counter < 10; ) {
branch  0 taken 93%
branch  1 taken 7%
        -:   39:
        -:   40:			//draw a particular card by picking a random enum
   272993:   41:			kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   42:			
        -:   43:			//make sure its not the testCard
   574866:   44:			while (kcard == TEST_CARD) {
branch  0 taken 5%
branch  1 taken 95%
    14440:   45:				kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   46:			}
        -:   47:
   272993:   48:			alreadyChosen = -1;
        -:   49:
        -:   50:			//loop through cards to check if picked card has been chosen
  2763462:   51:			for (int j = 0; j < k_card_counter; j++) {
branch  0 taken 86%
branch  1 taken 14%
  1181731:   52:				if (kingdom_cards[j] == kcard)  {
branch  0 taken 6%
branch  1 taken 94%
    72993:   53:					alreadyChosen = 0;
    72993:   54:					break; 
        -:   55:				}
  1108738:   56:			}
        -:   57:
   272993:   58:			if (alreadyChosen == -1) {
branch  0 taken 73%
branch  1 taken 27%
        -:   59:
   200000:   60:				kingdom_cards[k_card_counter] = kcard; 
   200000:   61:				k_card_counter += 1; 
   200000:   62:			}
        -:   63:
        -:   64:		}
        -:   65:
        -:   66:		//randomnly replace 1 of the 10 cards with testCard
    20000:   67:		kingdom_cards[rand() % 10] = TEST_CARD;
        -:   68:
    20000:   69:		memset(&testG, 23, sizeof(struct gameState));
    20000:   70:		initializeGame(numPlayers, kingdom_cards, seed, &testG);
        -:   71:
    20000:   72:		testNum++;
    20000:   73:		printf("------Test#%d Great Hall Card--------\n", testNum);
        -:   74:
    20000:   75:		player = rand() % numPlayers;
    20000:   76:		testG.whoseTurn = player;
        -:   77:
    20000:   78:	    testG.deckCount[player] = rand() % MAX_DECK;
    20000:   79:		testG.discardCount[player] = rand() % MAX_DECK;
    20000:   80:	    testG.handCount[player] = rand() % MAX_HAND;
        -:   81:	    
        -:   82:
 10061862:   83:	   	for(int j = 0; j < testG.deckCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  5010931:   84:	        testG.deck[player][j] = rand() % 26;
        -:   85:	       
        -:   86:
 10069170:   87:	    for(int j = 0; j < testG.discardCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  5014585:   88:	    	testG.discard[player][j] = rand() % 26;
        -:   89:
        -:   90:
 10107590:   91:	    for(int j = 0; j < testG.handCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  5033795:   92:	        testG.hand[player][j] = rand() % 26;
        -:   93:
        -:   94:
    20000:   95:	    printf("Before playing smithy: player = %d; deck count = %d; discard count = %d; hand count = %d\n", player+1, testG.deckCount[player], testG.discardCount[player], testG.handCount[player]);
    20000:   96:	    printf("Playing now....\n");
        -:   97:		
        -:   98:
    20000:   99:		memcpy(&G, &testG, sizeof(struct gameState));
        -:  100:
    20000:  101:		printf("TEST#1 - CardEffect return\n");
    20000:  102:		returnedVal = cardEffect(great_hall, choice1, choice2, choice3, &testG, handPos, &bonus);
    20000:  103:		if (returnedVal != 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  104:			error_1_count++;
    #####:  105:			printf("ERROR#1 - CardEffect returned improperly.\n");
    #####:  106:		}
        -:  107:		else
    20000:  108:			printf("TEST#1 - Passed\n");
        -:  109:
    20000:  110:		printf("TEST#2 - changes in handCount\n");
        -:  111:
    20000:  112:		if (testG.handCount[G.whoseTurn] != G.handCount[G.whoseTurn]) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  113:				printf("ERROR#2 - player's handcount did not increment properly\n ");
    #####:  114:				error_2_count++;
    #####:  115:			}
        -:  116:		else
    20000:  117:			printf("TEST#2 - Passed\n");
        -:  118:
        -:  119:
        -:  120:
    20000:  121:		printf("TEST#3 - discarding of great_hall\n");
        -:  122:
    20000:  123:		if (testG.discard[G.whoseTurn][0] != great_hall) {
branch  0 taken 96%
branch  1 taken 4%
    19216:  124:				printf("ERROR#3 -  discarded cards are not the same: %d and %d\n", testG.discard[G.whoseTurn][0], great_hall);
    19216:  125:				error_3_count++;
    19216:  126:			}
        -:  127:		else
      784:  128:			printf("TEST#3 - Passed\n");
        -:  129:
    20000:  130:		printf("TEST#4 - increase in num of actions\n");
        -:  131:
    20000:  132:		if (testG.numActions != G.numActions+1) {
branch  0 taken 100%
branch  1 taken 0%
    20000:  133:				printf("ERROR#4 -  actions not incremented properly.\n");
    20000:  134:				error_4_count++;
    20000:  135:			}
        -:  136:		else
    #####:  137:			printf("TEST#4 - Passed\n");
        -:  138:
    20000:  139:	}
        -:  140:
        -:  141:	//print results of testing
        -:  142:
        1:  143:	printf("\n\n***************Random Testing Results Summary for great_hall card***************\n\n");
        1:  144:	printf("Error 1: %d\n", error_1_count);
        1:  145:	printf("Error 2: %d\n", error_2_count);
        1:  146:	printf("Error 3: %d\n", error_3_count);
        1:  147:	printf("Error 4: %d\n", error_4_count);
        -:  148:
        1:  149:	return 0;
        -:  150:
        -:  151:}
File 'dominion.c'
Lines executed:35.68% of 653
Branches executed:33.96% of 427
Taken at least once:27.40% of 427
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 11001627 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
 11001627:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 6%
branch  1 taken 94%
   681236:   10:    return 1;
 10320391:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 38%
branch  1 taken 62%
  3972459:   12:    return -1;
  6347932:   13:  return 0;
 11001627:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 220003 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   220003:   44:  SelectStream(1);
   220003:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   440006:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   220003:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4840066:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
 48400660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
 41800570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 22000300:   65:        }
  2200030:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   220003:   73:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
    73305:   75:      state->supplyCount[curse] = 10;
    73305:   76:    }
   146698:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
    73296:   79:      state->supplyCount[curse] = 20;
    73296:   80:    }
        -:   81:  else
        -:   82:    {
    73402:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   220003:   87:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
    73305:   89:      state->supplyCount[estate] = 8;
    73305:   90:      state->supplyCount[duchy] = 8;
    73305:   91:      state->supplyCount[province] = 8;
    73305:   92:    }
        -:   93:  else
        -:   94:    {
   146698:   95:      state->supplyCount[estate] = 12;
   146698:   96:      state->supplyCount[duchy] = 12;
   146698:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   220003:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   220003:  102:  state->supplyCount[silver] = 40;
   220003:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  9240126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
 72600990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
 34100465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  4285386:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 95%
        -:  114:		{
   219364:  115:		  if (numPlayers == 2){ 
branch  0 taken 33%
branch  1 taken 67%
    73097:  116:		    state->supplyCount[i] = 8; 
    73097:  117:		  }
   146267:  118:		  else{ state->supplyCount[i] = 12; }
   219364:  119:		}
        -:  120:	      else
        -:  121:		{
  1980666:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2200030:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 31900435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 31900435:  130:	}
        -:  131:
  4400060:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1760218:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
   660106:  140:      state->deckCount[i] = 0;
  5280848:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
  1980318:  143:	  state->deck[i][j] = estate;
  1980318:  144:	  state->deckCount[i]++;
  1980318:  145:	}
 10561696:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
  4620742:  148:	  state->deck[i][j] = copper;
  4620742:  149:	  state->deckCount[i]++;		
  4620742:  150:	}
   660106:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1760218:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
   660106:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   660106:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1760218:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   660106:  166:      state->handCount[i] = 0;
   660106:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   660106:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 12320168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
  5940081:  178:      state->embargoTokens[i] = 0;
  5940081:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   220003:  182:  state->outpostPlayed = 0;
   220003:  183:  state->phase = 0;
   220003:  184:  state->numActions = 1;
   220003:  185:  state->numBuys = 1;
   220003:  186:  state->playedCardCount = 0;
   220003:  187:  state->whoseTurn = 0;
   220003:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2640036:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
  1100015:  193:    drawCard(state->whoseTurn, state);
  1100015:  194:  }
        -:  195:
   220003:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   220003:  198:  return 0;
   220003:  199:}
        -:  200:
function shuffle called 661703 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   661703:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   661703:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
        9:  210:    return -1;
   661694:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 15302466:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
  6989539:  215:    card = floor(Random() * state->deckCount[player]);
  6989539:  216:    newDeck[newDeckPos] = state->deck[player][card];
  6989539:  217:    newDeckPos++;
107135148:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 87%
branch  1 taken 13%
 46578035:  219:      state->deck[player][i] = state->deck[player][i+1];
 46578035:  220:    }
  6989539:  221:    state->deckCount[player]--;
        -:  222:  }
 15302466:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
  6989539:  224:    state->deck[player][i] = newDeck[i];
  6989539:  225:    state->deckCount[player]++;
  6989539:  226:  }
        -:  227:
   661694:  228:  return 0;
   661703:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 60 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       60:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 220090 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
   220090:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      112:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 95%
branch  1 taken 5%
       53:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       53:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       53:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67%
branch  1 taken 33%
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        2:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       36:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
       15:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 122 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      122:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 30%
branch  1 taken 70%
        -:  396:    {
       37:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       85:  401:  j = 0;
     4420:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
     2125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12%
branch  1 taken 88%
        -:  405:	{
      252:  406:	  j++;
      252:  407:	}
     2125:  408:    }
       85:  409:  if ( j >= 3)
branch  0 taken 99%
branch  1 taken 1%
        -:  410:    {
       84:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
      122:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1920030 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1920030:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   780152:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
   388479:  534:      state->deck[player][i] = state->discard[player][i];
   388479:  535:      state->discard[player][i] = -1;
   388479:  536:    }
        -:  537:
     1597:  538:    state->deckCount[player] = state->discardCount[player];
     1597:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1597:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1597:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1597:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1597:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1597:  559:    if (deckCounter == 0)
branch  0 taken 1%
branch  1 taken 99%
        9:  560:      return -1;
        -:  561:
     1588:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1588:  563:    state->deckCount[player]--;
     1588:  564:    state->handCount[player]++;//Increment hand count
     1588:  565:  }
        -:  566:
        -:  567:  else{
  1918433:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1918433:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1918433:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1918433:  576:    state->deckCount[player]--;
  1918433:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1920021:  580:  return 0;
  1920030:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       27:  644:}
        -:  645:
function cardEffect called 220000 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   220000:  653:  int currentPlayer = whoseTurn(state);
   220000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   220000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   220000:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   220000:  660:  int z = 0;// this is the counter for the temp hand
   220000:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36%
branch  1 taken 64%
    79501:  662:    nextPlayer = 0;
    79501:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   220000:  667:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 91%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 9%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return playAdventurer(state, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    #####:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
    #####:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
    #####:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
   200000:  814:      return playSmithy(state, currentPlayer, handPos);
        -:  815:		
        -:  816:    case village:
    #####:  817:      return playVillage(state, currentPlayer, handPos);
        -:  818:		
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    #####:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  845:		isGameOver(state);
    #####:  846:	      }
    #####:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
    #####:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
    #####:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  862:	    isGameOver(state);
    #####:  863:	  }
    #####:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
    20000:  871:      return playGreatHall(state, currentPlayer, handPos);
        -:  872:		
        -:  873:    case minion:
        -:  874:      //+1 action
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:			
    #####:  880:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  state->coins = state->coins + 2;
    #####:  883:	}
        -:  884:			
    #####:  885:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  886:	{
        -:  887:	  //discard hand
    #####:  888:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(handPos, currentPlayer, state, 0);
        -:  891:	    }
        -:  892:				
        -:  893:	  //draw 4
    #####:  894:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      drawCard(currentPlayer, state);
    #####:  897:	    }
        -:  898:				
        -:  899:	  //other players discard hand and redraw if hand size > 4
    #####:  900:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  901:	    {
    #####:  902:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  903:		{
    #####:  904:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  905:		    {
        -:  906:		      //discard hand
    #####:  907:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  908:			{
    #####:  909:			  discardCard(handPos, i, state, 0);
        -:  910:			}
        -:  911:							
        -:  912:		      //draw 4
    #####:  913:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  914:			{
    #####:  915:			  drawCard(i, state);
    #####:  916:			}
    #####:  917:		    }
    #####:  918:		}
    #####:  919:	    }
        -:  920:				
    #####:  921:	}
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case steward:
    #####:  925:      return playSteward(state, currentPlayer, handPos, choice1, choice2);
        -:  926:		
        -:  927:    case tribute:
    #####:  928:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  929:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  930:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	  state->deckCount[nextPlayer]--;
    #####:  932:	}
    #####:  933:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  935:	  state->discardCount[nextPlayer]--;
    #####:  936:	}
        -:  937:	else{
        -:  938:	  //No Card to Reveal
        -:  939:	  if (DEBUG){
        -:  940:	    printf("No cards to reveal\n");
        -:  941:	  }
        -:  942:	}
    #####:  943:      }
        -:  944:	    
        -:  945:      else{
    #####:  946:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  948:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  949:	    state->deckCount[nextPlayer]++;
    #####:  950:	    state->discard[nextPlayer][i] = -1;
    #####:  951:	    state->discardCount[nextPlayer]--;
    #####:  952:	  }
        -:  953:			    
    #####:  954:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  955:	} 
    #####:  956:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  957:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  958:	state->deckCount[nextPlayer]--;
    #####:  959:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  961:	state->deckCount[nextPlayer]--;
        -:  962:      }    
        -:  963:		       
    #####:  964:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  965:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  966:	state->playedCardCount++;
    #####:  967:	tributeRevealedCards[1] = -1;
    #####:  968:      }
        -:  969:
    #####:  970:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  971:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  972:	  state->coins += 2;
    #####:  973:	}
        -:  974:		    
    #####:  975:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  976:	  drawCard(currentPlayer, state);
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	}
        -:  979:	else{//Action Card
    #####:  980:	  state->numActions = state->numActions + 2;
        -:  981:	}
    #####:  982:      }
        -:  983:	    
    #####:  984:      return 0;
        -:  985:		
        -:  986:    case ambassador:
    #####:  987:      j = 0;		//used to check if player has enough cards to discard
        -:  988:
    #####:  989:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  990:	{
    #####:  991:	  return -1;				
        -:  992:	}
        -:  993:
    #####:  994:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  return -1;
        -:  997:	}
        -:  998:
    #####:  999:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1002:	    {
    #####: 1003:	      j++;
    #####: 1004:	    }
    #####: 1005:	}
    #####: 1006:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  return -1;				
        -: 1009:	}
        -: 1010:
        -: 1011:      if (DEBUG) 
        -: 1012:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1013:
        -: 1014:      //increase supply count for choosen card by amount being discarded
    #####: 1015:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1016:			
        -: 1017:      //each other player gains a copy of revealed card
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1021:	    {
    #####: 1022:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
        -: 1026:      //discard played card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1028:
        -: 1029:      //trash copies of cards returned to supply
    #####: 1030:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	    {
    #####: 1034:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1035:		{
    #####: 1036:		  discardCard(i, currentPlayer, state, 1);
    #####: 1037:		  break;
        -: 1038:		}
    #####: 1039:	    }
    #####: 1040:	}			
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case cutpurse:
        -: 1045:
    #####: 1046:      updateCoins(currentPlayer, state, 2);
    #####: 1047:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1050:	    {
    #####: 1051:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1052:		{
    #####: 1053:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1054:		    {
    #####: 1055:		      discardCard(j, i, state, 0);
    #####: 1056:		      break;
        -: 1057:		    }
    #####: 1058:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1059:		    {
    #####: 1060:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1061:			{
        -: 1062:			  if (DEBUG)
        -: 1063:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1064:			}	
    #####: 1065:		      break;
        -: 1066:		    }		
    #####: 1067:		}
        -: 1068:					
    #####: 1069:	    }
        -: 1070:				
    #####: 1071:	}				
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
    #####: 1076:      return 0;
        -: 1077:
        -: 1078:		
        -: 1079:    case embargo: 
        -: 1080:      //+2 Coins
    #####: 1081:      state->coins = state->coins + 2;
        -: 1082:			
        -: 1083:      //see if selected pile is in play
    #####: 1084:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:			
        -: 1089:      //add embargo token to selected supply pile
    #####: 1090:      state->embargoTokens[choice1]++;
        -: 1091:			
        -: 1092:      //trash card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case outpost:
        -: 1097:      //set outpost flag
    #####: 1098:      state->outpostPlayed++;
        -: 1099:			
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1126:	}
    #####: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
    #####: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:	
    #####: 1161:  return -1;
   220000: 1162:}
        -: 1163:
function discardCard called 220000 returned 100% blocks executed 90%
        -: 1164:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1165:{
        -: 1166:	
        -: 1167:  //if card is not trashed, added to Played pile 
   220000: 1168:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1169:    {
        -: 1170:      //add card to played pile
   220000: 1171:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   220000: 1172:      state->playedCardCount++;
   220000: 1173:    }
        -: 1174:	
        -: 1175:  //set played card to -1
   220000: 1176:  state->hand[currentPlayer][handPos] = -1;
        -: 1177:	
        -: 1178:  //remove card from player's hand
   220000: 1179:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1180:    {
        -: 1181:      //reduce number of cards in hand
       28: 1182:      state->handCount[currentPlayer]--;
       28: 1183:    }
   219972: 1184:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
    #####: 1188:    }
        -: 1189:  else 	
        -: 1190:    {
        -: 1191:      //replace discarded card with last card in hand
   219972: 1192:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1193:      //set last card to -1
   219972: 1194:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1195:      //reduce number of cards in hand
   219972: 1196:      state->handCount[currentPlayer]--;
        -: 1197:    }
        -: 1198:	
   220000: 1199:  return 0;
        -: 1200:}
        -: 1201:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1202:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1203:{
        -: 1204:  //Note: supplyPos is enum of choosen card
        -: 1205:	
        -: 1206:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1207:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1208:    {
    #####: 1209:      return -1;
        -: 1210:    }
        -: 1211:	
        -: 1212:  //added card for [whoseTurn] current player:
        -: 1213:  // toFlag = 0 : add to discard
        -: 1214:  // toFlag = 1 : add to deck
        -: 1215:  // toFlag = 2 : add to hand
        -: 1216:
    #####: 1217:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1218:    {
    #####: 1219:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1220:      state->deckCount[player]++;
    #####: 1221:    }
    #####: 1222:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1225:      state->handCount[player]++;
    #####: 1226:    }
        -: 1227:  else
        -: 1228:    {
    #####: 1229:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1230:      state->discardCount[player]++;
        -: 1231:    }
        -: 1232:	
        -: 1233:  //decrease number in supply pile
    #####: 1234:  state->supplyCount[supplyPos]--;
        -: 1235:	 
    #####: 1236:  return 0;
    #####: 1237:}
        -: 1238:
function updateCoins called 220006 returned 100% blocks executed 85%
        -: 1239:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1240:{
        -: 1241:  int i;
        -: 1242:	
        -: 1243:  //reset coin count
   220006: 1244:  state->coins = 0;
        -: 1245:
        -: 1246:  //add coins for each Treasure card in player's hand
  2640072: 1247:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1248:    {
  1100030: 1249:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1250:	{
   770172: 1251:	  state->coins += 1;
   770172: 1252:	}
   329858: 1253:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1254:	{
    #####: 1255:	  state->coins += 2;
    #####: 1256:	}
   329858: 1257:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1258:	{
    #####: 1259:	  state->coins += 3;
    #####: 1260:	}	
  1100030: 1261:    }	
        -: 1262:
        -: 1263:  //add bonus
   220006: 1264:  state->coins += bonus;
        -: 1265:
   220006: 1266:  return 0;
        -: 1267:}
        -: 1268:
function playSmithy called 200000 returned 100% blocks executed 100%
        -: 1269:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1270:{
        -: 1271:	int i;
        -: 1272:    //+3 Cards
  2000000: 1273:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1274:    {
   800000: 1275:        drawCard(currentPlayer, state);
   800000: 1276:    }
        -: 1277:
        -: 1278:    //discard card from hand
   200000: 1279:    discardCard(handPos, currentPlayer, state, 0);
   200000: 1280:    return 0;
        -: 1281:}
        -: 1282:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1283:int playAdventurer(struct gameState *state, int drawntreasure, int currentPlayer, int cardDrawn, int temphand[], int z)
        -: 1284:{
    #####: 1285:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1286:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1287:            shuffle(currentPlayer, state);
    #####: 1288:        }
    #####: 1289:        drawCard(currentPlayer, state);
    #####: 1290:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1291:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1292:            drawntreasure++;
        -: 1293:        else{
    #####: 1294:            temphand[z]=cardDrawn;
    #####: 1295:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1296:            z++;
        -: 1297:        }
        -: 1298:    }
    #####: 1299:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1300:        z=z-1;
    #####: 1301:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -: 1302:    }
    #####: 1303:    return 0;
        -: 1304:}
        -: 1305:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1306:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -: 1307:{
        -: 1308:	int i;
        -: 1309:	
    #####: 1310:    for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1311:    {
    #####: 1312:        drawCard(currentPlayer, state);
    #####: 1313:    }
        -: 1314:
        -: 1315:
    #####: 1316:    for(i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:        state->numActions = state->numActions + 2;
    #####: 1319:    }
        -: 1320:
        -: 1321:    //discard played card from hand
    #####: 1322:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:    return 0;
        -: 1324:}
        -: 1325:
function playGreatHall called 20000 returned 100% blocks executed 100%
        -: 1326:int playGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -: 1327:{
    20000: 1328:    state->numActions++;
    20000: 1329:    state->numActions++;
        -: 1330:
    20000: 1331:    drawCard(currentPlayer, state);
        -: 1332:
    20000: 1333:    discardCard(handPos, currentPlayer, state, 0);
    20000: 1334:    return 0;
        -: 1335:}
        -: 1336:
function playSteward called 0 returned 0% blocks executed 0%
        -: 1337:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1338:{
        -: 1339:	int i;
        -: 1340:	
    #####: 1341:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1342:    {
    #####: 1343:        for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:        {
    #####: 1345:            drawCard(currentPlayer, state);
    #####: 1346:        }
    #####: 1347:    }
    #####: 1348:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1349:    {
    #####: 1350:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1351:        {
    #####: 1352:            state->coins = state->coins + 1;
    #####: 1353:        }
    #####: 1354:    }
        -: 1355:    else
        -: 1356:    {
    #####: 1357:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1358:        {
    #####: 1359:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1360:        }
        -: 1361:    }
        -: 1362:
        -: 1363:    //discard card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368://test line
        -: 1369://end of dominion.c
        -: 1370:
File 'randomtestcard2.c'
Lines executed:90.54% of 74
Branches executed:100.00% of 28
Taken at least once:89.29% of 28
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12://constants 
        -:   13:#define NUM_KING_CARDS 20
        -:   14:#define TEST_CARD great_hall
        -:   15:#define NUM_TESTS 20000
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 93%
        -:   18:int main() {
        -:   19:
        1:   20:	srand(time(NULL));
        -:   21:	struct gameState G, testG;
        1:   22:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:	int testcase, player, numPlayers, seed, testNum = 0, alreadyChosen, kcard, handPos, cardAcquired, coinsCounted, returnedVal, k_card_counter;
        1:   24:	int error_1_count = 0, error_2_count = 0, error_3_count = 0, error_4_count= 0;
        -:   25:	int kingdom_cards[10], supply[17];
        -:   26:	
    40002:   27:	for(testcase = 0; testcase < NUM_TESTS; testcase++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   28:
    20000:   29:		seed = rand();
    20000:   30:		numPlayers = (rand() % 3) + 2;
        -:   31:
   440000:   32:		for (int i = 0; i < 10; i++) 	//initialize kingdom cards 
branch  0 taken 91%
branch  1 taken 9%
   200000:   33:			kingdom_cards[i] = -1;
        -:   34:		
        -:   35:
        -:   36:		//randomize kingdom cards used in the game
        -:   37:
   585972:   38:		for (k_card_counter = 0; k_card_counter < 10; ) {
branch  0 taken 93%
branch  1 taken 7%
        -:   39:
        -:   40:			//draw a particular card by picking a random enum
   272986:   41:			kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   42:			
        -:   43:			//make sure its not the testCard
   574662:   44:			while (kcard == TEST_CARD) {
branch  0 taken 5%
branch  1 taken 95%
    14345:   45:				kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   46:			}
        -:   47:
   272986:   48:			alreadyChosen = -1;
        -:   49:
        -:   50:			//loop through cards to check if picked card has been chosen
  2759836:   51:			for (int j = 0; j < k_card_counter; j++) {
branch  0 taken 86%
branch  1 taken 14%
  1179918:   52:				if (kingdom_cards[j] == kcard)  {
branch  0 taken 6%
branch  1 taken 94%
    72986:   53:					alreadyChosen = 0;
    72986:   54:					break; 
        -:   55:				}
  1106932:   56:			}
        -:   57:
   272986:   58:			if (alreadyChosen == -1) {
branch  0 taken 73%
branch  1 taken 27%
        -:   59:
   200000:   60:				kingdom_cards[k_card_counter] = kcard; 
   200000:   61:				k_card_counter += 1; 
   200000:   62:			}
        -:   63:
        -:   64:		}
        -:   65:
        -:   66:		//randomnly replace 1 of the 10 cards with testCard
    20000:   67:		kingdom_cards[rand() % 10] = TEST_CARD;
        -:   68:
    20000:   69:		memset(&testG, 23, sizeof(struct gameState));
    20000:   70:		initializeGame(numPlayers, kingdom_cards, seed, &testG);
        -:   71:
    20000:   72:		testNum++;
    20000:   73:		printf("------Test#%d Great Hall Card--------\n", testNum);
        -:   74:
    20000:   75:		player = rand() % numPlayers;
    20000:   76:		testG.whoseTurn = player;
        -:   77:
    20000:   78:	    testG.deckCount[player] = rand() % MAX_DECK;
    20000:   79:		testG.discardCount[player] = rand() % MAX_DECK;
    20000:   80:	    testG.handCount[player] = rand() % MAX_HAND;
        -:   81:	    
        -:   82:
 10104138:   83:	   	for(int j = 0; j < testG.deckCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  5032069:   84:	        testG.deck[player][j] = rand() % 26;
        -:   85:	       
        -:   86:
 10025016:   87:	    for(int j = 0; j < testG.discardCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  4992508:   88:	    	testG.discard[player][j] = rand() % 26;
        -:   89:
        -:   90:
 10060042:   91:	    for(int j = 0; j < testG.handCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  5010021:   92:	        testG.hand[player][j] = rand() % 26;
        -:   93:
        -:   94:
    20000:   95:	    printf("Before playing smithy: player = %d; deck count = %d; discard count = %d; hand count = %d\n", player+1, testG.deckCount[player], testG.discardCount[player], testG.handCount[player]);
    20000:   96:	    printf("Playing now....\n");
        -:   97:		
        -:   98:
    20000:   99:		memcpy(&G, &testG, sizeof(struct gameState));
        -:  100:
    20000:  101:		printf("TEST#1 - CardEffect return\n");
    20000:  102:		returnedVal = cardEffect(great_hall, choice1, choice2, choice3, &testG, handPos, &bonus);
    20000:  103:		if (returnedVal != 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  104:			error_1_count++;
    #####:  105:			printf("ERROR#1 - CardEffect returned improperly.\n");
    #####:  106:		}
        -:  107:		else
    20000:  108:			printf("TEST#1 - Passed\n");
        -:  109:
    20000:  110:		printf("TEST#2 - changes in handCount\n");
        -:  111:
    20000:  112:		if (testG.handCount[G.whoseTurn] != G.handCount[G.whoseTurn]) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  113:				printf("ERROR#2 - player's handcount did not increment properly\n ");
    #####:  114:				error_2_count++;
    #####:  115:			}
        -:  116:		else
    20000:  117:			printf("TEST#2 - Passed\n");
        -:  118:
        -:  119:
        -:  120:
    20000:  121:		printf("TEST#3 - discarding of great_hall\n");
        -:  122:
    20000:  123:		if (testG.discard[G.whoseTurn][0] != great_hall) {
branch  0 taken 96%
branch  1 taken 4%
    19220:  124:				printf("ERROR#3 -  discarded cards are not the same: %d and %d\n", testG.discard[G.whoseTurn][0], great_hall);
    19220:  125:				error_3_count++;
    19220:  126:			}
        -:  127:		else
      780:  128:			printf("TEST#3 - Passed\n");
        -:  129:
    20000:  130:		printf("TEST#4 - increase in num of actions\n");
        -:  131:
    20000:  132:		if (testG.numActions != G.numActions+1) {
branch  0 taken 100%
branch  1 taken 0%
    20000:  133:				printf("ERROR#4 -  actions not incremented properly.\n");
    20000:  134:				error_4_count++;
    20000:  135:			}
        -:  136:		else
    #####:  137:			printf("TEST#4 - Passed\n");
        -:  138:
    20000:  139:	}
        -:  140:
        -:  141:	//print results of testing
        -:  142:
        1:  143:	printf("\n\n***************Random Testing Results Summary for great_hall card***************\n\n");
        1:  144:	printf("Error 1: %d\n", error_1_count);
        1:  145:	printf("Error 2: %d\n", error_2_count);
        1:  146:	printf("Error 3: %d\n", error_3_count);
        1:  147:	printf("Error 4: %d\n", error_4_count);
        -:  148:
        1:  149:	return 0;
        -:  150:
        -:  151:}
File 'dominion.c'
Lines executed:25.88% of 653
Branches executed:24.12% of 427
Taken at least once:17.80% of 427
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 11133328 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
 11133328:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7%
branch  1 taken 93%
   727908:   10:    return 1;
 10405420:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 39%
branch  1 taken 61%
  4026013:   12:    return -1;
  6379407:   13:  return 0;
 11133328:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 220000 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   220000:   44:  SelectStream(1);
   220000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   440000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   220000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4840000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
 48400000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
 41800000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 22000000:   65:        }
  2200000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   220000:   73:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
    73288:   75:      state->supplyCount[curse] = 10;
    73288:   76:    }
   146712:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
    73239:   79:      state->supplyCount[curse] = 20;
    73239:   80:    }
        -:   81:  else
        -:   82:    {
    73473:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   220000:   87:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
    73288:   89:      state->supplyCount[estate] = 8;
    73288:   90:      state->supplyCount[duchy] = 8;
    73288:   91:      state->supplyCount[province] = 8;
    73288:   92:    }
        -:   93:  else
        -:   94:    {
   146712:   95:      state->supplyCount[estate] = 12;
   146712:   96:      state->supplyCount[duchy] = 12;
   146712:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   220000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   220000:  102:  state->supplyCount[silver] = 40;
   220000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  9240000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
 72600000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
 34100000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  4285493:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 95%
        -:  114:		{
   218867:  115:		  if (numPlayers == 2){ 
branch  0 taken 33%
branch  1 taken 67%
    72517:  116:		    state->supplyCount[i] = 8; 
    72517:  117:		  }
   146350:  118:		  else{ state->supplyCount[i] = 12; }
   218867:  119:		}
        -:  120:	      else
        -:  121:		{
  1981133:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2200000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 31900000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 31900000:  130:	}
        -:  131:
  4400000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1760370:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
   660185:  140:      state->deckCount[i] = 0;
  5281480:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
  1980555:  143:	  state->deck[i][j] = estate;
  1980555:  144:	  state->deckCount[i]++;
  1980555:  145:	}
 10562960:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
  4621295:  148:	  state->deck[i][j] = copper;
  4621295:  149:	  state->deckCount[i]++;		
  4621295:  150:	}
   660185:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1760370:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
   660185:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   660185:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1760370:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   660185:  166:      state->handCount[i] = 0;
   660185:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   660185:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 12320000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
  5940000:  178:      state->embargoTokens[i] = 0;
  5940000:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   220000:  182:  state->outpostPlayed = 0;
   220000:  183:  state->phase = 0;
   220000:  184:  state->numActions = 1;
   220000:  185:  state->numBuys = 1;
   220000:  186:  state->playedCardCount = 0;
   220000:  187:  state->whoseTurn = 0;
   220000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2640000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
  1100000:  193:    drawCard(state->whoseTurn, state);
  1100000:  194:  }
        -:  195:
   220000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   220000:  198:  return 0;
   220000:  199:}
        -:  200:
function shuffle called 661878 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   661878:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   661878:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
        9:  210:    return -1;
   661869:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 15361896:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
  7019079:  215:    card = floor(Random() * state->deckCount[player]);
  7019079:  216:    newDeck[newDeckPos] = state->deck[player][card];
  7019079:  217:    newDeckPos++;
112798886:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 88%
branch  1 taken 12%
 49380364:  219:      state->deck[player][i] = state->deck[player][i+1];
 49380364:  220:    }
  7019079:  221:    state->deckCount[player]--;
        -:  222:  }
 15361896:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
  7019079:  224:    state->deck[player][i] = newDeck[i];
  7019079:  225:    state->deckCount[player]++;
  7019079:  226:  }
        -:  227:
   661869:  228:  return 0;
   661878:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 220000 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
   220000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1920000 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1920000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   837844:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
   417229:  534:      state->deck[player][i] = state->discard[player][i];
   417229:  535:      state->discard[player][i] = -1;
   417229:  536:    }
        -:  537:
     1693:  538:    state->deckCount[player] = state->discardCount[player];
     1693:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1693:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1693:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1693:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1693:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1693:  559:    if (deckCounter == 0)
branch  0 taken 1%
branch  1 taken 99%
        9:  560:      return -1;
        -:  561:
     1684:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1684:  563:    state->deckCount[player]--;
     1684:  564:    state->handCount[player]++;//Increment hand count
     1684:  565:  }
        -:  566:
        -:  567:  else{
  1918307:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1918307:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1918307:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1918307:  576:    state->deckCount[player]--;
  1918307:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1919991:  580:  return 0;
  1920000:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 220000 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   220000:  653:  int currentPlayer = whoseTurn(state);
   220000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   220000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   220000:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   220000:  660:  int z = 0;// this is the counter for the temp hand
   220000:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36%
branch  1 taken 64%
    79666:  662:    nextPlayer = 0;
    79666:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   220000:  667:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 91%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 9%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return playAdventurer(state, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    #####:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
    #####:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
    #####:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
   200000:  814:      return playSmithy(state, currentPlayer, handPos);
        -:  815:		
        -:  816:    case village:
    #####:  817:      return playVillage(state, currentPlayer, handPos);
        -:  818:		
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    #####:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  845:		isGameOver(state);
    #####:  846:	      }
    #####:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
    #####:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
    #####:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  862:	    isGameOver(state);
    #####:  863:	  }
    #####:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
    20000:  871:      return playGreatHall(state, currentPlayer, handPos);
        -:  872:		
        -:  873:    case minion:
        -:  874:      //+1 action
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:			
    #####:  880:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  state->coins = state->coins + 2;
    #####:  883:	}
        -:  884:			
    #####:  885:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  886:	{
        -:  887:	  //discard hand
    #####:  888:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(handPos, currentPlayer, state, 0);
        -:  891:	    }
        -:  892:				
        -:  893:	  //draw 4
    #####:  894:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      drawCard(currentPlayer, state);
    #####:  897:	    }
        -:  898:				
        -:  899:	  //other players discard hand and redraw if hand size > 4
    #####:  900:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  901:	    {
    #####:  902:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  903:		{
    #####:  904:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  905:		    {
        -:  906:		      //discard hand
    #####:  907:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  908:			{
    #####:  909:			  discardCard(handPos, i, state, 0);
        -:  910:			}
        -:  911:							
        -:  912:		      //draw 4
    #####:  913:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  914:			{
    #####:  915:			  drawCard(i, state);
    #####:  916:			}
    #####:  917:		    }
    #####:  918:		}
    #####:  919:	    }
        -:  920:				
    #####:  921:	}
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case steward:
    #####:  925:      return playSteward(state, currentPlayer, handPos, choice1, choice2);
        -:  926:		
        -:  927:    case tribute:
    #####:  928:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  929:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  930:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	  state->deckCount[nextPlayer]--;
    #####:  932:	}
    #####:  933:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  935:	  state->discardCount[nextPlayer]--;
    #####:  936:	}
        -:  937:	else{
        -:  938:	  //No Card to Reveal
        -:  939:	  if (DEBUG){
        -:  940:	    printf("No cards to reveal\n");
        -:  941:	  }
        -:  942:	}
    #####:  943:      }
        -:  944:	    
        -:  945:      else{
    #####:  946:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  948:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  949:	    state->deckCount[nextPlayer]++;
    #####:  950:	    state->discard[nextPlayer][i] = -1;
    #####:  951:	    state->discardCount[nextPlayer]--;
    #####:  952:	  }
        -:  953:			    
    #####:  954:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  955:	} 
    #####:  956:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  957:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  958:	state->deckCount[nextPlayer]--;
    #####:  959:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  961:	state->deckCount[nextPlayer]--;
        -:  962:      }    
        -:  963:		       
    #####:  964:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  965:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  966:	state->playedCardCount++;
    #####:  967:	tributeRevealedCards[1] = -1;
    #####:  968:      }
        -:  969:
    #####:  970:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  971:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  972:	  state->coins += 2;
    #####:  973:	}
        -:  974:		    
    #####:  975:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  976:	  drawCard(currentPlayer, state);
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	}
        -:  979:	else{//Action Card
    #####:  980:	  state->numActions = state->numActions + 2;
        -:  981:	}
    #####:  982:      }
        -:  983:	    
    #####:  984:      return 0;
        -:  985:		
        -:  986:    case ambassador:
    #####:  987:      j = 0;		//used to check if player has enough cards to discard
        -:  988:
    #####:  989:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  990:	{
    #####:  991:	  return -1;				
        -:  992:	}
        -:  993:
    #####:  994:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  return -1;
        -:  997:	}
        -:  998:
    #####:  999:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1002:	    {
    #####: 1003:	      j++;
    #####: 1004:	    }
    #####: 1005:	}
    #####: 1006:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  return -1;				
        -: 1009:	}
        -: 1010:
        -: 1011:      if (DEBUG) 
        -: 1012:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1013:
        -: 1014:      //increase supply count for choosen card by amount being discarded
    #####: 1015:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1016:			
        -: 1017:      //each other player gains a copy of revealed card
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1021:	    {
    #####: 1022:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
        -: 1026:      //discard played card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1028:
        -: 1029:      //trash copies of cards returned to supply
    #####: 1030:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	    {
    #####: 1034:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1035:		{
    #####: 1036:		  discardCard(i, currentPlayer, state, 1);
    #####: 1037:		  break;
        -: 1038:		}
    #####: 1039:	    }
    #####: 1040:	}			
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case cutpurse:
        -: 1045:
    #####: 1046:      updateCoins(currentPlayer, state, 2);
    #####: 1047:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1050:	    {
    #####: 1051:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1052:		{
    #####: 1053:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1054:		    {
    #####: 1055:		      discardCard(j, i, state, 0);
    #####: 1056:		      break;
        -: 1057:		    }
    #####: 1058:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1059:		    {
    #####: 1060:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1061:			{
        -: 1062:			  if (DEBUG)
        -: 1063:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1064:			}	
    #####: 1065:		      break;
        -: 1066:		    }		
    #####: 1067:		}
        -: 1068:					
    #####: 1069:	    }
        -: 1070:				
    #####: 1071:	}				
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
    #####: 1076:      return 0;
        -: 1077:
        -: 1078:		
        -: 1079:    case embargo: 
        -: 1080:      //+2 Coins
    #####: 1081:      state->coins = state->coins + 2;
        -: 1082:			
        -: 1083:      //see if selected pile is in play
    #####: 1084:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:			
        -: 1089:      //add embargo token to selected supply pile
    #####: 1090:      state->embargoTokens[choice1]++;
        -: 1091:			
        -: 1092:      //trash card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case outpost:
        -: 1097:      //set outpost flag
    #####: 1098:      state->outpostPlayed++;
        -: 1099:			
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1126:	}
    #####: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
    #####: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:	
    #####: 1161:  return -1;
   220000: 1162:}
        -: 1163:
function discardCard called 220000 returned 100% blocks executed 90%
        -: 1164:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1165:{
        -: 1166:	
        -: 1167:  //if card is not trashed, added to Played pile 
   220000: 1168:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1169:    {
        -: 1170:      //add card to played pile
   220000: 1171:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   220000: 1172:      state->playedCardCount++;
   220000: 1173:    }
        -: 1174:	
        -: 1175:  //set played card to -1
   220000: 1176:  state->hand[currentPlayer][handPos] = -1;
        -: 1177:	
        -: 1178:  //remove card from player's hand
   220000: 1179:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1180:    {
        -: 1181:      //reduce number of cards in hand
       44: 1182:      state->handCount[currentPlayer]--;
       44: 1183:    }
   219956: 1184:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
    #####: 1188:    }
        -: 1189:  else 	
        -: 1190:    {
        -: 1191:      //replace discarded card with last card in hand
   219956: 1192:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1193:      //set last card to -1
   219956: 1194:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1195:      //reduce number of cards in hand
   219956: 1196:      state->handCount[currentPlayer]--;
        -: 1197:    }
        -: 1198:	
   220000: 1199:  return 0;
        -: 1200:}
        -: 1201:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1202:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1203:{
        -: 1204:  //Note: supplyPos is enum of choosen card
        -: 1205:	
        -: 1206:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1207:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1208:    {
    #####: 1209:      return -1;
        -: 1210:    }
        -: 1211:	
        -: 1212:  //added card for [whoseTurn] current player:
        -: 1213:  // toFlag = 0 : add to discard
        -: 1214:  // toFlag = 1 : add to deck
        -: 1215:  // toFlag = 2 : add to hand
        -: 1216:
    #####: 1217:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1218:    {
    #####: 1219:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1220:      state->deckCount[player]++;
    #####: 1221:    }
    #####: 1222:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1225:      state->handCount[player]++;
    #####: 1226:    }
        -: 1227:  else
        -: 1228:    {
    #####: 1229:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1230:      state->discardCount[player]++;
        -: 1231:    }
        -: 1232:	
        -: 1233:  //decrease number in supply pile
    #####: 1234:  state->supplyCount[supplyPos]--;
        -: 1235:	 
    #####: 1236:  return 0;
    #####: 1237:}
        -: 1238:
function updateCoins called 220000 returned 100% blocks executed 85%
        -: 1239:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1240:{
        -: 1241:  int i;
        -: 1242:	
        -: 1243:  //reset coin count
   220000: 1244:  state->coins = 0;
        -: 1245:
        -: 1246:  //add coins for each Treasure card in player's hand
  2640000: 1247:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1248:    {
  1100000: 1249:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1250:	{
   770648: 1251:	  state->coins += 1;
   770648: 1252:	}
   329352: 1253:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1254:	{
    #####: 1255:	  state->coins += 2;
    #####: 1256:	}
   329352: 1257:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1258:	{
    #####: 1259:	  state->coins += 3;
    #####: 1260:	}	
  1100000: 1261:    }	
        -: 1262:
        -: 1263:  //add bonus
   220000: 1264:  state->coins += bonus;
        -: 1265:
   220000: 1266:  return 0;
        -: 1267:}
        -: 1268:
function playSmithy called 200000 returned 100% blocks executed 100%
        -: 1269:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1270:{
        -: 1271:	int i;
        -: 1272:    //+3 Cards
  2000000: 1273:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1274:    {
   800000: 1275:        drawCard(currentPlayer, state);
   800000: 1276:    }
        -: 1277:
        -: 1278:    //discard card from hand
   200000: 1279:    discardCard(handPos, currentPlayer, state, 0);
   200000: 1280:    return 0;
        -: 1281:}
        -: 1282:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1283:int playAdventurer(struct gameState *state, int drawntreasure, int currentPlayer, int cardDrawn, int temphand[], int z)
        -: 1284:{
    #####: 1285:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1286:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1287:            shuffle(currentPlayer, state);
    #####: 1288:        }
    #####: 1289:        drawCard(currentPlayer, state);
    #####: 1290:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1291:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1292:            drawntreasure++;
        -: 1293:        else{
    #####: 1294:            temphand[z]=cardDrawn;
    #####: 1295:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1296:            z++;
        -: 1297:        }
        -: 1298:    }
    #####: 1299:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1300:        z=z-1;
    #####: 1301:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -: 1302:    }
    #####: 1303:    return 0;
        -: 1304:}
        -: 1305:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1306:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -: 1307:{
        -: 1308:	int i;
        -: 1309:	
    #####: 1310:    for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1311:    {
    #####: 1312:        drawCard(currentPlayer, state);
    #####: 1313:    }
        -: 1314:
        -: 1315:
    #####: 1316:    for(i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:        state->numActions = state->numActions + 2;
    #####: 1319:    }
        -: 1320:
        -: 1321:    //discard played card from hand
    #####: 1322:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:    return 0;
        -: 1324:}
        -: 1325:
function playGreatHall called 20000 returned 100% blocks executed 100%
        -: 1326:int playGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -: 1327:{
    20000: 1328:    state->numActions++;
    20000: 1329:    state->numActions++;
        -: 1330:
    20000: 1331:    drawCard(currentPlayer, state);
        -: 1332:
    20000: 1333:    discardCard(handPos, currentPlayer, state, 0);
    20000: 1334:    return 0;
        -: 1335:}
        -: 1336:
function playSteward called 0 returned 0% blocks executed 0%
        -: 1337:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1338:{
        -: 1339:	int i;
        -: 1340:	
    #####: 1341:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1342:    {
    #####: 1343:        for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:        {
    #####: 1345:            drawCard(currentPlayer, state);
    #####: 1346:        }
    #####: 1347:    }
    #####: 1348:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1349:    {
    #####: 1350:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1351:        {
    #####: 1352:            state->coins = state->coins + 1;
    #####: 1353:        }
    #####: 1354:    }
        -: 1355:    else
        -: 1356:    {
    #####: 1357:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1358:        {
    #####: 1359:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1360:        }
        -: 1361:    }
        -: 1362:
        -: 1363:    //discard card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368://test line
        -: 1369://end of dominion.c
        -: 1370:
File 'randomtestcard2.c'
Lines executed:90.54% of 74
Branches executed:100.00% of 28
Taken at least once:89.29% of 28
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:
        -:   12://constants 
        -:   13:#define NUM_KING_CARDS 20
        -:   14:#define TEST_CARD great_hall
        -:   15:#define NUM_TESTS 20000
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 93%
        -:   18:int main() {
        -:   19:
        1:   20:	srand(time(NULL));
        -:   21:	struct gameState G, testG;
        1:   22:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   23:	int testcase, player, numPlayers, seed, testNum = 0, alreadyChosen, kcard, handPos, cardAcquired, coinsCounted, returnedVal, k_card_counter;
        1:   24:	int error_1_count = 0, error_2_count = 0, error_3_count = 0, error_4_count= 0;
        -:   25:	int kingdom_cards[10], supply[17];
        -:   26:	
    40002:   27:	for(testcase = 0; testcase < NUM_TESTS; testcase++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   28:
    20000:   29:		seed = rand();
    20000:   30:		numPlayers = (rand() % 3) + 2;
        -:   31:
   440000:   32:		for (int i = 0; i < 10; i++) 	//initialize kingdom cards 
branch  0 taken 91%
branch  1 taken 9%
   200000:   33:			kingdom_cards[i] = -1;
        -:   34:		
        -:   35:
        -:   36:		//randomize kingdom cards used in the game
        -:   37:
   584924:   38:		for (k_card_counter = 0; k_card_counter < 10; ) {
branch  0 taken 93%
branch  1 taken 7%
        -:   39:
        -:   40:			//draw a particular card by picking a random enum
   272462:   41:			kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   42:			
        -:   43:			//make sure its not the testCard
   573422:   44:			while (kcard == TEST_CARD) {
branch  0 taken 5%
branch  1 taken 95%
    14249:   45:				kcard = (rand() % NUM_KING_CARDS) + 7;
        -:   46:			}
        -:   47:
   272462:   48:			alreadyChosen = -1;
        -:   49:
        -:   50:			//loop through cards to check if picked card has been chosen
  2756610:   51:			for (int j = 0; j < k_card_counter; j++) {
branch  0 taken 85%
branch  1 taken 15%
  1178305:   52:				if (kingdom_cards[j] == kcard)  {
branch  0 taken 6%
branch  1 taken 94%
    72462:   53:					alreadyChosen = 0;
    72462:   54:					break; 
        -:   55:				}
  1105843:   56:			}
        -:   57:
   272462:   58:			if (alreadyChosen == -1) {
branch  0 taken 73%
branch  1 taken 27%
        -:   59:
   200000:   60:				kingdom_cards[k_card_counter] = kcard; 
   200000:   61:				k_card_counter += 1; 
   200000:   62:			}
        -:   63:
        -:   64:		}
        -:   65:
        -:   66:		//randomnly replace 1 of the 10 cards with testCard
    20000:   67:		kingdom_cards[rand() % 10] = TEST_CARD;
        -:   68:
    20000:   69:		memset(&testG, 23, sizeof(struct gameState));
    20000:   70:		initializeGame(numPlayers, kingdom_cards, seed, &testG);
        -:   71:
    20000:   72:		testNum++;
    20000:   73:		printf("------Test#%d Great Hall Card--------\n", testNum);
        -:   74:
    20000:   75:		player = rand() % numPlayers;
    20000:   76:		testG.whoseTurn = player;
        -:   77:
    20000:   78:	    testG.deckCount[player] = rand() % MAX_DECK;
    20000:   79:		testG.discardCount[player] = rand() % MAX_DECK;
    20000:   80:	    testG.handCount[player] = rand() % MAX_HAND;
        -:   81:	    
        -:   82:
  9985032:   83:	   	for(int j = 0; j < testG.deckCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  4972516:   84:	        testG.deck[player][j] = rand() % 26;
        -:   85:	       
        -:   86:
 10018906:   87:	    for(int j = 0; j < testG.discardCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  4989453:   88:	    	testG.discard[player][j] = rand() % 26;
        -:   89:
        -:   90:
  9969460:   91:	    for(int j = 0; j < testG.handCount[player]; j++)
branch  0 taken 99%
branch  1 taken 1%
  4964730:   92:	        testG.hand[player][j] = rand() % 26;
        -:   93:
        -:   94:
    20000:   95:	    printf("Before playing smithy: player = %d; deck count = %d; discard count = %d; hand count = %d\n", player+1, testG.deckCount[player], testG.discardCount[player], testG.handCount[player]);
    20000:   96:	    printf("Playing now....\n");
        -:   97:		
        -:   98:
    20000:   99:		memcpy(&G, &testG, sizeof(struct gameState));
        -:  100:
    20000:  101:		printf("TEST#1 - CardEffect return\n");
    20000:  102:		returnedVal = cardEffect(great_hall, choice1, choice2, choice3, &testG, handPos, &bonus);
    20000:  103:		if (returnedVal != 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  104:			error_1_count++;
    #####:  105:			printf("ERROR#1 - CardEffect returned improperly.\n");
    #####:  106:		}
        -:  107:		else
    20000:  108:			printf("TEST#1 - Passed\n");
        -:  109:
    20000:  110:		printf("TEST#2 - changes in handCount\n");
        -:  111:
    20000:  112:		if (testG.handCount[G.whoseTurn] != G.handCount[G.whoseTurn]) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  113:				printf("ERROR#2 - player's handcount did not increment properly\n ");
    #####:  114:				error_2_count++;
    #####:  115:			}
        -:  116:		else
    20000:  117:			printf("TEST#2 - Passed\n");
        -:  118:
        -:  119:
        -:  120:
    20000:  121:		printf("TEST#3 - discarding of great_hall\n");
        -:  122:
    20000:  123:		if (testG.discard[G.whoseTurn][0] != great_hall) {
branch  0 taken 96%
branch  1 taken 4%
    19220:  124:				printf("ERROR#3 -  discarded cards are not the same: %d and %d\n", testG.discard[G.whoseTurn][0], great_hall);
    19220:  125:				error_3_count++;
    19220:  126:			}
        -:  127:		else
      780:  128:			printf("TEST#3 - Passed\n");
        -:  129:
    20000:  130:		printf("TEST#4 - increase in num of actions\n");
        -:  131:
    20000:  132:		if (testG.numActions != G.numActions+1) {
branch  0 taken 100%
branch  1 taken 0%
    20000:  133:				printf("ERROR#4 -  actions not incremented properly.\n");
    20000:  134:				error_4_count++;
    20000:  135:			}
        -:  136:		else
    #####:  137:			printf("TEST#4 - Passed\n");
        -:  138:
    20000:  139:	}
        -:  140:
        -:  141:	//print results of testing
        -:  142:
        1:  143:	printf("\n\n***************Random Testing Results Summary for great_hall card***************\n\n");
        1:  144:	printf("Error 1: %d\n", error_1_count);
        1:  145:	printf("Error 2: %d\n", error_2_count);
        1:  146:	printf("Error 3: %d\n", error_3_count);
        1:  147:	printf("Error 4: %d\n", error_4_count);
        -:  148:
        1:  149:	return 0;
        -:  150:
        -:  151:}
File 'dominion.c'
Lines executed:25.88% of 653
Branches executed:24.12% of 427
Taken at least once:17.80% of 427
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 11123316 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
 11123316:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 7%
branch  1 taken 93%
   729879:   10:    return 1;
 10393437:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 39%
branch  1 taken 61%
  4016505:   12:    return -1;
  6376932:   13:  return 0;
 11123316:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 220000 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   220000:   44:  SelectStream(1);
   220000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   440000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
   220000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  4840000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
 48400000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
 41800000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
 22000000:   65:        }
  2200000:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
   220000:   73:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
    73530:   75:      state->supplyCount[curse] = 10;
    73530:   76:    }
   146470:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
    72970:   79:      state->supplyCount[curse] = 20;
    72970:   80:    }
        -:   81:  else
        -:   82:    {
    73500:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
   220000:   87:  if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
    73530:   89:      state->supplyCount[estate] = 8;
    73530:   90:      state->supplyCount[duchy] = 8;
    73530:   91:      state->supplyCount[province] = 8;
    73530:   92:    }
        -:   93:  else
        -:   94:    {
   146470:   95:      state->supplyCount[estate] = 12;
   146470:   96:      state->supplyCount[duchy] = 12;
   146470:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
   220000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   220000:  102:  state->supplyCount[silver] = 40;
   220000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  9240000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
 72600000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
 34100000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  4285439:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 95%
        -:  114:		{
   218943:  115:		  if (numPlayers == 2){ 
branch  0 taken 33%
branch  1 taken 67%
    73172:  116:		    state->supplyCount[i] = 8; 
    73172:  117:		  }
   145771:  118:		  else{ state->supplyCount[i] = 12; }
   218943:  119:		}
        -:  120:	      else
        -:  121:		{
  1981057:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
  2200000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
 31900000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
 31900000:  130:	}
        -:  131:
  4400000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
  1759940:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
   659970:  140:      state->deckCount[i] = 0;
  5279760:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
  1979910:  143:	  state->deck[i][j] = estate;
  1979910:  144:	  state->deckCount[i]++;
  1979910:  145:	}
 10559520:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
  4619790:  148:	  state->deck[i][j] = copper;
  4619790:  149:	  state->deckCount[i]++;		
  4619790:  150:	}
   659970:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
  1759940:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
   659970:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   659970:  160:    }
        -:  161:
        -:  162:  //draw player hands
  1759940:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   659970:  166:      state->handCount[i] = 0;
   659970:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   659970:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 12320000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
  5940000:  178:      state->embargoTokens[i] = 0;
  5940000:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
   220000:  182:  state->outpostPlayed = 0;
   220000:  183:  state->phase = 0;
   220000:  184:  state->numActions = 1;
   220000:  185:  state->numBuys = 1;
   220000:  186:  state->playedCardCount = 0;
   220000:  187:  state->whoseTurn = 0;
   220000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
  2640000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
  1100000:  193:    drawCard(state->whoseTurn, state);
  1100000:  194:  }
        -:  195:
   220000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
   220000:  198:  return 0;
   220000:  199:}
        -:  200:
function shuffle called 661633 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   661633:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   661633:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
       12:  210:    return -1;
   661621:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
 15354938:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
  7015848:  215:    card = floor(Random() * state->deckCount[player]);
  7015848:  216:    newDeck[newDeckPos] = state->deck[player][card];
  7015848:  217:    newDeckPos++;
112799990:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 88%
branch  1 taken 12%
 49384147:  219:      state->deck[player][i] = state->deck[player][i+1];
 49384147:  220:    }
  7015848:  221:    state->deckCount[player]--;
        -:  222:  }
 15354938:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
  7015848:  224:    state->deck[player][i] = newDeck[i];
  7015848:  225:    state->deckCount[player]++;
  7015848:  226:  }
        -:  227:
   661621:  228:  return 0;
   661633:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 220000 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
   220000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1920000 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1920000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   835622:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
   416148:  534:      state->deck[player][i] = state->discard[player][i];
   416148:  535:      state->discard[player][i] = -1;
   416148:  536:    }
        -:  537:
     1663:  538:    state->deckCount[player] = state->discardCount[player];
     1663:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1663:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1663:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1663:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1663:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1663:  559:    if (deckCounter == 0)
branch  0 taken 1%
branch  1 taken 99%
       12:  560:      return -1;
        -:  561:
     1651:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1651:  563:    state->deckCount[player]--;
     1651:  564:    state->handCount[player]++;//Increment hand count
     1651:  565:  }
        -:  566:
        -:  567:  else{
  1918337:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  1918337:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1918337:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1918337:  576:    state->deckCount[player]--;
  1918337:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  1919988:  580:  return 0;
  1920000:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 220000 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
   220000:  653:  int currentPlayer = whoseTurn(state);
   220000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
   220000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
   220000:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
   220000:  660:  int z = 0;// this is the counter for the temp hand
   220000:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36%
branch  1 taken 64%
    79576:  662:    nextPlayer = 0;
    79576:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
   220000:  667:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 91%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 9%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      return playAdventurer(state, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    #####:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
    #####:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
    #####:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
   200000:  814:      return playSmithy(state, currentPlayer, handPos);
        -:  815:		
        -:  816:    case village:
    #####:  817:      return playVillage(state, currentPlayer, handPos);
        -:  818:		
        -:  819:    case baron:
    #####:  820:      state->numBuys++;//Increase buys by 1!
    #####:  821:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  822:	int p = 0;//Iterator for hand!
    #####:  823:	int card_not_discarded = 1;//Flag for discard set!
    #####:  824:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  825:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  826:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  827:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  828:	    state->discardCount[currentPlayer]++;
    #####:  829:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  830:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  831:	    }
    #####:  832:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:	    state->handCount[currentPlayer]--;
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    #####:  835:	  }
    #####:  836:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  837:	    if(DEBUG) {
        -:  838:	      printf("No estate cards in your hand, invalid choice\n");
        -:  839:	      printf("Must gain an estate if there are any\n");
        -:  840:	    }
    #####:  841:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  842:	      gainCard(estate, state, 0, currentPlayer);
    #####:  843:	      state->supplyCount[estate]--;//Decrement estates
    #####:  844:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  845:		isGameOver(state);
    #####:  846:	      }
    #####:  847:	    }
    #####:  848:	    card_not_discarded = 0;//Exit the loop
    #####:  849:	  }
        -:  850:			    
        -:  851:	  else{
    #####:  852:	    p++;//Next card
        -:  853:	  }
        -:  854:	}
    #####:  855:      }
        -:  856:			    
        -:  857:      else{
    #####:  858:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  859:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  860:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  861:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  862:	    isGameOver(state);
    #####:  863:	  }
    #####:  864:	}
        -:  865:      }
        -:  866:	    
        -:  867:      
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case great_hall:
    20000:  871:      return playGreatHall(state, currentPlayer, handPos);
        -:  872:		
        -:  873:    case minion:
        -:  874:      //+1 action
    #####:  875:      state->numActions++;
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:			
    #####:  880:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  881:	{
    #####:  882:	  state->coins = state->coins + 2;
    #####:  883:	}
        -:  884:			
    #####:  885:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  886:	{
        -:  887:	  //discard hand
    #####:  888:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      discardCard(handPos, currentPlayer, state, 0);
        -:  891:	    }
        -:  892:				
        -:  893:	  //draw 4
    #####:  894:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      drawCard(currentPlayer, state);
    #####:  897:	    }
        -:  898:				
        -:  899:	  //other players discard hand and redraw if hand size > 4
    #####:  900:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  901:	    {
    #####:  902:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  903:		{
    #####:  904:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  905:		    {
        -:  906:		      //discard hand
    #####:  907:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  908:			{
    #####:  909:			  discardCard(handPos, i, state, 0);
        -:  910:			}
        -:  911:							
        -:  912:		      //draw 4
    #####:  913:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  914:			{
    #####:  915:			  drawCard(i, state);
    #####:  916:			}
    #####:  917:		    }
    #####:  918:		}
    #####:  919:	    }
        -:  920:				
    #####:  921:	}
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case steward:
    #####:  925:      return playSteward(state, currentPlayer, handPos, choice1, choice2);
        -:  926:		
        -:  927:    case tribute:
    #####:  928:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  929:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  930:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	  state->deckCount[nextPlayer]--;
    #####:  932:	}
    #####:  933:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  935:	  state->discardCount[nextPlayer]--;
    #####:  936:	}
        -:  937:	else{
        -:  938:	  //No Card to Reveal
        -:  939:	  if (DEBUG){
        -:  940:	    printf("No cards to reveal\n");
        -:  941:	  }
        -:  942:	}
    #####:  943:      }
        -:  944:	    
        -:  945:      else{
    #####:  946:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  948:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  949:	    state->deckCount[nextPlayer]++;
    #####:  950:	    state->discard[nextPlayer][i] = -1;
    #####:  951:	    state->discardCount[nextPlayer]--;
    #####:  952:	  }
        -:  953:			    
    #####:  954:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  955:	} 
    #####:  956:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  957:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  958:	state->deckCount[nextPlayer]--;
    #####:  959:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  961:	state->deckCount[nextPlayer]--;
        -:  962:      }    
        -:  963:		       
    #####:  964:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  965:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  966:	state->playedCardCount++;
    #####:  967:	tributeRevealedCards[1] = -1;
    #####:  968:      }
        -:  969:
    #####:  970:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  971:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  972:	  state->coins += 2;
    #####:  973:	}
        -:  974:		    
    #####:  975:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  976:	  drawCard(currentPlayer, state);
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	}
        -:  979:	else{//Action Card
    #####:  980:	  state->numActions = state->numActions + 2;
        -:  981:	}
    #####:  982:      }
        -:  983:	    
    #####:  984:      return 0;
        -:  985:		
        -:  986:    case ambassador:
    #####:  987:      j = 0;		//used to check if player has enough cards to discard
        -:  988:
    #####:  989:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  990:	{
    #####:  991:	  return -1;				
        -:  992:	}
        -:  993:
    #####:  994:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  return -1;
        -:  997:	}
        -:  998:
    #####:  999:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1002:	    {
    #####: 1003:	      j++;
    #####: 1004:	    }
    #####: 1005:	}
    #####: 1006:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  return -1;				
        -: 1009:	}
        -: 1010:
        -: 1011:      if (DEBUG) 
        -: 1012:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1013:
        -: 1014:      //increase supply count for choosen card by amount being discarded
    #####: 1015:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1016:			
        -: 1017:      //each other player gains a copy of revealed card
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1021:	    {
    #####: 1022:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1023:	    }
    #####: 1024:	}
        -: 1025:
        -: 1026:      //discard played card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1028:
        -: 1029:      //trash copies of cards returned to supply
    #####: 1030:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	    {
    #####: 1034:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1035:		{
    #####: 1036:		  discardCard(i, currentPlayer, state, 1);
    #####: 1037:		  break;
        -: 1038:		}
    #####: 1039:	    }
    #####: 1040:	}			
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case cutpurse:
        -: 1045:
    #####: 1046:      updateCoins(currentPlayer, state, 2);
    #####: 1047:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1050:	    {
    #####: 1051:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1052:		{
    #####: 1053:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1054:		    {
    #####: 1055:		      discardCard(j, i, state, 0);
    #####: 1056:		      break;
        -: 1057:		    }
    #####: 1058:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1059:		    {
    #####: 1060:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1061:			{
        -: 1062:			  if (DEBUG)
        -: 1063:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1064:			}	
    #####: 1065:		      break;
        -: 1066:		    }		
    #####: 1067:		}
        -: 1068:					
    #####: 1069:	    }
        -: 1070:				
    #####: 1071:	}				
        -: 1072:
        -: 1073:      //discard played card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1075:
    #####: 1076:      return 0;
        -: 1077:
        -: 1078:		
        -: 1079:    case embargo: 
        -: 1080:      //+2 Coins
    #####: 1081:      state->coins = state->coins + 2;
        -: 1082:			
        -: 1083:      //see if selected pile is in play
    #####: 1084:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:			
        -: 1089:      //add embargo token to selected supply pile
    #####: 1090:      state->embargoTokens[choice1]++;
        -: 1091:			
        -: 1092:      //trash card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case outpost:
        -: 1097:      //set outpost flag
    #####: 1098:      state->outpostPlayed++;
        -: 1099:			
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1126:	}
    #####: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
    #####: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:	
    #####: 1161:  return -1;
   220000: 1162:}
        -: 1163:
function discardCard called 220000 returned 100% blocks executed 90%
        -: 1164:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1165:{
        -: 1166:	
        -: 1167:  //if card is not trashed, added to Played pile 
   220000: 1168:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1169:    {
        -: 1170:      //add card to played pile
   220000: 1171:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   220000: 1172:      state->playedCardCount++;
   220000: 1173:    }
        -: 1174:	
        -: 1175:  //set played card to -1
   220000: 1176:  state->hand[currentPlayer][handPos] = -1;
        -: 1177:	
        -: 1178:  //remove card from player's hand
   220000: 1179:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1180:    {
        -: 1181:      //reduce number of cards in hand
       47: 1182:      state->handCount[currentPlayer]--;
       47: 1183:    }
   219953: 1184:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
    #####: 1187:      state->handCount[currentPlayer]--;
    #####: 1188:    }
        -: 1189:  else 	
        -: 1190:    {
        -: 1191:      //replace discarded card with last card in hand
   219953: 1192:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1193:      //set last card to -1
   219953: 1194:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1195:      //reduce number of cards in hand
   219953: 1196:      state->handCount[currentPlayer]--;
        -: 1197:    }
        -: 1198:	
   220000: 1199:  return 0;
        -: 1200:}
        -: 1201:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1202:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1203:{
        -: 1204:  //Note: supplyPos is enum of choosen card
        -: 1205:	
        -: 1206:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1207:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1208:    {
    #####: 1209:      return -1;
        -: 1210:    }
        -: 1211:	
        -: 1212:  //added card for [whoseTurn] current player:
        -: 1213:  // toFlag = 0 : add to discard
        -: 1214:  // toFlag = 1 : add to deck
        -: 1215:  // toFlag = 2 : add to hand
        -: 1216:
    #####: 1217:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1218:    {
    #####: 1219:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1220:      state->deckCount[player]++;
    #####: 1221:    }
    #####: 1222:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1223:    {
    #####: 1224:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1225:      state->handCount[player]++;
    #####: 1226:    }
        -: 1227:  else
        -: 1228:    {
    #####: 1229:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1230:      state->discardCount[player]++;
        -: 1231:    }
        -: 1232:	
        -: 1233:  //decrease number in supply pile
    #####: 1234:  state->supplyCount[supplyPos]--;
        -: 1235:	 
    #####: 1236:  return 0;
    #####: 1237:}
        -: 1238:
function updateCoins called 220000 returned 100% blocks executed 85%
        -: 1239:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1240:{
        -: 1241:  int i;
        -: 1242:	
        -: 1243:  //reset coin count
   220000: 1244:  state->coins = 0;
        -: 1245:
        -: 1246:  //add coins for each Treasure card in player's hand
  2640000: 1247:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1248:    {
  1100000: 1249:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1250:	{
   769861: 1251:	  state->coins += 1;
   769861: 1252:	}
   330139: 1253:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1254:	{
    #####: 1255:	  state->coins += 2;
    #####: 1256:	}
   330139: 1257:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1258:	{
    #####: 1259:	  state->coins += 3;
    #####: 1260:	}	
  1100000: 1261:    }	
        -: 1262:
        -: 1263:  //add bonus
   220000: 1264:  state->coins += bonus;
        -: 1265:
   220000: 1266:  return 0;
        -: 1267:}
        -: 1268:
function playSmithy called 200000 returned 100% blocks executed 100%
        -: 1269:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1270:{
        -: 1271:	int i;
        -: 1272:    //+3 Cards
  2000000: 1273:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1274:    {
   800000: 1275:        drawCard(currentPlayer, state);
   800000: 1276:    }
        -: 1277:
        -: 1278:    //discard card from hand
   200000: 1279:    discardCard(handPos, currentPlayer, state, 0);
   200000: 1280:    return 0;
        -: 1281:}
        -: 1282:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1283:int playAdventurer(struct gameState *state, int drawntreasure, int currentPlayer, int cardDrawn, int temphand[], int z)
        -: 1284:{
    #####: 1285:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1286:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1287:            shuffle(currentPlayer, state);
    #####: 1288:        }
    #####: 1289:        drawCard(currentPlayer, state);
    #####: 1290:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1291:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1292:            drawntreasure++;
        -: 1293:        else{
    #####: 1294:            temphand[z]=cardDrawn;
    #####: 1295:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1296:            z++;
        -: 1297:        }
        -: 1298:    }
    #####: 1299:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1300:        z=z-1;
    #####: 1301:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -: 1302:    }
    #####: 1303:    return 0;
        -: 1304:}
        -: 1305:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1306:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -: 1307:{
        -: 1308:	int i;
        -: 1309:	
    #####: 1310:    for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1311:    {
    #####: 1312:        drawCard(currentPlayer, state);
    #####: 1313:    }
        -: 1314:
        -: 1315:
    #####: 1316:    for(i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:        state->numActions = state->numActions + 2;
    #####: 1319:    }
        -: 1320:
        -: 1321:    //discard played card from hand
    #####: 1322:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:    return 0;
        -: 1324:}
        -: 1325:
function playGreatHall called 20000 returned 100% blocks executed 100%
        -: 1326:int playGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -: 1327:{
    20000: 1328:    state->numActions++;
    20000: 1329:    state->numActions++;
        -: 1330:
    20000: 1331:    drawCard(currentPlayer, state);
        -: 1332:
    20000: 1333:    discardCard(handPos, currentPlayer, state, 0);
    20000: 1334:    return 0;
        -: 1335:}
        -: 1336:
function playSteward called 0 returned 0% blocks executed 0%
        -: 1337:int playSteward(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1338:{
        -: 1339:	int i;
        -: 1340:	
    #####: 1341:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1342:    {
    #####: 1343:        for(i = 0; i < 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:        {
    #####: 1345:            drawCard(currentPlayer, state);
    #####: 1346:        }
    #####: 1347:    }
    #####: 1348:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1349:    {
    #####: 1350:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1351:        {
    #####: 1352:            state->coins = state->coins + 1;
    #####: 1353:        }
    #####: 1354:    }
        -: 1355:    else
        -: 1356:    {
    #####: 1357:        for(i = 0; i <= 1; i++)
branch  0 never executed
branch  1 never executed
        -: 1358:        {
    #####: 1359:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1360:        }
        -: 1361:    }
        -: 1362:
        -: 1363:    //discard card from hand
    #####: 1364:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:    return 0;
        -: 1366:}
        -: 1367:
        -: 1368://test line
        -: 1369://end of dominion.c
        -: 1370:
