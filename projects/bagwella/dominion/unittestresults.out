*************************************
unitTest1:
TESTING -- testing numHandCards -- BEGIN
TESTING - if numHandCards returns valid number of start cards (5). 
Test Case - PASSED
TESTING - if numHandCards accurately returns additions to hand. 
TESTING - if Player 1 has 6 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 7 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 8 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 9 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 10 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 11 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 12 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 13 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 14 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 15 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 16 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 17 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 18 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 19 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 20 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 21 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 22 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 23 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 24 cards in hand.
Test Case - PASSED
Ending turn. 
TESTING - if numHandCards returns valid number of start cards (5) after turn change 
Test Case - PASSED
TESTING - if numHandCards accurately returns additions to hand. 
TESTING - if Player 2 has 6 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 7 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 8 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 9 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 10 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 11 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 12 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 13 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 14 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 15 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 16 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 17 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 18 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 19 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 20 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 21 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 22 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 23 cards in hand.
Test Case - PASSED
TESTING - if Player 2 has 24 cards in hand.
Test Case - PASSED
Ending turn. 
TESTING - if numHandCards returns valid number of start cards (5) after turn change 
Test Case - PASSED
TESTING - if numHandCards accurately returns additions to hand. 
TESTING - if Player 1 has 6 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 7 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 8 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 9 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 10 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 11 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 12 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 13 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 14 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 15 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 16 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 17 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 18 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 19 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 20 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 21 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 22 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 23 cards in hand.
Test Case - PASSED
TESTING - if Player 1 has 24 cards in hand.
Test Case - PASSED
TESTING--numHandCards -- COMPLETE

*************************************
unitTest2:
TESTING -- testing getCost() -- BEGIN
TESTING - getCost function - cost of each card. 
TESTING - cost for card # 0
Test Case - PASSED
TESTING - cost for card # 1
Test Case - PASSED
TESTING - cost for card # 2
Test Case - PASSED
TESTING - cost for card # 3
Test Case - PASSED
TESTING - cost for card # 4
Test Case - PASSED
TESTING - cost for card # 5
Test Case - PASSED
TESTING - cost for card # 6
Test Case - PASSED
TESTING - cost for card # 7
Test Case - PASSED
TESTING - cost for card # 8
Test Case - PASSED
TESTING - cost for card # 9
Test Case - PASSED
TESTING - cost for card # 10
Test Case - PASSED
TESTING - cost for card # 11
Test Case - PASSED
TESTING - cost for card # 12
Test Case - PASSED
TESTING - cost for card # 13
Test Case - PASSED
TESTING - cost for card # 14
Test Case - PASSED
TESTING - cost for card # 15
Test Case - PASSED
TESTING - cost for card # 16
Test Case - PASSED
TESTING - cost for card # 17
Test Case - PASSED
TESTING - cost for card # 18
Test Case - PASSED
TESTING - cost for card # 19
Test Case - PASSED
TESTING - cost for card # 20
Test Case - PASSED
TESTING - cost for card # 21
Test Case - PASSED
TESTING - cost for card # 22
Test Case - PASSED
TESTING - cost for card # 23
Test Case - PASSED
TESTING - cost for card # 24
Test Case - PASSED
TESTING - cost for card # 25
Test Case - PASSED
TESTING - cost for card # 26
Test Case - PASSED
TESTING--getCost() -- COMPLETE

*************************************
unitTest3:
TESTING -- testing whoseTurn() -- BEGIN
TESTING - whoseTurn() executes successfully
Test Case - PASSED
TESTING - whoseTurn() changes 
TESTING - 0 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 1 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 2 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 3 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 4 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 5 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 6 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 7 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 8 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 9 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 10 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 11 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 12 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 13 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 14 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 15 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 16 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 17 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 18 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 19 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 20 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 21 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 22 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 23 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 24 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 25 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING - 26 whoseTurn after manual change to gameState property...
Test Case - PASSED
TESTING--getCost() -- COMPLETE

*************************************
unittest4:
TESTING -- isGameOver() function -- BEGIN
TESTING - isGameOver() returns 0 at start of newGame
Test Case - PASSED
TESTING - isGameOver() returns 1 at after setting count of province cards to 0
Test Case - PASSED
TESTING - isGameOver() returns 1 if supplyCount is 0
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
Testing - isGameOver() returns 1 if 3 Kingdom cards are 0
Test Case - PASSED
TESTING -- isGameOver() function -- COMPLETE

*************************************
cardtest1:
TESTING -- Smithy card -- BEGIN
TESTING - playSmithy() executes successfully
Test Case - PASSED
TESTING - playSmithy()'s incrementing of handCount by drawing 3 cards 
Test Case - PASSED
TESTING - playSmity() decreases the deckCount
Test Case - FAILED
TESTING - playSmithy() discarded the smithy card
Test Case - FAILED
TESTING--Smithy card -- COMPLETE

*************************************
cardtest2:
TESTING -- adventurer card -- BEGIN
Calling playAdventurer..
TESTING - playAdventurer() executes properly
Test Case - PASSED
TESTING - playAdventurer()'s incrementing of handCount
Test Case - FAILED
TESTING - playAdventurer adding treasure cards to player's hand
Test Case - PASSED
TESTING - playAdventurer()'s discarding until 2 treasure cards are found
Test Case - FAILED
TESTING--adventurer card -- COMPLETE

*************************************
cardtest3:
TESTING -- council_room card -- BEGIN
TESTING - council_room executes successfully
Test Case - PASSED
TESTING - council_room's increase of handCount of owner +3 
Test Case - PASSED
TESTING - council_room's increase of buys +1 
Test Case - PASSED
TESTING - council_room's increase of handCount for other players +1 
Test Case - PASSED
TESTING - council_room is discarded
Test Case - FAILED
TESTING--council_room card -- COMPLETE

*************************************
cardtest4:
TESTING -- great_hall card -- BEGIN
Calling the great_hall card..
TESTING - great_hall executes successfully
Test Case - PASSED
TESTING - great_hall changes handCount by drawing card
Test Case - PASSED
TESTING - great_hall is discarded
Test Case - FAILED
TESTING - great_hall increases numActions for player +1
Test Case - PASSED
TESTING--great_hall card -- COMPLETE

File 'dominion.c'
Lines executed:34.96% of 655
Branches executed:38.39% of 422
Taken at least once:28.91% of 422
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 196 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      196:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      196:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       70:   12:    return -1;
      126:   13:  return 0;
      196:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1330:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      700:   65:        }
       70:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        7:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        7:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      133:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       14:  116:		    state->supplyCount[i] = 8; 
       14:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       14:  119:		}
        -:  120:	      else
        -:  121:		{
       56:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     1015:  130:	}
        -:  131:
      140:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       42:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
      112:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
       42:  145:	}
      224:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
       98:  150:	}
       14:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       42:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       14:  160:    }
        -:  161:
        -:  162:  //draw player hands
       42:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       14:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
      189:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       35:  193:    drawCard(state->whoseTurn, state);
       35:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        7:  198:  return 0;
        7:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      308:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      140:  215:    card = floor(Random() * state->deckCount[player]);
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      868:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32%
      294:  219:      state->deck[player][i] = state->deck[player][i+1];
      294:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      308:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
      140:  226:  }
        -:  227:
       14:  228:  return 0;
       14:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 60 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
       60:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 91 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       91:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      112:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 95%
branch  1 taken 5%
       53:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       53:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       53:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67%
branch  1 taken 33%
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        2:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       36:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
       15:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 122 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      122:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 30%
branch  1 taken 70%
        -:  396:    {
       37:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       85:  401:  j = 0;
     4420:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
     2125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12%
branch  1 taken 88%
        -:  405:	{
      252:  406:	  j++;
      252:  407:	}
     2125:  408:    }
       85:  409:  if ( j >= 3)
branch  0 taken 99%
branch  1 taken 1%
        -:  410:    {
       84:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
      122:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 64 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       64:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       64:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       64:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       64:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       64:  576:    state->deckCount[player]--;
       64:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       64:  580:  return 0;
       64:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       27:  644:}
        -:  645:
        -:  646://new functions
        -:  647:
function playAdventurer called 1 returned 100% blocks executed 93%
        -:  648:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int cardDrawn, int z) {
        -:  649:  
       10:  650:  while(drawntreasure<2){
branch  0 taken 80%
branch  1 taken 20%
        4:  651:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:  652:        shuffle(currentPlayer, state);
    #####:  653:      }
        -:  654:
        4:  655:    drawCard(currentPlayer, state);
        -:  656:    
        4:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        8:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        2:  659:        drawntreasure++;
        -:  660:    else{
        2:  661:        temphand[z]=cardDrawn;
        2:  662:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  663:      }
        4:  664:      z++;
        -:  665:    }
        -:  666:
       10:  667:  while(z-1>=0){
branch  0 taken 80%
branch  1 taken 20%
        4:  668:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  669:  z=z-1;
        -:  670:      }
        1:  671:      return 0;
        -:  672:}
        -:  673:
function playSmithy called 1 returned 100% blocks executed 100%
        -:  674:int playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -:  675:    
        -:  676:    int i; 
       10:  677:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  678:  {
        4:  679:    drawCard(currentPlayer, state);
        4:  680:  }
        -:  681:      
        -:  682:      //discard card from hand
        1:  683:      discardCard(handPos, currentPlayer, state, 0);
        1:  684:      return 0;
        -:  685:
        -:  686:}
        -:  687:
function playVillage called 0 returned 0% blocks executed 0%
        -:  688:int playVillage(struct gameState *state, int currentPlayer, int handPos) {
        -:  689:  
        -:  690:  //+1 Card
    #####:  691:      drawCard(currentPlayer, state);
        -:  692:      
        -:  693:      //+2 Actions
    #####:  694:      state->numActions += state->numActions + 2;   
        -:  695:      
        -:  696:      //discard played card from hand
    #####:  697:      discardCard(handPos, currentPlayer, state, 0);
    #####:  698:      return 0;
        -:  699:}
        -:  700:
        -:  701:
function playGreatHall called 1 returned 100% blocks executed 100%
        -:  702:int playGreatHall(struct gameState *state, int currentPlayer, int handPos) {
        -:  703:  
        -:  704:  //+1 Card
        1:  705:      drawCard(currentPlayer, state);
        -:  706:      
        -:  707:      //+1 Actions
        1:  708:      state->numActions++;
        -:  709:      
        -:  710:      //discard card from hand
        1:  711:      discardCard(handPos, currentPlayer, state, 0);
        1:  712:      return 0;
        -:  713:}
        -:  714:
function playEmbargo called 0 returned 0% blocks executed 0%
        -:  715:int playEmbargo(struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  716:  
        -:  717:  //+2 Coins
    #####:  718:      state->coins == state->coins + 2;
        -:  719:      
        -:  720:      //see if selected pile is in play
    #####:  721:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  722:  {
    #####:  723:    return -1;
        -:  724:  }
        -:  725:      
        -:  726:      //add embargo token to selected supply pile
    #####:  727:      state->embargoTokens[choice1]++;
        -:  728:      
        -:  729:      //trash card
    #####:  730:      discardCard(handPos, currentPlayer, state, 1);    
    #####:  731:      return 0;
    #####:  732:}
        -:  733:
function cardEffect called 1 returned 100% blocks executed 8%
        -:  734:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  735:{
        -:  736:  int i;
        -:  737:  int j;
        -:  738:  int k;
        -:  739:  int x;
        -:  740:  int index;
        1:  741:  int currentPlayer = whoseTurn(state);
        1:  742:  int nextPlayer = currentPlayer + 1;
        -:  743:
        1:  744:  int tributeRevealedCards[2] = {-1, -1};
        -:  745:  int temphand[MAX_HAND];// moved above the if statement
        1:  746:  int drawntreasure=0;
        -:  747:  int cardDrawn;
        1:  748:  int z = 0;// this is the counter for the temp hand
        1:  749:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  750:    nextPlayer = 0;
    #####:  751:  }
        -:  752:
        1:  753:  if (card == adventurer) {
branch  0 taken 0%
branch  1 taken 100%
        -:  754:  
    #####:  755:  playAdventurer(drawntreasure, state, currentPlayer, temphand, cardDrawn, z);
    #####:  756:}
        -:  757:
        1:  758:else if (card == smithy) {
branch  0 taken 0%
branch  1 taken 100%
        -:  759:
    #####:  760:  playSmithy(state, currentPlayer, handPos);
        -:  761:  
    #####:  762:}
        -:  763:
        1:  764:else if (card == village) {
branch  0 taken 0%
branch  1 taken 100%
        -:  765:  
    #####:  766:  playVillage(state, currentPlayer, handPos);
    #####:  767:}
        -:  768:
        1:  769:else if (card == great_hall) {
branch  0 taken 0%
branch  1 taken 100%
        -:  770:
    #####:  771:  playGreatHall(state, currentPlayer, handPos);
        -:  772:  
    #####:  773:}
        -:  774:
        1:  775:else if (card == embargo) {
branch  0 taken 0%
branch  1 taken 100%
        -:  776:  
    #####:  777:  playEmbargo(state, currentPlayer, handPos, choice1);
    #####:  778:}
        -:  779:
        -:  780:else {
        -:  781:  
        -:  782:  //uses switch to select card and perform actions
        1:  783:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  784:    {
        -:  785: 			
        -:  786:    case council_room:
        -:  787:      //+4 Cards
       10:  788:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  789:	{
        4:  790:	  drawCard(currentPlayer, state);
        4:  791:	}
        -:  792:			
        -:  793:      //+1 Buy
        1:  794:      state->numBuys++;
        -:  795:			
        -:  796:      //Each other player draws a card
        6:  797:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  798:	{
        2:  799:	  if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  800:	    {
        1:  801:	      drawCard(i, state);
        1:  802:	    }
        2:  803:	}
        -:  804:			
        -:  805:      //put played card in played card pile
        1:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:			
        1:  808:      return 0;
        -:  809:			
        -:  810:    case feast:
        -:  811:      //gain card with cost up to 5
        -:  812:      //Backup hand
    #####:  813:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  814:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  815:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  816:      }
        -:  817:      //Backup hand
        -:  818:
        -:  819:      //Update Coins for Buy
    #####:  820:      updateCoins(currentPlayer, state, 5);
    #####:  821:      x = 1;//Condition to loop on
    #####:  822:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  823:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  824:	  if (DEBUG)
        -:  825:	    printf("None of that card left, sorry!\n");
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  829:	  }
    #####:  830:	}
    #####:  831:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  832:	  printf("That card is too expensive!\n");
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  836:	  }
    #####:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
    #####:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
    #####:  855:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  856:	state->hand[currentPlayer][i] = temphand[i];
    #####:  857:	temphand[i] = -1;
    #####:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
    #####:  861:      return 0;
        -:  862:			
        -:  863:    case gardens:
    #####:  864:      return -1;
        -:  865:			
        -:  866:    case mine:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
        -:  872:	}
        -:  873:		
    #####:  874:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 2, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:			
    #####:  899:      return 0;
        -:  900:			
        -:  901:    case remodel:
    #####:  902:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903:
    #####:  904:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  905:	{
    #####:  906:	  return -1;
        -:  907:	}
        -:  908:
    #####:  909:      gainCard(choice2, state, 0, currentPlayer);
        -:  910:
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
        -:  913:
        -:  914:      //discard trashed card
    #####:  915:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  916:	{
    #####:  917:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  918:	    {
    #####:  919:	      discardCard(i, currentPlayer, state, 0);			
    #####:  920:	      break;
        -:  921:	    }
    #####:  922:	}
        -:  923:
        -:  924:
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case baron:
    #####:  928:      state->numBuys++;//Increase buys by 1!
    #####:  929:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  930:	int p = 0;//Iterator for hand!
    #####:  931:	int card_not_discarded = 1;//Flag for discard set!
    #####:  932:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  933:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  934:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  935:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  936:	    state->discardCount[currentPlayer]++;
    #####:  937:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  938:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  939:	    }
    #####:  940:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  941:	    state->handCount[currentPlayer]--;
    #####:  942:	    card_not_discarded = 0;//Exit the loop
    #####:  943:	  }
    #####:  944:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  945:	    if(DEBUG) {
        -:  946:	      printf("No estate cards in your hand, invalid choice\n");
        -:  947:	      printf("Must gain an estate if there are any\n");
        -:  948:	    }
    #####:  949:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  950:	      gainCard(estate, state, 0, currentPlayer);
    #####:  951:	      state->supplyCount[estate]--;//Decrement estates
    #####:  952:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  953:		isGameOver(state);
    #####:  954:	      }
    #####:  955:	    }
    #####:  956:	    card_not_discarded = 0;//Exit the loop
    #####:  957:	  }
        -:  958:			    
        -:  959:	  else{
    #####:  960:	    p++;//Next card
        -:  961:	  }
        -:  962:	}
    #####:  963:      }
        -:  964:			    
        -:  965:      else{
    #####:  966:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  967:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  968:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  969:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  970:	    isGameOver(state);
    #####:  971:	  }
    #####:  972:	}
        -:  973:      }
        -:  974:	    
        -:  975:      
    #####:  976:      return 0;
        -:  977:		
        -:  978:		
        -:  979:    case minion:
        -:  980:      //+1 action
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
        -:  985:			
    #####:  986:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  state->coins = state->coins + 2;
    #####:  989:	}
        -:  990:			
    #####:  991:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  992:	{
        -:  993:	  //discard hand
    #####:  994:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  995:	    {
    #####:  996:	      discardCard(handPos, currentPlayer, state, 0);
        -:  997:	    }
        -:  998:				
        -:  999:	  //draw 4
    #####: 1000:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      drawCard(currentPlayer, state);
    #####: 1003:	    }
        -: 1004:				
        -: 1005:	  //other players discard hand and redraw if hand size > 4
    #####: 1006:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1007:	    {
    #####: 1008:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1009:		{
    #####: 1010:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
        -: 1012:		      //discard hand
    #####: 1013:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1014:			{
    #####: 1015:			  discardCard(handPos, i, state, 0);
        -: 1016:			}
        -: 1017:							
        -: 1018:		      //draw 4
    #####: 1019:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1020:			{
    #####: 1021:			  drawCard(i, state);
    #####: 1022:			}
    #####: 1023:		    }
    #####: 1024:		}
    #####: 1025:	    }
        -: 1026:				
    #####: 1027:	}
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case steward:
    #####: 1031:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
        -: 1033:	  //+2 cards
    #####: 1034:	  drawCard(currentPlayer, state);
    #####: 1035:	  drawCard(currentPlayer, state);
    #####: 1036:	}
    #####: 1037:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
        -: 1039:	  //+2 coins
    #####: 1040:	  state->coins = state->coins + 2;
    #####: 1041:	}
        -: 1042:      else
        -: 1043:	{
        -: 1044:	  //trash 2 cards in hand
    #####: 1045:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1046:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1047:	}
        -: 1048:			
        -: 1049:      //discard card from hand
    #####: 1050:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case tribute:
    #####: 1054:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	  state->deckCount[nextPlayer]--;
    #####: 1058:	}
    #####: 1059:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1060:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1061:	  state->discardCount[nextPlayer]--;
    #####: 1062:	}
        -: 1063:	else{
        -: 1064:	  //No Card to Reveal
        -: 1065:	  if (DEBUG){
        -: 1066:	    printf("No cards to reveal\n");
        -: 1067:	  }
        -: 1068:	}
    #####: 1069:      }
        -: 1070:	    
        -: 1071:      else{
    #####: 1072:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1073:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1074:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1075:	    state->deckCount[nextPlayer]++;
    #####: 1076:	    state->discard[nextPlayer][i] = -1;
    #####: 1077:	    state->discardCount[nextPlayer]--;
    #####: 1078:	  }
        -: 1079:			    
    #####: 1080:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1081:	} 
    #####: 1082:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1084:	state->deckCount[nextPlayer]--;
    #####: 1085:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1086:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1087:	state->deckCount[nextPlayer]--;
        -: 1088:      }    
        -: 1089:		       
    #####: 1090:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1091:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1092:	state->playedCardCount++;
    #####: 1093:	tributeRevealedCards[1] = -1;
    #####: 1094:      }
        -: 1095:
    #####: 1096:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1097:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1098:	  state->coins += 2;
    #####: 1099:	}
        -: 1100:		    
    #####: 1101:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
    #####: 1103:	  drawCard(currentPlayer, state);
    #####: 1104:	}
        -: 1105:	else{//Action Card
    #####: 1106:	  state->numActions = state->numActions + 2;
        -: 1107:	}
    #####: 1108:      }
        -: 1109:	    
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case ambassador:
    #####: 1113:      j = 0;		//used to check if player has enough cards to discard
        -: 1114:
    #####: 1115:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
    #####: 1120:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  return -1;
        -: 1123:	}
        -: 1124:
    #####: 1125:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1128:	    {
    #####: 1129:	      j++;
    #####: 1130:	    }
    #####: 1131:	}
    #####: 1132:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  return -1;				
        -: 1135:	}
        -: 1136:
        -: 1137:      if (DEBUG) 
        -: 1138:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1139:
        -: 1140:      //increase supply count for choosen card by amount being discarded
    #####: 1141:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1142:			
        -: 1143:      //each other player gains a copy of revealed card
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1147:	    {
    #####: 1148:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1149:	    }
    #####: 1150:	}
        -: 1151:
        -: 1152:      //discard played card from hand
    #####: 1153:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
        -: 1155:      //trash copies of cards returned to supply
    #####: 1156:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1157:	{
    #####: 1158:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:	    {
    #####: 1160:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1161:		{
    #####: 1162:		  discardCard(i, currentPlayer, state, 1);
    #####: 1163:		  break;
        -: 1164:		}
    #####: 1165:	    }
    #####: 1166:	}			
        -: 1167:
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case cutpurse:
        -: 1171:
    #####: 1172:      updateCoins(currentPlayer, state, 2);
    #####: 1173:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1176:	    {
    #####: 1177:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1178:		{
    #####: 1179:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1180:		    {
    #####: 1181:		      discardCard(j, i, state, 0);
    #####: 1182:		      break;
        -: 1183:		    }
    #####: 1184:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1185:		    {
    #####: 1186:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1187:			{
        -: 1188:			  if (DEBUG)
        -: 1189:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1190:			}	
    #####: 1191:		      break;
        -: 1192:		    }		
    #####: 1193:		}
        -: 1194:					
    #####: 1195:	    }
        -: 1196:				
    #####: 1197:	}				
        -: 1198:
        -: 1199:      //discard played card from hand
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1201:
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case outpost:
        -: 1205:      //set outpost flag
    #####: 1206:      state->outpostPlayed++;
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case salvager:
        -: 1213:      //+1 buy
    #####: 1214:      state->numBuys++;
        -: 1215:			
    #####: 1216:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
        -: 1218:	  //gain coins equal to trashed card
    #####: 1219:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1220:	  //trash card
    #####: 1221:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1222:	}
        -: 1223:			
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case sea_hag:
    #####: 1229:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1230:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1231:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1232:	  state->discardCount[i]++;
    #####: 1233:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1234:	}
    #####: 1235:      }
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case treasure_map:
        -: 1239:      //search hand for another treasure_map
    #####: 1240:      index = -1;
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1244:	    {
    #####: 1245:	      index = i;
    #####: 1246:	      break;
        -: 1247:	    }
    #####: 1248:	}
    #####: 1249:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1250:	{
        -: 1251:	  //trash both treasure cards
    #####: 1252:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1253:	  discardCard(index, currentPlayer, state, 1);
        -: 1254:
        -: 1255:	  //gain 4 Gold cards
    #####: 1256:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:	    {
    #####: 1258:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1259:	    }
        -: 1260:				
        -: 1261:	  //return success
    #####: 1262:	  return 1;
        -: 1263:	}
        -: 1264:			
        -: 1265:      //no second treasure_map found in hand
    #####: 1266:      return -1;
        -: 1267:    }
        -: 1268:	
    #####: 1269:  return -1;
        -: 1270:}
        1: 1271:}
        -: 1272:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1273:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1274:{
        -: 1275:	
        -: 1276:  //if card is not trashed, added to Played pile 
        3: 1277:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1278:    {
        -: 1279:      //add card to played pile
        3: 1280:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1281:      state->playedCardCount++;
        3: 1282:    }
        -: 1283:	
        -: 1284:  //set played card to -1
        3: 1285:  state->hand[currentPlayer][handPos] = -1;
        -: 1286:	
        -: 1287:  //remove card from player's hand
        3: 1288:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
    #####: 1292:    }
        3: 1293:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
    #####: 1297:    }
        -: 1298:  else 	
        -: 1299:    {
        -: 1300:      //replace discarded card with last card in hand
        3: 1301:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1302:      //set last card to -1
        3: 1303:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1304:      //reduce number of cards in hand
        3: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        -: 1307:	
        3: 1308:  return 0;
        -: 1309:}
        -: 1310:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1311:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1312:{
        -: 1313:  //Note: supplyPos is enum of choosen card
        -: 1314:	
        -: 1315:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1316:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //added card for [whoseTurn] current player:
        -: 1322:  // toFlag = 0 : add to discard
        -: 1323:  // toFlag = 1 : add to deck
        -: 1324:  // toFlag = 2 : add to hand
        -: 1325:
    #####: 1326:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
    #####: 1328:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1329:      state->deckCount[player]++;
    #####: 1330:    }
    #####: 1331:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1332:    {
    #####: 1333:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1334:      state->handCount[player]++;
    #####: 1335:    }
        -: 1336:  else
        -: 1337:    {
    #####: 1338:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1339:      state->discardCount[player]++;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //decrease number in supply pile
    #####: 1343:  state->supplyCount[supplyPos]--;
        -: 1344:	 
    #####: 1345:  return 0;
    #####: 1346:}
        -: 1347:
function updateCoins called 10 returned 100% blocks executed 85%
        -: 1348:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1349:{
        -: 1350:  int i;
        -: 1351:	
        -: 1352:  //reset coin count
       10: 1353:  state->coins = 0;
        -: 1354:
        -: 1355:  //add coins for each Treasure card in player's hand
      120: 1356:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1357:    {
       50: 1358:      if (state->hand[player][i] == copper)
branch  0 taken 74%
branch  1 taken 26%
        -: 1359:	{
       37: 1360:	  state->coins += 1;
       37: 1361:	}
       13: 1362:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1363:	{
    #####: 1364:	  state->coins += 2;
    #####: 1365:	}
       13: 1366:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1367:	{
    #####: 1368:	  state->coins += 3;
    #####: 1369:	}	
       50: 1370:    }	
        -: 1371:
        -: 1372:  //add bonus
       10: 1373:  state->coins += bonus;
        -: 1374:
       10: 1375:  return 0;
        -: 1376:}
        -: 1377:
        -: 1378:
        -: 1379:
        -: 1380://end of dominion.c
        -: 1381:
