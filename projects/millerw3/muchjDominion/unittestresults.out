

** TESTING ADVENTURER: PLAYER 1 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 2 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING VILLAGE: PLAYER 1 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 2 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING SMITHY: PLAYER 1 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 2 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING GREAT HALL: PLAYER 1 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 2 of 2**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING UPDATECOINS() **


Testing player 1 out of 2 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 2 out of 2 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 1 out of 2 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 2 out of 2 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 1 out of 2 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 2 out of 2 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.


** TESTING DISCARDCARD() **


Testing discard for player 0 out of 2...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 0 out of 2...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 1 out of 2...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 1 out of 2...

TRASH SUCCESSFUL. TEST PASSED.
Testing preconditions...
game state valid...


** TESTING WHOSETURN() **


Testing player 1 of 2...

WHOSE TURN TEST SUCCESSFUL.

Testing player 2 of 2...

WHOSE TURN TEST SUCCESSFUL.


** TESTING GAINCARD() **


Testing player 1 of 2...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 1
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 2 of 2...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.


** TESTING ADVENTURER: PLAYER 1 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 2 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 3 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 0
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING VILLAGE: PLAYER 1 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 2 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 3 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING SMITHY: PLAYER 1 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 2 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 3 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING GREAT HALL: PLAYER 1 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 2 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 3 of 3**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING UPDATECOINS() **


Testing player 1 out of 3 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 2 out of 3 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 3 out of 3 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 1 out of 3 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 2 out of 3 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 3 out of 3 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 1 out of 3 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 2 out of 3 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 3 out of 3 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.


** TESTING DISCARDCARD() **


Testing discard for player 0 out of 3...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 0 out of 3...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 1 out of 3...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 1 out of 3...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 2 out of 3...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 2 out of 3...

TRASH SUCCESSFUL. TEST PASSED.
Testing preconditions...
game state valid...


** TESTING WHOSETURN() **


Testing player 1 of 3...

WHOSE TURN TEST SUCCESSFUL.

Testing player 2 of 3...

WHOSE TURN TEST SUCCESSFUL.

Testing player 3 of 3...

WHOSE TURN TEST SUCCESSFUL.


** TESTING GAINCARD() **


Testing player 1 of 3...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 1
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 2 of 3...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 3 of 3...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.


** TESTING ADVENTURER: PLAYER 1 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 2 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 1
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 3 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 0
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING ADVENTURER: PLAYER 4 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card adventurer OK...
Num of cards in hand before adventurer played: 5
Num of cards in hand after adventurer played: 8
HAND COUNT: TEST FAILED.
Num of cards in deck before adventurer played: 5
Num of cards in deck after adventurer played: 0
DECK COUNT: TEST FAILED.
CHECKED HAND FOR TREASURE; TEST PASSED.
DISCARD TEST; LAST CARD NOT ADVENTURER: TEST PASSED.


** TESTING VILLAGE: PLAYER 1 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 2 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 3 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING VILLAGE: PLAYER 4 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card village OK...
Num of cards in hand before village played: 5
Num of cards in hand after village played: 5
HAND COUNT: TEST PASSED.
ACTION COUNT: TEST PASSED.
Num of cards in deck before village played: 5
Num of cards in deck after village played: 4
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD NOT VILLAGE: TEST PASSED.


** TESTING SMITHY: PLAYER 1 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 2 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 3 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING SMITHY: PLAYER 4 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card smithy OK...
Num of cards in hand before smithy played: 5
Num of cards in hand after smithy played: 7
HAND COUNT: TEST PASSED.
Num of cards in deck before smithy played: 5
Num of cards in deck after smithy played: 2
DECK COUNT: TEST PASSED.
DISCARD TEST; LAST CARD STILL SMITHY: TEST FAILED.


** TESTING GREAT HALL: PLAYER 1 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 2 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 3 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING GREAT HALL: PLAYER 4 of 4**

Testing preconditions...
game state valid...
valid hand count...
last card great hall OK...
Num of cards in hand before great hall played: 5
Num of cards in hand after great hall played: 4
HAND COUNT: TEST FAILED.
Num of cards in deck before great hall played: 5
Num of cards in deck after great hall played: 4
DECK COUNT: TEST PASSED.
ACTION COUNT: TEST FAILED.
DISCARD TEST; LAST CARD NOT GREAT HALL: TEST PASSED.


** TESTING UPDATECOINS() **


Testing player 1 out of 4 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 2 out of 4 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 3 out of 4 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 4 out of 4 w/ coppers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 5 Actual Coins: 5
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 6 Actual Coins: 6
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 7 Actual Coins: 7
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 8 Actual Coins: 8
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 9 Actual Coins: 9
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 10 Actual Coins: 10
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ COPPERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ COPPERS: TEST PASSED.

Testing player 1 out of 4 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 2 out of 4 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 3 out of 4 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 4 out of 4 w/ silvers...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 10 Actual Coins: 10
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 11 Actual Coins: 11
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 12 Actual Coins: 12
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 13 Actual Coins: 13
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 14 Actual Coins: 14
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 15 Actual Coins: 15
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 16 Actual Coins: 16
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 17 Actual Coins: 17
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 18 Actual Coins: 18
HAND W/ SILVERS: TEST PASSED.
Expected Coins: 19 Actual Coins: 19
HAND W/ SILVERS: TEST PASSED.

Testing player 1 out of 4 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 2 out of 4 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 3 out of 4 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.

Testing player 4 out of 4 w/ golds...

Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 15 Actual Coins: 15
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 16 Actual Coins: 16
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 17 Actual Coins: 17
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 18 Actual Coins: 18
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 19 Actual Coins: 19
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 20 Actual Coins: 20
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 21 Actual Coins: 21
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 22 Actual Coins: 22
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 23 Actual Coins: 23
HAND W/ GOLD: TEST PASSED.
Testing preconditions...
game state valid...
valid hand count...
Expected Coins: 24 Actual Coins: 24
HAND W/ GOLD: TEST PASSED.


** TESTING DISCARDCARD() **


Testing discard for player 0 out of 4...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 0 out of 4...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 1 out of 4...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 1 out of 4...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 2 out of 4...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 2 out of 4...

TRASH SUCCESSFUL. TEST PASSED.

Testing discard for player 3 out of 4...

Testing preconditions...
game state valid...
valid hand count...
DISCARD PILE MISMATCH.
DISCARD TEST UNSUCCESSFUL. TEST FAILED.

Testing trash for player 3 out of 4...

TRASH SUCCESSFUL. TEST PASSED.
Testing preconditions...
game state valid...


** TESTING WHOSETURN() **


Testing player 1 of 4...

WHOSE TURN TEST SUCCESSFUL.

Testing player 2 of 4...

WHOSE TURN TEST SUCCESSFUL.

Testing player 3 of 4...

WHOSE TURN TEST SUCCESSFUL.

Testing player 4 of 4...

WHOSE TURN TEST SUCCESSFUL.


** TESTING GAINCARD() **


Testing player 1 of 4...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 1
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 2 of 4...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 3 of 4...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 6
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 6
ADD TO HAND UNSUCCESSFUL. TEST FAILED.

Testing player 4 of 4...

Testing preconditions...
game state valid...
valid hand count...
Testing add to discard...
Expected discard value: 7 Actual value: 0
Expected discard count: 1 Actual discard count: 1
ADD TO DISCARD UNSUCCESSFUL. TEST FAILED.
Testing add to deck...
Expected deck value: 7 Actual value: 4
Expected deck count: 6 Actual deck count: 5
ADD TO DECK UNSUCCESSFUL. TEST FAILED.
Testing add to hand...
Expected hand value: 7 Actual value: 0
Expected hand count: 6 Actual hand count: 5
ADD TO HAND UNSUCCESSFUL. TEST FAILED.
File 'dominion.c'
Lines executed:37.72% of 562
Branches executed:32.23% of 422
Taken at least once:25.12% of 422
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 7011 returned 100% blocks executed 100%
     7011:   10:int compare(const void* a, const void* b) {
     7011:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       33:   12:    return 1;
     6978:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1852:   14:    return -1;
     5126:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 144 returned 100% blocks executed 95%
      144:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
      144:   46:  SelectStream(1);
call    0 returned 100%
      144:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
      144:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
      144:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
     1584:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
    15840:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
    14400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
      144:   75:  if (numPlayers == 2)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -:   76:    {
       34:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
      110:   79:  else if (numPlayers == 3)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:   80:    {
       48:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
       62:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
      144:   89:  if (numPlayers == 2)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -:   90:    {
       34:   91:      state->supplyCount[estate] = 8;
       34:   92:      state->supplyCount[duchy] = 8;
       34:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
      110:   97:      state->supplyCount[estate] = 12;
      110:   98:      state->supplyCount[duchy] = 12;
      110:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
      144:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      144:  104:  state->supplyCount[silver] = 40;
      144:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
     3024:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
    23760:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  111:	{
    22320:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
     1440:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  116:		{
      288:  117:		  if (numPlayers == 2){ 
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       34:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
      110:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
     1296:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
     1440:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    20880:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
      604:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  141:    {
      460:  142:      state->deckCount[i] = 0;
     1840:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
     1380:  145:	  state->deck[i][j] = estate;
     1380:  146:	  state->deckCount[i]++;
        -:  147:	}
     3680:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
     3220:  150:	  state->deck[i][j] = copper;
     3220:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
      604:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  157:    {
      460:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
      604:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
      460:  168:      state->handCount[i] = 0;
      460:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
     4032:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
     3888:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
      144:  184:  state->outpostPlayed = 0;
      144:  185:  state->phase = 0;
      144:  186:  state->numActions = 1;
      144:  187:  state->numBuys = 1;
      144:  188:  state->playedCardCount = 0;
      144:  189:  state->whoseTurn = 0;
      144:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      864:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      720:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
      144:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
      144:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 472 returned 100% blocks executed 94%
      472:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      472:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      472:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  212:    return -1;
      472:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     5616:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4672:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     4672:  218:    newDeck[newDeckPos] = state->deck[player][card];
     4672:  219:    newDeckPos++;
    13700:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
     9028:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
     4672:  223:    state->deckCount[player]--;
        -:  224:  }
     5144:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4672:  226:    state->deck[player][i] = newDeck[i];
     4672:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
      472:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 27 returned 100% blocks executed 100%
       27:  322:int supplyCount(int card, struct gameState *state) {
       27:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 186 returned 100% blocks executed 100%
      186:  348:int whoseTurn(struct gameState *state) {
      186:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 54 returned 100% blocks executed 100%
       54:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
       54:  355:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  356:  
        -:  357:  //Discard hand
      368:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
      314:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      314:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
       54:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
       54:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       36:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
       18:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
       54:  372:  state->outpostPlayed = 0;
       54:  373:  state->phase = 0;
       54:  374:  state->numActions = 1;
       54:  375:  state->coins = 0;
       54:  376:  state->numBuys = 1;
       54:  377:  state->playedCardCount = 0;
       54:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
      324:  382:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      270:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  384:  }
        -:  385:
        -:  386:  //Update money
       54:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  388:
       54:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 1074 returned 100% blocks executed 92%
     1074:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
     1074:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       84:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       72:  536:      state->deck[player][i] = state->discard[player][i];
       72:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
       12:  540:    state->deckCount[player] = state->discardCount[player];
       12:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       12:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       12:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       12:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       12:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       12:  561:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  562:      return -1;
        -:  563:
       12:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  565:    state->deckCount[player]--;
       12:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
     1062:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
     1062:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1062:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1062:  578:    state->deckCount[player]--;
     1062:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
     1074:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 0 returned 0% blocks executed 0%
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648://*******************************************************
        -:  649:// function play_smithy_card
        -:  650:// Draws three cards, discards, returns
        -:  651://******************************************************* 
function play_smithy_card called 9 returned 100% blocks executed 100%
        9:  652:int play_smithy_card(struct gameState *state, int currentPlayer, int handPos)
        -:  653:{
        -:  654:   int i;
       36:  655:   for (/*i = 0*/; i < 3; i++) /** Introduced bug, don't initialize i. **/
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  656:	   {
       27:  657:	     drawCard(currentPlayer, state);
call    0 returned 100%
        -:  658:	   }
        -:  659:   //discard card from hand
        9:  660:   discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9:  661:   return 0;
        -:  662:}
        -:  663://******************************************************
        -:  664:// *function* play_adventurer_card
        -:  665:// *****************************************************
function play_adventurer_card called 9 returned 100% blocks executed 87%
        9:  666:int play_adventurer_card(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z )
        -:  667:{
       57:  668:  while(drawntreasure<=2) /** Introduced bug, should be < 2. **/
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  669:  {
       39:  670:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  671:	    shuffle(currentPlayer, state);
call    0 never executed
        -:  672:  	}
       39:  673:  	drawCard(currentPlayer, state);
call    0 returned 100%
       39:  674:  	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       39:  675:  	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       27:  676:	    drawntreasure++;
        -:  677:  	else{
       12:  678:	    temphand[z]=cardDrawn;
       12:  679:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  680:	  // z++ (removed this line to induce a bug, but left this message to be nice )
        -:  681:	  }
        -:  682:  }
       18:  683:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  684:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  685:	  z=z-1;
        -:  686:  }
        9:  687:  return 0;
        -:  688:}			
        -:  689://******************************************************
        -:  690:// **function** play_council_room 
        -:  691://******************************************************
function play_council_room called 0 returned 0% blocks executed 0%
    #####:  692:int play_council_room(struct gameState *state, int currentPlayer, int handPos)
        -:  693:{
        -:  694:  //+4 Cards
        -:  695:	int i;
    #####:  696:  for (i = 0; i < 3; i++) /** Introduced bug, should be i < 4. **/
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	}
        -:  700:			
        -:  701:  //+1 Buy Another bug, the line below shouldn't be commented out
        -:  702:  // state->numBuys++;
        -:  703:			
        -:  704:  //Each other player draws a card
    #####:  705:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
call    0 never executed
        -:  710:	    }
        -:  711:	}
        -:  712:			
        -:  713:  //put played card in played card pile
    #####:  714:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  715:		
    #####:  716:  return 0;
        -:  717:}			
        -:  718://******************************************************
        -:  719:// **function** play_remodel
        -:  720://******************************************************
function play_remodel called 0 returned 0% blocks executed 0%
    #####:  721:int play_remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int j) 
        -:  722:{
    #####:  723:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  724:
    #####:  725:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  726:	  {
    #####:  727:	    return 0;
        -:  728:	  }
        -:  729:
    #####:  730:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  731:
        -:  732:    //discard card from hand
    #####:  733:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  734:
        -:  735:    //discard trashed card
        -:  736:    int i;	
    #####:  737:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  738:  	{
    #####:  739:	    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  740:	    {
    #####:  741:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
        -:  742:	      //break; /** Introduce bug **/
        -:  743:	    }
        -:  744:	  }
    #####:  745:    return 0;
        -:  746:}			
        -:  747://******************************************************
        -:  748:// **function** play_great_hall
        -:  749://******************************************************
function play_great_hall called 9 returned 100% blocks executed 100%
        9:  750:int play_great_hall(int currentPlayer, struct gameState *state, int handPos) 	
        -:  751:{
        -:  752://+1 Card
        9:  753:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  754:			
        -:  755:  //+1 Actions
        9:  756:  state->numActions++;
        -:  757:			
        -:  758:  //discard card from hand
        9:  759:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9:  760:  return 0;
        -:  761:} 
        -:  762://********************************************************
        -:  763:
function cardEffect called 36 returned 100% blocks executed 10%
       36:  764:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  765:{
        -:  766:  int i;
       36:  767:  int j=0;
        -:  768:  int k;
        -:  769:  int x;
        -:  770:  int index;
       36:  771:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       36:  772:  int nextPlayer = currentPlayer + 1;
        -:  773:
       36:  774:  int tributeRevealedCards[2] = {-1, -1};
        -:  775:  int temphand[MAX_HAND];// moved above the if statement
       36:  776:  int drawntreasure=0;
       36:  777:  int cardDrawn=0;
       36:  778:  int z = 0;// this is the counter for the temp hand
       36:  779:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       12:  780:    nextPlayer = 0;
        -:  781:  }
        -:  782:	// Start changes from original here.
        -:  783:	// Pull out 5 cards and run them here, otherwise run the original switch statement.
        -:  784:	
       36:  785:	if (card == adventurer) // Bugged.
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  786:	{
        9:  787:		play_adventurer_card(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
call    0 returned 100%
        -:  788:	}
        -:  789:	
       27:  790:	else if (card == smithy) // Bugged.
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  791:	{
        9:  792:		play_smithy_card(state, currentPlayer, handPos);	
call    0 returned 100%
        -:  793:	}
        -:  794:	
       18:  795:	else if (card == council_room) // Bugged.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  796:	{
    #####:  797:		play_council_room(state, currentPlayer, handPos);	
call    0 never executed
        -:  798:	}
        -:  799:	
       18:  800:	else if (card == remodel) // Bugged.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  801:	{
    #####:  802:		play_remodel(state, currentPlayer, choice1, choice2, handPos, j);	
call    0 never executed
        -:  803:	}
        -:  804:	
       18:  805:	else if (card == outpost) // Bug free.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  806:	{
        -:  807:		  //set outpost flag
    #####:  808:		  state->outpostPlayed++;
        -:  809:
        -:  810:		  //discard card
    #####:  811:		  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  812:		  return 0;	
        -:  813:	}
        -:  814:  
        -:  815:	else
        -:  816:	{
        -:  817:  //uses switch to select card and perform actions
       18:  818:	  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 50%
branch  4 taken 0%
branch  5 taken 50%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  819:		{
        -:  820:	//*******************************************************	
        -:  821:	//	case adventurer:
        -:  822:	//	  play_adventurer_card(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
        -:  823:	//	  break; 
        -:  824:	//*******************************************************
        -:  825:	//	case council_room:
        -:  826:	//		  play_council_room(state, currentPlayer, handPos);
        -:  827:	//	  break;
        -:  828:	//*******************************************************
        -:  829:		case feast:
        -:  830:		  //gain card with cost up to 5
        -:  831:		  //Backup hand
    #####:  832:		  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  833:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  834:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  835:		  }
        -:  836:		  //Backup hand
        -:  837:
        -:  838:		  //Update Coins for Buy
    #####:  839:		  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  840:		  x = 1;//Condition to loop on
    #####:  841:		  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  842:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  843:		  if (DEBUG)
        -:  844:			printf("None of that card left, sorry!\n");
        -:  845:
        -:  846:		  if (DEBUG){
        -:  847:			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  848:		  }
        -:  849:		}
    #####:  850:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  851:		  printf("That card is too expensive!\n");
call    0 never executed
        -:  852:
        -:  853:		  if (DEBUG){
        -:  854:			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  855:		  }
        -:  856:		}
        -:  857:		else{
        -:  858:
        -:  859:		  if (DEBUG){
        -:  860:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  861:		  }
        -:  862:
    #####:  863:		  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  864:		  x = 0;//No more buying cards
        -:  865:
        -:  866:		  if (DEBUG){
        -:  867:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  868:		  }
        -:  869:
        -:  870:		}
        -:  871:		  }     
        -:  872:
        -:  873:		  //Reset Hand
    #####:  874:		  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  875:		state->hand[currentPlayer][i] = temphand[i];
    #####:  876:		temphand[i] = -1;
        -:  877:		  }
        -:  878:		  //Reset Hand
        -:  879:
    #####:  880:		  return 0;
        -:  881:
        -:  882:		case gardens:
    #####:  883:		  return -1;
        -:  884:
        -:  885:		case mine:
    #####:  886:		  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  887:
    #####:  888:		  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  889:		{
    #####:  890:		  return -1;
        -:  891:		}
        -:  892:
    #####:  893:		  if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  894:		{
    #####:  895:		  return -1;
        -:  896:		}
        -:  897:
    #####:  898:		  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:		{
    #####:  900:		  return -1;
        -:  901:		}
        -:  902:
    #####:  903:		  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  904:
        -:  905:		  //discard card from hand
    #####:  906:		  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:		  //discard trashed card
    #####:  909:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  910:		{
    #####:  911:		  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  912:			{
    #####:  913:			  discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  914:			  break;
        -:  915:			}
        -:  916:		}
        -:  917:
    #####:  918:		  return 0;
        -:  919:	//***********************************************************			
        -:  920:	//	case remodel:
        -:  921:	//	  play_remodel(state, currentPlayer, choice1, choice2, handPos, j); 
        -:  922:	//************************************************************			
        -:  923:	//	case smithy:
        -:  924:	//		  play_smithy_card(state, currentPlayer, handPos);
        -:  925:	//************************************************************
        -:  926:		case village:
        -:  927:		  //+1 Card
        9:  928:		  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  929:
        -:  930:		  //+2 Actions
        9:  931:		  state->numActions = state->numActions + 2;
        -:  932:
        -:  933:		  //discard played card from hand
        9:  934:		  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9:  935:		  return 0;
        -:  936:
        -:  937:		case baron:
    #####:  938:		  state->numBuys++;//Increase buys by 1!
    #####:  939:		  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  940:		int p = 0;//Iterator for hand!
    #####:  941:		int card_not_discarded = 1;//Flag for discard set!
    #####:  942:		while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  943:		  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  944:			state->coins += 4;//Add 4 coins to the amount of coins
    #####:  945:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  946:			state->discardCount[currentPlayer]++;
    #####:  947:			for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  948:			  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  949:			}
    #####:  950:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  951:			state->handCount[currentPlayer]--;
    #####:  952:			card_not_discarded = 0;//Exit the loop
        -:  953:		  }
    #####:  954:		  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  955:			if(DEBUG) {
        -:  956:			  printf("No estate cards in your hand, invalid choice\n");
        -:  957:			  printf("Must gain an estate if there are any\n");
        -:  958:			}
    #####:  959:			if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:			  gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  961:			  state->supplyCount[estate]--;//Decrement estates
    #####:  962:			  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:			isGameOver(state);
call    0 never executed
        -:  964:			  }
        -:  965:			}
    #####:  966:			card_not_discarded = 0;//Exit the loop
        -:  967:		  }
        -:  968:
        -:  969:		  else{
    #####:  970:			p++;//Next card
        -:  971:		  }
        -:  972:		}
        -:  973:		  }
        -:  974:
        -:  975:		  else{
    #####:  976:		if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:		  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  978:		  state->supplyCount[estate]--;//Decrement Estates
    #####:  979:		  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  980:			isGameOver(state);
call    0 never executed
        -:  981:		  }
        -:  982:		}
        -:  983:		  }
        -:  984:
        -:  985:
    #####:  986:		  return 0;
        -:  987:	//**************************************		
        -:  988:		case great_hall:
        9:  989:			  play_great_hall(currentPlayer, state, handPos);
call    0 returned 100%
        -:  990:	//*************************************			
        -:  991:
        -:  992:		case minion:
        -:  993:		  //+1 action
        9:  994:		  state->numActions++;
        -:  995:
        -:  996:		  //discard card from hand
        9:  997:		  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  998:
        9:  999:		  if (choice1)		//+2 coins
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1000:		{
    #####: 1001:		  state->coins = state->coins + 2;
        -: 1002:		}
        -: 1003:
        9: 1004:		  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1005:		{
        -: 1006:		  //discard hand
    #####: 1007:		  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1008:			{
    #####: 1009:			  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:			}
        -: 1011:
        -: 1012:		  //draw 4
    #####: 1013:		  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:			{
    #####: 1015:			  drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:			}
        -: 1017:
        -: 1018:		  //other players discard hand and redraw if hand size > 4
    #####: 1019:		  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1020:			{
    #####: 1021:			  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1022:			{
    #####: 1023:			  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1024:				{
        -: 1025:				  //discard hand
    #####: 1026:				  while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1027:				{
    #####: 1028:				  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1029:				}
        -: 1030:
        -: 1031:				  //draw 4
    #####: 1032:				  for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:				{
    #####: 1034:				  drawCard(i, state);
call    0 never executed
        -: 1035:				}
        -: 1036:				}
        -: 1037:			}
        -: 1038:			}
        -: 1039:
        -: 1040:		}
        9: 1041:		  return 0;
        -: 1042:
        -: 1043:		case steward:
    #####: 1044:		  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1045:		{
        -: 1046:		  //+2 cards
    #####: 1047:		  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1048:		  drawCard(currentPlayer, state);
call    0 never executed
        -: 1049:		}
    #####: 1050:		  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1051:		{
        -: 1052:		  //+2 coins
    #####: 1053:		  state->coins = state->coins + 2;
        -: 1054:		}
        -: 1055:		  else
        -: 1056:		{
        -: 1057:		  //trash 2 cards in hand
    #####: 1058:		  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1059:		  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1060:		}
        -: 1061:
        -: 1062:		  //discard card from hand
    #####: 1063:		  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1064:		  return 0;
        -: 1065:
        -: 1066:		case tribute:
    #####: 1067:		  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1068:		if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:		  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1070:		  state->deckCount[nextPlayer]--;
        -: 1071:		}
    #####: 1072:		else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1073:		  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1074:		  state->discardCount[nextPlayer]--;
        -: 1075:		}
        -: 1076:		else{
        -: 1077:		  //No Card to Reveal
        -: 1078:		  if (DEBUG){
        -: 1079:			printf("No cards to reveal\n");
        -: 1080:		  }
        -: 1081:		}
        -: 1082:		  }
        -: 1083:
        -: 1084:		  else{
    #####: 1085:		if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1086:		  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1087:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1088:			state->deckCount[nextPlayer]++;
    #####: 1089:			state->discard[nextPlayer][i] = -1;
    #####: 1090:			state->discardCount[nextPlayer]--;
        -: 1091:		  }
        -: 1092:
    #####: 1093:		  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1094:		} 
    #####: 1095:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:		state->deckCount[nextPlayer]--;
    #####: 1098:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1099:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1100:		state->deckCount[nextPlayer]--;
        -: 1101:		  }    
        -: 1102:
    #####: 1103:		  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1104:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1105:		state->playedCardCount++;
    #####: 1106:		tributeRevealedCards[1] = -1;
        -: 1107:		  }
        -: 1108:
    #####: 1109:		  for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1110:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1111:		  state->coins += 2;
        -: 1112:		}
        -: 1113:
    #####: 1114:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1115:		  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1116:		  drawCard(currentPlayer, state);
call    0 never executed
        -: 1117:		}
        -: 1118:		else{//Action Card
    #####: 1119:		  state->numActions = state->numActions + 2;
        -: 1120:		}
        -: 1121:		  }
        -: 1122:
    #####: 1123:		  return 0;
        -: 1124:
        -: 1125:		case ambassador:
    #####: 1126:		  j = 0;		//used to check if player has enough cards to discard
        -: 1127:
    #####: 1128:		  if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1129:		{
    #####: 1130:		  return -1;				
        -: 1131:		}
        -: 1132:
    #####: 1133:		  if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  return -1;
        -: 1136:		}
        -: 1137:
    #####: 1138:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1141:			{
    #####: 1142:			  j++;
        -: 1143:			}
        -: 1144:		}
    #####: 1145:		  if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1146:		{
    #####: 1147:		  return -1;				
        -: 1148:		}
        -: 1149:
        -: 1150:		  if (DEBUG) 
        -: 1151:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1152:
        -: 1153:		  //increase supply count for choosen card by amount being discarded
    #####: 1154:		  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1155:
        -: 1156:		  //each other player gains a copy of revealed card
    #####: 1157:		  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:		{
    #####: 1159:		  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1160:			{
    #####: 1161:			  gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1162:			}
        -: 1163:		}
        -: 1164:
        -: 1165:		  //discard played card from hand
    #####: 1166:		  discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
        -: 1168:		  //trash copies of cards returned to supply
    #####: 1169:		  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1170:		{
    #####: 1171:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:			{
    #####: 1173:			  if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1174:			{
    #####: 1175:			  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1176:			  break;
        -: 1177:			}
        -: 1178:			}
        -: 1179:		}			
        -: 1180:
    #####: 1181:		  return 0;
        -: 1182:
        -: 1183:		case cutpurse:
        -: 1184:
    #####: 1185:		  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1186:		  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1187:		{
    #####: 1188:		  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1189:			{
    #####: 1190:			  for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1191:			{
    #####: 1192:			  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1193:				{
    #####: 1194:				  discardCard(j, i, state, 0);
call    0 never executed
    #####: 1195:				  break;
        -: 1196:				}
    #####: 1197:			  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1198:				{
    #####: 1199:				  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1200:				{
        -: 1201:				  if (DEBUG)
        -: 1202:					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1203:				}	
    #####: 1204:				  break;
        -: 1205:				}		
        -: 1206:			}
        -: 1207:
        -: 1208:			}
        -: 1209:
        -: 1210:		}				
        -: 1211:
        -: 1212:		  //discard played card from hand
    #####: 1213:		  discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1214:
    #####: 1215:		  return 0;
        -: 1216:
        -: 1217:
        -: 1218:		case embargo: 
        -: 1219:		  //+2 Coins
    #####: 1220:		  state->coins = state->coins + 2;
        -: 1221:
        -: 1222:		  //see if selected pile is in play
    #####: 1223:		  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1224:		{
    #####: 1225:		  return -1;
        -: 1226:		}
        -: 1227:
        -: 1228:		  //add embargo token to selected supply pile
    #####: 1229:		  state->embargoTokens[choice1]++;
        -: 1230:
        -: 1231:		  //trash card
    #####: 1232:		  discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1233:		  return 0;
        -: 1234:
        -: 1235:		//case outpost:
        -: 1236:		  //set outpost flag
        -: 1237:		//  state->outpostPlayed++;
        -: 1238:
        -: 1239:		  //discard card
        -: 1240:		//  discardCard(handPos, currentPlayer, state, 0);
        -: 1241:		//  return 0;
        -: 1242:
        -: 1243:		case salvager:
        -: 1244:		  //+1 buy
    #####: 1245:		  state->numBuys++;
        -: 1246:
    #####: 1247:		  if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1248:		{
        -: 1249:		  //gain coins equal to trashed card
    #####: 1250:		  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1251:		  //trash card
    #####: 1252:		  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1253:		}
        -: 1254:
        -: 1255:		  //discard card
    #####: 1256:		  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1257:		  return 0;
        -: 1258:
        -: 1259:		case sea_hag:
    #####: 1260:		  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1261:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1262:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1263:		  state->discardCount[i]++;
    #####: 1264:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1265:		}
        -: 1266:		  }
    #####: 1267:		  return 0;
        -: 1268:
        -: 1269:		case treasure_map:
        -: 1270:		  //search hand for another treasure_map
    #####: 1271:		  index = -1;
    #####: 1272:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:		{
    #####: 1274:		  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1275:			{
    #####: 1276:			  index = i;
    #####: 1277:			  break;
        -: 1278:			}
        -: 1279:		}
    #####: 1280:		  if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1281:		{
        -: 1282:		  //trash both treasure cards
    #####: 1283:		  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1284:		  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1285:
        -: 1286:		  //gain 4 Gold cards
    #####: 1287:		  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1288:			{
    #####: 1289:			  gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1290:			}
        -: 1291:
        -: 1292:		  //return success
    #####: 1293:		  return 1;
        -: 1294:		}
        -: 1295:
        -: 1296:		  //no second treasure_map found in hand
    #####: 1297:		  return -1;
        -: 1298:		}
        -: 1299:	}
        -: 1300:	
       18: 1301:  return -1;
        -: 1302:}
        -: 1303:
function discardCard called 126 returned 100% blocks executed 100%
      126: 1304:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1305:{
        -: 1306:	
        -: 1307:  //if card is not trashed, added to Played pile 
      126: 1308:  if (trashFlag < 1)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1309:    {
        -: 1310:      //add card to played pile
       81: 1311:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       81: 1312:      state->playedCardCount++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //set played card to -1
      126: 1316:  state->hand[currentPlayer][handPos] = -1;
        -: 1317:	
        -: 1318:  //remove card from player's hand
      126: 1319:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -: 1320:    {
        -: 1321:      //reduce number of cards in hand
       27: 1322:      state->handCount[currentPlayer]--;
        -: 1323:    }
       99: 1324:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 1325:    {
        -: 1326:      //reduce number of cards in hand
       18: 1327:      state->handCount[currentPlayer]--;
        -: 1328:    }
        -: 1329:  else 	
        -: 1330:    {
        -: 1331:      //replace discarded card with last card in hand
       81: 1332:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1333:      //set last card to -1
       81: 1334:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1335:      //reduce number of cards in hand
       81: 1336:      state->handCount[currentPlayer]--;
        -: 1337:    }
        -: 1338:	
      126: 1339:  return 0;
        -: 1340:}
        -: 1341:
function gainCard called 27 returned 100% blocks executed 100%
       27: 1342:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1343:{
        -: 1344:  //Note: supplyPos is enum of choosen card
        -: 1345:	
        -: 1346:  //check if supply pile is empty (0) or card is not used in game (-1)
       27: 1347:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
        -: 1348:    {
        2: 1349:      return -1;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //added card for [whoseTurn] current player:
        -: 1353:  // toFlag = 0 : add to discard
        -: 1354:  // toFlag = 1 : add to deck
        -: 1355:  // toFlag = 2 : add to hand
        -: 1356:
       25: 1357:  if (toFlag == 1)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1358:    {
        8: 1359:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        8: 1360:      state->deckCount[player]++;
        -: 1361:    }
       17: 1362:  else if (toFlag == 2)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -: 1363:    {
        8: 1364:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1365:      state->handCount[player]++;
        -: 1366:    }
        -: 1367:  else
        -: 1368:    {
        9: 1369:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1370:      state->discardCount[player]++;
        -: 1371:    }
        -: 1372:	
        -: 1373:  //decrease number in supply pile
       25: 1374:  state->supplyCount[supplyPos]--;
        -: 1375:	 
       25: 1376:  return 0;
        -: 1377:}
        -: 1378:
function updateCoins called 477 returned 100% blocks executed 100%
      477: 1379:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1380:{
        -: 1381:  int i;
        -: 1382:	
        -: 1383:  //reset coin count
      477: 1384:  state->coins = 0;
        -: 1385:
        -: 1386:  //add coins for each Treasure card in player's hand
     2862: 1387:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1388:    {
     2385: 1389:      if (state->hand[player][i] == copper)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1390:	{
     1252: 1391:	  state->coins += 1;
        -: 1392:	}
     1133: 1393:      else if (state->hand[player][i] == silver)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -: 1394:	{
      450: 1395:	  state->coins += 2;
        -: 1396:	}
      683: 1397:      else if (state->hand[player][i] == gold)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1398:	{
      450: 1399:	  state->coins += 3;
        -: 1400:	}	
        -: 1401:    }	
        -: 1402:
        -: 1403:  //add bonus
      477: 1404:  state->coins += bonus;
        -: 1405:
      477: 1406:  return 0;
        -: 1407:}
        -: 1408:
        -: 1409://******************************************************
        -: 1410://end of dominion.c
