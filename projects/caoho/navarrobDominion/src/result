93c93
< 	for (i = adventurer; i <= treasure_map; i++)  //loop all cards
---
> 	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
95c95
< 		for (j = 0; j < 10; j++)    //loop chosen cards
---
> 		for (j = 0; j < 10; j++)           		//loop chosen cards
110c110
< 			} else //card is not in the set choosen for the game
---
> 			} else    //card is not in the set choosen for the game
211c211
< 	int coin_bonus = 0; //tracks coins gain from actions
---
> 	int coin_bonus = 0; 		//tracks coins gain from actions
337,338c337,338
< 				state->hand[currentPlayer][i];        //Discard
< 		state->hand[currentPlayer][i] = -1;        //Set card to -1
---
> 				state->hand[currentPlayer][i];  //Discard
> 		state->hand[currentPlayer][i] = -1;  //Set card to -1
340c340
< 	state->handCount[currentPlayer] = 0;        //Reset hand count
---
> 	state->handCount[currentPlayer] = 0;  //Reset hand count
344c344
< 		state->whoseTurn = currentPlayer + 1;        //Still safe to increment
---
> 		state->whoseTurn = currentPlayer + 1;  //Still safe to increment
360c360
< 		drawCard(state->whoseTurn, state);        //Draw a card
---
> 		drawCard(state->whoseTurn, state);  //Draw a card
522c522
< 	if (state->deckCount[player] <= 0) {        //Deck is empty
---
> 	if (state->deckCount[player] <= 0) {  //Deck is empty
533c533
< 		state->discardCount[player] = 0;        //Reset discard
---
> 		state->discardCount[player] = 0;  //Reset discard
538c538
< 		if (DEBUG) {        //Debug statements
---
> 		if (DEBUG) {  //Debug statements
545c545
< 		count = state->handCount[player];      //Get current player's hand count
---
> 		count = state->handCount[player];  //Get current player's hand count
547c547
< 		if (DEBUG) {        //Debug statements
---
> 		if (DEBUG) {  //Debug statements
558c558
< 		state->handCount[player]++;        //Increment hand count
---
> 		state->handCount[player]++;  //Increment hand count
564c564
< 		if (DEBUG) {        //Debug statements
---
> 		if (DEBUG) {  //Debug statements
571c571
< 		state->handCount[player]++;        //Increment hand count
---
> 		state->handCount[player]++;  //Increment hand count
642a643
> 	int x;
647a649,652
> 	int temphand[MAX_HAND];  // moved above the if statement
> 	int drawntreasure = 0;
> 	int cardDrawn;
> 	int z = 0;  // this is the counter for the temp hand
667c672
< 		j = state->hand[currentPlayer][choice1]; //store card we will trash
---
> 		j = state->hand[currentPlayer][choice1];  //store card we will trash
699c704
< 		j = state->hand[currentPlayer][choice1]; //store card we will trash
---
> 		j = state->hand[currentPlayer][choice1];  //store card we will trash
723d727
< 
726d729
< 
728,731c731,734
< 		state->numBuys++; //Increase buys by 1!
< 		if (choice1 > 0) { //Boolean true or going to discard an estate
< 			int p = 0; //Iterator for hand!
< 			int card_not_discarded = 1; //Flag for discard set!
---
> 		state->numBuys++;  //Increase buys by 1!
> 		if (choice1 > 0) {  //Boolean true or going to discard an estate
> 			int p = 0;  //Iterator for hand!
> 			int card_not_discarded = 1;  //Flag for discard set!
734c737
< 					state->coins += 4; //Add 4 coins to the amount of coins
---
> 					state->coins += 4;  //Add 4 coins to the amount of coins
745c748
< 					card_not_discarded = 0; //Exit the loop
---
> 					card_not_discarded = 0;  //Exit the loop
754c757
< 						state->supplyCount[estate]--; //Decrement estates
---
> 						state->supplyCount[estate]--;  //Decrement estates
759c762
< 					card_not_discarded = 0; //Exit the loop
---
> 					card_not_discarded = 0;  //Exit the loop
763c766
< 					p++; //Next card
---
> 					p++;  //Next card
770,771c773,774
< 				gainCard(estate, state, 0, currentPlayer); //Gain an estate
< 				state->supplyCount[estate]--; //Decrement Estates
---
> 				gainCard(estate, state, 0, currentPlayer);  //Gain an estate
> 				state->supplyCount[estate]--;  //Decrement Estates
798c801
< 		if (choice1) //+2 coins
---
> 		if (choice1)		//+2 coins
803c806
< 		else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
---
> 		else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
876c879
< 					state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
---
> 					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];	//Move to deck
882c885
< 				shuffle(nextPlayer, state); //Shuffle the deck
---
> 				shuffle(nextPlayer, state);		//Shuffle the deck
894c897
< 		if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
---
> 		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
904c907
< 					|| tributeRevealedCards[i] == gold) { //Treasure cards
---
> 					|| tributeRevealedCards[i] == gold) {		//Treasure cards
912c915
< 					|| tributeRevealedCards[i] == great_hall) { //Victory Card Found
---
> 					|| tributeRevealedCards[i] == great_hall) {	//Victory Card Found
915c918
< 			} else { //Action Card
---
> 			} else {		//Action Card
923c926
< 		j = 0; //used to check if player has enough cards to discard
---
> 		j = 0;		//used to check if player has enough cards to discard
1048c1051
< 				state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
---
> 				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
1171a1175,1190
> //end of dominion.c
> 
> //my modification
> int playSmithy(struct gameState *state, int handPos) {
> 	int i;
> 	int currentPlayer = whoseTurn(state);
> 	for (i = 0; i < 3; i++) { //original
> //	for (i = 0; i <= 3; i++) {  //bug
> 		drawCard(currentPlayer, state);
> 	}
> 
> 	//discard card from hand
> 	discardCard(handPos, currentPlayer, state, 0);
> 	return 0;
> }
> 
1172a1192
> 	int drawntreasure = 0;
1175,1177c1195,1196
< 	int drawnTreasure = 0;
< 	int tempHand[MAX_HAND];
< 	int z = 0;
---
> 	int temphand[MAX_HAND];  // moved above the if statement
> 	int z = 0;  // this is the counter for the temp hand
1179,1180c1198,1199
< 	while (drawnTreasure < 2) {
< 		if (state->deckCount[currentPlayer] <= 1) {
---
> 	while (drawntreasure < 2) {
> 		if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
1184,1185c1203
< 		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
< 				- 1];
---
> 		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
1187c1205
< 			drawnTreasure++;
---
> 			drawntreasure++;
1189,1190c1207,1208
< 			tempHand[z] = cardDrawn;
< 			state->handCount[currentPlayer]--;
---
> 			temphand[z] = cardDrawn;
> 			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
1194,1195c1212,1213
< 
< 	while (z - 1 >= 0) {
---
> 	while (z - 1 >= 0) { // original
> //	while (z - 1 > 0) { //bug
1197,1198c1215,1216
< 				tempHand[z - 1];
< 		z--;
---
> 				temphand[z - 1]; // discard all cards in play that have been drawn
> 		z = z - 1;
1200d1217
< 
1203,1216d1219
< ;
< 
< int playSmithy(struct gameState *state, int handPos) {
< 	int i;
< 	int currentPlayer = whoseTurn(state);
< 
< 	for (i = 0; i < 3; i++) {
< 		drawCard(currentPlayer, state);
< 	}
< 
< 	discardCard(handPos, currentPlayer, state, 0);
< 	return 0;
< }
< ;
1220d1222
< 
1221a1224,1227
> 	//+2 Actions
> 	state->numActions = state->numActions + 2;// original
> //	state->numActions = state->numActions + 1; //bug
> 	//discard played card from hand
1223d1228
< 
1226d1230
< ;
1230d1233
< 	int x;
1232c1235,1236
< 	int tempHand[MAX_HAND];
---
> 	int temphand[MAX_HAND];  // moved above the if statement
> 	int x;
1234c1238,1239
< 	// gain card with cost up to 5 and backup hand
---
> 	//gain card with cost up to 5
> 	//Backup hand
1236,1237c1241,1242
< 		tempHand[i] = state->hand[currentPlayer][i];      //backup card
< 		state->hand[currentPlayer][i] = -1;             //Set to nothing
---
> 		temphand[i] = state->hand[currentPlayer][i];      //Backup card
> 		state->hand[currentPlayer][i] = -1;      //Set to nothing
1238a1244
> 	//Backup hand
1240,1242c1246,1250
< 	updateCoins(currentPlayer, state, 5);
< 	x = 1;
< 	while (x == 1) {
---
> 	//Update Coins for Buy
> 	updateCoins(currentPlayer, state, 5); // original we need to updateCoins, but I comment it into a bug.
> 
> 	x = 1;      //Condition to loop on
> 	while (x == 1) {      //Buy one card
1244c1252
< 			if (DEBUG) {
---
> 			if (DEBUG)
1245a1254,1255
> 
> 			if (DEBUG) {
1249a1260
> 
1253a1265
> 
1260,1261c1272,1274
< 			gainCard(choice1, state, 0, currentPlayer);          //Gain the card
< 			x = 0;             //No more buying cards
---
> 
> 			gainCard(choice1, state, 0, currentPlayer);      //Gain the card
> 			x = 0;      //No more buying cards
1268a1282
> 
1274,1275c1288,1289
< 		state->hand[currentPlayer][i] = tempHand[i];
< 		tempHand[i] = -1;
---
> 		state->hand[currentPlayer][i] = temphand[i];
> 		temphand[i] = -1;
1280d1293
< ;
1282a1296
> 
1286,1287c1300,1301
< 	// Draw 4 cards
< 	for (i = 0; i <= 4; i++) {
---
> 	//+4 Cards
> 	for (i = 0; i < 4; i++) {
1290c1304,1308
< 	// Each other player draws 1 card
---
> 
> 	//+1 Buy
> 	state->numBuys++;  //original we need to +1 Buy, but I comment it into a bug.
> 
> 	//Each other player draws a card
1292c1310,1312
< 		drawCard(i, state);
---
> 		if (i != currentPlayer) {
> 			drawCard(i, state);
> 		}
1294,1295d1313
< 	// Discard played card
< 	discardCard(handPos, currentPlayer, state, 0);
1296a1315,1316
> 	//put played card in played card pile
> 	discardCard(handPos, currentPlayer, state, 0);
1299,1306d1318
< ;
< 
< void customAssert(int val) {
< 	if (val == 0) {
< 		printf("TEST FAILED!\n");
< 	} else
< 		printf("TEST PASSED!\n");
< }
1308,1310c1320,1321
< void assertMsg(const char *msg, int expected, int actual) {
< 	printf("%s\n%s:\texpected: %d\tactual: %d\n", msg,
< 			expected == actual ? "SUCCESS" : "FAILURE", expected, actual);
---
> void assertMsg(const char *msg, int expected, int actual){
> 	printf("%s\n%s:\texpected: %d\tactual: %d\n", msg, expected == actual ? "SUCCESS" : "FAILURE", expected, actual);
1312,1313d1322
< 
< //end of dominion.c
