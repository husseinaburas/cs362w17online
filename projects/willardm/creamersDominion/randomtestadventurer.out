----------------- Random Testing Card: adventurer ----------------
----------------- Test Round: 0 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  9   Deck Count Post:  343
Cards from deck to hand?  : PASS
----------------- Test Round: 1 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  260   Deck Count Post:  150
Cards from deck to hand?  : PASS
----------------- Test Round: 2 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  166   Deck Count Post:  117
Cards from deck to hand?  : PASS
----------------- Test Round: 3 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  118   Deck Count Post:  428
Cards from deck to hand?  : PASS
----------------- Test Round: 4 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  250   Deck Count Post:  361
Cards from deck to hand?  : PASS
----------------- Test Round: 5 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  207   Deck Count Post:  273
Cards from deck to hand?  : PASS
----------------- Test Round: 6 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  387   Deck Count Post:  67
Cards from deck to hand?  : PASS
----------------- Test Round: 7 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  201   Deck Count Post:  291
Cards from deck to hand?  : PASS
----------------- Test Round: 8 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  96   Deck Count Post:  55
Cards from deck to hand?  : PASS
----------------- Test Round: 9 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  383   Deck Count Post:  31
Cards from deck to hand?  : PASS
----------------- Test Round: 10 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  413   Deck Count Post:  31
Cards from deck to hand?  : PASS
----------------- Test Round: 11 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  293   Deck Count Post:  174
Cards from deck to hand?  : PASS
----------------- Test Round: 12 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  471   Deck Count Post:  97
Cards from deck to hand?  : PASS
----------------- Test Round: 13 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  195   Deck Count Post:  343
Cards from deck to hand?  : PASS
----------------- Test Round: 14 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  53   Deck Count Post:  460
Cards from deck to hand?  : PASS
----------------- Test Round: 15 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  218   Deck Count Post:  293
Cards from deck to hand?  : PASS
----------------- Test Round: 16 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  418   Deck Count Post:  426
Cards from deck to hand?  : PASS
----------------- Test Round: 17 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  58   Deck Count Post:  415
Cards from deck to hand?  : PASS
----------------- Test Round: 18 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  152   Deck Count Post:  457
Cards from deck to hand?  : PASS
----------------- Test Round: 19 ----------------
Number of Treasure Cards Pre: 2
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 2
+2 Treasure Cards?  : FAIL
 Hand Count Post:  9   Deck Count Post:  279
Cards from deck to hand?  : PASS
----------------- Test Round: 20 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  318   Deck Count Post:  247
Cards from deck to hand?  : PASS
----------------- Test Round: 21 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  27   Deck Count Post:  114
Cards from deck to hand?  : PASS
----------------- Test Round: 22 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  409   Deck Count Post:  411
Cards from deck to hand?  : PASS
----------------- Test Round: 23 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  82   Deck Count Post:  246
Cards from deck to hand?  : PASS
----------------- Test Round: 24 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  448   Deck Count Post:  337
Cards from deck to hand?  : PASS
----------------- Test Round: 25 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  290   Deck Count Post:  223
Cards from deck to hand?  : PASS
----------------- Test Round: 26 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  62   Deck Count Post:  168
Cards from deck to hand?  : PASS
----------------- Test Round: 27 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  22   Deck Count Post:  154
Cards from deck to hand?  : PASS
----------------- Test Round: 28 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  115   Deck Count Post:  12
Cards from deck to hand?  : PASS
----------------- Test Round: 29 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  137   Deck Count Post:  100
Cards from deck to hand?  : PASS
----------------- Test Round: 30 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  255   Deck Count Post:  222
Cards from deck to hand?  : PASS
----------------- Test Round: 31 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  451   Deck Count Post:  188
Cards from deck to hand?  : PASS
----------------- Test Round: 32 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  294   Deck Count Post:  164
Cards from deck to hand?  : PASS
----------------- Test Round: 33 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  213   Deck Count Post:  139
Cards from deck to hand?  : PASS
----------------- Test Round: 34 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  305   Deck Count Post:  114
Cards from deck to hand?  : PASS
----------------- Test Round: 35 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  443   Deck Count Post:  462
Cards from deck to hand?  : PASS
----------------- Test Round: 36 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  73   Deck Count Post:  405
Cards from deck to hand?  : PASS
----------------- Test Round: 37 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  84   Deck Count Post:  196
Cards from deck to hand?  : PASS
----------------- Test Round: 38 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  195   Deck Count Post:  432
Cards from deck to hand?  : PASS
----------------- Test Round: 39 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  140   Deck Count Post:  372
Cards from deck to hand?  : PASS
----------------- Test Round: 40 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  329   Deck Count Post:  252
Cards from deck to hand?  : PASS
----------------- Test Round: 41 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  299   Deck Count Post:  10
Cards from deck to hand?  : PASS
----------------- Test Round: 42 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  4   Deck Count Post:  410
Cards from deck to hand?  : PASS
----------------- Test Round: 43 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  71   Deck Count Post:  405
Cards from deck to hand?  : PASS
----------------- Test Round: 44 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  497   Deck Count Post:  298
Cards from deck to hand?  : PASS
----------------- Test Round: 45 ----------------
Number of Treasure Cards Pre: 2
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 2
+2 Treasure Cards?  : FAIL
 Hand Count Post:  286   Deck Count Post:  176
Cards from deck to hand?  : PASS
----------------- Test Round: 46 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  214   Deck Count Post:  93
Cards from deck to hand?  : PASS
----------------- Test Round: 47 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  484   Deck Count Post:  195
Cards from deck to hand?  : PASS
----------------- Test Round: 48 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  117   Deck Count Post:  401
Cards from deck to hand?  : PASS
----------------- Test Round: 49 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  154   Deck Count Post:  136
Cards from deck to hand?  : PASS
----------------- Test Round: 50 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  232   Deck Count Post:  464
Cards from deck to hand?  : PASS
----------------- Test Round: 51 ----------------
Number of Treasure Cards Pre: 2
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 2
+2 Treasure Cards?  : FAIL
 Hand Count Post:  86   Deck Count Post:  126
Cards from deck to hand?  : PASS
----------------- Test Round: 52 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  437   Deck Count Post:  119
Cards from deck to hand?  : PASS
----------------- Test Round: 53 ----------------
Number of Treasure Cards Pre: 2
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 2
+2 Treasure Cards?  : FAIL
 Hand Count Post:  244   Deck Count Post:  13
Cards from deck to hand?  : PASS
----------------- Test Round: 54 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  48   Deck Count Post:  135
Cards from deck to hand?  : PASS
----------------- Test Round: 55 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  364   Deck Count Post:  101
Cards from deck to hand?  : PASS
----------------- Test Round: 56 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  92   Deck Count Post:  447
Cards from deck to hand?  : PASS
----------------- Test Round: 57 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  378   Deck Count Post:  201
Cards from deck to hand?  : PASS
----------------- Test Round: 58 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  199   Deck Count Post:  316
Cards from deck to hand?  : PASS
----------------- Test Round: 59 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  202   Deck Count Post:  47
Cards from deck to hand?  : PASS
----------------- Test Round: 60 ----------------
Number of Treasure Cards Pre: 5
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 5
+2 Treasure Cards?  : FAIL
 Hand Count Post:  344   Deck Count Post:  50
Cards from deck to hand?  : PASS
----------------- Test Round: 61 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  59   Deck Count Post:  409
Cards from deck to hand?  : PASS
----------------- Test Round: 62 ----------------
Number of Treasure Cards Pre: 3
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 3
+2 Treasure Cards?  : FAIL
 Hand Count Post:  13   Deck Count Post:  164
Cards from deck to hand?  : PASS
----------------- Test Round: 63 ----------------
Number of Treasure Cards Pre: 4
 >>>>> Postcondition Check <<<<<
Number of Treasure Cards Post: 4
+2 Treasure Cards?  : FAIL
 Hand Count Post:  480   Deck Count Post:  436
Cards from deck to hand?  : PASS

 >>>>> Testing complete adventurer <<<<<

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:80.77% of 78
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:46.15% of 13
Branches executed:66.67% of 6
Taken at least once:50.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:91.67% of 12
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'cardEffect'
Lines executed:12.26% of 261
Branches executed:20.65% of 184
Taken at least once:10.33% of 184
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playAdventurer'
Lines executed:26.32% of 19
Branches executed:42.86% of 14
Taken at least once:21.43% of 14
No calls

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playCouncil_Room'
Lines executed:0.00% of 12
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'playGardens'
Lines executed:0.00% of 1
No branches
No calls

Function 'playVillage'
Lines executed:100.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:33.94% of 654
Branches executed:38.21% of 424
Taken at least once:28.30% of 424
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 1904 returned 100% blocks executed 85%
        -:   10:int compare(const void* a, const void* b) {
     1904:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:    return 1;
     1904:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      680:   14:    return -1;
     1224:   15:  return 0;
     1904:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 68 returned 100% blocks executed 83%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       68:   46:  SelectStream(1);
       68:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
      136:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       68:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
     1496:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
    14960:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:        {
    12920:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
     6800:   67:        }
      680:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       68:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:    {
       68:   77:      state->supplyCount[curse] = 10;
       68:   78:    }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
    #####:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       68:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:    {
       68:   91:      state->supplyCount[estate] = 8;
       68:   92:      state->supplyCount[duchy] = 8;
       68:   93:      state->supplyCount[province] = 8;
       68:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       68:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       68:  104:  state->supplyCount[silver] = 40;
       68:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
     2856:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:    {
    22440:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:	{
    10540:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
     1360:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
    #####:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
    #####:  121:		}
        -:  122:	      else
        -:  123:		{
      680:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      680:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     9860:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
     9860:  132:	}
        -:  133:
     1360:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
      408:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
      136:  142:      state->deckCount[i] = 0;
     1088:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:	{
      408:  145:	  state->deck[i][j] = estate;
      408:  146:	  state->deckCount[i]++;
      408:  147:	}
     2176:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:	{
      952:  150:	  state->deck[i][j] = copper;
      952:  151:	  state->deckCount[i]++;		
      952:  152:	}
      136:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
      408:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
      136:  158:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
      136:  162:    }
        -:  163:
        -:  164:  //draw player hands
      408:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {  
        -:  167:      //initialize hand size to zero
      136:  168:      state->handCount[i] = 0;
      136:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
      136:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
     3808:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
     1836:  180:      state->embargoTokens[i] = 0;
     1836:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       68:  184:  state->outpostPlayed = 0;
       68:  185:  state->phase = 0;
       68:  186:  state->numActions = 1;
       68:  187:  state->numBuys = 1;
       68:  188:  state->playedCardCount = 0;
       68:  189:  state->whoseTurn = 0;
       68:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      816:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      340:  195:    drawCard(state->whoseTurn, state);
      340:  196:  }
        -:  197:
       68:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       68:  200:  return 0;
       68:  201:}
        -:  202:
function shuffle called 136 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      136:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      136:  211:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:    return -1;
      136:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
     2992:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     1360:  217:    card = floor(Random() * state->deckCount[player]);
     1360:  218:    newDeck[newDeckPos] = state->deck[player][card];
     1360:  219:    newDeckPos++;
     8780:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31%
     3030:  221:      state->deck[player][i] = state->deck[player][i+1];
     3030:  222:    }
     1360:  223:    state->deckCount[player]--;
        -:  224:  }
     2992:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     1360:  226:    state->deck[player][i] = newDeck[i];
     1360:  227:    state->deckCount[player]++;
     1360:  228:  }
        -:  229:
      136:  230:  return 0;
      136:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 3 returned 100% blocks executed 50%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
        3:  282:  who = state->whoseTurn;
        -:  283:
        3:  284:  if (state->numBuys < 1){
branch  0 taken 33%
branch  1 taken 67%
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
        1:  287:    return -1;
        2:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 100%
branch  1 taken 0%
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
        2:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        3:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 4 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
        4:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 135 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
      135:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 4 returned 100% blocks executed 92%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
        4:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 25%
branch  1 taken 75%
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        3:  403:  j = 0;
      156:  404:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  405:    {
       75:  406:      if (state->supplyCount[i] == 0)
branch  0 taken 92%
branch  1 taken 8%
        -:  407:	{
       69:  408:	  j++;
       69:  409:	}
       75:  410:    }
        3:  411:  if ( j >= 3)
branch  0 taken 100%
branch  1 taken 0%
        -:  412:    {
        3:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        4:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
    #####:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
    #####:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
    #####:  486:	}
    #####:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
    #####:  497:	}
    #####:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
    #####:  507:	}
    #####:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
    #####:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
    #####:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 344 returned 100% blocks executed 41%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      344:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
    #####:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
    #####:  567:  }
        -:  568:
        -:  569:  else{
      344:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
      344:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
      344:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      344:  578:    state->deckCount[player]--;
      344:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
      344:  582:  return 0;
      344:  583:}
        -:  584:
function getCost called 28 returned 100% blocks executed 96%
        -:  585:int getCost(int cardNumber)
        -:  586:{
       28:  587:  switch( cardNumber ) 
branch  0 taken 7%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  588:    {
        -:  589:    case curse:
        2:  590:      return 0;
        -:  591:    case estate:
        1:  592:      return 2;
        -:  593:    case duchy:
        1:  594:      return 5;
        -:  595:    case province:
        1:  596:      return 8;
        -:  597:    case copper:
        1:  598:      return 0;
        -:  599:    case silver:
        1:  600:      return 3;
        -:  601:    case gold:
        1:  602:      return 6;
        -:  603:    case adventurer:
        1:  604:      return 6;
        -:  605:    case council_room:
        1:  606:      return 5;
        -:  607:    case feast:
        1:  608:      return 4;
        -:  609:    case gardens:
        1:  610:      return 4;
        -:  611:    case mine:
        1:  612:      return 5;
        -:  613:    case remodel:
        1:  614:      return 4;
        -:  615:    case smithy:
        1:  616:      return 4;
        -:  617:    case village:
        1:  618:      return 3;
        -:  619:    case baron:
        1:  620:      return 4;
        -:  621:    case great_hall:
        1:  622:      return 3;
        -:  623:    case minion:
        1:  624:      return 5;
        -:  625:    case steward:
        1:  626:      return 3;
        -:  627:    case tribute:
        1:  628:      return 5;
        -:  629:    case ambassador:
        1:  630:      return 3;
        -:  631:    case cutpurse:
        1:  632:      return 4;
        -:  633:    case embargo: 
        1:  634:      return 2;
        -:  635:    case outpost:
        1:  636:      return 5;
        -:  637:    case salvager:
        1:  638:      return 4;
        -:  639:    case sea_hag:
        1:  640:      return 4;
        -:  641:    case treasure_map:
        1:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
       28:  646:}
        -:  647:
function cardEffect called 68 returned 100% blocks executed 13%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
       68:  655:  int currentPlayer = whoseTurn(state);
       68:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
       68:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        -:  660:  
       68:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 47%
branch  1 taken 53%
       32:  662:    nextPlayer = 0;
       32:  663:  }
        -:  664:  
        -:  665:  //refactored cards
       68:  666:  if (card == adventurer)
branch  0 taken 96%
branch  1 taken 4%
        -:  667:  {
       65:  668:	return playAdventurer(state);
        -:  669:  }
        3:  670:  else if (card == smithy)
branch  0 taken 33%
branch  1 taken 67%
        -:  671:  {
        1:  672:	return playSmithy(state, handPos);
        -:  673:  }
        2:  674:  else if (card == council_room)
branch  0 taken 0%
branch  1 taken 100%
        -:  675:  {
    #####:  676:	return playCouncil_Room(state, handPos);
        -:  677:  }
        2:  678:  else if (card == gardens)
branch  0 taken 0%
branch  1 taken 100%
        -:  679:  {
    #####:  680:	return playGardens();
        -:  681:  }
        2:  682:  else if (card == village)
branch  0 taken 50%
branch  1 taken 50%
        -:  683:  {
        1:  684:	return playVillage(state, handPos);
        -:  685:  }
        -:  686:	
        -:  687:  //uses switch to select card and perform actions
        1:  688:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  689:    {
        -:  690:   
        -:  691:    case feast:
        -:  692:      //gain card with cost up to 5
        -:  693:      //Backup hand
       14:  694:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14%
        6:  695:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  696:	state->hand[currentPlayer][i] = -1;//Set to nothing
        6:  697:      }
        -:  698:      //Backup hand
        -:  699:
        -:  700:      //Update Coins for Buy
        1:  701:      updateCoins(currentPlayer, state, 5);
        1:  702:      x = 1;//Condition to loop on
        4:  703:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50%
        1:  704:	if (supplyCount(choice1, state) <= 0){
branch  0 taken 0%
branch  1 taken 100%
        -:  705:	  if (DEBUG)
        -:  706:	    printf("None of that card left, sorry!\n");
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  710:	  }
    #####:  711:	}
        1:  712:	else if (state->coins < getCost(choice1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  713:	  printf("That card is too expensive!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  717:	  }
    #####:  718:	}
        -:  719:	else{
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:	  }
        -:  724:
        1:  725:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  726:	  x = 0;//No more buying cards
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
        -:  732:	}
        -:  733:      }     
        -:  734:
        -:  735:      //Reset Hand
       14:  736:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14%
        6:  737:	state->hand[currentPlayer][i] = temphand[i];
        6:  738:	temphand[i] = -1;
        6:  739:      }
        -:  740:      //Reset Hand
        -:  741:      			
        1:  742:      return 0;
        -:  743:				
        -:  744:    case mine:
    #####:  745:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  746:
    #####:  747:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:		
    #####:  752:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:
    #####:  757:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      gainCard(choice2, state, 2, currentPlayer);
        -:  763:
        -:  764:      //discard card from hand
    #####:  765:      discardCard(handPos, currentPlayer, state, 0);
        -:  766:
        -:  767:      //discard trashed card
    #####:  768:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  769:	{
    #####:  770:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  771:	    {
    #####:  772:	      discardCard(i, currentPlayer, state, 0);			
    #####:  773:	      break;
        -:  774:	    }
    #####:  775:	}
        -:  776:			
    #####:  777:      return 0;
        -:  778:			
        -:  779:    case remodel:
    #####:  780:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  781:
    #####:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      gainCard(choice2, state, 0, currentPlayer);
        -:  788:
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
        -:  791:
        -:  792:      //discard trashed card
    #####:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  794:	{
    #####:  795:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  796:	    {
    #####:  797:	      discardCard(i, currentPlayer, state, 0);			
    #####:  798:	      break;
        -:  799:	    }
    #####:  800:	}
        -:  801:
        -:  802:
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case baron:
    #####:  806:      state->numBuys++;//Increase buys by 1!
    #####:  807:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  808:	int p = 0;//Iterator for hand!
    #####:  809:	int card_not_discarded = 1;//Flag for discard set!
    #####:  810:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  811:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  812:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  813:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  814:	    state->discardCount[currentPlayer]++;
    #####:  815:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  816:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  817:	    }
    #####:  818:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  819:	    state->handCount[currentPlayer]--;
    #####:  820:	    card_not_discarded = 0;//Exit the loop
    #####:  821:	  }
    #####:  822:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  823:	    if(DEBUG) {
        -:  824:	      printf("No estate cards in your hand, invalid choice\n");
        -:  825:	      printf("Must gain an estate if there are any\n");
        -:  826:	    }
    #####:  827:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  828:	      gainCard(estate, state, 0, currentPlayer);
    #####:  829:	      state->supplyCount[estate]--;//Decrement estates
    #####:  830:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  831:		isGameOver(state);
    #####:  832:	      }
    #####:  833:	    }
    #####:  834:	    card_not_discarded = 0;//Exit the loop
    #####:  835:	  }
        -:  836:			    
        -:  837:	  else{
    #####:  838:	    p++;//Next card
        -:  839:	  }
        -:  840:	}
    #####:  841:      }
        -:  842:			    
        -:  843:      else{
    #####:  844:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  845:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  846:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  847:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  848:	    isGameOver(state);
    #####:  849:	  }
    #####:  850:	}
        -:  851:      }
        -:  852:	    
        -:  853:      
    #####:  854:      return 0;
        -:  855:		
        -:  856:    case great_hall:
        -:  857:      //+1 Card
    #####:  858:      drawCard(currentPlayer, state);
        -:  859:			
        -:  860:      //+1 Actions
    #####:  861:      state->numActions++;
        -:  862:			
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case minion:
        -:  868:      //+1 action
    #####:  869:      state->numActions++;
        -:  870:			
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:			
    #####:  874:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  875:	{
    #####:  876:	  state->coins = state->coins + 2;
    #####:  877:	}
        -:  878:			
    #####:  879:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  880:	{
        -:  881:	  //discard hand
    #####:  882:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(handPos, currentPlayer, state, 0);
        -:  885:	    }
        -:  886:				
        -:  887:	  //draw 4
    #####:  888:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      drawCard(currentPlayer, state);
    #####:  891:	    }
        -:  892:				
        -:  893:	  //other players discard hand and redraw if hand size > 4
    #####:  894:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  897:		{
    #####:  898:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  899:		    {
        -:  900:		      //discard hand
    #####:  901:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  discardCard(handPos, i, state, 0);
        -:  904:			}
        -:  905:							
        -:  906:		      //draw 4
    #####:  907:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  908:			{
    #####:  909:			  drawCard(i, state);
    #####:  910:			}
    #####:  911:		    }
    #####:  912:		}
    #####:  913:	    }
        -:  914:				
    #####:  915:	}
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case steward:
    #####:  919:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 cards
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	  drawCard(currentPlayer, state);
    #####:  924:	}
    #####:  925:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  926:	{
        -:  927:	  //+2 coins
    #####:  928:	  state->coins = state->coins + 2;
    #####:  929:	}
        -:  930:      else
        -:  931:	{
        -:  932:	  //trash 2 cards in hand
    #####:  933:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  934:	  discardCard(choice3, currentPlayer, state, 1);
        -:  935:	}
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
    #####:  939:      return 0;
        -:  940:		
        -:  941:    case tribute:
    #####:  942:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  943:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  944:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:	  state->deckCount[nextPlayer]--;
    #####:  946:	}
    #####:  947:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  948:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  949:	  state->discardCount[nextPlayer]--;
    #####:  950:	}
        -:  951:	else{
        -:  952:	  //No Card to Reveal
        -:  953:	  if (DEBUG){
        -:  954:	    printf("No cards to reveal\n");
        -:  955:	  }
        -:  956:	}
    #####:  957:      }
        -:  958:	    
        -:  959:      else{
    #####:  960:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  961:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  962:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  963:	    state->deckCount[nextPlayer]++;
    #####:  964:	    state->discard[nextPlayer][i] = -1;
    #####:  965:	    state->discardCount[nextPlayer]--;
    #####:  966:	  }
        -:  967:			    
    #####:  968:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  969:	} 
    #####:  970:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
    #####:  973:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  974:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  975:	state->deckCount[nextPlayer]--;
        -:  976:      }    
        -:  977:		       
    #####:  978:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  979:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  980:	state->playedCardCount++;
    #####:  981:	tributeRevealedCards[1] = -1;
    #####:  982:      }
        -:  983:
    #####:  984:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  985:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  986:	  state->coins += 2;
    #####:  987:	}
        -:  988:		    
    #####:  989:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	  drawCard(currentPlayer, state);
    #####:  992:	}
        -:  993:	else{//Action Card
    #####:  994:	  state->numActions = state->numActions + 2;
        -:  995:	}
    #####:  996:      }
        -:  997:	    
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case ambassador:
    #####: 1001:      j = 0;		//used to check if player has enough cards to discard
        -: 1002:
    #####: 1003:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1004:	{
    #####: 1005:	  return -1;				
        -: 1006:	}
        -: 1007:
    #####: 1008:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
    #####: 1013:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1016:	    {
    #####: 1017:	      j++;
    #####: 1018:	    }
    #####: 1019:	}
    #####: 1020:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1021:	{
    #####: 1022:	  return -1;				
        -: 1023:	}
        -: 1024:
        -: 1025:      if (DEBUG) 
        -: 1026:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1027:
        -: 1028:      //increase supply count for choosen card by amount being discarded
    #####: 1029:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1030:			
        -: 1031:      //each other player gains a copy of revealed card
    #####: 1032:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	{
    #####: 1034:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1035:	    {
    #####: 1036:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1037:	    }
    #####: 1038:	}
        -: 1039:
        -: 1040:      //discard played card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1042:
        -: 1043:      //trash copies of cards returned to supply
    #####: 1044:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	    {
    #####: 1048:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1049:		{
    #####: 1050:		  discardCard(i, currentPlayer, state, 1);
    #####: 1051:		  break;
        -: 1052:		}
    #####: 1053:	    }
    #####: 1054:	}			
        -: 1055:
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case cutpurse:
        -: 1059:
    #####: 1060:      updateCoins(currentPlayer, state, 2);
    #####: 1061:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1064:	    {
    #####: 1065:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1066:		{
    #####: 1067:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1068:		    {
    #####: 1069:		      discardCard(j, i, state, 0);
    #####: 1070:		      break;
        -: 1071:		    }
    #####: 1072:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1073:		    {
    #####: 1074:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1075:			{
        -: 1076:			  if (DEBUG)
        -: 1077:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1078:			}	
    #####: 1079:		      break;
        -: 1080:		    }		
    #####: 1081:		}
        -: 1082:					
    #####: 1083:	    }
        -: 1084:				
    #####: 1085:	}				
        -: 1086:
        -: 1087:      //discard played card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1089:
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:		
        -: 1093:    case embargo: 
        -: 1094:      //+2 Coins
    #####: 1095:      state->coins = state->coins + 2;
        -: 1096:			
        -: 1097:      //see if selected pile is in play
    #####: 1098:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:			
        -: 1103:      //add embargo token to selected supply pile
    #####: 1104:      state->embargoTokens[choice1]++;
        -: 1105:			
        -: 1106:      //trash card
    #####: 1107:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case outpost:
        -: 1111:      //set outpost flag
    #####: 1112:      state->outpostPlayed++;
        -: 1113:			
        -: 1114:      //discard card
    #####: 1115:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case salvager:
        -: 1119:      //+1 buy
    #####: 1120:      state->numBuys++;
        -: 1121:			
    #####: 1122:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  //gain coins equal to trashed card
    #####: 1125:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1126:	  //trash card
    #####: 1127:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1128:	}
        -: 1129:			
        -: 1130:      //discard card
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case sea_hag:
    #####: 1135:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1136:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1137:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1138:	  state->discardCount[i]++;
    #####: 1139:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1140:	}
    #####: 1141:      }
    #####: 1142:      return 0;
        -: 1143:		
        -: 1144:    case treasure_map:
        -: 1145:      //search hand for another treasure_map
    #####: 1146:      index = -1;
    #####: 1147:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
    #####: 1149:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1150:	    {
    #####: 1151:	      index = i;
    #####: 1152:	      break;
        -: 1153:	    }
    #####: 1154:	}
    #####: 1155:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
        -: 1157:	  //trash both treasure cards
    #####: 1158:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1159:	  discardCard(index, currentPlayer, state, 1);
        -: 1160:
        -: 1161:	  //gain 4 Gold cards
    #####: 1162:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:	    {
    #####: 1164:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1165:	    }
        -: 1166:				
        -: 1167:	  //return success
    #####: 1168:	  return 1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //no second treasure_map found in hand
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
    #####: 1175:  return -1;
       68: 1176:}
        -: 1177:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1178:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1179:{
        -: 1180:	
        -: 1181:  //if card is not trashed, added to Played pile 
        2: 1182:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1183:    {
        -: 1184:      //add card to played pile
        2: 1185:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1186:      state->playedCardCount++;
        2: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
        2: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
        2: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
        2: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
        2: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
        2: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
        2: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212:	
        2: 1213:  return 0;
        -: 1214:}
        -: 1215:
function gainCard called 1 returned 100% blocks executed 72%
        -: 1216:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1217:{
        -: 1218:  //Note: supplyPos is enum of choosen card
        -: 1219:	
        -: 1220:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1221:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1222:    {
    #####: 1223:      return -1;
        -: 1224:    }
        -: 1225:	
        -: 1226:  //added card for [whoseTurn] current player:
        -: 1227:  // toFlag = 0 : add to discard
        -: 1228:  // toFlag = 1 : add to deck
        -: 1229:  // toFlag = 2 : add to hand
        -: 1230:
        1: 1231:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1232:    {
    #####: 1233:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1234:      state->deckCount[player]++;
    #####: 1235:    }
        1: 1236:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1237:    {
    #####: 1238:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1239:      state->handCount[player]++;
    #####: 1240:    }
        -: 1241:  else
        -: 1242:    {
        1: 1243:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1244:      state->discardCount[player]++;
        -: 1245:    }
        -: 1246:	
        -: 1247:  //decrease number in supply pile
        1: 1248:  state->supplyCount[supplyPos]--;
        -: 1249:	 
        1: 1250:  return 0;
        1: 1251:}
        -: 1252:
function updateCoins called 71 returned 100% blocks executed 100%
        -: 1253:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1254:{
        -: 1255:  int i;
        -: 1256:	
        -: 1257:  //reset coin count
       71: 1258:  state->coins = 0;
        -: 1259:
        -: 1260:  //add coins for each Treasure card in player's hand
      844: 1261:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1262:    {
      351: 1263:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1264:	{
      247: 1265:	  state->coins += 1;
      247: 1266:	}
      104: 1267:      else if (state->hand[player][i] == silver)
branch  0 taken 2%
branch  1 taken 98%
        -: 1268:	{
        2: 1269:	  state->coins += 2;
        2: 1270:	}
      102: 1271:      else if (state->hand[player][i] == gold)
branch  0 taken 2%
branch  1 taken 98%
        -: 1272:	{
        2: 1273:	  state->coins += 3;
        2: 1274:	}	
      351: 1275:    }	
        -: 1276:
        -: 1277:  //add bonus
       71: 1278:  state->coins += bonus;
        -: 1279:
       71: 1280:  return 0;
        -: 1281:}
        -: 1282:
function playAdventurer called 65 returned 100% blocks executed 47%
        -: 1283:int playAdventurer(struct gameState *state)
        -: 1284:{
       65: 1285:	int drawnTreasures = 0, z = 0, cardDrawn = 0, shuffled = 0;
       65: 1286:	int currentPlayer = whoseTurn(state);
        -: 1287:	int temphand[MAX_HAND];
      260: 1288:      while(drawnTreasures<2 && shuffled == 1)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1289:	  {
    #####: 1290:		if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -: 1291:		{//if the deck is empty we need to shuffle discard and add to deck
    #####: 1292:		  shuffle(currentPlayer, state);
    #####: 1293:		  shuffled = 1;
    #####: 1294:		}
    #####: 1295:		drawCard(currentPlayer, state);
    #####: 1296:		cardDrawn = copper;//top card of hand is most recently drawn card.
    #####: 1297:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1298:		{
    #####: 1299:		  drawnTreasures++;
    #####: 1300:		}
        -: 1301:		else
        -: 1302:			{
    #####: 1303:			  temphand[z]=cardDrawn;
    #####: 1304:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1305:			  z++;
        -: 1306:			}
        -: 1307:	  }
      130: 1308:		while(z-1>=0)
branch  0 taken 0%
branch  1 taken 100%
        -: 1309:		{
    #####: 1310:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1311:			z=z-1;
        -: 1312:		}
       65: 1313:      return 0;
        -: 1314:}
        -: 1315:
function playSmithy called 1 returned 100% blocks executed 100%
        -: 1316:int playSmithy(struct gameState *state, int handPos)
        -: 1317:{
        1: 1318:	int currentPlayer = whoseTurn(state) + 1, i = 0;
        -: 1319:     //+3 Cards
        8: 1320:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1321:	{
        3: 1322:	  drawCard(currentPlayer, state);
        3: 1323:	}
        -: 1324:			
        -: 1325:      //discard card from hand
        1: 1326:    discardCard(handPos, currentPlayer, state, 0);
        1: 1327:	return 0;
        -: 1328:}
        -: 1329:
function playCouncil_Room called 0 returned 0% blocks executed 0%
        -: 1330:int playCouncil_Room(struct gameState *state, int handPos)
        -: 1331:{
    #####: 1332:	int i, currentPlayer = whoseTurn(state);
        -: 1333:      //+4 Cards
    #####: 1334:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:	  drawCard(currentPlayer, state);
    #####: 1337:	}
        -: 1338:			
        -: 1339:      //+1 Buy
    #####: 1340:      state->numBuys++;
        -: 1341:			
        -: 1342:      //Each other player draws a card
    #####: 1343:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:	{
    #####: 1345:	  if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1346:	    {
    #####: 1347:	      drawCard(i, state);
    #####: 1348:	    }
    #####: 1349:	}
        -: 1350:			
        -: 1351:      //put played card in played card pile
    #####: 1352:      discardCard(handPos, currentPlayer, state, 0);
        -: 1353:			
    #####: 1354:      return 0;
        -: 1355:}
        -: 1356:
function playGardens called 0 returned 0% blocks executed 0%
        -: 1357:int playGardens(void)
        -: 1358:{
    #####: 1359:	return -1;
        -: 1360:}
        -: 1361:
function playVillage called 1 returned 100% blocks executed 100%
        -: 1362:int playVillage(struct gameState *state, int handPos)
        -: 1363:{
        1: 1364:  int currentPlayer = whoseTurn(state);
        -: 1365:   //+1 Card
        1: 1366:  drawCard(currentPlayer, state);
        -: 1367:		
        -: 1368:  //+2 Actions
        1: 1369:  state->numActions = state->numActions + 2;
        -: 1370:		
        -: 1371:  //discard played card from hand
        1: 1372:  discardCard(currentPlayer, currentPlayer, state, 0);
        1: 1373:  return 0;
        -: 1374:}
        -: 1375://end of dominion.c
        -: 1376:
