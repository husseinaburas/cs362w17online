Bug 1: playSmithy does not increase the players handCount by 2.

How I Found It
One bug I found in Patrick’s code was that his playSmithy function did not increase the player’s handCount by 2 as expected. I found it by analyzing the print out information for both the unit and random tests for the smithy card. In every one of those tests, if the input was valid, the test failed. To narrow down why that test was failing, I added print statements for the handCount before and after.

Symptom
The expected result of the playSmithy function is that the Smithy card is discarded and 3 cards are drawn, therefore the net card gain should be 2. The symptom for this bug was that the handCount increased by 3 instead of the expected 2. 

Cause
After looking at the code in dominion.c, I noticed that the for loop in playSmithy looped 4 times instead of 3. This happened because it ran from i=0 to i <=3. The less than or equal to sign means that it runs when i=0, 1, 2, and 3. The cause is an accidental equal sign for the middle term of the for loop.

Fix
To fix this, I would just remove the equals sign in the for loop.

Bug 2:discardCard does not place the card in the discard pile

How I Found It
Another bug I found was not a bug that Patrick added to the code. Instead, this was a bug that was already in the dominion code. This bug was in the discardCard function. Every set of inputs with a failed test had the failure that the appropriate card was not in the discard pile.

Symptom
The symptom for this bug was that the appropriate card was not at the top of the discard pile. This was checked by comparing the card that was to be discarded with the card at the top of the discard pile. 

Cause
After looking at the discardCard function, I noticed that nowhere was the 2x2 discard array used. Instead, the cards were placed in the played cards array. Nowhere in the dominion code is this array transferred over to the discard card array. This is a major bug in the code and would need to be fixed immediately to get the expected results from playing the game.

Fix
To fix this, I would ignore the played cards array and just move everything to the discard cards array.

Bug 3: Salvager does not work when choice1 is 0. 

How I Found It
The Salvager tests were the most difficult to interpret since there were different number of tests that failed depending on the input. After carefully comparing the input values and the results, I realized that there was an issue when choice1 was 0. For Salvager, choice1 should be the position of the card that the player wants to discard and gain coins for. The location 0 should be a valid place in the players hand but for some reason it was producing 3 failed tests on the output rather than the 1 that was related to bug 2.

Symptom
The symptom for this bug was that there were differing test results depending on the location of choice 1. There were more failures when choice1 was 0 so it was obviously that part of the inputs that was causing an issue.

Cause
The cause of this bug is in the Salvager code. The main part of the salvager code is in an if statement that checks if(choice1). This returns true if choice1 is any number but 0 and false if choice1 is 0. Therefore, when choice1 was location 0, the if statement was not running and the amount of coins was not increased and choice1 was not trashed. 

Fix
To fix this, a better approach would be to check if choice1 was greater than or equal to 0 and less than the player’s current hand size. This would make sure that choice1 was in a valid position.
