There are a few bugs I found in my teammates code. First of all, adventurercard always segfaults whenever being called. I did not find exactly what was causing the segfault, but there is definitely an issue in there. In his smithycard, I found one bug. After the smithycard is played and then trashed, it is not properly added to the played card pile. I found this bug out as my cardtest checks to see if the value of playedCardCount properly increments by one after playing the smithy card. It does not, so I got an error for that variable. Looking at the code, this is because in his smithy function his trash flag for discard is 1 rather than 0. When it is set to 1, the card is not added to the played card pile. I thought this was a pretty interesting bug because it has to do with how a function call in the smithyCard which still allows the program to continue working fine, but will only make a difference later on. It makes it somewhat hard to catch without tests like these. Finally, I found another two bugs in the council room card. First of all, when the card is played the first player draws an extra card. I found this bug out as my test checks how big the hand size is after the card is played and compares it to a value I determined to be correct. Both my random and unit tests show that an extra card is drawn. Looking at his code, this is due to the first forloop where we draw the cards. It goes from 0 to 4, but it includes 4 as it there is a <= rather than a <. Because of this, drawCard is called 5 times rather than 4. The second bug I found was how many cards the last player draws. In fact, the last player doesn’t draw a card at all. Both of my unit and random tests show that the expected hand size of the last player is one less than it should be. Looking again at his code, we can see that the second for loop goes from I = 0 to I < state->numPlayers – 1. There shouldn’t be a -1 in there as it causes it to exclude the last player from drawing a card.