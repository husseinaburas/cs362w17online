
Testing Unit: isGameOver() 

	PRECONDITION TESTS

Verify treasure_map is 26:  TEST SUCCESSFULLY COMPLETED

Verify there are 8 provinces:  TEST SUCCESSFULLY COMPLETED

Verify the count of empty piles is < 3:  TEST SUCCESSFULLY COMPLETED

Verify the count of empty piles is 0:  TEST SUCCESSFULLY COMPLETED

Verify game isn't over:  TEST SUCCESSFULLY COMPLETED

	EMPTY PILE TESTS

Verify game isn't over with 1 empty pile:  TEST SUCCESSFULLY COMPLETED

Verify game isn't over with 2 empty piles:  TEST SUCCESSFULLY COMPLETED

Verify the count of empty piles is < 3:  TEST SUCCESSFULLY COMPLETED

Verify game is over with 3 empty piles:  TEST SUCCESSFULLY COMPLETED

Verify the count of empty piles is 3:  TEST SUCCESSFULLY COMPLETED

	PROVINCE PILE TESTS

:Verify there are 8 provinces:  TEST SUCCESSFULLY COMPLETED

Verify game isn't over with 8 provinces left:  TEST SUCCESSFULLY COMPLETED

Verify game isn't over with 1 province left:  TEST SUCCESSFULLY COMPLETED

Verify game is over with no provinces left:  TEST SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:16.37% of 617
Branches executed:15.85% of 467
Taken at least once:12.85% of 467
Calls executed:8.25% of 97
Creating 'dominion.c.gcov'


Testing Unit: updateCoins() 

	PRECONDITION TESTS

Verify player1 has >= 0 coins:  TEST SUCCESSFULLY COMPLETED

Verify player2 has >= 0 coins:  TEST SUCCESSFULLY COMPLETED

Player1 has: 4 coin:  
Player2 has: 0 coins:  

	ADDING TREASURE TESTS

Verify adding a copper to player1's hand adds 1 coin:  TEST SUCCESSFULLY COMPLETED

Verify adding a silver to player1's hand adds 2 coins:  TEST SUCCESSFULLY COMPLETED

Verify adding a gold to player1's hand adds 3 coins:  TEST SUCCESSFULLY COMPLETED

	REMOVING TREASURE TESTS

Verify card to remove is a copper:  TEST SUCCESSFULLY COMPLETED

Verify the card in Player 1's hand is a copper:  TEST SUCCESSFULLY COMPLETED

Verify removing a copper from player1's hand removes 1 coin:  TEST SUCCESSFULLY COMPLETED

Verify card to remove is a silver:  TEST SUCCESSFULLY COMPLETED

Verify the card in Player 1's hand is a silver:  TEST SUCCESSFULLY COMPLETED

Verify removing a silver from player1's hand removes 2 coins:  TEST SUCCESSFULLY COMPLETED

Verify card to remove is a gold:  TEST SUCCESSFULLY COMPLETED

Verify the card in Player 1's hand is a gold:  TEST SUCCESSFULLY COMPLETED

Verify removing a gold from player1's hand removes 3 coins:  TEST SUCCESSFULLY COMPLETED

	BONUS TESTS

player1 coins: 4 
player1 expected coins: 4 

Verify adding a copper and 1 bonus adds 2 coins:  TEST SUCCESSFULLY COMPLETED
player1 coins: 6 
player1 expected coins: 6 

Verify adding a silver and 9 bonus adds 11 coins:  TEST FAILED
player1 coins: 16 
player1 expected coins: 17 

Verify adding a gold and -1 bonus doesn't work:  TEST FAILED
player1 coins: 9 
player1 expected coins: 17 

error Verify adding a gold and -1 bonus adds 3 coins:  TEST SUCCESSFULLY COMPLETED

player1 coins: 12 
player1 expected coins: 12 
File 'dominion.c'
Lines executed:20.58% of 617
Branches executed:18.42% of 467
Taken at least once:14.99% of 467
Calls executed:10.31% of 97
Creating 'dominion.c.gcov'


Testing Unit: discardCard() 

	PRECONDITION TESTS

player 1 handCount is:  5
player 1 deckCount is:  5
player 1 discardCount is:  0
player 2 handCount is:  0
player 2 deckCount is:  10
player 2 discardCount is:  0

Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player 1 has 1 actions:  TEST SUCCESSFULLY COMPLETED

Player 1 has 5 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 1 has not yet played a card:  TEST SUCCESSFULLY COMPLETED

	HAND, DECK, AND DISCARD TESTS

Verify mine is at the top of Player 1's discard pile:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's playedCardCount has been incremented to 1:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 4 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's discardCount is 1:  TEST FAILED

Verify Player 1 cannot discard more cards than in hand:  TEST FAILED

Verify Player 2 cannot discard more cards than in hand:  TEST FAILED

player 1 handCount is:  -1
player 1 deckCount is:  5
player 1 discardCount is:  0
player 2 handCount is:  -1
player 2 deckCount is:  10
player 2 discardCount is:  0

	TRASHFLAG TESTS

	Make a new gameState

player 1 handCount is:  5
player 1 deckCount is:  5
player 1 discardCount is:  0
player 2 handCount is:  0
player 2 deckCount is:  10
player 2 discardCount is:  0

Verify mine is NOT at the top of Player 1's discard pile:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's playedCardCount is 0:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 4 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's discardCount is 1:  TEST FAILED

player 1 handCount is:  4
player 1 deckCount is:  5
player 1 discardCount is:  0
player 2 handCount is:  0
player 2 deckCount is:  10
player 2 discardCount is:  0

File 'dominion.c'
Lines executed:20.58% of 617
Branches executed:18.42% of 467
Taken at least once:15.20% of 467
Calls executed:10.31% of 97
Creating 'dominion.c.gcov'


Testing Unit: buyCard() 

	PRECONDITION TESTS

Verify player1 has 5 coins:  TEST SUCCESSFULLY COMPLETED

Verify player1 has 1 buys:  TEST SUCCESSFULLY COMPLETED

Verify the count of empty piles is 0:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player1 has: 5 coin:  
Player1 has: 1 buys:  
There are: 0 empty piles:  

	BUY TESTS

	Test player1 village buy: 

Verify player1 buy village successful: TEST SUCCESSFULLY COMPLETED

Verify player1 has 2 coins:  TEST SUCCESSFULLY COMPLETED

Verify player1 has 0 buys:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify village card is at the top of Player 1's discard pile:  TEST FAILED

Player1 has: 2 coin:  
Player1 has: 0 buys:  

	Test player1 village buy without enough coins; 1 buy added: 

Verify player1 buy village unsuccessful: TEST SUCCESSFULLY COMPLETED

Verify player1 has 2 coins:  TEST SUCCESSFULLY COMPLETED

Verify player1 has 1 buys:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player1 has: 2 coin:  
Player1 has: 1 buys:  

	Test player1 village buy without enough buys; 1 coin added, 1 buy removed: 

Verify player1 buy village unsuccessful: TEST SUCCESSFULLY COMPLETED

Verify player1 has 3 coins:  TEST SUCCESSFULLY COMPLETED

Verify player1 has 0 buys:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player1 has: 3 coin:  
Player1 has: 0 buys:  

	Test player1 village buy without enough supply avaiable; 1 buy added, all village supply removed: 

Verify player1 buy village unsuccessful: TEST SUCCESSFULLY COMPLETED

Verify player1 has 3 coins:  TEST SUCCESSFULLY COMPLETED

Verify player1 has 1 buys:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player1 has: 3 coin:  
Player1 has: 1 buys:  

File 'dominion.c'
Lines executed:23.50% of 617
Branches executed:25.70% of 467
Taken at least once:16.92% of 467
Calls executed:14.43% of 97
Creating 'dominion.c.gcov'


	Testing Card: smithy 

Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

The card at top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

The card 2nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

The card 3nd from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Player 1 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 1 has not yet played a card:  TEST SUCCESSFULLY COMPLETED

Player 1 has 5 coins:  TEST SUCCESSFULLY COMPLETED

Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player 2's top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

Player 2's 2nd card from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

Player 2's 3nd card from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

	Playing smithy

	Results:

Verify Player 1 has 1 actions:  TEST FAILED

Verify smithy is at the top of Player 1's discard pile:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's playedCardCount has been incremented to 1:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 7 cards in their hand:  TEST FAILED

	Verify Player 1 has 6 cards in their hand due to bug:  TEST FAILED

Verify Player 1 has 4 cards in their deck:  TEST FAILED

	Player 1 has 5 cards in their deck due to bug:  TEST FAILED

Verify the fifth card in Player 1's hand is a silver:  TEST FAILED

Verify the sixth card in Player 1's hand is a gold:  TEST FAILED

Verify the seventh card in Player 1's hand is a embargo:  TEST FAILED

Player 1 has 5 coins:  TEST SUCCESSFULLY COMPLETED

Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player 2's top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

Player 2's 2nd card from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

Player 2's 3nd card from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 2 has 7 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify the fifth card in Player 2's hand is a mine:  TEST SUCCESSFULLY COMPLETED

Verify the fourth card in Player 2's hand is a minion:  TEST SUCCESSFULLY COMPLETED

Verify treasure_map is 26:  TEST SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:25.77% of 617
Branches executed:31.05% of 467
Taken at least once:17.77% of 467
Calls executed:18.56% of 97
Creating 'dominion.c.gcov'


	Testing Card: adventurer 

Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

The card at top of the deck is a copper:  TEST SUCCESSFULLY COMPLETED

The card 2nd from the top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

The card 3nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

The card 4th from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Player 2 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player 2's card at top of the deck is a copper:  TEST SUCCESSFULLY COMPLETED

Player 2's card 2nd from the top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

Player 2's card 3nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

Player 2's card 4th from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 2 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

	Playing adventurer

	Results:

Verify Player 1 has 1 actions:  TEST FAILED

Verify adventurer is at the top of Player 1's discard pile:  TEST FAILED

Verify Player 1's playedCardCount has been incremented to 1:  TEST FAILED

Verify Player 1 has 6 cards in their hand:  TEST FAILED

     Verify Player 1 has 7 cards in their hand due to (assignment2 bug):  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 6 cards in their deck:  TEST SUCCESSFULLY COMPLETED

     Verify Player 1 has 5 cards in their deck due to (assignment2 bug):  TEST FAILED

Verify the fifth card in Player 1's hand is a copper:  TEST SUCCESSFULLY COMPLETED

Verify the sixth card in Player 1's hand is a silver:  TEST SUCCESSFULLY COMPLETED

Verify the sixth card in Player 1's hand is a gold due to (assignment2 bug):  TEST FAILED

Player 1 has 5 coins:  TEST FAILED

Player 1 has 4 coins due to (assignment2 bug):  TEST FAILED

Player 2 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 2 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Player 2's card at top of the deck is a copper:  TEST SUCCESSFULLY COMPLETED

Player 2's card 2nd from the top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

Player 2's card 3nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

Player 2's card 4th from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 2 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:27.55% of 617
Branches executed:32.33% of 467
Taken at least once:18.84% of 467
Calls executed:20.62% of 97
Creating 'dominion.c.gcov'


	Testing Card: remodel 

Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

The card at top of the deck is a copper:  TEST SUCCESSFULLY COMPLETED

The card 2nd from the top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

The card 3nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

The card 4th from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 1 has not yet played a card:  TEST SUCCESSFULLY COMPLETED

Player 1 has 0 coins:  TEST SUCCESSFULLY COMPLETED

	Playing remodel

	Results:

Verify Player 1 has 1 actions:  TEST FAILED

    Verify Player 1 has 2 actions due to bug:  TEST SUCCESSFULLY COMPLETED

Verify remodel is at the top of Player 1's discard pile:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's playedCardCount has been incremented to 1:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 4 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify the second to top card in Player 1's discard pile is a gold:  TEST FAILED

Verify the top card in Player 1's deck is a copper:  TEST SUCCESSFULLY COMPLETED


	Testing remodel to a card worth 3 more (should only be 2): mine  

	due to (assignment2 bug) remodel to a card worth 3 more is allowed :

Verify Player 1 has 1 actions:  TEST FAILED

    Verify Player 1 has 2 actions due to bug:  TEST SUCCESSFULLY COMPLETED

Verify remodel is at the top of Player 1's discard pile:  TEST SUCCESSFULLY COMPLETED

Verify Player 1's playedCardCount has been incremented to 1:  TEST FAILED

Verify Player 1 has 4 cards in their hand:  TEST FAILED

Verify Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify the second to top card in Player 1's discard pile is a gold:  TEST FAILED

Verify the top card in Player 1's deck is a copper:  TEST SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:29.66% of 617
Branches executed:33.62% of 467
Taken at least once:20.99% of 467
Calls executed:25.77% of 97
Creating 'dominion.c.gcov'


	Testing Card: baron 

Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

The card at top of the deck is a copper:  TEST SUCCESSFULLY COMPLETED

The card 2nd from the top of the deck is a silver:  TEST SUCCESSFULLY COMPLETED

The card 3nd from the top of the deck is a gold:  TEST SUCCESSFULLY COMPLETED

The card 4th from the top of the deck is a embargo:  TEST SUCCESSFULLY COMPLETED

Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Player 1 has not yet played a card:  TEST SUCCESSFULLY COMPLETED

Player 1 has 0 coins:  TEST SUCCESSFULLY COMPLETED

Player 1 has 0 buys:  TEST SUCCESSFULLY COMPLETED

	Playing baron

	Results:

Verify Player 1 has 1 actions:  TEST FAILED

Verify error Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Verify baron is at the top of Player 1's discard pile:  TEST FAILED

Verify Player 1's playedCardCount has been incremented to 1:  TEST FAILED

Verify Player 1 has 4 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify the fifth card (estate) in Player 1's hand is gone:  TEST SUCCESSFULLY COMPLETED

Player 1 has 1 buys:  TEST SUCCESSFULLY COMPLETED

numBuys is: 1 

     Verify Player 1 has 2 buys (due to assignment2 bug):  TEST FAILED

Player 1 has 4 coins:  TEST SUCCESSFULLY COMPLETED

	Test with no estate in hand 

	Results:

Verify Player 1 has 1 actions:  TEST FAILED

Verify error Player 1 has 2 actions:  TEST SUCCESSFULLY COMPLETED

Verify baron is at the top of Player 1's discard pile:  TEST FAILED

Verify Player 1's playedCardCount has been incremented to 1:  TEST FAILED

Verify Player 1 has 5 cards in their hand:  TEST SUCCESSFULLY COMPLETED

Verify Player 1 has 8 cards in their deck:  TEST SUCCESSFULLY COMPLETED

Verify a sixth card (estate) in Player 1's hand is added:  TEST SUCCESSFULLY COMPLETED

Player 1 has 1 buys:  TEST SUCCESSFULLY COMPLETED

numBuys is: 1 

     Verify Player 1 has 2 buys (due to assignment2 bug):  TEST FAILED

File 'dominion.c'
Lines executed:33.23% of 617
Branches executed:36.62% of 467
Taken at least once:23.55% of 467
Calls executed:28.87% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function testAssert called 202 returned 100% blocks executed 100%
      202:    8:int testAssert(int isgo)
        -:    9:{
      202:   10:	if (isgo == 1)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:   11:	{
      165:   12:		printf("TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 100%
      165:   13:		return 0;
        -:   14:	}
        -:   15:
        -:   16:	else
        -:   17:	{
       37:   18:		printf("TEST FAILED\n");
call    0 returned 100%
       37:   19:		return 1;
        -:   20:	}
        -:   21:}
        -:   22:
        -:   23:
function getCard called 0 returned 0% blocks executed 0%
    #####:   24:char * getCard(int in)
        -:   25:{
    #####:   26:	char * card= {"error"};
        -:   27:
    #####:   28:	if(in == 0)
branch  0 never executed
branch  1 never executed
    #####:   29:		card = "curse";
        -:   30:
    #####:   31:	if(in == 1)
branch  0 never executed
branch  1 never executed
    #####:   32:		card = "estate";
        -:   33:
    #####:   34:	if(in == 2)
branch  0 never executed
branch  1 never executed
    #####:   35:		card = "duchy";
        -:   36:
    #####:   37:	if(in == 3)
branch  0 never executed
branch  1 never executed
    #####:   38:		card = "province";
        -:   39:
    #####:   40:	if(in == 4)
branch  0 never executed
branch  1 never executed
    #####:   41:		card = "copper";
        -:   42:
    #####:   43:	if(in == 5)
branch  0 never executed
branch  1 never executed
    #####:   44:		card = "silver";
        -:   45:
    #####:   46:	if(in == 6)
branch  0 never executed
branch  1 never executed
    #####:   47:		card = "gold";
        -:   48:
    #####:   49:	if(in == 7)
branch  0 never executed
branch  1 never executed
    #####:   50:		card = "adventurer";
        -:   51:
    #####:   52:	if(in == 8)
branch  0 never executed
branch  1 never executed
    #####:   53:		card = "council_room";
        -:   54:
    #####:   55:	if(in == 9)
branch  0 never executed
branch  1 never executed
    #####:   56:		card = "feast";
        -:   57:
    #####:   58:	if(in == 10)
branch  0 never executed
branch  1 never executed
    #####:   59:		card = "gardens";
        -:   60:
    #####:   61:	if(in == 11)
branch  0 never executed
branch  1 never executed
    #####:   62:		card = "mine";
        -:   63:
    #####:   64:	if(in == 12)
branch  0 never executed
branch  1 never executed
    #####:   65:		card = "remodel";
        -:   66:
    #####:   67:	if(in == 13)
branch  0 never executed
branch  1 never executed
    #####:   68:		card = "smithy";
        -:   69:
    #####:   70:	if(in == 14)
branch  0 never executed
branch  1 never executed
    #####:   71:		card = "village";
        -:   72:
    #####:   73:	if(in == 15)
branch  0 never executed
branch  1 never executed
    #####:   74:		card = "baron";
        -:   75:
    #####:   76:	if(in == 16)
branch  0 never executed
branch  1 never executed
    #####:   77:		card = "great_hall";
        -:   78:
    #####:   79:	if(in == 17)
branch  0 never executed
branch  1 never executed
    #####:   80:		card = "minion";
        -:   81:
    #####:   82:	if(in == 18)
branch  0 never executed
branch  1 never executed
    #####:   83:		card = "steward";
        -:   84:
    #####:   85:	if(in == 19)
branch  0 never executed
branch  1 never executed
    #####:   86:		card = "tribute";
        -:   87:
    #####:   88:	if(in == 20)
branch  0 never executed
branch  1 never executed
    #####:   89:		card = "ambassador";
        -:   90:
    #####:   91:	if(in == 21)
branch  0 never executed
branch  1 never executed
    #####:   92:		card = "cutpurse";
        -:   93:
    #####:   94:	if(in == 22)
branch  0 never executed
branch  1 never executed
    #####:   95:		card = "embargo";
        -:   96:
    #####:   97:	if(in == 23)
branch  0 never executed
branch  1 never executed
    #####:   98:		card = "outpost";
        -:   99:
    #####:  100:	if(in == 24)
branch  0 never executed
branch  1 never executed
    #####:  101:		card = "salvager";
        -:  102:
    #####:  103:	if(in == 25)
branch  0 never executed
branch  1 never executed
    #####:  104:		card = "sea_hag";
        -:  105:
    #####:  106:	if(in == 26)
branch  0 never executed
branch  1 never executed
    #####:  107:		card = "treasure_map";
        -:  108:
    #####:  109:	return card;
        -:  110:}
        -:  111:
function compare called 330 returned 100% blocks executed 83%
      330:  112:int compare(const void* a, const void* b) {
      330:  113:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  114:    return 1;
      330:  115:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       88:  116:    return -1;
      242:  117:  return 0;
        -:  118:}
        -:  119:
function newGame called 0 returned 0% blocks executed 0%
    #####:  120:struct gameState* newGame() {
    #####:  121:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  122:  return g;
        -:  123:}
        -:  124:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  125:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  126:		  int k8, int k9, int k10) {
    #####:  127:  int* k = malloc(10 * sizeof(int));
    #####:  128:  k[0] = k1;
    #####:  129:  k[1] = k2;
    #####:  130:  k[2] = k3;
    #####:  131:  k[3] = k4;
    #####:  132:  k[4] = k5;
    #####:  133:  k[5] = k6;
    #####:  134:  k[6] = k7;
    #####:  135:  k[7] = k8;
    #####:  136:  k[8] = k9;
    #####:  137:  k[9] = k10;
    #####:  138:  return k;
        -:  139:}
        -:  140:
function initializeGame called 11 returned 100% blocks executed 83%
       11:  141:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  142:		   struct gameState *state) {
        -:  143:
        -:  144:  int i;
        -:  145:  int j;
        -:  146:  int it;
        -:  147:  //set up random number generator
       11:  148:  SelectStream(1);
call    0 returned 100%
       11:  149:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  150:
        -:  151:  //check number of players
       11:  152:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  153:    {
    #####:  154:      return -1;
        -:  155:    }
        -:  156:
        -:  157:  //set number of players
       11:  158:  state->numPlayers = numPlayers;
        -:  159:
        -:  160:  //check selected kingdom cards are different
      121:  161:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  162:    {
     1210:  163:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  164:        {
     1100:  165:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  166:	    {
    #####:  167:	      return -1;
        -:  168:	    }
        -:  169:        }
        -:  170:    }
        -:  171:
        -:  172:
        -:  173:  //initialize supply
        -:  174:  ///////////////////////////////
        -:  175:
        -:  176:  //set number of Curse cards
       11:  177:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  178:    {
       11:  179:      state->supplyCount[curse] = 10;
        -:  180:    }
    #####:  181:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  182:    {
    #####:  183:      state->supplyCount[curse] = 20;
        -:  184:    }
        -:  185:  else
        -:  186:    {
    #####:  187:      state->supplyCount[curse] = 30;
        -:  188:    }
        -:  189:
        -:  190:  //set number of Victory cards
       11:  191:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  192:    {
       11:  193:      state->supplyCount[estate] = 8;
       11:  194:      state->supplyCount[duchy] = 8;
       11:  195:      state->supplyCount[province] = 8;
        -:  196:    }
        -:  197:  else
        -:  198:    {
    #####:  199:      state->supplyCount[estate] = 12;
    #####:  200:      state->supplyCount[duchy] = 12;
    #####:  201:      state->supplyCount[province] = 12;
        -:  202:    }
        -:  203:
        -:  204:  //set number of Treasure cards
       11:  205:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  206:  state->supplyCount[silver] = 40;
       11:  207:  state->supplyCount[gold] = 30;
        -:  208:
        -:  209:  //set number of Kingdom cards
      231:  210:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  211:    {
     1815:  212:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  213:	{
     1705:  214:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  215:	    {
        -:  216:	      //check if card is a 'Victory' Kingdom card
      110:  217:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  218:		{
    #####:  219:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  220:		    state->supplyCount[i] = 8;
        -:  221:		  }
    #####:  222:		  else{ state->supplyCount[i] = 12; }
        -:  223:		}
        -:  224:	      else
        -:  225:		{
      110:  226:		  state->supplyCount[i] = 10;
        -:  227:		}
      110:  228:	      break;
        -:  229:	    }
        -:  230:	  else    //card is not in the set choosen for the game
        -:  231:	    {
     1595:  232:	      state->supplyCount[i] = -1;
        -:  233:	    }
        -:  234:	}
        -:  235:
        -:  236:    }
        -:  237:
        -:  238:  ////////////////////////
        -:  239:  //supply intilization complete
        -:  240:
        -:  241:  //set player decks
       33:  242:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  243:    {
       22:  244:      state->deckCount[i] = 0;
       88:  245:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  246:	{
       66:  247:	  state->deck[i][j] = estate;
       66:  248:	  state->deckCount[i]++;
        -:  249:	}
      176:  250:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  251:	{
      154:  252:	  state->deck[i][j] = copper;
      154:  253:	  state->deckCount[i]++;
        -:  254:	}
        -:  255:    }
        -:  256:
        -:  257:  //shuffle player decks
       33:  258:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  259:    {
       22:  260:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  261:	{
    #####:  262:	  return -1;
        -:  263:	}
        -:  264:    }
        -:  265:
        -:  266:  //draw player hands
       33:  267:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  268:    {
        -:  269:      //initialize hand size to zero
       22:  270:      state->handCount[i] = 0;
       22:  271:      state->discardCount[i] = 0;
        -:  272:      //draw 5 cards
        -:  273:      // for (j = 0; j < 5; j++)
        -:  274:      //	{
        -:  275:      //	  drawCard(i, state);
        -:  276:      //	}
        -:  277:    }
        -:  278:
        -:  279:  //set embargo tokens to 0 for all supply piles
      308:  280:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  281:    {
      297:  282:      state->embargoTokens[i] = 0;
        -:  283:    }
        -:  284:
        -:  285:  //initialize first player's turn
       11:  286:  state->outpostPlayed = 0;
       11:  287:  state->phase = 0;
       11:  288:  state->numActions = 1;
       11:  289:  state->numBuys = 1;
       11:  290:  state->playedCardCount = 0;
       11:  291:  state->whoseTurn = 0;
       11:  292:  state->handCount[state->whoseTurn] = 0;
        -:  293:  //int it; move to top
        -:  294:
        -:  295:  //Moved draw cards to here, only drawing at the start of a turn
       66:  296:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  297:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  298:  }
        -:  299:
       11:  300:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  301:
       11:  302:  return 0;
        -:  303:}
        -:  304:
function shuffle called 22 returned 100% blocks executed 94%
       22:  305:int shuffle(int player, struct gameState *state) {
        -:  306:
        -:  307:
        -:  308:  int newDeck[MAX_DECK];
       22:  309:  int newDeckPos = 0;
        -:  310:  int card;
        -:  311:  int i;
        -:  312:
       22:  313:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  314:    return -1;
       22:  315:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  316:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  317:
      264:  318:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      220:  319:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      220:  320:    newDeck[newDeckPos] = state->deck[player][card];
      220:  321:    newDeckPos++;
      792:  322:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
      572:  323:      state->deck[player][i] = state->deck[player][i+1];
        -:  324:    }
      220:  325:    state->deckCount[player]--;
        -:  326:  }
      242:  327:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      220:  328:    state->deck[player][i] = newDeck[i];
      220:  329:    state->deckCount[player]++;
        -:  330:  }
        -:  331:
       22:  332:  return 0;
        -:  333:}
        -:  334:
function playCard called 0 returned 0% blocks executed 0%
    #####:  335:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  336:{
        -:  337:  int card;
    #####:  338:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  339:
        -:  340:  //check if it is the right phase
    #####:  341:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      return -1;
        -:  344:    }
        -:  345:
        -:  346:  //check if player has enough actions
    #####:  347:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  348:    {
    #####:  349:      return -1;
        -:  350:    }
        -:  351:
        -:  352:  //get card played
    #####:  353:  card = handCard(handPos, state);
call    0 never executed
        -:  354:
        -:  355:  //check if selected card is an action
    #####:  356:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  357:    {
    #####:  358:      return -1;
        -:  359:    }
        -:  360:
        -:  361:  //play card
    #####:  362:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  363:    {
    #####:  364:      return -1;
        -:  365:    }
        -:  366:
        -:  367:  //reduce number of actions
    #####:  368:  state->numActions--;
        -:  369:
        -:  370:  //update coins (Treasure cards may be added with card draws)
    #####:  371:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  372:
    #####:  373:  return 0;
        -:  374:}
        -:  375:
function buyCard called 4 returned 100% blocks executed 100%
        4:  376:int buyCard(int supplyPos, struct gameState *state) {
        -:  377:  int who;
        -:  378:  if (DEBUG){
        -:  379:    printf("Entering buyCard...\n");
        -:  380:  }
        -:  381:
        -:  382:  // I don't know what to do about the phase thing.
        -:  383:
        4:  384:  who = state->whoseTurn;
        -:  385:
        4:  386:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  387:    if (DEBUG)
        -:  388:      printf("You do not have any buys left\n");
        1:  389:    return -1;
        3:  390:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  391:    if (DEBUG)
        -:  392:      printf("There are not any of that type of card left\n");
        1:  393:    return -1;
        2:  394:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  395:    if (DEBUG)
        -:  396:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  397:    return -1;
        -:  398:  } else {
        1:  399:    state->phase=1;
        -:  400:    //state->supplyCount[supplyPos]--;
        1:  401:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  402:
        1:  403:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  404:    state->numBuys--;
        -:  405:    if (DEBUG)
        -:  406:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  407:  }
        -:  408:
        -:  409:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  410:  //state->discardCount[who]++;
        -:  411:
        1:  412:  return 0;
        -:  413:}
        -:  414:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  415:int numHandCards(struct gameState *state) {
    #####:  416:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  417:}
        -:  418:
function handCard called 0 returned 0% blocks executed 0%
    #####:  419:int handCard(int handPos, struct gameState *state) {
    #####:  420:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  421:  return state->hand[currentPlayer][handPos];
        -:  422:}
        -:  423:
function supplyCount called 16 returned 100% blocks executed 100%
       16:  424:int supplyCount(int card, struct gameState *state) {
       16:  425:  return state->supplyCount[card];
        -:  426:}
        -:  427:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  428:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  429:  int i;
    #####:  430:  int count = 0;
        -:  431:
    #####:  432:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  435:    }
        -:  436:
    #####:  437:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  440:    }
        -:  441:
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  443:    {
    #####:  444:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  445:    }
        -:  446:
    #####:  447:  return count;
        -:  448:}
        -:  449:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  450:int whoseTurn(struct gameState *state) {
        6:  451:  return state->whoseTurn;
        -:  452:}
        -:  453:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  454:int endTurn(struct gameState *state) {
        -:  455:  int k;
        -:  456:  int i;
    #####:  457:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  458:
        -:  459:  //Discard hand
    #####:  460:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  461:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  462:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  463:  }
    #####:  464:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  465:
        -:  466:  //Code for determining the player
    #####:  467:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  468:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  469:  }
        -:  470:  else{
    #####:  471:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  472:  }
        -:  473:
    #####:  474:  state->outpostPlayed = 0;
    #####:  475:  state->phase = 0;
    #####:  476:  state->numActions = 1;
    #####:  477:  state->coins = 0;
    #####:  478:  state->numBuys = 1;
    #####:  479:  state->playedCardCount = 0;
    #####:  480:  state->handCount[state->whoseTurn] = 0;
        -:  481:
        -:  482:  //int k; move to top
        -:  483:  //Next player draws hand
    #####:  484:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  485:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  486:  }
        -:  487:
        -:  488:  //Update money
    #####:  489:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  490:
    #####:  491:  return 0;
        -:  492:}
        -:  493:
function isGameOver called 7 returned 100% blocks executed 100%
        7:  494:int isGameOver(struct gameState *state) {
        -:  495:  int i;
        -:  496:  int j;
        -:  497:
        -:  498:  //if stack of Province cards is empty, the game ends
        7:  499:  if (state->supplyCount[province] == 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  500:    {
        1:  501:      return 1;
        -:  502:    }
        -:  503:
        -:  504:  //if three supply pile are at 0, the game ends
        6:  505:  j = 0;
      156:  506:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  507:    {
      150:  508:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  509:	{
       10:  510:	  j++;
        -:  511:	}
        -:  512:    }
        6:  513:  if ( j >= 3)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  514:    {
        1:  515:      return 1;
        -:  516:    }
        -:  517:
        5:  518:  return 0;
        -:  519:}
        -:  520:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  521:int scoreFor (int player, struct gameState *state) {
        -:  522:
        -:  523:  int i;
    #####:  524:  int score = 0;
        -:  525:  //score from hand
    #####:  526:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  527:    {
    #####:  528:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  529:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  530:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  531:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  532:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  533:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  534:    }
        -:  535:
        -:  536:  //score from discard
    #####:  537:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  538:    {
    #####:  539:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  540:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  541:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  542:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  543:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  544:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  545:    }
        -:  546:
        -:  547:  //score from deck
    #####:  548:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  551:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  552:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  553:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  554:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  555:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  556:    }
        -:  557:
    #####:  558:  return score;
        -:  559:}
        -:  560:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  561:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  562:  int i;
        -:  563:  int j;
        -:  564:  int highScore;
        -:  565:  int currentPlayer;
        -:  566:
        -:  567:  //get score for each player
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:    {
        -:  570:      //set unused player scores to -9999
    #####:  571:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  572:	{
    #####:  573:	  players[i] = -9999;
        -:  574:	}
        -:  575:      else
        -:  576:	{
    #####:  577:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  578:	}
        -:  579:    }
        -:  580:
        -:  581:  //find highest score
    #####:  582:  j = 0;
    #####:  583:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  584:    {
    #####:  585:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  586:	{
    #####:  587:	  j = i;
        -:  588:	}
        -:  589:    }
    #####:  590:  highScore = players[j];
        -:  591:
        -:  592:  //add 1 to players who had less turns
    #####:  593:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  594:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  595:    {
    #####:  596:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  597:	{
    #####:  598:	  players[i]++;
        -:  599:	}
        -:  600:    }
        -:  601:
        -:  602:  //find new highest score
    #####:  603:  j = 0;
    #####:  604:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  605:    {
    #####:  606:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  607:	{
    #####:  608:	  j = i;
        -:  609:	}
        -:  610:    }
    #####:  611:  highScore = players[j];
        -:  612:
        -:  613:  //set winners in array to 1 and rest to 0
    #####:  614:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  615:    {
    #####:  616:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  617:	{
    #####:  618:	  players[i] = 1;
        -:  619:	}
        -:  620:      else
        -:  621:	{
    #####:  622:	  players[i] = 0;
        -:  623:	}
        -:  624:    }
        -:  625:
    #####:  626:  return 0;
        -:  627:}
        -:  628:
function drawCard called 58 returned 100% blocks executed 38%
       58:  629:int drawCard(int player, struct gameState *state)
        -:  630:{	int count;
        -:  631:  int deckCounter;
       58:  632:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  633:
        -:  634:    //Step 1 Shuffle the discard pile back into a deck
        -:  635:    int i;
        -:  636:    //Move discard to deck
    #####:  637:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  638:      state->deck[player][i] = state->discard[player][i];
    #####:  639:      state->discard[player][i] = -1;
        -:  640:    }
        -:  641:
    #####:  642:    state->deckCount[player] = state->discardCount[player];
    #####:  643:    state->discardCount[player] = 0;//Reset discard
        -:  644:
        -:  645:    //Shufffle the deck
    #####:  646:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  647:
        -:  648:    if (DEBUG){//Debug statements
        -:  649:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  650:    }
        -:  651:
    #####:  652:    state->discardCount[player] = 0;
        -:  653:
        -:  654:    //Step 2 Draw Card
    #####:  655:    count = state->handCount[player];//Get current player's hand count
        -:  656:
        -:  657:    if (DEBUG){//Debug statements
        -:  658:      printf("Current hand count: %d\n", count);
        -:  659:    }
        -:  660:
    #####:  661:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  662:
    #####:  663:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  664:      return -1;
        -:  665:
    #####:  666:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  667:    state->deckCount[player]--;
    #####:  668:    state->handCount[player]++;//Increment hand count
        -:  669:  }
        -:  670:
        -:  671:  else{
       58:  672:    int count = state->handCount[player];//Get current hand count for player
        -:  673:    int deckCounter;
        -:  674:    if (DEBUG){//Debug statements
        -:  675:      printf("Current hand count: %d\n", count);
        -:  676:    }
        -:  677:
       58:  678:    deckCounter = state->deckCount[player];//Create holder for the deck count
       58:  679:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       58:  680:    state->deckCount[player]--;
       58:  681:    state->handCount[player]++;//Increment hand count
        -:  682:  }
        -:  683:
       58:  684:  return 0;
        -:  685:}
        -:  686:
function getCost called 7 returned 100% blocks executed 23%
        7:  687:int getCost(int cardNumber)
        -:  688:{
        7:  689:  switch( cardNumber )
branch  0 taken 14%
branch  1 taken 14%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 14%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 14%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 43%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  690:    {
        -:  691:    case curse:
        1:  692:      return 0;
        -:  693:    case estate:
        1:  694:      return 2;
        -:  695:    case duchy:
    #####:  696:      return 5;
        -:  697:    case province:
    #####:  698:      return 8;
        -:  699:    case copper:
    #####:  700:      return 0;
        -:  701:    case silver:
    #####:  702:      return 3;
        -:  703:    case gold:
        1:  704:      return 6;
        -:  705:    case adventurer:
    #####:  706:      return 6;
        -:  707:    case council_room:
    #####:  708:      return 5;
        -:  709:    case feast:
    #####:  710:      return 4;
        -:  711:    case gardens:
    #####:  712:      return 4;
        -:  713:    case mine:
        1:  714:      return 5;
        -:  715:    case remodel:
    #####:  716:      return 4;
        -:  717:    case smithy:
    #####:  718:      return 4;
        -:  719:    case village:
        3:  720:      return 3;
        -:  721:    case baron:
    #####:  722:      return 4;
        -:  723:    case great_hall:
    #####:  724:      return 3;
        -:  725:    case minion:
    #####:  726:      return 5;
        -:  727:    case steward:
    #####:  728:      return 3;
        -:  729:    case tribute:
    #####:  730:      return 5;
        -:  731:    case ambassador:
    #####:  732:      return 3;
        -:  733:    case cutpurse:
    #####:  734:      return 4;
        -:  735:    case embargo:
    #####:  736:      return 2;
        -:  737:    case outpost:
    #####:  738:      return 5;
        -:  739:    case salvager:
    #####:  740:      return 4;
        -:  741:    case sea_hag:
    #####:  742:      return 4;
        -:  743:    case treasure_map:
    #####:  744:      return 4;
        -:  745:    }
        -:  746:
    #####:  747:  return -1;
        -:  748:}
        -:  749:
function cardEffect called 6 returned 100% blocks executed 18%
        6:  750:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  751:{
        -:  752:  int i;
        -:  753:  int j;
        -:  754:  int index;
        6:  755:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  756:  int nextPlayer = currentPlayer + 1;
        -:  757:
        6:  758:  int tributeRevealedCards[2] = {-1, -1};
        -:  759:
        6:  760:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:
        -:  764:
        -:  765:  //uses switch to select card and perform actions
        6:  766:  switch( card )
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 33%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 33%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  767:    {
        -:  768:    case adventurer:
        1:  769:      return playAdventurer(currentPlayer, state);
call    0 returned 100%
        -:  770:
        -:  771:    case council_room:
    #####:  772:     return playCouncil_Room(currentPlayer, state, handPos);
call    0 never executed
        -:  773:
        -:  774:    case feast:
    #####:  775:      return playFeast(currentPlayer, state, choice1);
call    0 never executed
        -:  776:
        -:  777:    case gardens:
    #####:  778:      return -1;
        -:  779:
        -:  780:    case mine:
    #####:  781:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  782:
    #####:  783:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  789:	{
    #####:  790:	  return -1;
        -:  791:	}
        -:  792:
    #####:  793:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  794:	{
    #####:  795:	  return -1;
        -:  796:	}
        -:  797:
    #####:  798:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  799:
        -:  800:      //discard card from hand
    #####:  801:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  802:
        -:  803:      //discard trashed card
    #####:  804:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  805:	{
    #####:  806:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  807:	    {
    #####:  808:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  809:	      break;
        -:  810:	    }
        -:  811:	}
        -:  812:
    #####:  813:      return 0;
        -:  814:
        -:  815:    case remodel:
        2:  816:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
        2:  818:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
        2:  823:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  824:
        -:  825:      //discard card from hand
        2:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  827:
        -:  828:      //discard trashed card
        7:  829:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  830:	{
        6:  831:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  832:	    {
        1:  833:	      discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
        1:  834:	      break;
        -:  835:	    }
        -:  836:	}
        -:  837:
        -:  838:
        2:  839:      return 0;
        -:  840:
        -:  841:    case smithy:
        1:  842:      return playSmithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
call    0 never executed
        -:  847:
        -:  848:      //+2 Actions
    #####:  849:      state->numActions = state->numActions + 2;
        -:  850:
        -:  851:      //discard played card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  853:      return 0;
        -:  854:
        -:  855:    case baron:
        2:  856:      state->numBuys++;//Increase buys by 1!
        2:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  858:	int p = 0;//Iterator for hand!
        2:  859:	int card_not_discarded = 1;//Flag for discard set!
       16:  860:	while(card_not_discarded){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       12:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  864:	    state->discardCount[currentPlayer]++;
        2:  865:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
        1:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  869:	    state->handCount[currentPlayer]--;
        1:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
       11:  872:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
        1:  877:	    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  878:	      gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        1:  879:	      state->supplyCount[estate]--;//Decrement estates
        1:  880:	      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  881:		isGameOver(state);
call    0 never executed
        -:  882:	      }
        -:  883:	    }
        1:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:
        -:  887:	  else{
       10:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:	    isGameOver(state);
call    0 never executed
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:
        2:  904:      return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
call    0 never executed
        -:  909:
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  915:      return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  923:
    #####:  924:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
        -:  927:	}
        -:  928:
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:	    }
        -:  936:
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  941:	    }
        -:  942:
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  954:			}
        -:  955:
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  958:			{
    #####:  959:			  drawCard(i, state);
call    0 never executed
        -:  960:			}
        -:  961:		    }
        -:  962:		}
        -:  963:	    }
        -:  964:
        -:  965:	}
    #####:  966:      return 0;
        -:  967:
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  973:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  974:	}
    #####:  975:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  985:	}
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  989:      return 0;
        -:  990:
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
        -:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
        -: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
        -: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
        -: 1007:      }
        -: 1008:
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
        -: 1016:	  }
        -: 1017:
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1019:	}
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
        -: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1036:	  state->coins += 2;
        -: 1037:	}
        -: 1038:
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1040:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1041:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
        -: 1046:      }
        -: 1047:
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1054:	{
    #####: 1055:	  return -1;
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1066:	    {
    #####: 1067:	      j++;
        -: 1068:	    }
        -: 1069:	}
    #####: 1070:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
        -: 1075:      if (DEBUG)
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1087:	    }
        -: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1101:		  break;
        -: 1102:		}
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case cutpurse:
    #####: 1109:      return playCutpurse(currentPlayer, state, handPos);
call    0 never executed
        -: 1110:
        -: 1111:
        -: 1112:    case embargo:
        -: 1113:      //+2 Coins
    #####: 1114:      state->coins = state->coins + 2;
        -: 1115:
        -: 1116:      //see if selected pile is in play
    #####: 1117:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
        -: 1122:      //add embargo token to selected supply pile
    #####: 1123:      state->embargoTokens[choice1]++;
        -: 1124:
        -: 1125:      //trash card
    #####: 1126:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1127:      return 0;
        -: 1128:
        -: 1129:    case outpost:
        -: 1130:      //set outpost flag
    #####: 1131:      state->outpostPlayed++;
        -: 1132:
        -: 1133:      //discard card
    #####: 1134:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1135:      return 0;
        -: 1136:
        -: 1137:    case salvager:
        -: 1138:      //+1 buy
    #####: 1139:      state->numBuys++;
        -: 1140:
    #####: 1141:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //gain coins equal to trashed card
    #####: 1144:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1145:	  //trash card
    #####: 1146:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1147:	}
        -: 1148:
        -: 1149:      //discard card
    #####: 1150:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1151:      return 0;
        -: 1152:
        -: 1153:    case sea_hag:
    #####: 1154:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1155:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1156:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1157:	  state->discardCount[i]++;
    #####: 1158:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1159:	}
        -: 1160:      }
    #####: 1161:      return 0;
        -: 1162:
        -: 1163:    case treasure_map:
        -: 1164:      //search hand for another treasure_map
    #####: 1165:      index = -1;
    #####: 1166:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1169:	    {
    #####: 1170:	      index = i;
    #####: 1171:	      break;
        -: 1172:	    }
        -: 1173:	}
    #####: 1174:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
        -: 1176:	  //trash both treasure cards
    #####: 1177:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1178:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1179:
        -: 1180:	  //gain 4 Gold cards
    #####: 1181:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1182:	    {
    #####: 1183:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1184:	    }
        -: 1185:
        -: 1186:	  //return success
    #####: 1187:	  return 1;
        -: 1188:	}
        -: 1189:
        -: 1190:      //no second treasure_map found in hand
    #####: 1191:      return -1;
        -: 1192:    }
        -: 1193:
    #####: 1194:  return -1;
        -: 1195:}
        -: 1196:
function discardCard called 15 returned 100% blocks executed 89%
       15: 1197:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1198:{
        -: 1199:
        -: 1200:  //if card is not trashed, added to Played pile
       15: 1201:  if (trashFlag < 1)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -: 1202:    {
        -: 1203:      //add card to played pile
       14: 1204:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       14: 1205:      state->playedCardCount++;
        -: 1206:    }
        -: 1207:
        -: 1208:  //set played card to -1
       15: 1209:  state->hand[currentPlayer][handPos] = -1;
        -: 1210:
        -: 1211:  //remove card from player's hand
       15: 1212:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1213:    {
        -: 1214:      //reduce number of cards in hand
        3: 1215:      state->handCount[currentPlayer]--;
        -: 1216:    }
       12: 1217:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1218:    {
        -: 1219:      //reduce number of cards in hand
    #####: 1220:      state->handCount[currentPlayer]--;
        -: 1221:    }
        -: 1222:  else
        -: 1223:    {
        -: 1224:      //replace discarded card with last card in hand
       12: 1225:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1226:      //set last card to -1
       12: 1227:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1228:      //reduce number of cards in hand
       12: 1229:      state->handCount[currentPlayer]--;
        -: 1230:    }
        -: 1231:
       15: 1232:  return 0;
        -: 1233:}
        -: 1234:
function gainCard called 11 returned 100% blocks executed 80%
       11: 1235:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1236:{
        -: 1237:  //Note: supplyPos is enum of choosen card
        -: 1238:
        -: 1239:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1240:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1241:    {
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:
        -: 1245:  //added card for [whoseTurn] current player:
        -: 1246:  // toFlag = 0 : add to discard
        -: 1247:  // toFlag = 1 : add to deck
        -: 1248:  // toFlag = 2 : add to hand
        -: 1249:
       11: 1250:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
    #####: 1252:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1253:      state->deckCount[player]++;
        -: 1254:    }
       11: 1255:  else if (toFlag == 2)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1256:    {
        7: 1257:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        7: 1258:      state->handCount[player]++;
        -: 1259:    }
        -: 1260:  else
        -: 1261:    {
        4: 1262:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1263:      state->discardCount[player]++;
        -: 1264:    }
        -: 1265:
        -: 1266:  //decrease number in supply pile
       11: 1267:  state->supplyCount[supplyPos]--;
        -: 1268:
       11: 1269:  return 0;
        -: 1270:}
        -: 1271:
function updateCoins called 24 returned 100% blocks executed 100%
       24: 1272:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1273:{
        -: 1274:  int i;
        -: 1275:
        -: 1276:  //reset coin count
       24: 1277:  state->coins = 0;
        -: 1278:
        -: 1279:  //add coins for each Treasure card in player's hand
      160: 1280:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1281:    {
      136: 1282:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1283:	{
       96: 1284:	  state->coins += 1;
        -: 1285:	}
       40: 1286:      else if (state->hand[player][i] == silver)
branch  0 taken 18% (fallthrough)
branch  1 taken 83%
        -: 1287:	{
        7: 1288:	  state->coins += 2;
        -: 1289:	}
       33: 1290:      else if (state->hand[player][i] == gold)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 1291:	{
        6: 1292:	  state->coins += 3;
        -: 1293:	}
        -: 1294:    }
        -: 1295:
        -: 1296:  //add bonus
       24: 1297:  state->coins += bonus;
        -: 1298:
       24: 1299:  return 0;
        -: 1300:}
        -: 1301:
function playAdventurer called 1 returned 100% blocks executed 83%
        1: 1302:int playAdventurer(int currentPlayer, struct gameState *state){
        -: 1303:  int temphand[MAX_HAND];
        1: 1304:  int drawntreasure = 0;
        1: 1305:  int z = 0;// this is the counter for the temp hand
        -: 1306:  int cardDrawn;
        4: 1307:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2: 1308:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1309:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1310:    }
        2: 1311:    drawCard(currentPlayer, state);
call    0 returned 100%
        2: 1312:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1313:    if (cardDrawn == copper || silver || gold)
        2: 1314:      drawntreasure++;
        -: 1315:    else{
        -: 1316:      temphand[z]=cardDrawn;
        -: 1317:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1318:      z++;
        -: 1319:    }
        -: 1320:  }
        2: 1321:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1322:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1323:    z=z-1;
        -: 1324:  }
        1: 1325:  return 0;
        -: 1326:}
        -: 1327:
function playSmithy called 1 returned 100% blocks executed 100%
        1: 1328:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1329:  int i;
        -: 1330:  //+3 Cards
        1: 1331:  for (i = 0; i < 3; i++);                                                                                                                                              ;
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        1: 1332:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1333:  //discard card from hand
        1: 1334:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1335:  return 0;
        -: 1336:}
        -: 1337:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####: 1338:int playCutpurse(int currentPlayer, struct gameState *state, int handPos){
        -: 1339:  int i;
        -: 1340:  int j;
        -: 1341:  int k;
    #####: 1342:  updateCoins(currentPlayer, state, 1);
call    0 never executed
    #####: 1343:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:  {
    #####: 1345:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1346:      {
    #####: 1347:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1350:        {
    #####: 1351:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1352:          break;
        -: 1353:        }
    #####: 1354:      if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1355:        {
    #####: 1356:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1357:      {
        -: 1358:        if (DEBUG)
        -: 1359:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1360:      }
    #####: 1361:          break;
        -: 1362:        }
        -: 1363:    }
        -: 1364:
        -: 1365:      }
        -: 1366:
        -: 1367:  }
        -: 1368:
        -: 1369:      //discard played card from hand
    #####: 1370:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1371:
    #####: 1372:      return 0;
        -: 1373:}
        -: 1374:
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1375:int playFeast(int currentPlayer, struct gameState *state, int choice1){
        -: 1376:  int i;
        -: 1377:  int temphand[MAX_HAND];
        -: 1378:  //gain card with cost up to 5
        -: 1379:      //Backup hand
    #####: 1380:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1381:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1382:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1383:      }
        -: 1384:      //Backup hand
        -: 1385:
        -: 1386:      //Update Coins for Buy
    #####: 1387:      updateCoins(currentPlayer, state, i + 1);
call    0 never executed
    #####: 1388:      int x = 1;//Condition to loop on
    #####: 1389:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1390:  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1391:    if (DEBUG)
        -: 1392:      printf("None of that card left, sorry!\n");
        -: 1393:
        -: 1394:    if (DEBUG){
        -: 1395:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1396:    }
        -: 1397:  }
    #####: 1398:  else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1399:    printf("That card is too expensive!\n");
call    0 never executed
        -: 1400:
        -: 1401:    if (DEBUG){
        -: 1402:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1403:    }
        -: 1404:  }
        -: 1405:  else{
        -: 1406:
        -: 1407:    if (DEBUG){
        -: 1408:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1409:    }
        -: 1410:
    #####: 1411:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1412:    x = 0;//No more buying cards
        -: 1413:
        -: 1414:    if (DEBUG){
        -: 1415:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1416:    }
        -: 1417:
        -: 1418:  }
        -: 1419:      }
        -: 1420:
        -: 1421:      //Reset Hand
    #####: 1422:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1423:  state->hand[currentPlayer][i] = temphand[i];
    #####: 1424:  temphand[i] = -1;
        -: 1425:      }
        -: 1426:      //Reset Hand
        -: 1427:
    #####: 1428:      return 0;
        -: 1429:}
        -: 1430:
function playCouncil_Room called 0 returned 0% blocks executed 0%
    #####: 1431:int playCouncil_Room(int currentPlayer, struct gameState *state, int handPos){
        -: 1432:  int i;
        -: 1433:  //+4 Cards
    #####: 1434:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1435:  {
    #####: 1436:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1437:  }
        -: 1438:
        -: 1439:      //+1 Buy
    #####: 1440:      state->numBuys++;
        -: 1441:
        -: 1442:      //Each other player draws a card
    #####: 1443:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1444:  {
    #####: 1445:    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1446:      {
    #####: 1447:        drawCard(i, state);
call    0 never executed
        -: 1448:      }
        -: 1449:  }
        -: 1450:
        -: 1451:      //put played card in played card pile
    #####: 1452:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1453:
    #####: 1454:      return 0;
        -: 1455:}
        -: 1456:
        -: 1457://end of dominion.c
