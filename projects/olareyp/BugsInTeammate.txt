Patrick OLarey
Assignment 5
3/2/17
CS362-400


Bugs in Teammate (merrisco) Code


Testing (cardtest4.c) revealed several bugs within the implementation of the Village card. The test output noted that tests had failed. Specifically, the handCount was 2 greater than the expected handCount. Additionally, the deckCount was 1 less than the expected deckCount. These discrepancies indicated that too many cards were being drawn (handCount too high, and deckCount too low). As such, review of the code immediately revealed that drawCard() was erroneously being called twice rather than once. 
	
Original (in dominion.c, playVillage())    
//+1 Card
    		drawCard(currentPlayer, state);
    		drawCard(currentPlayer, state);

Corrected    
//+1 Card
    		drawCard(currentPlayer, state);


After correcting this error, I ran the tests again and again the tests failed. This time, the deckCount was correct but the handCount was still 1 card higher than expected (previously it was 2 higher but correcting the first bug reduced it by 1). Again, upon review of the code, I saw that the played Village card was not being discarded (no call to discardCard()). 

Original (in dominion.c,  cardEffect())
else if(card == village)
{
playVillage(state, currentPlayer, handPos);
}

Corrected    
else if(card == village)
{
playVillage(state, currentPlayer, handPos);
discardCard(handPos, currentPlayer, state, 0); 
}

Upon adding discardCard() to the Village implementation, the tests were run again and this time the handCount met expectations. However, the tests still did not pass because there was another error. The actual numActions value was 2 whereas the expected value was 3. Upon review of the code, I noted that the implementation was setting the numAction to 2 rather than adding 2 to it (as should be the case). 
	
Original (in dominion.c, playVillage())    
//+2 Actions
state->numActions = 2;

Corrected    
//+2 Actions
state->numActions += 2;

After correcting the code to add 2 to numActions (rather than set it to 2), I ran the test again and all tests passed.



Interestingly, the tests for the Great Hall card (cardtest1.c and randomcardtest1.c) lead to the discovery of a bug in the implementation of cardEffect(). In trying to run these two tests, I received segmentation faults. For debugging purposes, I set a breakpoint at the Great Hall switch case within cardEffect() and found that the fault occurred prior to reach it. Therefore, I walked through the code beginning at the start of cardEffect and found that a statement prior to the switch cases was changing the value of the card passed to cardEffect(). The statement else if(card = council_room) was setting card to council_room rather than the intended comparison to council_room else if(card == council_room). As such, anytime this statement was reached, card was changed to council_room and then the council_room card was played instead of intended card. After correcting this bug, I ran the tests for Great Hall again and all tests passed.

The tests of the Smithy card (cardtest2.c and randomcardtest2.c) revealed two bugs. Like the village card tests, this test revealed that too many cards were being drawn and not enough discarded. Upon code review, it was apparent that drawCard() was being called 4 times rather than the intended 3 times (the for loop ran while i<4 rather than i<3).

Original (in dominion.c,  playSmith())
    //+3 Cards
    int i = 0;
    for(i ; i < 4; i++)         
    {
        drawCard(currentPlayer, state);
    }

Corrected    
    //+3 Cards
    int i = 0;
    for(i ; i < 3; i++)         
    {
        drawCard(currentPlayer, state);
    }

Likewise, code review again revealed that the played Smithy card was not being discarded (no call to discardCard()).  

Original (in dominion.c,  cardEffect())
else if(card == smithy)
{
playSmithy(state, currentPlayer, handPos);
}

Corrected    
else if(card == smithy)
{
playSmithy(state, currentPlayer, handPos);
discardCard(handPos, currentPlayer, state, 0); 
}

Upon implementing both of these fixes, the tests were run again the both tests passed.



Further, cardtest3.c and randomtestadventurer.c which test the implementation of the Adventurer card revealed a bug. Notably, the expected handCount was 1 greater than expected and the deckCount 1 fewer than expected. This indicated that 1 too many cards were being drawn. Upon review of the code, I noted that the while-loop containing drawCard() was being called while drawntreasure (the count of treasure cards drawn) was less than 3 (drawntreasure begins at 0 and is increment by no more than 1). As a result, 3 treasure cards will be drawn and kept in hand instead of the intended 2. 
	
Original (in dominion.c, playAdventurer())    
while(drawntreasure<3){…}

Corrected    
while(drawntreasure<2){…}

Like a couple of the other implementation, the played Adventurer card was also not being discarded. After implementing the fix above and discarding, I ran the Adventurer tests again and all tests passed.



Lastly, unittest2.c which tested the isGameOver() fuction revealed a bug. The implementation of the card was not identifying certain 3-empty-supplypile game-over conditions. Specifically, the implementation failed to recognize the game was over when the one of the three empty supply piles was either sea_hag or treasure_map. Inspection of the implementation revealed that this was due to the for-loop used to iterate over each supply pile. That is, the iterator (i) only worked through i < 25. However, there are 26 possible supply piles so piles 25 (sea_hag) and 26 (treasure_map) were missed.

Original (in dominion.c,  isGameOver())
  //if three supply pile are at 0, the game ends
  j = 0;
  for (i = 0; i < 25; i++)
    {…}

Corrected    
  //if three supply pile are at 0, the game ends
  j = 0;
  for (i = 0; i < 27; i++)
    {…}
