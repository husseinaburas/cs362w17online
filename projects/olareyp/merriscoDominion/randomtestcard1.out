Running randomtestcard1 999 and saving results to randomtestcard1.out
randomtestcard1 (GREATHALL) - ALL TESTS PASSED
File 'dominion.c'
Lines executed:36.66% of 611
Branches executed:37.58% of 455
Taken at least once:30.55% of 455
Calls executed:16.82% of 107
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4669038 returned 100% blocks executed 83%
  4669038:    8:int compare(const void* a, const void* b) {
  4669038:    9:  int test = 0;
  4669038:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
  4669038:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
  1245064:   13:    return -1;
  3423974:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 160337 returned 100% blocks executed 97%
   160337:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
   160337:   45:  SelectStream(1);
call    0 returned 100%
   160337:   46:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   47:  
        -:   48:  //check number of players
   160337:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 37% (fallthrough)
branch  3 taken 63%
        -:   50:    {
    60000:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
   100337:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
  1103707:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
 11037070:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:        {
 10033700:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
   100337:   74:  if (numPlayers == 2)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:   75:    {
    30041:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    70296:   78:  else if (numPlayers == 3)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   79:    {
    30000:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    40296:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
   100337:   88:  if (numPlayers == 2)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:   89:    {
    30041:   90:      state->supplyCount[estate] = 8;
    30041:   91:      state->supplyCount[duchy] = 8;
    30041:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    70296:   96:      state->supplyCount[estate] = 12;
    70296:   97:      state->supplyCount[duchy] = 12;
    70296:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
   100337:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   100337:  103:  state->supplyCount[silver] = 40;
   100337:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
  2107077:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  108:    {
 16555605:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  110:	{
 15552235:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
  1003370:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  115:		{
   401348:  116:		  if (numPlayers == 2){ 
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
    60082:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
   140592:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
   802696:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
  1003370:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
 14548865:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
   411603:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  140:    {
   311266:  141:      state->deckCount[i] = 0;
  1245064:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:	{
   933798:  144:	  state->deck[i][j] = estate;
   933798:  145:	  state->deckCount[i]++;
        -:  146:	}
  2490128:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  148:	{
  2178862:  149:	  state->deck[i][j] = copper;
  2178862:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
   411603:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  156:    {
   311266:  157:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
   411603:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
   311266:  167:      state->handCount[i] = 0;
   311266:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
  2809436:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  178:    {
  2709099:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
   100337:  183:  state->outpostPlayed = 0;
   100337:  184:  state->phase = 0;
   100337:  185:  state->numActions = 1;
   100337:  186:  state->numBuys = 1;
   100337:  187:  state->playedCardCount = 0;
   100337:  188:  state->whoseTurn = 0;
   100337:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
   602022:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   501685:  194:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  195:  }
        -:  196:
   100337:  197:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  198:
   100337:  199:  return 0;
        -:  200:}
        -:  201:
function shuffle called 311330 returned 100% blocks executed 100%
   311330:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
   311330:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
   311330:  210:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       24:  211:    return -1;
   311306:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
  3735360:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  3112748:  216:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  3112748:  217:    newDeck[newDeckPos] = state->deck[player][card];
  3112748:  218:    newDeckPos++;
  9058455:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
  5945707:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
  3112748:  222:    state->deckCount[player]--;
        -:  223:  }
  3424054:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
  3112748:  225:    state->deck[player][i] = newDeck[i];
  3112748:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
   311306:  229:  return 0;
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
call    0 never executed
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:
    #####:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  319:int supplyCount(int card, struct gameState *state) {
    #####:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 54000 returned 100% blocks executed 100%
    54000:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    54000:  325:  int count = 0;
        -:  326:
 13527000:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  328:    {
 13473000:  329:      if (state->deck[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  330:    }
        -:  331:
 13527000:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  333:    {
 13473000:  334:      if (state->hand[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  335:    }
        -:  336:
 13527000:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  338:    {
 13473000:  339:      if (state->discard[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  340:    }
        -:  341:
    54000:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 41296 returned 100% blocks executed 100%
    41296:  345:int whoseTurn(struct gameState *state) {
    41296:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 1471 returned 100% blocks executed 100%
     1471:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
     1471:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  395:    {
        2:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
     1469:  400:  j = 0;
    38194:  401:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  402:    {
    36725:  403:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  404:	{
     2938:  405:	  j++;
        -:  406:	}
        -:  407:    }
     1469:  408:  if ( j >= 3)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  409:    {
       24:  410:      return 1;
        -:  411:    }
        -:  412:
     1445:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 605477 returned 100% blocks executed 100%
   605477:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
   605477:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      152:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 58%
branch  1 taken 42% (fallthrough)
       88:  533:      state->deck[player][i] = state->discard[player][i];
       88:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       64:  537:    state->deckCount[player] = state->discardCount[player];
       64:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       64:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       64:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       64:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       64:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       64:  558:    if (deckCounter == 0)
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
       24:  559:      return -1;
        -:  560:
       40:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       40:  562:    state->deckCount[player]--;
       40:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   605413:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   605413:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   605413:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   605413:  575:    state->deckCount[player]--;
   605413:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   605453:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 56 returned 100% blocks executed 100%
       56:  582:int getCost(int cardNumber)
        -:  583:{
       56:  584:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  585:    {
        -:  586:    case curse:
        2:  587:      return 0;
        -:  588:    case estate:
        2:  589:      return 2;
        -:  590:    case duchy:
        2:  591:      return 5;
        -:  592:    case province:
        2:  593:      return 8;
        -:  594:    case copper:
        2:  595:      return 0;
        -:  596:    case silver:
        2:  597:      return 3;
        -:  598:    case gold:
        2:  599:      return 6;
        -:  600:    case adventurer:
        2:  601:      return 6;
        -:  602:    case council_room:
        2:  603:      return 5;
        -:  604:    case feast:
        2:  605:      return 4;
        -:  606:    case gardens:
        2:  607:      return 4;
        -:  608:    case mine:
        2:  609:      return 5;
        -:  610:    case remodel:
        2:  611:      return 4;
        -:  612:    case smithy:
        2:  613:      return 4;
        -:  614:    case village:
        2:  615:      return 3;
        -:  616:    case baron:
        2:  617:      return 4;
        -:  618:    case great_hall:
        2:  619:      return 3;
        -:  620:    case minion:
        2:  621:      return 5;
        -:  622:    case steward:
        2:  623:      return 3;
        -:  624:    case tribute:
        2:  625:      return 5;
        -:  626:    case ambassador:
        2:  627:      return 3;
        -:  628:    case cutpurse:
        2:  629:      return 4;
        -:  630:    case embargo: 
        2:  631:      return 2;
        -:  632:    case outpost:
        2:  633:      return 5;
        -:  634:    case salvager:
        2:  635:      return 4;
        -:  636:    case sea_hag:
        2:  637:      return 4;
        -:  638:    case treasure_map:
        2:  639:      return 4;
        -:  640:    }
        -:  641:	
        2:  642:  return -1;
        -:  643:}
        -:  644:
function playAdventurer called 528 returned 100% blocks executed 100%
      528:  645:int playAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand, int z)
        -:  646:{
     4536:  647:    while(drawntreasure<3){
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
     3480:  648:        if (state->deckCount[currentPlayer] <1){
        -:  649:          
        -:  650:        }
     3480:  651:        drawCard(currentPlayer, state);
call    0 returned 100%
     3480:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
     3480:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
branch  4 taken 22% (fallthrough)
branch  5 taken 78%
     1584:  654:            drawntreasure++;
        -:  655:        else{
     1896:  656:            temphand[z]=cardDrawn;
     1896:  657:            state->handCount[currentPlayer]--; 
     1896:  658:            z++;
        -:  659:        }
        -:  660:    }
     2952:  661:    while(z-1>=0){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
     1896:  662:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
     1896:  663:        z=z-1;
        -:  664:    }
      528:  665:    return 0;
        -:  666:}
        -:  667:
        -:  668:
        -:  669:
function playSmithy called 19788 returned 100% blocks executed 100%
    19788:  670:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  671:{
        -:  672:    //+3 Cards
    19788:  673:    int i = 0;
    98940:  674:    for(i ; i < 4; i++)         
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  675:    {
    79152:  676:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  677:    }
        -:  678:
        -:  679:    //discard card from hand
        -:  680:    
    19788:  681:    return 0;
        -:  682:}
        -:  683:
        -:  684:
        -:  685:
function playVillage called 180 returned 100% blocks executed 100%
      180:  686:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  687:{
        -:  688:    //+1 Card
      180:  689:    drawCard(currentPlayer, state);
call    0 returned 100%
      180:  690:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  691:
        -:  692:    //+2 Actions
      180:  693:    state->numActions = 2;
        -:  694:
        -:  695:    //discard played card from hand
      180:  696:    return 0;
        -:  697:}
        -:  698:
        -:  699:
        -:  700:
function playFeast called 0 returned 0% blocks executed 0%
    #####:  701:int playFeast(struct gameState *state, int currentPlayer, int handPos, int j, int choice1, int choice2, int *temphand)
        -:  702:{
        -:  703:   //gain card with cost up to 5
        -:  704:        //Backup hand
    #####:  705:      int i = 0;
    #####:  706:      for(i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  707:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  708:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  709:        }
        -:  710:        //Backup hand
        -:  711:
        -:  712:        //Update Coins for Buy
    #####:  713:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  714:       int x = 1;//Condition to loop on
    #####:  715:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  716:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  717:      if (DEBUG)
        -:  718:        printf("None of that card left, sorry!\n");
        -:  719:
        -:  720:      if (DEBUG){
        -:  721:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  722:      }
        -:  723:    }
    #####:  724:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  725:      printf("That card is too expensive!\n");
call    0 never executed
        -:  726:
        -:  727:      if (DEBUG){
        -:  728:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  729:      }
        -:  730:    }
        -:  731:    else{
        -:  732:
        -:  733:      if (DEBUG){
        -:  734:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:      }
        -:  736:
    #####:  737:      gainCard(choice1, state, 0, currentPlayer);
call    0 never executed
    #####:  738:      x = 0;
        -:  739:
        -:  740:      if (DEBUG){
        -:  741:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  742:      }
        -:  743:
        -:  744:    }
        -:  745:        }     
        -:  746:
        -:  747:      
    #####:  748:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  749:    state->hand[currentPlayer][i] = temphand[i];
    #####:  750:    temphand[i] = -1;
        -:  751:        }
        -:  752:        
        -:  753:              
    #####:  754:        return 0;
        -:  755:    return 0;
        -:  756:}
        -:  757:
        -:  758:
        -:  759:
function playCouncil_Room called 0 returned 0% blocks executed 0%
    #####:  760:int playCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -:  761:{
        -:  762:    //+4 Cards
    #####:  763:    int i = 0;
    #####:  764:    for (i ; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  765:    {
    #####:  766:        drawCard(currentPlayer, state);
call    0 never executed
        -:  767:    }
        -:  768:    
        -:  769:    //+1 Buy
    #####:  770:    state->numBuys = 0;
        -:  771:    
        -:  772:    //Each other player draws a card
    #####:  773:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  774:    {
    #####:  775:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  776:        {
    #####:  777:            drawCard(i, state);
call    0 never executed
        -:  778:        }
        -:  779:    }
    #####:  780:    playCouncil_Room(state, currentPlayer, handPos);
call    0 never executed
        -:  781:    //put played card in played card pile
        -:  782:  
        -:  783:    
    #####:  784:    return 0;
        -:  785:}
        -:  786:
        -:  787:
function cardEffect called 41296 returned 100% blocks executed 7%
    41296:  788:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  789:{
        -:  790:  int i;
        -:  791:  int j;
        -:  792:  int k;
        -:  793:  int x;
        -:  794:  int index;
    41296:  795:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    41296:  796:  int nextPlayer = currentPlayer + 1;
        -:  797:
    41296:  798:  int tributeRevealedCards[2] = {-1, -1};
        -:  799:  int temphand[MAX_HAND];// moved above the if statement
    41296:  800:  int drawntreasure=0;
        -:  801:  int cardDrawn;
    41296:  802:  int z = 0;// this is the counter for the temp hand
    41296:  803:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
    10536:  804:    nextPlayer = 0;
        -:  805:  }
        -:  806:  
    41296:  807:   if(card == adventurer)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  808:  {
      528:  809:      playAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
call    0 returned 100%
        -:  810:  }
    40768:  811:  else if(card == smithy)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  812:  {
    19788:  813:      playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  814:  }
    20980:  815:  else if(card == village)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  816:  {
      180:  817:      playVillage(state, currentPlayer, handPos);
call    0 returned 100%
        -:  818:  }
    20800:  819:  else if(card == feast)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  820:  {
    #####:  821:      playFeast(state, currentPlayer, handPos, j, choice1, choice2, temphand);
call    0 never executed
        -:  822:  }
    20800:  823:  else if(card == council_room)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  824:  {
    #####:  825:      playCouncil_Room(state, currentPlayer, handPos);
call    0 never executed
        -:  826:  }    
        -:  827:  else{
        -:  828:
        -:  829:  	
        -:  830:    //uses switch to select card and perform actions
    20800:  831:    switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:      {
        -:  833:      case adventurer:
    #####:  834:        while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  835:  	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  836:  	  shuffle(currentPlayer, state);
call    0 never executed
        -:  837:  	}
    #####:  838:  	drawCard(currentPlayer, state);
call    0 never executed
    #####:  839:  	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  840:  	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  841:  	  drawntreasure++;
        -:  842:  	else{
    #####:  843:  	  temphand[z]=cardDrawn;
    #####:  844:  	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  845:  	  z++;
        -:  846:  	}
        -:  847:        }
    #####:  848:        while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  849:  	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  850:  	z=z-1;
        -:  851:        }
    20800:  852:        return 0;
        -:  853:  			
        -:  854:      case council_room:
        -:  855:        //+4 Cards
    #####:  856:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  857:  	{
    #####:  858:  	  drawCard(currentPlayer, state);
call    0 never executed
        -:  859:  	}
        -:  860:  			
        -:  861:        //+1 Buy
    #####:  862:        state->numBuys++;
        -:  863:  			
        -:  864:        //Each other player draws a card
    #####:  865:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  866:  	{
    #####:  867:  	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  868:  	    {
    #####:  869:  	      drawCard(i, state);
call    0 never executed
        -:  870:  	    }
        -:  871:  	}
        -:  872:  			
        -:  873:        //put played card in played card pile
    #####:  874:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:  			
    #####:  876:        return 0;
        -:  877:  			
        -:  878:      case feast:
        -:  879:        //gain card with cost up to 5
        -:  880:        //Backup hand
    #####:  881:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  882:  	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  883:  	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  884:        }
        -:  885:        //Backup hand
        -:  886:
        -:  887:        //Update Coins for Buy
    #####:  888:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  889:        x = 1;//Condition to loop on
    #####:  890:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  891:  	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  892:  	  if (DEBUG)
        -:  893:  	    printf("None of that card left, sorry!\n");
        -:  894:
        -:  895:  	  if (DEBUG){
        -:  896:  	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  897:  	  }
        -:  898:  	}
    #####:  899:  	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:  	  printf("That card is too expensive!\n");
call    0 never executed
        -:  901:
        -:  902:  	  if (DEBUG){
        -:  903:  	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  904:  	  }
        -:  905:  	}
        -:  906:  	else{
        -:  907:
        -:  908:  	  if (DEBUG){
        -:  909:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  910:  	  }
        -:  911:
    #####:  912:  	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  913:  	  x = 0;//No more buying cards
        -:  914:
        -:  915:  	  if (DEBUG){
        -:  916:  	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  917:  	  }
        -:  918:
        -:  919:  	}
        -:  920:        }     
        -:  921:
        -:  922:        //Reset Hand
    #####:  923:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  924:  	state->hand[currentPlayer][i] = temphand[i];
    #####:  925:  	temphand[i] = -1;
        -:  926:        }
        -:  927:        //Reset Hand
        -:  928:        			
    #####:  929:        return 0;
        -:  930:  			
        -:  931:      case gardens:
    #####:  932:        return -1;
        -:  933:  			
        -:  934:      case mine:
    #####:  935:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  936:
    #####:  937:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  938:  	{
    #####:  939:  	  return -1;
        -:  940:  	}
        -:  941:  		
    #####:  942:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:  	{
    #####:  944:  	  return -1;
        -:  945:  	}
        -:  946:
    #####:  947:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  948:  	{
    #####:  949:  	  return -1;
        -:  950:  	}
        -:  951:
    #####:  952:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  953:
        -:  954:        //discard card from hand
    #####:  955:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  956:
        -:  957:        //discard trashed card
    #####:  958:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  959:  	{
    #####:  960:  	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  961:  	    {
    #####:  962:  	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  963:  	      break;
        -:  964:  	    }
        -:  965:  	}
        -:  966:  			
    #####:  967:        return 0;
        -:  968:  			
        -:  969:      case remodel:
    #####:  970:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  971:
    #####:  972:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  973:  	{
    #####:  974:  	  return -1;
        -:  975:  	}
        -:  976:
    #####:  977:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  978:
        -:  979:        //discard card from hand
    #####:  980:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  981:
        -:  982:        //discard trashed card
    #####:  983:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  984:  	{
    #####:  985:  	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  986:  	    {
    #####:  987:  	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  988:  	      break;
        -:  989:  	    }
        -:  990:  	}
        -:  991:
        -:  992:
    #####:  993:        return 0;
        -:  994:  		
        -:  995:      case smithy:
        -:  996:        //+3 Cards
    #####:  997:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  998:  	{
    #####:  999:  	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1000:  	}
        -: 1001:  			
        -: 1002:        //discard card from hand
    #####: 1003:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1004:        return 0;
        -: 1005:  		
        -: 1006:      case village:
        -: 1007:        //+1 Card
    #####: 1008:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1009:  			
        -: 1010:        //+2 Actions
    #####: 1011:        state->numActions = state->numActions + 2;
        -: 1012:  			
        -: 1013:        //discard played card from hand
    #####: 1014:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1015:        return 0;
        -: 1016:  		
        -: 1017:      case baron:
    #####: 1018:        state->numBuys++;//Increase buys by 1!
    #####: 1019:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1020:  	int p = 0;//Iterator for hand!
    #####: 1021:  	int card_not_discarded = 1;//Flag for discard set!
    #####: 1022:  	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1023:  	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1024:  	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1025:  	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1026:  	    state->discardCount[currentPlayer]++;
    #####: 1027:  	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1028:  	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1029:  	    }
    #####: 1030:  	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:  	    state->handCount[currentPlayer]--;
    #####: 1032:  	    card_not_discarded = 0;//Exit the loop
        -: 1033:  	  }
    #####: 1034:  	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1035:  	    if(DEBUG) {
        -: 1036:  	      printf("No estate cards in your hand, invalid choice\n");
        -: 1037:  	      printf("Must gain an estate if there are any\n");
        -: 1038:  	    }
    #####: 1039:  	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1040:  	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1041:  	      state->supplyCount[estate]--;//Decrement estates
    #####: 1042:  	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1043:  		isGameOver(state);
call    0 never executed
        -: 1044:  	      }
        -: 1045:  	    }
    #####: 1046:  	    card_not_discarded = 0;//Exit the loop
        -: 1047:  	  }
        -: 1048:  			    
        -: 1049:  	  else{
    #####: 1050:  	    p++;//Next card
        -: 1051:  	  }
        -: 1052:  	}
        -: 1053:        }
        -: 1054:  			    
        -: 1055:        else{
    #####: 1056:  	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1057:  	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1058:  	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1059:  	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1060:  	    isGameOver(state);
call    0 never executed
        -: 1061:  	  }
        -: 1062:  	}
        -: 1063:        }
        -: 1064:  	    
        -: 1065:        
    #####: 1066:        return 0;
        -: 1067:  		
        -: 1068:      case great_hall:
        -: 1069:        //+1 Card
    20800: 1070:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1071:  			
        -: 1072:        //+1 Actions
    20800: 1073:        state->numActions++;
        -: 1074:  			
        -: 1075:        //discard card from hand
    20800: 1076:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    20800: 1077:        return 0;
        -: 1078:  		
        -: 1079:      case minion:
        -: 1080:        //+1 action
    #####: 1081:        state->numActions++;
        -: 1082:  			
        -: 1083:        //discard card from hand
    #####: 1084:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1085:  			
    #####: 1086:        if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1087:  	{
    #####: 1088:  	  state->coins = state->coins + 2;
        -: 1089:  	}
        -: 1090:  			
    #####: 1091:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1092:  	{
        -: 1093:  	  //discard hand
    #####: 1094:  	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1095:  	    {
    #####: 1096:  	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1097:  	    }
        -: 1098:  				
        -: 1099:  	  //draw 4
    #####: 1100:  	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:  	    {
    #####: 1102:  	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:  	    }
        -: 1104:  				
        -: 1105:  	  //other players discard hand and redraw if hand size > 4
    #####: 1106:  	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:  	    {
    #####: 1108:  	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1109:  		{
    #####: 1110:  		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1111:  		    {
        -: 1112:  		      //discard hand
    #####: 1113:  		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1114:  			{
    #####: 1115:  			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1116:  			}
        -: 1117:  							
        -: 1118:  		      //draw 4
    #####: 1119:  		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1120:  			{
    #####: 1121:  			  drawCard(i, state);
call    0 never executed
        -: 1122:  			}
        -: 1123:  		    }
        -: 1124:  		}
        -: 1125:  	    }
        -: 1126:  				
        -: 1127:  	}
    #####: 1128:        return 0;
        -: 1129:  		
        -: 1130:      case steward:
    #####: 1131:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1132:  	{
        -: 1133:  	  //+2 cards
    #####: 1134:  	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1135:  	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1136:  	}
    #####: 1137:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1138:  	{
        -: 1139:  	  //+2 coins
    #####: 1140:  	  state->coins = state->coins + 2;
        -: 1141:  	}
        -: 1142:        else
        -: 1143:  	{
        -: 1144:  	  //trash 2 cards in hand
    #####: 1145:  	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1146:  	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1147:  	}
        -: 1148:  			
        -: 1149:        //discard card from hand
    #####: 1150:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1151:        return 0;
        -: 1152:  		
        -: 1153:      case tribute:
    #####: 1154:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1155:  	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1156:  	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1157:  	  state->deckCount[nextPlayer]--;
        -: 1158:  	}
    #####: 1159:  	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1160:  	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1161:  	  state->discardCount[nextPlayer]--;
        -: 1162:  	}
        -: 1163:  	else{
        -: 1164:  	  //No Card to Reveal
        -: 1165:  	  if (DEBUG){
        -: 1166:  	    printf("No cards to reveal\n");
        -: 1167:  	  }
        -: 1168:  	}
        -: 1169:        }
        -: 1170:  	    
        -: 1171:        else{
    #####: 1172:  	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:  	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1174:  	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1175:  	    state->deckCount[nextPlayer]++;
    #####: 1176:  	    state->discard[nextPlayer][i] = -1;
    #####: 1177:  	    state->discardCount[nextPlayer]--;
        -: 1178:  	  }
        -: 1179:  			    
    #####: 1180:  	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1181:  	} 
    #####: 1182:  	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1183:  	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1184:  	state->deckCount[nextPlayer]--;
    #####: 1185:  	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1186:  	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1187:  	state->deckCount[nextPlayer]--;
        -: 1188:        }    
        -: 1189:  		       
    #####: 1190:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1191:  	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1192:  	state->playedCardCount++;
    #####: 1193:  	tributeRevealedCards[1] = -1;
        -: 1194:        }
        -: 1195:
    #####: 1196:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1197:  	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1198:  	  state->coins += 2;
        -: 1199:  	}
        -: 1200:  		    
    #####: 1201:  	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1202:  	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1203:  	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1204:  	}
        -: 1205:  	else{//Action Card
    #####: 1206:  	  state->numActions = state->numActions + 2;
        -: 1207:  	}
        -: 1208:        }
        -: 1209:  	    
    #####: 1210:        return 0;
        -: 1211:  		
        -: 1212:      case ambassador:
    #####: 1213:        j = 0;		//used to check if player has enough cards to discard
        -: 1214:
    #####: 1215:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1216:  	{
    #####: 1217:  	  return -1;				
        -: 1218:  	}
        -: 1219:
    #####: 1220:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1221:  	{
    #####: 1222:  	  return -1;
        -: 1223:  	}
        -: 1224:
    #####: 1225:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:  	{
    #####: 1227:  	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1228:  	    {
    #####: 1229:  	      j++;
        -: 1230:  	    }
        -: 1231:  	}
    #####: 1232:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1233:  	{
    #####: 1234:  	  return -1;				
        -: 1235:  	}
        -: 1236:
        -: 1237:        if (DEBUG) 
        -: 1238:  	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1239:
        -: 1240:        //increase supply count for choosen card by amount being discarded
    #####: 1241:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1242:  			
        -: 1243:        //each other player gains a copy of revealed card
    #####: 1244:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1245:  	{
    #####: 1246:  	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1247:  	    {
    #####: 1248:  	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1249:  	    }
        -: 1250:  	}
        -: 1251:
        -: 1252:        //discard played card from hand
    #####: 1253:        discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1254:
        -: 1255:        //trash copies of cards returned to supply
    #####: 1256:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1257:  	{
    #####: 1258:  	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:  	    {
    #####: 1260:  	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1261:  		{
    #####: 1262:  		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1263:  		  break;
        -: 1264:  		}
        -: 1265:  	    }
        -: 1266:  	}			
        -: 1267:
    #####: 1268:        return 0;
        -: 1269:  		
        -: 1270:      case cutpurse:
        -: 1271:
    #####: 1272:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1273:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:  	{
    #####: 1275:  	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1276:  	    {
    #####: 1277:  	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1278:  		{
    #####: 1279:  		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1280:  		    {
    #####: 1281:  		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1282:  		      break;
        -: 1283:  		    }
    #####: 1284:  		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1285:  		    {
    #####: 1286:  		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1287:  			{
        -: 1288:  			  if (DEBUG)
        -: 1289:  			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1290:  			}	
    #####: 1291:  		      break;
        -: 1292:  		    }		
        -: 1293:  		}
        -: 1294:  					
        -: 1295:  	    }
        -: 1296:  				
        -: 1297:  	}				
        -: 1298:
        -: 1299:        //discard played card from hand
    #####: 1300:        discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1301:
    #####: 1302:        return 0;
        -: 1303:
        -: 1304:  		
        -: 1305:      case embargo: 
        -: 1306:        //+2 Coins
    #####: 1307:        state->coins = state->coins + 2;
        -: 1308:  			
        -: 1309:        //see if selected pile is in play
    #####: 1310:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1311:  	{
    #####: 1312:  	  return -1;
        -: 1313:  	}
        -: 1314:  			
        -: 1315:        //add embargo token to selected supply pile
    #####: 1316:        state->embargoTokens[choice1]++;
        -: 1317:  			
        -: 1318:        //trash card
    #####: 1319:        discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1320:        return 0;
        -: 1321:  		
        -: 1322:      case outpost:
        -: 1323:        //set outpost flag
    #####: 1324:        state->outpostPlayed++;
        -: 1325:  			
        -: 1326:        //discard card
    #####: 1327:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1328:        return 0;
        -: 1329:  		
        -: 1330:      case salvager:
        -: 1331:        //+1 buy
    #####: 1332:        state->numBuys++;
        -: 1333:  			
    #####: 1334:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1335:  	{
        -: 1336:  	  //gain coins equal to trashed card
    #####: 1337:  	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1338:  	  //trash card
    #####: 1339:  	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1340:  	}
        -: 1341:  			
        -: 1342:        //discard card
    #####: 1343:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1344:        return 0;
        -: 1345:  		
        -: 1346:      case sea_hag:
    #####: 1347:        for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1348:  	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1349:  	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1350:  	  state->discardCount[i]++;
    #####: 1351:  	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1352:  	}
        -: 1353:        }
    #####: 1354:        return 0;
        -: 1355:  		
        -: 1356:      case treasure_map:
        -: 1357:        //search hand for another treasure_map
    #####: 1358:        index = -1;
    #####: 1359:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1360:  	{
    #####: 1361:  	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1362:  	    {
    #####: 1363:  	      index = i;
    #####: 1364:  	      break;
        -: 1365:  	    }
        -: 1366:  	}
    #####: 1367:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1368:  	{
        -: 1369:  	  //trash both treasure cards
    #####: 1370:  	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1371:  	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1372:
        -: 1373:  	  //gain 4 Gold cards
    #####: 1374:  	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1375:  	    {
    #####: 1376:  	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1377:  	    }
        -: 1378:  				
        -: 1379:  	  //return success
    #####: 1380:  	  return 1;
        -: 1381:  	}
        -: 1382:  			
        -: 1383:        //no second treasure_map found in hand
    #####: 1384:        return -1;
        -: 1385:      }
        -: 1386:  	
    #####: 1387:    return -1;
        -: 1388:}
    20496: 1389:}
function discardCard called 20800 returned 100% blocks executed 78%
    20800: 1390:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1391:{
        -: 1392:	
        -: 1393:  //if card is not trashed, added to Played pile 
    20800: 1394:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1395:    {
        -: 1396:      //add card to played pile
    20800: 1397:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20800: 1398:      state->playedCardCount++;
        -: 1399:    }
        -: 1400:	
        -: 1401:  //set played card to -1
    20800: 1402:  state->hand[currentPlayer][handPos] = -1;
        -: 1403:	
        -: 1404:  //remove card from player's hand
    20800: 1405:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1406:    {
        -: 1407:      //reduce number of cards in hand
    #####: 1408:      state->handCount[currentPlayer]--;
        -: 1409:    }
    20800: 1410:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1411:    {
        -: 1412:      //reduce number of cards in hand
    #####: 1413:      state->handCount[currentPlayer]--;
        -: 1414:    }
        -: 1415:  else 	
        -: 1416:    {
        -: 1417:      //replace discarded card with last card in hand
    20800: 1418:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1419:      //set last card to -1
    20800: 1420:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1421:      //reduce number of cards in hand
    20800: 1422:      state->handCount[currentPlayer]--;
        -: 1423:    }
        -: 1424:	
    20800: 1425:  return 0;
        -: 1426:}
        -: 1427:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1428:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1429:{
        -: 1430:  //Note: supplyPos is enum of choosen card
        -: 1431:	
        -: 1432:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1433:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1434:    {
    #####: 1435:      return -1;
        -: 1436:    }
        -: 1437:	
        -: 1438:  //added card for [whoseTurn] current player:
        -: 1439:  // toFlag = 0 : add to discard
        -: 1440:  // toFlag = 1 : add to deck
        -: 1441:  // toFlag = 2 : add to hand
        -: 1442:
    #####: 1443:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1444:    {
    #####: 1445:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1446:      state->deckCount[player]++;
        -: 1447:    }
    #####: 1448:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1449:    {
    #####: 1450:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1451:      state->handCount[player]++;
        -: 1452:    }
        -: 1453:  else
        -: 1454:    {
    #####: 1455:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1456:      state->discardCount[player]++;
        -: 1457:    }
        -: 1458:	
        -: 1459:  //decrease number in supply pile
    #####: 1460:  state->supplyCount[supplyPos]--;
        -: 1461:	 
    #####: 1462:  return 0;
        -: 1463:}
        -: 1464:
function updateCoins called 166337 returned 100% blocks executed 100%
   166337: 1465:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1466:{
        -: 1467:  int i;
        -: 1468:	
        -: 1469:  //reset coin count
   166337: 1470:  state->coins = 0;
        -: 1471:
        -: 1472:  //add coins for each Treasure card in player's hand
 17135022: 1473:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1474:    {
 16968685: 1475:      if (state->hand[player][i] == copper)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1476:	{
  5790011: 1477:	  state->coins += 1;
        -: 1478:	}
 11178674: 1479:      else if (state->hand[player][i] == silver)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -: 1480:	{
  5489000: 1481:	  state->coins += 2;
        -: 1482:	}
  5689674: 1483:      else if (state->hand[player][i] == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -: 1484:	{
  5489000: 1485:	  state->coins += 3;
        -: 1486:	}	
        -: 1487:    }	
        -: 1488:
        -: 1489:  //add bonus
   166337: 1490:  state->coins += bonus;
        -: 1491:
   166337: 1492:  return 0;
        -: 1493:}
        -: 1494:
        -: 1495:
        -: 1496://end of dominion.c
        -: 1497:
