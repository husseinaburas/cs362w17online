-------------------------------------------Testing Card: Smithy-----------------------------------------
-------------------------------------------Test 1.0: Current player should receive exact 3 cards. ----------------------------------------------
****Error in current test******
-------------------------------------------Test 1.1: 3 cards should come from the playerws own pile. ------------------------------------------
****Error in current test******
-------------------------------------------Test 1.2: No state change should occur for other players. -----------------------------------------
****Error in current test******
****Error in current test******
-------------------------------------------Test 1.3: No state change should occur to the kingdom card piles. ------------
-------------------------------------------Test 1.4: No state change should occur to the Victory card piles. ------------

------------------------------------------SUCCESS: TESTING COMPLETE FOR Smithy CARD-----------------------------------------

File 'dominion.c'
Lines executed:35.91% of 557
Branches executed:38.31% of 415
Taken at least once:25.54% of 415
Calls executed:25.00% of 92
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 800 returned 100% blocks executed 100%
      800:    8:int compare(const void* a, const void* b) {
      800:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        6:   10:    return 1;
      794:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      210:   12:    return -1;
      584:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 22 returned 100% blocks executed 94%
       22:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       22:   44:  SelectStream(1);
call    0 returned 100%
       22:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       22:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       22:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      242:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2420:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       22:   73:  if (numPlayers == 2)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:   74:    {
       14:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        8:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        8:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       22:   87:  if (numPlayers == 2)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:   88:    {
       14:   89:      state->supplyCount[estate] = 8;
       14:   90:      state->supplyCount[duchy] = 8;
       14:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        8:   95:      state->supplyCount[estate] = 12;
        8:   96:      state->supplyCount[duchy] = 12;
        8:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       22:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       22:  102:  state->supplyCount[silver] = 40;
       22:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      462:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3630:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3410:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      220:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       44:  115:		  if (numPlayers == 2){ 
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
       14:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        8:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      198:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      220:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3190:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       74:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       52:  140:      state->deckCount[i] = 0;
      208:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      156:  143:	  state->deck[i][j] = estate;
      156:  144:	  state->deckCount[i]++;
        -:  145:	}
      416:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      364:  148:	  state->deck[i][j] = copper;
      364:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       74:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       52:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       74:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       52:  166:      state->handCount[i] = 0;
       52:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      616:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      594:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       22:  182:  state->outpostPlayed = 0;
       22:  183:  state->phase = 0;
       22:  184:  state->numActions = 1;
       22:  185:  state->numBuys = 1;
       22:  186:  state->playedCardCount = 0;
       22:  187:  state->whoseTurn = 0;
       22:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      132:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      110:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       22:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       22:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 40965 returned 100% blocks executed 100%
    40965:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    40965:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    40965:  209:  if (state->deckCount[player] < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    40912:  210:    return -1;
       53:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      636:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      530:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      530:  216:    newDeck[newDeckPos] = state->deck[player][card];
      530:  217:    newDeckPos++;
     1867:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
     1337:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      530:  221:    state->deckCount[player]--;
        -:  222:  }
      583:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      530:  224:    state->deck[player][i] = newDeck[i];
      530:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       53:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 8 returned 100% blocks executed 100%
        8:  320:int supplyCount(int card, struct gameState *state) {
        8:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 20643 returned 100% blocks executed 100%
    20643:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    20643:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    20467:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
       10:  534:      state->deck[player][i] = state->discard[player][i];
       10:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    20457:  538:    state->deckCount[player] = state->discardCount[player];
    20457:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    20457:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    20457:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    20457:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    20457:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    20457:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    20456:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      186:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      186:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      186:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      186:  576:    state->deckCount[player]--;
      186:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      187:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 3 returned 100% blocks executed 13%
        3:  583:int getCost(int cardNumber)
        -:  584:{
        3:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 67%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 10%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
        4:  664:  switch( card ) 
branch  0 taken 0%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 75%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    {
        -:  666:    case adventurer:
    #####:  667:		adventurerCard(state, currentPlayer);
call    0 never executed
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
        5:  671:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  672:	{
        4:  673:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
        1:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
        3:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  681:	{
        2:  682:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  683:	    {
        1:  684:	      drawCard(i, state);
call    0 returned 100%
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
        1:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  690:			
        1:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case smithy:
    #####:  811:      smithyCard(state, handPos, currentPlayer);
call    0 never executed
        -:  812:		
        -:  813:    case village:
        -:  814:      //+1 Card
        3:  815:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  816:			
        -:  817:      //+2 Actions
        3:  818:      state->numActions = state->numActions + 2;
        -:  819:			
        -:  820:      //discard played card from hand
        3:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  822:      return 0;
        -:  823:		
        -:  824:    case baron:
    #####:  825:      state->numBuys++;//Increase buys by 1!
    #####:  826:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  827:	int p = 0;//Iterator for hand!
    #####:  828:	int card_not_discarded = 1;//Flag for discard set!
    #####:  829:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  830:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  831:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  832:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  833:	    state->discardCount[currentPlayer]++;
    #####:  834:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  835:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  836:	    }
    #####:  837:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  838:	    state->handCount[currentPlayer]--;
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
    #####:  841:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  842:	    if(DEBUG) {
        -:  843:	      printf("No estate cards in your hand, invalid choice\n");
        -:  844:	      printf("Must gain an estate if there are any\n");
        -:  845:	    }
    #####:  846:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  848:	      state->supplyCount[estate]--;//Decrement estates
    #####:  849:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:		isGameOver(state);
call    0 never executed
        -:  851:	      }
        -:  852:	    }
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
        -:  855:			    
        -:  856:	  else{
    #####:  857:	    p++;//Next card
        -:  858:	  }
        -:  859:	}
        -:  860:      }
        -:  861:			    
        -:  862:      else{
    #####:  863:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  865:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  866:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:	    isGameOver(state);
call    0 never executed
        -:  868:	  }
        -:  869:	}
        -:  870:      }
        -:  871:	    
        -:  872:      
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case great_hall:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
call    0 never executed
        -:  878:			
        -:  879:      //+1 Actions
    #####:  880:      state->numActions++;
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case minion:
        -:  887:      //+1 action
    #####:  888:      state->numActions++;
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  892:			
    #####:  893:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  894:	{
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:			
    #####:  898:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  899:	{
        -:  900:	  //discard hand
    #####:  901:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  902:	    {
    #####:  903:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  904:	    }
        -:  905:				
        -:  906:	  //draw 4
    #####:  907:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  908:	    {
    #####:  909:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  910:	    }
        -:  911:				
        -:  912:	  //other players discard hand and redraw if hand size > 4
    #####:  913:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	    {
    #####:  915:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  916:		{
    #####:  917:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  918:		    {
        -:  919:		      //discard hand
    #####:  920:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  921:			{
    #####:  922:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  923:			}
        -:  924:							
        -:  925:		      //draw 4
    #####:  926:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  927:			{
    #####:  928:			  drawCard(i, state);
call    0 never executed
        -:  929:			}
        -:  930:		    }
        -:  931:		}
        -:  932:	    }
        -:  933:				
        -:  934:	}
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case steward:
    #####:  938:		stewardCard(currentPlayer, choice1, choice2, choice3, handPos, state);
call    0 never executed
        -:  939:		
        -:  940:    case tribute:
    #####:  941:		tributeCard(currentPlayer, state);
call    0 never executed
        -:  942:
        -:  943:    case ambassador:
    #####:  944:      j = 0;		//used to check if player has enough cards to discard
        -:  945:
    #####:  946:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  947:	{
    #####:  948:	  return -1;				
        -:  949:	}
        -:  950:
    #####:  951:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  return -1;
        -:  954:	}
        -:  955:
    #####:  956:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  959:	    {
    #####:  960:	      j++;
        -:  961:	    }
        -:  962:	}
    #####:  963:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  return -1;				
        -:  966:	}
        -:  967:
        -:  968:      if (DEBUG) 
        -:  969:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  970:
        -:  971:      //increase supply count for choosen card by amount being discarded
    #####:  972:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  973:			
        -:  974:      //each other player gains a copy of revealed card
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  980:	    }
        -:  981:	}
        -:  982:
        -:  983:      //discard played card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  985:
        -:  986:      //trash copies of cards returned to supply
    #####:  987:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	    {
    #####:  991:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  992:		{
    #####:  993:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  994:		  break;
        -:  995:		}
        -:  996:	    }
        -:  997:	}			
        -:  998:
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case cutpurse:
        -: 1002:
    #####: 1003:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1004:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:	    {
    #####: 1008:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1009:		{
    #####: 1010:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
    #####: 1012:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1013:		      break;
        -: 1014:		    }
    #####: 1015:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
    #####: 1017:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
        -: 1019:			  if (DEBUG)
        -: 1020:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1021:			}	
    #####: 1022:		      break;
        -: 1023:		    }		
        -: 1024:		}
        -: 1025:					
        -: 1026:	    }
        -: 1027:				
        -: 1028:	}				
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:
        -: 1035:		
        -: 1036:    case embargo: 
    #####: 1037:		embargoCard(state, handPos, currentPlayer, choice1);
call    0 never executed
        -: 1038:		
        -: 1039:    case outpost:
        -: 1040:      //set outpost flag
    #####: 1041:      state->outpostPlayed++;
        -: 1042:			
        -: 1043:      //discard card
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case salvager:
        -: 1048:      //+1 buy
    #####: 1049:      state->numBuys++;
        -: 1050:			
    #####: 1051:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
        -: 1053:	  //gain coins equal to trashed card
    #####: 1054:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1055:	  //trash card
    #####: 1056:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1057:	}
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case sea_hag:
    #####: 1064:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1065:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1066:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1067:	  state->discardCount[i]++;
    #####: 1068:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1069:	}
        -: 1070:      }
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case treasure_map:
        -: 1074:      //search hand for another treasure_map
    #####: 1075:      index = -1;
    #####: 1076:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1079:	    {
    #####: 1080:	      index = i;
    #####: 1081:	      break;
        -: 1082:	    }
        -: 1083:	}
    #####: 1084:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
        -: 1086:	  //trash both treasure cards
    #####: 1087:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1088:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1089:
        -: 1090:	  //gain 4 Gold cards
    #####: 1091:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1092:	    {
    #####: 1093:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1094:	    }
        -: 1095:				
        -: 1096:	  //return success
    #####: 1097:	  return 1;
        -: 1098:	}
        -: 1099:			
        -: 1100:      //no second treasure_map found in hand
    #####: 1101:      return -1;
        -: 1102:    }
        -: 1103:	
    #####: 1104:  return -1;
        -: 1105:}
        -: 1106:
function adventurerCard called 10 returned 100% blocks executed 100%
       10: 1107:int adventurerCard(struct gameState *state, int currentPlayer)
        -: 1108:{
       10: 1109:	int drawntreasure = 0;
        -: 1110:	int cardDrawn;
       10: 1111:	int z = 0;
        -: 1112:	int temphand[MAX_HAND];
    20537: 1113:	while (drawntreasure<4) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    20517: 1114:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    20456: 1115:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1116:		}
    20517: 1117:		drawCard(currentPlayer, state);
call    0 returned 100%
    20517: 1118:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    20517: 1119:		if ( cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       40: 1120:			drawntreasure++;
        -: 1121:		else {
    20477: 1122:			temphand[z] = cardDrawn;
    20477: 1123:			state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    20477: 1124:			z++;
        -: 1125:		}
        -: 1126:	}
     1923: 1127:	while (z - 1 >= 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1903: 1128:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
     1903: 1129:		z = z - 1;
        -: 1130:	}
       10: 1131:	return 0;
        -: 1132:}
function tributeCard called 0 returned 0% blocks executed 0%
    #####: 1133:int tributeCard(int currentPlayer, struct gameState *state) 
        -: 1134:{
    #####: 1135:	int nextPlayer = currentPlayer + 1;
    #####: 1136:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1137:	int i;
    #####: 1138:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1139:		if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1140:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1141:			state->deckCount[nextPlayer]--;
        -: 1142:		}
    #####: 1143:		else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1144:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1145:			state->discardCount[nextPlayer]--;
        -: 1146:		}
        -: 1147:		else {
        -: 1148:			//No Card to Reveal
        -: 1149:			if (DEBUG) {
        -: 1150:				printf("No cards to reveal\n");
        -: 1151:			}
        -: 1152:		}
        -: 1153:	}
        -: 1154:
        -: 1155:	else {
    #####: 1156:		if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1157:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1158:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1159:				state->deckCount[nextPlayer]++;
    #####: 1160:				state->discard[nextPlayer][i] = -1;
    #####: 1161:				state->discardCount[nextPlayer]--;
        -: 1162:			}
        -: 1163:
    #####: 1164:			shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1165:		}
    #####: 1166:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1167:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1168:		state->deckCount[nextPlayer]--;
    #####: 1169:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1170:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1171:		state->deckCount[nextPlayer]--;
        -: 1172:	}
        -: 1173:
    #####: 1174:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1175:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1176:		state->playedCardCount++;
    #####: 1177:		tributeRevealedCards[1] = -1;
        -: 1178:	}
        -: 1179:
    #####: 1180:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1181:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1182:			state->coins += 2;
        -: 1183:		}
        -: 1184:
    #####: 1185:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1186:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1187:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1188:		}
        -: 1189:		else {//Action Card
    #####: 1190:			state->numActions = state->numActions + 2;
        -: 1191:		}
        -: 1192:	}
        -: 1193:
    #####: 1194:	return 0;
        -: 1195:}
function stewardCard called 0 returned 0% blocks executed 0%
    #####: 1196:int stewardCard(int currentPlayer, int choice1,  int choice2, int choice3, int handPos, struct gameState *state)
        -: 1197:{
    #####: 1198:			  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1199:		  {
        -: 1200:			  //+2 cards
    #####: 1201:			  drawCard(currentPlayer, state);
call    0 never executed
        -: 1202:		 }
    #####: 1203:		  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1204:		  {
        -: 1205:			  //+2 coins
    #####: 1206:			  state->coins = state->coins + 3;
        -: 1207:		  }
        -: 1208:		  else
        -: 1209:		  {
        -: 1210:			  //trash 2 cards in hand
    #####: 1211:			  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:			  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1213:		  }
        -: 1214:
    #####: 1215:		  return 0;
        -: 1216:}
function embargoCard called 0 returned 0% blocks executed 0%
    #####: 1217:int embargoCard(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -: 1218:{
        -: 1219:	//+2 Coins
    #####: 1220:	state->coins = state->coins + 2;
        -: 1221:
        -: 1222:	//see if selected pile is in play
    #####: 1223:	if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:		return -1;
        -: 1226:	}
        -: 1227:
        -: 1228:	//add embargo token to selected supply pile
    #####: 1229:	state->embargoTokens[choice1]--;
        -: 1230:
    #####: 1231:	return 0;
        -: 1232:}
function smithyCard called 3 returned 100% blocks executed 100%
        3: 1233:int smithyCard(struct gameState *state, int handPos, int currentPlayer)
        -: 1234:{
        -: 1235:	int i;
        -: 1236:	//+3 Cards
        9: 1237:	for ( i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1238:	{
        6: 1239:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1240:	}
        -: 1241:
        -: 1242:	//discard card from hand
        3: 1243:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3: 1244:	return 0;
        -: 1245:
        -: 1246: }
function discardCard called 7 returned 100% blocks executed 89%
        7: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
        7: 1251:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1252:    {
        -: 1253:      //add card to played pile
        7: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1255:      state->playedCardCount++;
        -: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
        7: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
        7: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
        -: 1266:    }
        7: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
        2: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
        5: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
        5: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
        5: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
        7: 1282:  return 0;
        -: 1283:}
        -: 1284:
function gainCard called 5 returned 100% blocks executed 100%
        5: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1290:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        -: 1291:    {
        1: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
        4: 1300:  if (toFlag == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1301:    {
        1: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1303:      state->deckCount[player]++;
        -: 1304:    }
        3: 1305:  else if (toFlag == 2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1306:    {
        1: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1308:      state->handCount[player]++;
        -: 1309:    }
        -: 1310:  else
        -: 1311:    {
        2: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
        4: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
        4: 1319:  return 0;
        -: 1320:}
        -: 1321:
function updateCoins called 26 returned 100% blocks executed 100%
       26: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
       26: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
      156: 1330:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1331:    {
      130: 1332:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1333:	{
       84: 1334:	  state->coins += 1;
        -: 1335:	}
       46: 1336:      else if (state->hand[player][i] == silver)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1337:	{
        5: 1338:	  state->coins += 2;
        -: 1339:	}
       41: 1340:      else if (state->hand[player][i] == gold)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1341:	{
        5: 1342:	  state->coins += 3;
        -: 1343:	}	
        -: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
       26: 1347:  state->coins += bonus;
        -: 1348:
       26: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:
        -: 1353://end of dominion.c
        -: 1354:
