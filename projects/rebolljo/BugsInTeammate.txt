Bug 1: Playing smithy results in incorrect number of cards in player’s hand and deck	When testing the smithy card with a random tester, it was found that playing the card results in the player having one more card in their hand than was expected. Effectively playing the card gives the player 4 cards rather than 3. This also results in an incorrect number of cards being left over in the deck. The deck has one less card than it should, further indicating that 4 cards are drawn from the deck rather than 3. 		Upon further inspection with gdb, it was found that the for loop within smithyCard was set to run 3 times rather than 4 (line 647 in dominion.c). It is within this loop that the player draws a card. This confirms the error.		This bug can be reproduced by playing smithy with a normal deck. The code used to locate this bug can be found in randomtestcard1.c. Alternatively, cardtest2.c can be used to showcase this bug as well. Bug 2: Playing adventurer results in an incorrect discard and deck count 	When testing the adventurer card with a random tester it was found that when the card is played with a normal deck with a randomized amount of treasures, that post-play, the deck count and the discard count are off.  For example, a random test showed that the discard count was expected to be 84, but was actually 19. And the deck count was expected to be 0 but was actually 65. The fact that these two values are related, in that they are both off by 65, tells us that adventurer is somehow messing up in the way that it is picking out treasure cards. It is drawing less cards than it should in order to find the needed treasure cards. 		To further inspect this bug, cardtest2 was ran with gdb and a breakpoint was set at line 659 in dominion.c. This was a point in the adventurerCard function in which the initializations had been completed, and the logic of the code had begun. Thus, I felt it was a good spot to next and continue through the code. Next’ing through the code I found a line that didn’t look correct. It was referencing a card that had been drawn, but was incorrectly referencing the card in the array. To further inspect, I looked at the source code, and at this specific line (line 664 in dominion.c), it read: 		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];		This is immediately after a drawCard() call. This is the incorrect way to reference the latest card drawn. The -1 should not be there. Incorrectly referencing the latest card drawn and then attempting to compare that card to see if it is a treasure card, will cause (and is causing) an incorrect amount of cards to be drawn.		This bug can be reproduced by playing adventurer with a randomized deck with a random amount of treasure cards. The code used to find this bug can be found in randomtestadventurer.c. Alternatively, cardtest1.c can be used to showcase this bug as well.