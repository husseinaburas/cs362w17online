---Now beginning unit test on smithy card--- 
Testing that player correctly gains 3 cards: 
Testing player 1's hand count: 
TEST FAILURE
Testing player 1's deck count: 
TEST FAILURE
Testing whose turn it is: 
TEST SUCCESSFUL
Testing player 2's handCount: 
TEST SUCCESSFUL
Testing curse cards supply count: 
TEST SUCCESSFUL
Testing province cards supply count:: 
TEST SUCCESSFUL
Testing estate cards supply count: 
TEST SUCCESSFUL
Testing duchy cards supply count: 
TEST SUCCESSFUL
End smithy unit test
---Now beginning unit test on adventurer card--- 
Testing when treasure cards are alternating with other cards in the deck: 
Testing whether coin count is correct:
TEST FAILURE
Testing player1 hand count: 
TEST FAILURE
Testing player1 discard count: 
TEST SUCCESSFUL
Testing player1 deckCount count: 
TEST FAILURE
Testing whose turn it is: 
TEST SUCCESSFUL
Testing player 2's handCount: 
TEST FAILURE
Testing curse cards supply count: 
TEST FAILURE
Testing province cards supply count:: 
TEST SUCCESSFUL
Testing estate cards supply count: 
TEST SUCCESSFUL
Testing duchy cards supply count: 
TEST SUCCESSFUL
End adventurer unit test 
---Now beginning unit test on steward card--- 
Testing choice 1: +2 cards: 
Testing player1 handcount: 
TEST SUCCESSFUL
Testing player 2's handCount: 
TEST SUCCESSFUL
Testing choice 2: +2 coins: 
Testing player1 goldcount: 
TEST FAILURE
Testing choice 3: trash two cards 
Testing player1 handCount: 
TEST FAILURE
Testing player 2's handCount: 
TEST FAILURE
Testing curse cards supply count: 
TEST SUCCESSFUL
Testing province cards supply count:: 
TEST SUCCESSFUL
Testing estate cards supply count: 
TEST SUCCESSFUL
Testing duchy cards supply count: 
TEST SUCCESSFUL
End steward unit test 
---Now beginning unit test on salvager card--- 
Testing salvaging minion: 
Testing player1 buyCount: 
TEST SUCCESSFUL
Testing player1 goldcount: 
TEST SUCCESSFUL
Testing player1 handCount: 
TEST SUCCESSFUL
Testing player 2's handCount: 
TEST SUCCESSFUL
Testing curse cards supply count: 
TEST SUCCESSFUL
Testing province cards supply count:: 
TEST SUCCESSFUL
Testing estate cards supply count: 
TEST SUCCESSFUL
Testing duchy cards supply count: 
TEST SUCCESSFUL
End salvager unit test
---Now beginning unit test on whoseTurn()--- 
Testing that turn has iterated to next player: 
TEST SUCCESSFUL
Testing that turn has iterated to next player: 
TEST SUCCESSFUL
Testing that turn has iterated to next player: 
TEST SUCCESSFUL
Testing that turn has iterated to next player: 
TEST SUCCESSFUL
Testing that turn has iterated to next player: 
TEST SUCCESSFUL
End whoseTurn() unit test 
Now beginning unit test on shuffle()---
Testing when deck count is 0 : 
TEST SUCCESSFUL
Testing when deck count is > 0 : 
TEST SUCCESSFUL
End shuffle() unit test
---Now beginning unit test on updateCoins()--- 
Beginning properly updating mixture of copper, silver, and gold test: 
Testing that coins have been properly updated: 
TEST SUCCESSFUL
Beginning properly updating treasure cards with bonus test: 
Testing that coins have been properly updated: 
TEST SUCCESSFUL
Beginning properly updating with no treasure or bonus test: 
Testing that coins have been properly updated: 
TEST SUCCESSFUL
End updateCoins() unit test
---Now beginning unit test on discardCard()--- 
Testing discarding last card in hand: 
Testing that hand is now empty: 
TEST SUCCESSFUL
Testing discarding middle card in hand: 
Testing that handCount is properly updated: 
TEST SUCCESSFUL
Testing discarding first card in hand: 
Testing that handCount is properly updated: 
TEST SUCCESSFUL
End discardCard() unit test
File 'dominion.c'
Lines executed:47.86% of 560
Branches executed:50.60% of 417
Taken at least once:32.61% of 417
Calls executed:47.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 26 returned 100% blocks executed 100%
       26:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       26:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       26:  209:  if (state->deckCount[player] < 1)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        8:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      198:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      162:  216:    newDeck[newDeckPos] = state->deck[player][card];
      162:  217:    newDeckPos++;
      498:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      336:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      162:  221:    state->deckCount[player]--;
        -:  222:  }
      180:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  224:    state->deck[player][i] = newDeck[i];
      162:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 73%
        4:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        4:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        4:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        4:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        4:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 9 returned 100% blocks executed 100%
        9:  311:int numHandCards(struct gameState *state) {
        9:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 5 returned 100% blocks executed 100%
        5:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 31 returned 100% blocks executed 100%
       31:  346:int whoseTurn(struct gameState *state) {
       31:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 4 returned 100% blocks executed 93%
        4:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        4:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
       17:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
       13:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       13:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        4:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        4:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        4:  370:  state->outpostPlayed = 0;
        4:  371:  state->phase = 0;
        4:  372:  state->numActions = 1;
        4:  373:  state->coins = 0;
        4:  374:  state->numBuys = 1;
        4:  375:  state->playedCardCount = 0;
        4:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        4:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        4:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 97 returned 100% blocks executed 100%
       97:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       97:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        9:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 11%
branch  1 taken 89% (fallthrough)
        1:  534:      state->deck[player][i] = state->discard[player][i];
        1:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
        7:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       89:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       89:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       89:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       89:  576:    state->deckCount[player]--;
       89:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       90:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 2 returned 100% blocks executed 13%
        2:  583:int getCost(int cardNumber)
        -:  584:{
        2:  585:  switch( cardNumber ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 50%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 6 returned 100% blocks executed 26%
        6:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        6:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        6:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        6:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        6:  660:  int z = 0;// this is the counter for the temp hand
        6:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        6:  667:  switch( card ) 
branch  0 taken 17%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 50%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 17%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:   
        1:  671:      callAdventurer(drawntreasure,state,currentPlayer,temphand,z, cardDrawn);
call    0 returned 100%
        -:  672:			
        -:  673:    case council_room:
        -:  674:    
        1:  675:      callCouncilRoom(currentPlayer,state,handPos);
call    0 returned 100%
        -:  676:			
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
        7:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  681:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  682:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
        1:  687:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  688:      x = 1;//Condition to loop on
        3:  689:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  690:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  691:	  if (DEBUG)
        -:  692:	    printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:	  }
        -:  697:	}
        1:  698:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  699:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:	  }
        -:  704:	}
        -:  705:	else{
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        1:  711:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  712:	  x = 0;//No more buying cards
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
        -:  718:	}
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
        7:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  723:	state->hand[currentPlayer][i] = temphand[i];
        6:  724:	temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:      			
        1:  728:      return 0;
        -:  729:			
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:			
        -:  733:    case mine:
    #####:  734:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
    #####:  736:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:		
    #####:  741:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  747:	{
    #####:  748:	  return -1;
        -:  749:	}
        -:  750:
    #####:  751:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  752:
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  755:
        -:  756:      //discard trashed card
    #####:  757:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  758:	{
    #####:  759:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  760:	    {
    #####:  761:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  762:	      break;
        -:  763:	    }
        -:  764:	}
        -:  765:			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case remodel:
    #####:  769:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  783:	{
    #####:  784:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  785:	    {
    #####:  786:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  787:	      break;
        -:  788:	    }
        -:  789:	}
        -:  790:
        -:  791:
    #####:  792:      return 0;
        -:  793:		
        -:  794:    case smithy:
        -:  795:    
        1:  796:      callSmithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  797:		
        -:  798:    case village:
        -:  799:      //+1 Card
        1:  800:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  801:			
        -:  802:      //+2 Actions
        1:  803:      state->numActions = state->numActions + 2;
        -:  804:			
        -:  805:      //discard played card from hand
        1:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  807:      return 0;
        -:  808:      
        -:  809:		
        -:  810:    case baron:
    #####:  811:      state->numBuys++;//Increase buys by 1!
    #####:  812:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  813:	int p = 0;//Iterator for hand!
    #####:  814:	int card_not_discarded = 1;//Flag for discard set!
    #####:  815:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  816:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  817:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  818:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  819:	    state->discardCount[currentPlayer]++;
    #####:  820:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  821:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  822:	    }
    #####:  823:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  824:	    state->handCount[currentPlayer]--;
    #####:  825:	    card_not_discarded = 0;//Exit the loop
        -:  826:	  }
    #####:  827:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  828:	    if(DEBUG) {
        -:  829:	      printf("No estate cards in your hand, invalid choice\n");
        -:  830:	      printf("Must gain an estate if there are any\n");
        -:  831:	    }
    #####:  832:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  834:	      state->supplyCount[estate]--;//Decrement estates
    #####:  835:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:		isGameOver(state);
call    0 never executed
        -:  837:	      }
        -:  838:	    }
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
        -:  841:			    
        -:  842:	  else{
    #####:  843:	    p++;//Next card
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:			    
        -:  848:      else{
    #####:  849:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  851:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  852:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  853:	    isGameOver(state);
call    0 never executed
        -:  854:	  }
        -:  855:	}
        -:  856:      }
        -:  857:	    
        -:  858:      
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case great_hall:
        -:  862:      //+1 Card
    #####:  863:      drawCard(currentPlayer, state);
call    0 never executed
        -:  864:			
        -:  865:      //+1 Actions
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case minion:
        -:  873:      //+1 action
    #####:  874:      state->numActions++;
        -:  875:			
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  state->coins = state->coins + 2;
        -:  882:	}
        -:  883:			
    #####:  884:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  885:	{
        -:  886:	  //discard hand
    #####:  887:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  888:	    {
    #####:  889:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  890:	    }
        -:  891:				
        -:  892:	  //draw 4
    #####:  893:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  896:	    }
        -:  897:				
        -:  898:	  //other players discard hand and redraw if hand size > 4
    #####:  899:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  900:	    {
    #####:  901:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  902:		{
    #####:  903:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  904:		    {
        -:  905:		      //discard hand
    #####:  906:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  909:			}
        -:  910:							
        -:  911:		      //draw 4
    #####:  912:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  913:			{
    #####:  914:			  drawCard(i, state);
call    0 never executed
        -:  915:			}
        -:  916:		    }
        -:  917:		}
        -:  918:	    }
        -:  919:				
        -:  920:	}
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case steward:
        3:  924:      callSteward(choice1, choice2,choice3,currentPlayer,state,handPos);
call    0 returned 100%
        -:  925:		
        -:  926:    case tribute:
        3:  927:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  928:	if (state->deckCount[nextPlayer] > 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  929:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1:  930:	  state->deckCount[nextPlayer]--;
        -:  931:	}
        1:  932:	else if (state->discardCount[nextPlayer] > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  933:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  934:	  state->discardCount[nextPlayer]--;
        -:  935:	}
        -:  936:	else{
        -:  937:	  //No Card to Reveal
        -:  938:	  if (DEBUG){
        -:  939:	    printf("No cards to reveal\n");
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      else{
        1:  945:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  946:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  947:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  948:	    state->deckCount[nextPlayer]++;
    #####:  949:	    state->discard[nextPlayer][i] = -1;
    #####:  950:	    state->discardCount[nextPlayer]--;
        -:  951:	  }
        -:  952:			    
    #####:  953:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  954:	} 
        1:  955:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1:  956:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1:  957:	state->deckCount[nextPlayer]--;
        1:  958:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1:  959:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1:  960:	state->deckCount[nextPlayer]--;
        -:  961:      }    
        -:  962:		       
        3:  963:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  964:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        2:  965:	state->playedCardCount++;
        2:  966:	tributeRevealedCards[1] = -1;
        -:  967:      }
        -:  968:
       12:  969:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  970:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1:  971:	  state->coins += 2;
        -:  972:	}
        -:  973:		    
        8:  974:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        1:  975:	  drawCard(currentPlayer, state);
call    0 returned 100%
        1:  976:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  977:	}
        -:  978:	else{//Action Card
        7:  979:	  state->numActions = state->numActions + 2;
        -:  980:	}
        -:  981:      }
        -:  982:	    
        3:  983:      return 0;
        -:  984:		
        -:  985:    case ambassador:
    #####:  986:      j = 0;		//used to check if player has enough cards to discard
        -:  987:
    #####:  988:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  989:	{
    #####:  990:	  return -1;				
        -:  991:	}
        -:  992:
    #####:  993:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  return -1;
        -:  996:	}
        -:  997:
    #####:  998:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1001:	    {
    #####: 1002:	      j++;
        -: 1003:	    }
        -: 1004:	}
    #####: 1005:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1006:	{
    #####: 1007:	  return -1;				
        -: 1008:	}
        -: 1009:
        -: 1010:      if (DEBUG) 
        -: 1011:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1012:
        -: 1013:      //increase supply count for choosen card by amount being discarded
    #####: 1014:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1015:			
        -: 1016:      //each other player gains a copy of revealed card
    #####: 1017:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:	    {
    #####: 1021:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1022:	    }
        -: 1023:	}
        -: 1024:
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1027:
        -: 1028:      //trash copies of cards returned to supply
    #####: 1029:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
    #####: 1031:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	    {
    #####: 1033:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1034:		{
    #####: 1035:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1036:		  break;
        -: 1037:		}
        -: 1038:	    }
        -: 1039:	}			
        -: 1040:
    #####: 1041:      return 0;
        -: 1042:		
        -: 1043:    case cutpurse:
        -: 1044:
    #####: 1045:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1046:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1049:	    {
    #####: 1050:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1051:		{
    #####: 1052:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1053:		    {
    #####: 1054:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1055:		      break;
        -: 1056:		    }
    #####: 1057:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1058:		    {
    #####: 1059:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1060:			{
        -: 1061:			  if (DEBUG)
        -: 1062:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1063:			}	
    #####: 1064:		      break;
        -: 1065:		    }		
        -: 1066:		}
        -: 1067:					
        -: 1068:	    }
        -: 1069:				
        -: 1070:	}				
        -: 1071:
        -: 1072:      //discard played card from hand
    #####: 1073:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1074:
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:		
        -: 1078:    case embargo: 
        -: 1079:
    #####: 1080:      callEmbargo(state,currentPlayer,handPos,choice1);
call    0 never executed
        -: 1081:		
        -: 1082:    case outpost:
        -: 1083:      //set outpost flag
    #####: 1084:      state->outpostPlayed++;
        -: 1085:			
        -: 1086:      //discard card
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case salvager:
        -: 1091:      //+1 buy
        1: 1092:      state->numBuys++;
        -: 1093:			
        1: 1094:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1095:	{
        -: 1096:	  //gain coins equal to trashed card
        1: 1097:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1098:	  //trash card
        1: 1099:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1100:	}
        -: 1101:			
        -: 1102:      //discard card
        1: 1103:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1104:      return 0;
        -: 1105:		
        -: 1106:    case sea_hag:
    #####: 1107:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1108:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1109:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1110:	  state->discardCount[i]++;
    #####: 1111:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1112:	}
        -: 1113:      }
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case treasure_map:
        -: 1117:      //search hand for another treasure_map
    #####: 1118:      index = -1;
    #####: 1119:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1122:	    {
    #####: 1123:	      index = i;
    #####: 1124:	      break;
        -: 1125:	    }
        -: 1126:	}
    #####: 1127:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
        -: 1129:	  //trash both treasure cards
    #####: 1130:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1131:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1132:
        -: 1133:	  //gain 4 Gold cards
    #####: 1134:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1137:	    }
        -: 1138:				
        -: 1139:	  //return success
    #####: 1140:	  return 1;
        -: 1141:	}
        -: 1142:			
        -: 1143:      //no second treasure_map found in hand
    #####: 1144:      return -1;
        -: 1145:    }
        -: 1146:	
    #####: 1147:  return -1;
        -: 1148:}
        -: 1149:
        -: 1150:// Refactored methods from the card effects switch statement
        -: 1151:
function callAdventurer called 1 returned 100% blocks executed 87%
        1: 1152:int callAdventurer(int drawntreasure, struct gameState *state, int currentPlayer,int temphand[], int z, int cardDrawn)
        -: 1153:{
        5: 1154:  while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1155:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1156:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1157:    }
        3: 1158:    drawCard(currentPlayer, state);
call    0 returned 100%
        3: 1159:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3: 1160:    if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        2: 1161:      drawntreasure++;
        -: 1162:    else{
        1: 1163:      temphand[z]=cardDrawn;
        1: 1164:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1165:      z++;
        -: 1166:    }
        -: 1167:  }
        3: 1168:  while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1: 1169:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1170:    z=z-1;
        -: 1171:  }
        -: 1172:
        1: 1173:  return 0;
        -: 1174:}
        -: 1175:
        -: 1176:
function callCouncilRoom called 1 returned 100% blocks executed 100%
        1: 1177:int callCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1178:{
        1: 1179:  int j = 0;
        5: 1180:    for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1181:    {
        4: 1182:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1183:    }
        -: 1184:      
        -: 1185:    //+1 Buy
        1: 1186:    state->numBuys++;
        -: 1187:    
        -: 1188:    //Each other player draws a card
        3: 1189:    for (j = 0; j < state->numPlayers; j++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1190:    {
        2: 1191:      if ( j != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1192:      {
        1: 1193:        drawCard(j, state);
call    0 returned 100%
        -: 1194:      }
        -: 1195:    }
        -: 1196:      
        -: 1197:    //put played card in played card pile
        1: 1198:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1199:
        1: 1200:    return 0;
        -: 1201:}
        -: 1202:
function callEmbargo called 0 returned 0% blocks executed 0%
    #####: 1203:int callEmbargo(struct gameState *state, int currentPlayer,int handPos, int choice1)
        -: 1204:{
    #####: 1205:  state->coins = state->coins + 20;
        -: 1206:    
        -: 1207:  //see if selected pile is in play
    #####: 1208:  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1209:  {
    #####: 1210:     return -1;
        -: 1211: }
        -: 1212:  
        -: 1213:  //add embargo token to selected supply pile
    #####: 1214:  state->embargoTokens[choice1]++;
        -: 1215:  
        -: 1216:  //trash card
    #####: 1217:  discardCard(handPos, currentPlayer, state, 1);    
call    0 never executed
        -: 1218:   
    #####: 1219:  return 0;
        -: 1220:}
        -: 1221:
function callSmithy called 1 returned 100% blocks executed 100%
        1: 1222:int callSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1223:{
        1: 1224:  int j = 0;
        -: 1225:
        5: 1226:  for (j = 0; j < 4; j++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1227:  {
        4: 1228:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1229:  }
        -: 1230:      
        -: 1231:      //discard card from hand
        1: 1232:      discardCard(currentPlayer, handPos, state, 0);
call    0 returned 100%
        1: 1233:      return 0;
        -: 1234: 
        -: 1235:}
        -: 1236:
function callSteward called 3 returned 100% blocks executed 100%
        3: 1237:int callSteward(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos)
        -: 1238:{
        3: 1239:  if (choice1 == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1240:  {
        -: 1241:    //+2 cards
        1: 1242:    drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1243:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1244:  }
        2: 1245:  else if (choice1 != 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1246:  {
        -: 1247:    //+2 coins
        1: 1248:    state->coins = state->coins + 2;
        -: 1249:  }
        -: 1250:  else
        -: 1251:  {
        -: 1252:    //trash 2 cards in hand
        1: 1253:    discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        1: 1254:    discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1255:  }
        -: 1256:      
        -: 1257:  //discard card from hand
        3: 1258:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1259:
        3: 1260:  return 0;
        -: 1261:}
        -: 1262:
        -: 1263://End refactored methods from the card effects switch statement
        -: 1264:
function discardCard called 13 returned 100% blocks executed 89%
       13: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
       13: 1269:  if (trashFlag < 1)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1270:    {
        -: 1271:      //add card to played pile
       10: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
       13: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
       13: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
        4: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        9: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        9: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        9: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        9: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
       13: 1300:  return 0;
        -: 1301:}
        -: 1302:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        1: 1318:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        1: 1323:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        1: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        1: 1337:  return 0;
        -: 1338:}
        -: 1339:
function updateCoins called 20 returned 100% blocks executed 100%
       20: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       20: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       97: 1348:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1349:    {
       77: 1350:      if (state->hand[player][i] == copper)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -: 1351:	{
       45: 1352:	  state->coins += 1;
        -: 1353:	}
       32: 1354:      else if (state->hand[player][i] == silver)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1355:	{
        2: 1356:	  state->coins += 2;
        -: 1357:	}
       30: 1358:      else if (state->hand[player][i] == gold)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1359:	{
        2: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       20: 1365:  state->coins += bonus;
        -: 1366:
       20: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
